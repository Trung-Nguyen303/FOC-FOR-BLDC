
spi_encoder_bldc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d340  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000578  0800d510  0800d510  0000e510  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da88  0800da88  0000f218  2**0
                  CONTENTS
  4 .ARM          00000008  0800da88  0800da88  0000ea88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800da90  0800da90  0000f218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800da90  0800da90  0000ea90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800da94  0800da94  0000ea94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000218  20000000  0800da98  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f4  20000218  0800dcb0  0000f218  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000080c  0800dcb0  0000f80c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f218  2**0
                  CONTENTS, READONLY
 12 .debug_info   000137d9  00000000  00000000  0000f248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b37  00000000  00000000  00022a21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001238  00000000  00000000  00025558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e47  00000000  00000000  00026790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024b94  00000000  00000000  000275d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015be9  00000000  00000000  0004c16b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e22f0  00000000  00000000  00061d54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00144044  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061d4  00000000  00000000  00144088  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0014a25c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000218 	.word	0x20000218
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d4f8 	.word	0x0800d4f8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000021c 	.word	0x2000021c
 800020c:	0800d4f8 	.word	0x0800d4f8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b96a 	b.w	8000fb4 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	460c      	mov	r4, r1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d14e      	bne.n	8000da2 <__udivmoddi4+0xaa>
 8000d04:	4694      	mov	ip, r2
 8000d06:	458c      	cmp	ip, r1
 8000d08:	4686      	mov	lr, r0
 8000d0a:	fab2 f282 	clz	r2, r2
 8000d0e:	d962      	bls.n	8000dd6 <__udivmoddi4+0xde>
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0320 	rsb	r3, r2, #32
 8000d16:	4091      	lsls	r1, r2
 8000d18:	fa20 f303 	lsr.w	r3, r0, r3
 8000d1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d20:	4319      	orrs	r1, r3
 8000d22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2a:	fa1f f68c 	uxth.w	r6, ip
 8000d2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d36:	fb07 1114 	mls	r1, r7, r4, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb04 f106 	mul.w	r1, r4, r6
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d4e:	f080 8112 	bcs.w	8000f76 <__udivmoddi4+0x27e>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 810f 	bls.w	8000f76 <__udivmoddi4+0x27e>
 8000d58:	3c02      	subs	r4, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a59      	subs	r1, r3, r1
 8000d5e:	fa1f f38e 	uxth.w	r3, lr
 8000d62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d66:	fb07 1110 	mls	r1, r7, r0, r1
 8000d6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6e:	fb00 f606 	mul.w	r6, r0, r6
 8000d72:	429e      	cmp	r6, r3
 8000d74:	d90a      	bls.n	8000d8c <__udivmoddi4+0x94>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d7e:	f080 80fc 	bcs.w	8000f7a <__udivmoddi4+0x282>
 8000d82:	429e      	cmp	r6, r3
 8000d84:	f240 80f9 	bls.w	8000f7a <__udivmoddi4+0x282>
 8000d88:	4463      	add	r3, ip
 8000d8a:	3802      	subs	r0, #2
 8000d8c:	1b9b      	subs	r3, r3, r6
 8000d8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d92:	2100      	movs	r1, #0
 8000d94:	b11d      	cbz	r5, 8000d9e <__udivmoddi4+0xa6>
 8000d96:	40d3      	lsrs	r3, r2
 8000d98:	2200      	movs	r2, #0
 8000d9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d905      	bls.n	8000db2 <__udivmoddi4+0xba>
 8000da6:	b10d      	cbz	r5, 8000dac <__udivmoddi4+0xb4>
 8000da8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dac:	2100      	movs	r1, #0
 8000dae:	4608      	mov	r0, r1
 8000db0:	e7f5      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000db2:	fab3 f183 	clz	r1, r3
 8000db6:	2900      	cmp	r1, #0
 8000db8:	d146      	bne.n	8000e48 <__udivmoddi4+0x150>
 8000dba:	42a3      	cmp	r3, r4
 8000dbc:	d302      	bcc.n	8000dc4 <__udivmoddi4+0xcc>
 8000dbe:	4290      	cmp	r0, r2
 8000dc0:	f0c0 80f0 	bcc.w	8000fa4 <__udivmoddi4+0x2ac>
 8000dc4:	1a86      	subs	r6, r0, r2
 8000dc6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dca:	2001      	movs	r0, #1
 8000dcc:	2d00      	cmp	r5, #0
 8000dce:	d0e6      	beq.n	8000d9e <__udivmoddi4+0xa6>
 8000dd0:	e9c5 6300 	strd	r6, r3, [r5]
 8000dd4:	e7e3      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000dd6:	2a00      	cmp	r2, #0
 8000dd8:	f040 8090 	bne.w	8000efc <__udivmoddi4+0x204>
 8000ddc:	eba1 040c 	sub.w	r4, r1, ip
 8000de0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000de4:	fa1f f78c 	uxth.w	r7, ip
 8000de8:	2101      	movs	r1, #1
 8000dea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000df2:	fb08 4416 	mls	r4, r8, r6, r4
 8000df6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dfa:	fb07 f006 	mul.w	r0, r7, r6
 8000dfe:	4298      	cmp	r0, r3
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x11c>
 8000e02:	eb1c 0303 	adds.w	r3, ip, r3
 8000e06:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x11a>
 8000e0c:	4298      	cmp	r0, r3
 8000e0e:	f200 80cd 	bhi.w	8000fac <__udivmoddi4+0x2b4>
 8000e12:	4626      	mov	r6, r4
 8000e14:	1a1c      	subs	r4, r3, r0
 8000e16:	fa1f f38e 	uxth.w	r3, lr
 8000e1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb00 f707 	mul.w	r7, r0, r7
 8000e2a:	429f      	cmp	r7, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x148>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x146>
 8000e38:	429f      	cmp	r7, r3
 8000e3a:	f200 80b0 	bhi.w	8000f9e <__udivmoddi4+0x2a6>
 8000e3e:	4620      	mov	r0, r4
 8000e40:	1bdb      	subs	r3, r3, r7
 8000e42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e46:	e7a5      	b.n	8000d94 <__udivmoddi4+0x9c>
 8000e48:	f1c1 0620 	rsb	r6, r1, #32
 8000e4c:	408b      	lsls	r3, r1
 8000e4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e52:	431f      	orrs	r7, r3
 8000e54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e58:	fa04 f301 	lsl.w	r3, r4, r1
 8000e5c:	ea43 030c 	orr.w	r3, r3, ip
 8000e60:	40f4      	lsrs	r4, r6
 8000e62:	fa00 f801 	lsl.w	r8, r0, r1
 8000e66:	0c38      	lsrs	r0, r7, #16
 8000e68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e70:	fa1f fc87 	uxth.w	ip, r7
 8000e74:	fb00 441e 	mls	r4, r0, lr, r4
 8000e78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e80:	45a1      	cmp	r9, r4
 8000e82:	fa02 f201 	lsl.w	r2, r2, r1
 8000e86:	d90a      	bls.n	8000e9e <__udivmoddi4+0x1a6>
 8000e88:	193c      	adds	r4, r7, r4
 8000e8a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e8e:	f080 8084 	bcs.w	8000f9a <__udivmoddi4+0x2a2>
 8000e92:	45a1      	cmp	r9, r4
 8000e94:	f240 8081 	bls.w	8000f9a <__udivmoddi4+0x2a2>
 8000e98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e9c:	443c      	add	r4, r7
 8000e9e:	eba4 0409 	sub.w	r4, r4, r9
 8000ea2:	fa1f f983 	uxth.w	r9, r3
 8000ea6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eaa:	fb00 4413 	mls	r4, r0, r3, r4
 8000eae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eb6:	45a4      	cmp	ip, r4
 8000eb8:	d907      	bls.n	8000eca <__udivmoddi4+0x1d2>
 8000eba:	193c      	adds	r4, r7, r4
 8000ebc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ec0:	d267      	bcs.n	8000f92 <__udivmoddi4+0x29a>
 8000ec2:	45a4      	cmp	ip, r4
 8000ec4:	d965      	bls.n	8000f92 <__udivmoddi4+0x29a>
 8000ec6:	3b02      	subs	r3, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ece:	fba0 9302 	umull	r9, r3, r0, r2
 8000ed2:	eba4 040c 	sub.w	r4, r4, ip
 8000ed6:	429c      	cmp	r4, r3
 8000ed8:	46ce      	mov	lr, r9
 8000eda:	469c      	mov	ip, r3
 8000edc:	d351      	bcc.n	8000f82 <__udivmoddi4+0x28a>
 8000ede:	d04e      	beq.n	8000f7e <__udivmoddi4+0x286>
 8000ee0:	b155      	cbz	r5, 8000ef8 <__udivmoddi4+0x200>
 8000ee2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ee6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eea:	fa04 f606 	lsl.w	r6, r4, r6
 8000eee:	40cb      	lsrs	r3, r1
 8000ef0:	431e      	orrs	r6, r3
 8000ef2:	40cc      	lsrs	r4, r1
 8000ef4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ef8:	2100      	movs	r1, #0
 8000efa:	e750      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000efc:	f1c2 0320 	rsb	r3, r2, #32
 8000f00:	fa20 f103 	lsr.w	r1, r0, r3
 8000f04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f08:	fa24 f303 	lsr.w	r3, r4, r3
 8000f0c:	4094      	lsls	r4, r2
 8000f0e:	430c      	orrs	r4, r1
 8000f10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f18:	fa1f f78c 	uxth.w	r7, ip
 8000f1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f20:	fb08 3110 	mls	r1, r8, r0, r3
 8000f24:	0c23      	lsrs	r3, r4, #16
 8000f26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f2a:	fb00 f107 	mul.w	r1, r0, r7
 8000f2e:	4299      	cmp	r1, r3
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x24c>
 8000f32:	eb1c 0303 	adds.w	r3, ip, r3
 8000f36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f3a:	d22c      	bcs.n	8000f96 <__udivmoddi4+0x29e>
 8000f3c:	4299      	cmp	r1, r3
 8000f3e:	d92a      	bls.n	8000f96 <__udivmoddi4+0x29e>
 8000f40:	3802      	subs	r0, #2
 8000f42:	4463      	add	r3, ip
 8000f44:	1a5b      	subs	r3, r3, r1
 8000f46:	b2a4      	uxth	r4, r4
 8000f48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f54:	fb01 f307 	mul.w	r3, r1, r7
 8000f58:	42a3      	cmp	r3, r4
 8000f5a:	d908      	bls.n	8000f6e <__udivmoddi4+0x276>
 8000f5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f64:	d213      	bcs.n	8000f8e <__udivmoddi4+0x296>
 8000f66:	42a3      	cmp	r3, r4
 8000f68:	d911      	bls.n	8000f8e <__udivmoddi4+0x296>
 8000f6a:	3902      	subs	r1, #2
 8000f6c:	4464      	add	r4, ip
 8000f6e:	1ae4      	subs	r4, r4, r3
 8000f70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f74:	e739      	b.n	8000dea <__udivmoddi4+0xf2>
 8000f76:	4604      	mov	r4, r0
 8000f78:	e6f0      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	e706      	b.n	8000d8c <__udivmoddi4+0x94>
 8000f7e:	45c8      	cmp	r8, r9
 8000f80:	d2ae      	bcs.n	8000ee0 <__udivmoddi4+0x1e8>
 8000f82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f8a:	3801      	subs	r0, #1
 8000f8c:	e7a8      	b.n	8000ee0 <__udivmoddi4+0x1e8>
 8000f8e:	4631      	mov	r1, r6
 8000f90:	e7ed      	b.n	8000f6e <__udivmoddi4+0x276>
 8000f92:	4603      	mov	r3, r0
 8000f94:	e799      	b.n	8000eca <__udivmoddi4+0x1d2>
 8000f96:	4630      	mov	r0, r6
 8000f98:	e7d4      	b.n	8000f44 <__udivmoddi4+0x24c>
 8000f9a:	46d6      	mov	lr, sl
 8000f9c:	e77f      	b.n	8000e9e <__udivmoddi4+0x1a6>
 8000f9e:	4463      	add	r3, ip
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	e74d      	b.n	8000e40 <__udivmoddi4+0x148>
 8000fa4:	4606      	mov	r6, r0
 8000fa6:	4623      	mov	r3, r4
 8000fa8:	4608      	mov	r0, r1
 8000faa:	e70f      	b.n	8000dcc <__udivmoddi4+0xd4>
 8000fac:	3e02      	subs	r6, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	e730      	b.n	8000e14 <__udivmoddi4+0x11c>
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <_micros>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

unsigned long _micros(){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	return HAL_GetTick()*1000;
 8000fbc:	f002 fece 	bl	8003d5c <HAL_GetTick>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000fc6:	fb02 f303 	mul.w	r3, r2, r3
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <Update_dt>:

void Update_dt()
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
	 static uint32_t t_prev = 0;
	uint32_t t_now = _micros();
 8000fd6:	f7ff ffef 	bl	8000fb8 <_micros>
 8000fda:	6078      	str	r0, [r7, #4]
	dt = (t_now - t_prev) / 1000000.0f;
 8000fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8001008 <Update_dt+0x38>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	ee07 3a90 	vmov	s15, r3
 8000fe8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fec:	eddf 6a07 	vldr	s13, [pc, #28]	@ 800100c <Update_dt+0x3c>
 8000ff0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ff4:	4b06      	ldr	r3, [pc, #24]	@ (8001010 <Update_dt+0x40>)
 8000ff6:	edc3 7a00 	vstr	s15, [r3]
//	if (dt <= 0.0f || dt > 0.5f) dt = 0.001f;
	t_prev = t_now;
 8000ffa:	4a03      	ldr	r2, [pc, #12]	@ (8001008 <Update_dt+0x38>)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6013      	str	r3, [r2, #0]
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000688 	.word	0x20000688
 800100c:	49742400 	.word	0x49742400
 8001010:	20000298 	.word	0x20000298

08001014 <update_speed_dt>:

void update_speed_dt()
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
	 static uint32_t t_speed_prev = 0;
	uint32_t t_speed_now = _micros();
 800101a:	f7ff ffcd 	bl	8000fb8 <_micros>
 800101e:	6078      	str	r0, [r7, #4]
	Speed_dt = (t_speed_now - t_speed_prev) / 1000000.0f;
 8001020:	4b0a      	ldr	r3, [pc, #40]	@ (800104c <update_speed_dt+0x38>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	ee07 3a90 	vmov	s15, r3
 800102c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001030:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8001050 <update_speed_dt+0x3c>
 8001034:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001038:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <update_speed_dt+0x40>)
 800103a:	edc3 7a00 	vstr	s15, [r3]
	t_speed_prev = t_speed_now;
 800103e:	4a03      	ldr	r2, [pc, #12]	@ (800104c <update_speed_dt+0x38>)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6013      	str	r3, [r2, #0]
}
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	2000068c 	.word	0x2000068c
 8001050:	49742400 	.word	0x49742400
 8001054:	200002d0 	.word	0x200002d0

08001058 <update_position_dt>:

void update_position_dt()
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
	 static uint32_t t_position_prev = 0;
	uint32_t t_position_now = _micros();
 800105e:	f7ff ffab 	bl	8000fb8 <_micros>
 8001062:	6078      	str	r0, [r7, #4]
	position_dt = (t_position_now - t_position_prev) / 1000000.0f;
 8001064:	4b0a      	ldr	r3, [pc, #40]	@ (8001090 <update_position_dt+0x38>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	ee07 3a90 	vmov	s15, r3
 8001070:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001074:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8001094 <update_position_dt+0x3c>
 8001078:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800107c:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <update_position_dt+0x40>)
 800107e:	edc3 7a00 	vstr	s15, [r3]
	t_position_prev = t_position_now;
 8001082:	4a03      	ldr	r2, [pc, #12]	@ (8001090 <update_position_dt+0x38>)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6013      	str	r3, [r2, #0]
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000690 	.word	0x20000690
 8001094:	49742400 	.word	0x49742400
 8001098:	200002cc 	.word	0x200002cc

0800109c <delay_us>:

void delay_us (uint16_t us)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3,0);
 80010a6:	4b09      	ldr	r3, [pc, #36]	@ (80010cc <delay_us+0x30>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2200      	movs	r2, #0
 80010ac:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim3) < us);
 80010ae:	bf00      	nop
 80010b0:	4b06      	ldr	r3, [pc, #24]	@ (80010cc <delay_us+0x30>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80010b6:	88fb      	ldrh	r3, [r7, #6]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d3f9      	bcc.n	80010b0 <delay_us+0x14>
}
 80010bc:	bf00      	nop
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	20000508 	.word	0x20000508

080010d0 <spiCalcEvenParity>:

uint8_t spiCalcEvenParity(uint16_t value) {
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	80fb      	strh	r3, [r7, #6]
    uint8_t cnt = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < 16; i++) {
 80010de:	2300      	movs	r3, #0
 80010e0:	73bb      	strb	r3, [r7, #14]
 80010e2:	e00d      	b.n	8001100 <spiCalcEvenParity+0x30>
        if (value & 0x1) cnt++;
 80010e4:	88fb      	ldrh	r3, [r7, #6]
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d002      	beq.n	80010f4 <spiCalcEvenParity+0x24>
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
 80010f0:	3301      	adds	r3, #1
 80010f2:	73fb      	strb	r3, [r7, #15]
        value >>= 1;
 80010f4:	88fb      	ldrh	r3, [r7, #6]
 80010f6:	085b      	lsrs	r3, r3, #1
 80010f8:	80fb      	strh	r3, [r7, #6]
    for (uint8_t i = 0; i < 16; i++) {
 80010fa:	7bbb      	ldrb	r3, [r7, #14]
 80010fc:	3301      	adds	r3, #1
 80010fe:	73bb      	strb	r3, [r7, #14]
 8001100:	7bbb      	ldrb	r3, [r7, #14]
 8001102:	2b0f      	cmp	r3, #15
 8001104:	d9ee      	bls.n	80010e4 <spiCalcEvenParity+0x14>
    }
    return cnt & 0x1;
 8001106:	7bfb      	ldrb	r3, [r7, #15]
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	b2db      	uxtb	r3, r3
}
 800110e:	4618      	mov	r0, r3
 8001110:	3714      	adds	r7, #20
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
	...

0800111c <AS5147U_ReadAngle>:

uint16_t AS5147U_ReadAngle() {
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af02      	add	r7, sp, #8
    uint16_t command = AS5147U_ANGLE_REG ;
 8001122:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 8001126:	80bb      	strh	r3, [r7, #4]
    command |= (1 << 14);
 8001128:	88bb      	ldrh	r3, [r7, #4]
 800112a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800112e:	b29b      	uxth	r3, r3
 8001130:	80bb      	strh	r3, [r7, #4]
    command |= ((uint16_t)spiCalcEvenParity(command) << 15);
 8001132:	88bb      	ldrh	r3, [r7, #4]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff ffcb 	bl	80010d0 <spiCalcEvenParity>
 800113a:	4603      	mov	r3, r0
 800113c:	03db      	lsls	r3, r3, #15
 800113e:	b21a      	sxth	r2, r3
 8001140:	88bb      	ldrh	r3, [r7, #4]
 8001142:	b21b      	sxth	r3, r3
 8001144:	4313      	orrs	r3, r2
 8001146:	b21b      	sxth	r3, r3
 8001148:	b29b      	uxth	r3, r3
 800114a:	80bb      	strh	r3, [r7, #4]
    uint16_t receivedData;

    uint16_t nop = 0x0000;
 800114c:	2300      	movs	r3, #0
 800114e:	803b      	strh	r3, [r7, #0]

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001150:	2200      	movs	r2, #0
 8001152:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001156:	481a      	ldr	r0, [pc, #104]	@ (80011c0 <AS5147U_ReadAngle+0xa4>)
 8001158:	f004 fcae 	bl	8005ab8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)&command, 1, HAL_MAX_DELAY);
 800115c:	1d39      	adds	r1, r7, #4
 800115e:	f04f 33ff 	mov.w	r3, #4294967295
 8001162:	2201      	movs	r2, #1
 8001164:	4817      	ldr	r0, [pc, #92]	@ (80011c4 <AS5147U_ReadAngle+0xa8>)
 8001166:	f005 fb82 	bl	800686e <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800116a:	2201      	movs	r2, #1
 800116c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001170:	4813      	ldr	r0, [pc, #76]	@ (80011c0 <AS5147U_ReadAngle+0xa4>)
 8001172:	f004 fca1 	bl	8005ab8 <HAL_GPIO_WritePin>
    delay_us(10);
 8001176:	200a      	movs	r0, #10
 8001178:	f7ff ff90 	bl	800109c <delay_us>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800117c:	2200      	movs	r2, #0
 800117e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001182:	480f      	ldr	r0, [pc, #60]	@ (80011c0 <AS5147U_ReadAngle+0xa4>)
 8001184:	f004 fc98 	bl	8005ab8 <HAL_GPIO_WritePin>

    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)&nop ,(uint8_t*)&receivedData, 1, HAL_MAX_DELAY);
 8001188:	1cba      	adds	r2, r7, #2
 800118a:	4639      	mov	r1, r7
 800118c:	f04f 33ff 	mov.w	r3, #4294967295
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	2301      	movs	r3, #1
 8001194:	480b      	ldr	r0, [pc, #44]	@ (80011c4 <AS5147U_ReadAngle+0xa8>)
 8001196:	f005 fcae 	bl	8006af6 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800119a:	2201      	movs	r2, #1
 800119c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011a0:	4807      	ldr	r0, [pc, #28]	@ (80011c0 <AS5147U_ReadAngle+0xa4>)
 80011a2:	f004 fc89 	bl	8005ab8 <HAL_GPIO_WritePin>

    receivedData = receivedData >> (1 + 13 - AS5147U_BIT_RESOLUTION);
 80011a6:	887b      	ldrh	r3, [r7, #2]
 80011a8:	807b      	strh	r3, [r7, #2]
    const uint16_t data_mask = 0xFFFF >> (16 - AS5147U_BIT_RESOLUTION);
 80011aa:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 80011ae:	80fb      	strh	r3, [r7, #6]
    return receivedData & data_mask;
 80011b0:	887a      	ldrh	r2, [r7, #2]
 80011b2:	88fb      	ldrh	r3, [r7, #6]
 80011b4:	4013      	ands	r3, r2
 80011b6:	b29b      	uxth	r3, r3

}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40020400 	.word	0x40020400
 80011c4:	20000420 	.word	0x20000420

080011c8 <AS5147U_GetAngleRad>:
    while (angle_elec_rad >= 2 * M_PI) angle_elec_rad -= 2 * M_PI;
    while (angle_elec_rad < 0) angle_elec_rad += 2 * M_PI;
    return angle_elec_rad;
}

float AS5147U_GetAngleRad() {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
    rawCount = AS5147U_ReadAngle();
 80011ce:	f7ff ffa5 	bl	800111c <AS5147U_ReadAngle>
 80011d2:	4603      	mov	r3, r0
 80011d4:	461a      	mov	r2, r3
 80011d6:	4b32      	ldr	r3, [pc, #200]	@ (80012a0 <AS5147U_GetAngleRad+0xd8>)
 80011d8:	801a      	strh	r2, [r3, #0]
    float mechanical = rawCount / 16384.0 * 2.0 * PI;
 80011da:	4b31      	ldr	r3, [pc, #196]	@ (80012a0 <AS5147U_GetAngleRad+0xd8>)
 80011dc:	881b      	ldrh	r3, [r3, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff f9c0 	bl	8000564 <__aeabi_i2d>
 80011e4:	f04f 0200 	mov.w	r2, #0
 80011e8:	4b2e      	ldr	r3, [pc, #184]	@ (80012a4 <AS5147U_GetAngleRad+0xdc>)
 80011ea:	f7ff fb4f 	bl	800088c <__aeabi_ddiv>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	4610      	mov	r0, r2
 80011f4:	4619      	mov	r1, r3
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	f7ff f867 	bl	80002cc <__adddf3>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	4610      	mov	r0, r2
 8001204:	4619      	mov	r1, r3
 8001206:	a320      	add	r3, pc, #128	@ (adr r3, 8001288 <AS5147U_GetAngleRad+0xc0>)
 8001208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120c:	f7ff fa14 	bl	8000638 <__aeabi_dmul>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	4610      	mov	r0, r2
 8001216:	4619      	mov	r1, r3
 8001218:	f7ff fd06 	bl	8000c28 <__aeabi_d2f>
 800121c:	4603      	mov	r3, r0
 800121e:	607b      	str	r3, [r7, #4]
    //mechanical -= (M_PI+0.18714565);
    mechanical -= 5.3897189304;
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff f9b1 	bl	8000588 <__aeabi_f2d>
 8001226:	a31a      	add	r3, pc, #104	@ (adr r3, 8001290 <AS5147U_GetAngleRad+0xc8>)
 8001228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122c:	f7ff f84c 	bl	80002c8 <__aeabi_dsub>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	4610      	mov	r0, r2
 8001236:	4619      	mov	r1, r3
 8001238:	f7ff fcf6 	bl	8000c28 <__aeabi_d2f>
 800123c:	4603      	mov	r3, r0
 800123e:	607b      	str	r3, [r7, #4]
   // mechanical -= 1.23627206;
    if (mechanical >= 2.0f * PI) mechanical -= 2.0f * PI;
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff f9a1 	bl	8000588 <__aeabi_f2d>
 8001246:	a314      	add	r3, pc, #80	@ (adr r3, 8001298 <AS5147U_GetAngleRad+0xd0>)
 8001248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124c:	f7ff fc7a 	bl	8000b44 <__aeabi_dcmpge>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d00f      	beq.n	8001276 <AS5147U_GetAngleRad+0xae>
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff f996 	bl	8000588 <__aeabi_f2d>
 800125c:	a30e      	add	r3, pc, #56	@ (adr r3, 8001298 <AS5147U_GetAngleRad+0xd0>)
 800125e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001262:	f7ff f831 	bl	80002c8 <__aeabi_dsub>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4610      	mov	r0, r2
 800126c:	4619      	mov	r1, r3
 800126e:	f7ff fcdb 	bl	8000c28 <__aeabi_d2f>
 8001272:	4603      	mov	r3, r0
 8001274:	607b      	str	r3, [r7, #4]
    return mechanical;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	ee07 3a90 	vmov	s15, r3
//    return (rawCount / 16384.0 * 2.0 * PI) ;
}
 800127c:	eeb0 0a67 	vmov.f32	s0, s15
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	54442eea 	.word	0x54442eea
 800128c:	400921fb 	.word	0x400921fb
 8001290:	7ab2cce7 	.word	0x7ab2cce7
 8001294:	40158f12 	.word	0x40158f12
 8001298:	54442eea 	.word	0x54442eea
 800129c:	401921fb 	.word	0x401921fb
 80012a0:	200002ea 	.word	0x200002ea
 80012a4:	40d00000 	.word	0x40d00000

080012a8 <electricalAngle>:

float electricalAngle() {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
	float mechanical_angle_rad = AS5147U_GetAngleRad();
 80012ae:	f7ff ff8b 	bl	80011c8 <AS5147U_GetAngleRad>
 80012b2:	ed87 0a01 	vstr	s0, [r7, #4]
     elec_angle = ((mechanical_angle_rad  - angle_offset )) * pole_pairs;//+ PI/2
 80012b6:	4b2e      	ldr	r3, [pc, #184]	@ (8001370 <electricalAngle+0xc8>)
 80012b8:	edd3 7a00 	vldr	s15, [r3]
 80012bc:	ed97 7a01 	vldr	s14, [r7, #4]
 80012c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001374 <electricalAngle+0xcc>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	ee07 3a90 	vmov	s15, r3
 80012cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012d4:	4b28      	ldr	r3, [pc, #160]	@ (8001378 <electricalAngle+0xd0>)
 80012d6:	edc3 7a00 	vstr	s15, [r3]
    // elec_angle -= M_PI;
    while (elec_angle >= 2 * M_PI) elec_angle -= 2 * M_PI;
 80012da:	e012      	b.n	8001302 <electricalAngle+0x5a>
 80012dc:	4b26      	ldr	r3, [pc, #152]	@ (8001378 <electricalAngle+0xd0>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff f951 	bl	8000588 <__aeabi_f2d>
 80012e6:	a320      	add	r3, pc, #128	@ (adr r3, 8001368 <electricalAngle+0xc0>)
 80012e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ec:	f7fe ffec 	bl	80002c8 <__aeabi_dsub>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4610      	mov	r0, r2
 80012f6:	4619      	mov	r1, r3
 80012f8:	f7ff fc96 	bl	8000c28 <__aeabi_d2f>
 80012fc:	4603      	mov	r3, r0
 80012fe:	4a1e      	ldr	r2, [pc, #120]	@ (8001378 <electricalAngle+0xd0>)
 8001300:	6013      	str	r3, [r2, #0]
 8001302:	4b1d      	ldr	r3, [pc, #116]	@ (8001378 <electricalAngle+0xd0>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff f93e 	bl	8000588 <__aeabi_f2d>
 800130c:	a316      	add	r3, pc, #88	@ (adr r3, 8001368 <electricalAngle+0xc0>)
 800130e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001312:	f7ff fc17 	bl	8000b44 <__aeabi_dcmpge>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1df      	bne.n	80012dc <electricalAngle+0x34>
    while (elec_angle < 0) elec_angle += 2 * M_PI;
 800131c:	e012      	b.n	8001344 <electricalAngle+0x9c>
 800131e:	4b16      	ldr	r3, [pc, #88]	@ (8001378 <electricalAngle+0xd0>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff f930 	bl	8000588 <__aeabi_f2d>
 8001328:	a30f      	add	r3, pc, #60	@ (adr r3, 8001368 <electricalAngle+0xc0>)
 800132a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132e:	f7fe ffcd 	bl	80002cc <__adddf3>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	4610      	mov	r0, r2
 8001338:	4619      	mov	r1, r3
 800133a:	f7ff fc75 	bl	8000c28 <__aeabi_d2f>
 800133e:	4603      	mov	r3, r0
 8001340:	4a0d      	ldr	r2, [pc, #52]	@ (8001378 <electricalAngle+0xd0>)
 8001342:	6013      	str	r3, [r2, #0]
 8001344:	4b0c      	ldr	r3, [pc, #48]	@ (8001378 <electricalAngle+0xd0>)
 8001346:	edd3 7a00 	vldr	s15, [r3]
 800134a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800134e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001352:	d4e4      	bmi.n	800131e <electricalAngle+0x76>
    return elec_angle;
 8001354:	4b08      	ldr	r3, [pc, #32]	@ (8001378 <electricalAngle+0xd0>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	ee07 3a90 	vmov	s15, r3
}
 800135c:	eeb0 0a67 	vmov.f32	s0, s15
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	54442d18 	.word	0x54442d18
 800136c:	401921fb 	.word	0x401921fb
 8001370:	2000029c 	.word	0x2000029c
 8001374:	20000030 	.word	0x20000030
 8001378:	200002c0 	.word	0x200002c0
 800137c:	00000000 	.word	0x00000000

08001380 <alignRotor>:


void alignRotor() {
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
    float V_align = 1.0;
 8001386:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800138a:	607b      	str	r3, [r7, #4]

    Va = V_align;
 800138c:	4a3a      	ldr	r2, [pc, #232]	@ (8001478 <alignRotor+0xf8>)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6013      	str	r3, [r2, #0]
    PWM_A = ((Va / 8.0 + 1.0)/2 * PWM_PERIOD)*0.1;
 8001392:	4b39      	ldr	r3, [pc, #228]	@ (8001478 <alignRotor+0xf8>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff f8f6 	bl	8000588 <__aeabi_f2d>
 800139c:	f04f 0200 	mov.w	r2, #0
 80013a0:	4b36      	ldr	r3, [pc, #216]	@ (800147c <alignRotor+0xfc>)
 80013a2:	f7ff fa73 	bl	800088c <__aeabi_ddiv>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	4610      	mov	r0, r2
 80013ac:	4619      	mov	r1, r3
 80013ae:	f04f 0200 	mov.w	r2, #0
 80013b2:	4b33      	ldr	r3, [pc, #204]	@ (8001480 <alignRotor+0x100>)
 80013b4:	f7fe ff8a 	bl	80002cc <__adddf3>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4610      	mov	r0, r2
 80013be:	4619      	mov	r1, r3
 80013c0:	f04f 0200 	mov.w	r2, #0
 80013c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013c8:	f7ff fa60 	bl	800088c <__aeabi_ddiv>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	4610      	mov	r0, r2
 80013d2:	4619      	mov	r1, r3
 80013d4:	a324      	add	r3, pc, #144	@ (adr r3, 8001468 <alignRotor+0xe8>)
 80013d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013da:	f7ff f92d 	bl	8000638 <__aeabi_dmul>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	4610      	mov	r0, r2
 80013e4:	4619      	mov	r1, r3
 80013e6:	a322      	add	r3, pc, #136	@ (adr r3, 8001470 <alignRotor+0xf0>)
 80013e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ec:	f7ff f924 	bl	8000638 <__aeabi_dmul>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	4610      	mov	r0, r2
 80013f6:	4619      	mov	r1, r3
 80013f8:	f7ff fbf6 	bl	8000be8 <__aeabi_d2uiz>
 80013fc:	4603      	mov	r3, r0
 80013fe:	b29a      	uxth	r2, r3
 8001400:	4b20      	ldr	r3, [pc, #128]	@ (8001484 <alignRotor+0x104>)
 8001402:	801a      	strh	r2, [r3, #0]
    PWM_B = 0;
 8001404:	4b20      	ldr	r3, [pc, #128]	@ (8001488 <alignRotor+0x108>)
 8001406:	2200      	movs	r2, #0
 8001408:	801a      	strh	r2, [r3, #0]
    PWM_C = 0;
 800140a:	4b20      	ldr	r3, [pc, #128]	@ (800148c <alignRotor+0x10c>)
 800140c:	2200      	movs	r2, #0
 800140e:	801a      	strh	r2, [r3, #0]

    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM_A);
 8001410:	4b1c      	ldr	r3, [pc, #112]	@ (8001484 <alignRotor+0x104>)
 8001412:	881a      	ldrh	r2, [r3, #0]
 8001414:	4b1e      	ldr	r3, [pc, #120]	@ (8001490 <alignRotor+0x110>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWM_B);
 800141a:	4b1b      	ldr	r3, [pc, #108]	@ (8001488 <alignRotor+0x108>)
 800141c:	881a      	ldrh	r2, [r3, #0]
 800141e:	4b1c      	ldr	r3, [pc, #112]	@ (8001490 <alignRotor+0x110>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, PWM_C);
 8001424:	4b19      	ldr	r3, [pc, #100]	@ (800148c <alignRotor+0x10c>)
 8001426:	881a      	ldrh	r2, [r3, #0]
 8001428:	4b19      	ldr	r3, [pc, #100]	@ (8001490 <alignRotor+0x110>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	63da      	str	r2, [r3, #60]	@ 0x3c

    HAL_Delay(1000);
 800142e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001432:	f002 fc9f 	bl	8003d74 <HAL_Delay>

    angle_offset = AS5147U_GetAngleRad();
 8001436:	f7ff fec7 	bl	80011c8 <AS5147U_GetAngleRad>
 800143a:	eef0 7a40 	vmov.f32	s15, s0
 800143e:	4b15      	ldr	r3, [pc, #84]	@ (8001494 <alignRotor+0x114>)
 8001440:	edc3 7a00 	vstr	s15, [r3]

    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001444:	4b12      	ldr	r3, [pc, #72]	@ (8001490 <alignRotor+0x110>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2200      	movs	r2, #0
 800144a:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 800144c:	4b10      	ldr	r3, [pc, #64]	@ (8001490 <alignRotor+0x110>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2200      	movs	r2, #0
 8001452:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001454:	4b0e      	ldr	r3, [pc, #56]	@ (8001490 <alignRotor+0x110>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2200      	movs	r2, #0
 800145a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800145c:	bf00      	nop
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	f3af 8000 	nop.w
 8001468:	00000000 	.word	0x00000000
 800146c:	40b76e00 	.word	0x40b76e00
 8001470:	9999999a 	.word	0x9999999a
 8001474:	3fb99999 	.word	0x3fb99999
 8001478:	20000260 	.word	0x20000260
 800147c:	40200000 	.word	0x40200000
 8001480:	3ff00000 	.word	0x3ff00000
 8001484:	200002e4 	.word	0x200002e4
 8001488:	200002e6 	.word	0x200002e6
 800148c:	200002e8 	.word	0x200002e8
 8001490:	20000478 	.word	0x20000478
 8001494:	2000029c 	.word	0x2000029c

08001498 <clark>:
void clark()
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
 	i_alpha = ia;
 800149c:	4b12      	ldr	r3, [pc, #72]	@ (80014e8 <clark+0x50>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a12      	ldr	r2, [pc, #72]	@ (80014ec <clark+0x54>)
 80014a2:	6013      	str	r3, [r2, #0]
	i_beta = (ib - ic) / sqrt(3);
 80014a4:	4b12      	ldr	r3, [pc, #72]	@ (80014f0 <clark+0x58>)
 80014a6:	ed93 7a00 	vldr	s14, [r3]
 80014aa:	4b12      	ldr	r3, [pc, #72]	@ (80014f4 <clark+0x5c>)
 80014ac:	edd3 7a00 	vldr	s15, [r3]
 80014b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014b4:	ee17 0a90 	vmov	r0, s15
 80014b8:	f7ff f866 	bl	8000588 <__aeabi_f2d>
 80014bc:	a308      	add	r3, pc, #32	@ (adr r3, 80014e0 <clark+0x48>)
 80014be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c2:	f7ff f9e3 	bl	800088c <__aeabi_ddiv>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	4610      	mov	r0, r2
 80014cc:	4619      	mov	r1, r3
 80014ce:	f7ff fbab 	bl	8000c28 <__aeabi_d2f>
 80014d2:	4603      	mov	r3, r0
 80014d4:	4a08      	ldr	r2, [pc, #32]	@ (80014f8 <clark+0x60>)
 80014d6:	6013      	str	r3, [r2, #0]
}
 80014d8:	bf00      	nop
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	f3af 8000 	nop.w
 80014e0:	e8584caa 	.word	0xe8584caa
 80014e4:	3ffbb67a 	.word	0x3ffbb67a
 80014e8:	2000023c 	.word	0x2000023c
 80014ec:	20000248 	.word	0x20000248
 80014f0:	20000240 	.word	0x20000240
 80014f4:	20000244 	.word	0x20000244
 80014f8:	2000024c 	.word	0x2000024c

080014fc <park>:

void park()
{
 80014fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001500:	af00      	add	r7, sp, #0
	i_d = i_alpha*cos(theta) + i_beta*sin(theta);
 8001502:	4b59      	ldr	r3, [pc, #356]	@ (8001668 <park+0x16c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff f83e 	bl	8000588 <__aeabi_f2d>
 800150c:	4604      	mov	r4, r0
 800150e:	460d      	mov	r5, r1
 8001510:	4b56      	ldr	r3, [pc, #344]	@ (800166c <park+0x170>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff f837 	bl	8000588 <__aeabi_f2d>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	ec43 2b10 	vmov	d0, r2, r3
 8001522:	f00a fe35 	bl	800c190 <cos>
 8001526:	ec53 2b10 	vmov	r2, r3, d0
 800152a:	4620      	mov	r0, r4
 800152c:	4629      	mov	r1, r5
 800152e:	f7ff f883 	bl	8000638 <__aeabi_dmul>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4690      	mov	r8, r2
 8001538:	4699      	mov	r9, r3
 800153a:	4b4d      	ldr	r3, [pc, #308]	@ (8001670 <park+0x174>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff f822 	bl	8000588 <__aeabi_f2d>
 8001544:	4604      	mov	r4, r0
 8001546:	460d      	mov	r5, r1
 8001548:	4b48      	ldr	r3, [pc, #288]	@ (800166c <park+0x170>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff f81b 	bl	8000588 <__aeabi_f2d>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	ec43 2b10 	vmov	d0, r2, r3
 800155a:	f00a fe6d 	bl	800c238 <sin>
 800155e:	ec53 2b10 	vmov	r2, r3, d0
 8001562:	4620      	mov	r0, r4
 8001564:	4629      	mov	r1, r5
 8001566:	f7ff f867 	bl	8000638 <__aeabi_dmul>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	4640      	mov	r0, r8
 8001570:	4649      	mov	r1, r9
 8001572:	f7fe feab 	bl	80002cc <__adddf3>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	4610      	mov	r0, r2
 800157c:	4619      	mov	r1, r3
 800157e:	f7ff fb53 	bl	8000c28 <__aeabi_d2f>
 8001582:	4603      	mov	r3, r0
 8001584:	4a3b      	ldr	r2, [pc, #236]	@ (8001674 <park+0x178>)
 8001586:	6013      	str	r3, [r2, #0]
	i_q = -i_alpha*sin(theta) + i_beta*cos(theta);
 8001588:	4b37      	ldr	r3, [pc, #220]	@ (8001668 <park+0x16c>)
 800158a:	edd3 7a00 	vldr	s15, [r3]
 800158e:	eef1 7a67 	vneg.f32	s15, s15
 8001592:	ee17 3a90 	vmov	r3, s15
 8001596:	4618      	mov	r0, r3
 8001598:	f7fe fff6 	bl	8000588 <__aeabi_f2d>
 800159c:	4604      	mov	r4, r0
 800159e:	460d      	mov	r5, r1
 80015a0:	4b32      	ldr	r3, [pc, #200]	@ (800166c <park+0x170>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7fe ffef 	bl	8000588 <__aeabi_f2d>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	ec43 2b10 	vmov	d0, r2, r3
 80015b2:	f00a fe41 	bl	800c238 <sin>
 80015b6:	ec53 2b10 	vmov	r2, r3, d0
 80015ba:	4620      	mov	r0, r4
 80015bc:	4629      	mov	r1, r5
 80015be:	f7ff f83b 	bl	8000638 <__aeabi_dmul>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4690      	mov	r8, r2
 80015c8:	4699      	mov	r9, r3
 80015ca:	4b29      	ldr	r3, [pc, #164]	@ (8001670 <park+0x174>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7fe ffda 	bl	8000588 <__aeabi_f2d>
 80015d4:	4604      	mov	r4, r0
 80015d6:	460d      	mov	r5, r1
 80015d8:	4b24      	ldr	r3, [pc, #144]	@ (800166c <park+0x170>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7fe ffd3 	bl	8000588 <__aeabi_f2d>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	ec43 2b10 	vmov	d0, r2, r3
 80015ea:	f00a fdd1 	bl	800c190 <cos>
 80015ee:	ec53 2b10 	vmov	r2, r3, d0
 80015f2:	4620      	mov	r0, r4
 80015f4:	4629      	mov	r1, r5
 80015f6:	f7ff f81f 	bl	8000638 <__aeabi_dmul>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	4640      	mov	r0, r8
 8001600:	4649      	mov	r1, r9
 8001602:	f7fe fe63 	bl	80002cc <__adddf3>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4610      	mov	r0, r2
 800160c:	4619      	mov	r1, r3
 800160e:	f7ff fb0b 	bl	8000c28 <__aeabi_d2f>
 8001612:	4603      	mov	r3, r0
 8001614:	4a18      	ldr	r2, [pc, #96]	@ (8001678 <park+0x17c>)
 8001616:	6013      	str	r3, [r2, #0]
	idq = sqrt( i_d * i_d + i_q * i_q);
 8001618:	4b16      	ldr	r3, [pc, #88]	@ (8001674 <park+0x178>)
 800161a:	ed93 7a00 	vldr	s14, [r3]
 800161e:	4b15      	ldr	r3, [pc, #84]	@ (8001674 <park+0x178>)
 8001620:	edd3 7a00 	vldr	s15, [r3]
 8001624:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001628:	4b13      	ldr	r3, [pc, #76]	@ (8001678 <park+0x17c>)
 800162a:	edd3 6a00 	vldr	s13, [r3]
 800162e:	4b12      	ldr	r3, [pc, #72]	@ (8001678 <park+0x17c>)
 8001630:	edd3 7a00 	vldr	s15, [r3]
 8001634:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001638:	ee77 7a27 	vadd.f32	s15, s14, s15
 800163c:	ee17 0a90 	vmov	r0, s15
 8001640:	f7fe ffa2 	bl	8000588 <__aeabi_f2d>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	ec43 2b10 	vmov	d0, r2, r3
 800164c:	f00a fd74 	bl	800c138 <sqrt>
 8001650:	ec53 2b10 	vmov	r2, r3, d0
 8001654:	4610      	mov	r0, r2
 8001656:	4619      	mov	r1, r3
 8001658:	f7ff fae6 	bl	8000c28 <__aeabi_d2f>
 800165c:	4603      	mov	r3, r0
 800165e:	4a07      	ldr	r2, [pc, #28]	@ (800167c <park+0x180>)
 8001660:	6013      	str	r3, [r2, #0]
}
 8001662:	bf00      	nop
 8001664:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001668:	20000248 	.word	0x20000248
 800166c:	200002a4 	.word	0x200002a4
 8001670:	2000024c 	.word	0x2000024c
 8001674:	20000250 	.word	0x20000250
 8001678:	20000254 	.word	0x20000254
 800167c:	200002b8 	.word	0x200002b8

08001680 <setpwm>:

void setpwm(){
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0

	PWM_A = ((Va / 8 + 1.0)/2 * PWM_PERIOD)*0.3;
 8001684:	4ba0      	ldr	r3, [pc, #640]	@ (8001908 <setpwm+0x288>)
 8001686:	edd3 7a00 	vldr	s15, [r3]
 800168a:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 800168e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001692:	ee16 0a90 	vmov	r0, s13
 8001696:	f7fe ff77 	bl	8000588 <__aeabi_f2d>
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	4b9b      	ldr	r3, [pc, #620]	@ (800190c <setpwm+0x28c>)
 80016a0:	f7fe fe14 	bl	80002cc <__adddf3>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	4610      	mov	r0, r2
 80016aa:	4619      	mov	r1, r3
 80016ac:	f04f 0200 	mov.w	r2, #0
 80016b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80016b4:	f7ff f8ea 	bl	800088c <__aeabi_ddiv>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4610      	mov	r0, r2
 80016be:	4619      	mov	r1, r3
 80016c0:	a389      	add	r3, pc, #548	@ (adr r3, 80018e8 <setpwm+0x268>)
 80016c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c6:	f7fe ffb7 	bl	8000638 <__aeabi_dmul>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	4610      	mov	r0, r2
 80016d0:	4619      	mov	r1, r3
 80016d2:	a387      	add	r3, pc, #540	@ (adr r3, 80018f0 <setpwm+0x270>)
 80016d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d8:	f7fe ffae 	bl	8000638 <__aeabi_dmul>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4610      	mov	r0, r2
 80016e2:	4619      	mov	r1, r3
 80016e4:	f7ff fa80 	bl	8000be8 <__aeabi_d2uiz>
 80016e8:	4603      	mov	r3, r0
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	4b88      	ldr	r3, [pc, #544]	@ (8001910 <setpwm+0x290>)
 80016ee:	801a      	strh	r2, [r3, #0]
	PWM_B = ((Vb / 8 + 1.0)/2 * PWM_PERIOD)*0.3;
 80016f0:	4b88      	ldr	r3, [pc, #544]	@ (8001914 <setpwm+0x294>)
 80016f2:	edd3 7a00 	vldr	s15, [r3]
 80016f6:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 80016fa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80016fe:	ee16 0a90 	vmov	r0, s13
 8001702:	f7fe ff41 	bl	8000588 <__aeabi_f2d>
 8001706:	f04f 0200 	mov.w	r2, #0
 800170a:	4b80      	ldr	r3, [pc, #512]	@ (800190c <setpwm+0x28c>)
 800170c:	f7fe fdde 	bl	80002cc <__adddf3>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4610      	mov	r0, r2
 8001716:	4619      	mov	r1, r3
 8001718:	f04f 0200 	mov.w	r2, #0
 800171c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001720:	f7ff f8b4 	bl	800088c <__aeabi_ddiv>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	4610      	mov	r0, r2
 800172a:	4619      	mov	r1, r3
 800172c:	a36e      	add	r3, pc, #440	@ (adr r3, 80018e8 <setpwm+0x268>)
 800172e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001732:	f7fe ff81 	bl	8000638 <__aeabi_dmul>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4610      	mov	r0, r2
 800173c:	4619      	mov	r1, r3
 800173e:	a36c      	add	r3, pc, #432	@ (adr r3, 80018f0 <setpwm+0x270>)
 8001740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001744:	f7fe ff78 	bl	8000638 <__aeabi_dmul>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	4610      	mov	r0, r2
 800174e:	4619      	mov	r1, r3
 8001750:	f7ff fa4a 	bl	8000be8 <__aeabi_d2uiz>
 8001754:	4603      	mov	r3, r0
 8001756:	b29a      	uxth	r2, r3
 8001758:	4b6f      	ldr	r3, [pc, #444]	@ (8001918 <setpwm+0x298>)
 800175a:	801a      	strh	r2, [r3, #0]
	PWM_C = ((Vc / 8 + 1.0)/2 * PWM_PERIOD)*0.3;
 800175c:	4b6f      	ldr	r3, [pc, #444]	@ (800191c <setpwm+0x29c>)
 800175e:	edd3 7a00 	vldr	s15, [r3]
 8001762:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8001766:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800176a:	ee16 0a90 	vmov	r0, s13
 800176e:	f7fe ff0b 	bl	8000588 <__aeabi_f2d>
 8001772:	f04f 0200 	mov.w	r2, #0
 8001776:	4b65      	ldr	r3, [pc, #404]	@ (800190c <setpwm+0x28c>)
 8001778:	f7fe fda8 	bl	80002cc <__adddf3>
 800177c:	4602      	mov	r2, r0
 800177e:	460b      	mov	r3, r1
 8001780:	4610      	mov	r0, r2
 8001782:	4619      	mov	r1, r3
 8001784:	f04f 0200 	mov.w	r2, #0
 8001788:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800178c:	f7ff f87e 	bl	800088c <__aeabi_ddiv>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4610      	mov	r0, r2
 8001796:	4619      	mov	r1, r3
 8001798:	a353      	add	r3, pc, #332	@ (adr r3, 80018e8 <setpwm+0x268>)
 800179a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179e:	f7fe ff4b 	bl	8000638 <__aeabi_dmul>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4610      	mov	r0, r2
 80017a8:	4619      	mov	r1, r3
 80017aa:	a351      	add	r3, pc, #324	@ (adr r3, 80018f0 <setpwm+0x270>)
 80017ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b0:	f7fe ff42 	bl	8000638 <__aeabi_dmul>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4610      	mov	r0, r2
 80017ba:	4619      	mov	r1, r3
 80017bc:	f7ff fa14 	bl	8000be8 <__aeabi_d2uiz>
 80017c0:	4603      	mov	r3, r0
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	4b56      	ldr	r3, [pc, #344]	@ (8001920 <setpwm+0x2a0>)
 80017c6:	801a      	strh	r2, [r3, #0]


	 current_sq = sqrt(ia * ia + ib * ib + ic * ic);
 80017c8:	4b56      	ldr	r3, [pc, #344]	@ (8001924 <setpwm+0x2a4>)
 80017ca:	ed93 7a00 	vldr	s14, [r3]
 80017ce:	4b55      	ldr	r3, [pc, #340]	@ (8001924 <setpwm+0x2a4>)
 80017d0:	edd3 7a00 	vldr	s15, [r3]
 80017d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017d8:	4b53      	ldr	r3, [pc, #332]	@ (8001928 <setpwm+0x2a8>)
 80017da:	edd3 6a00 	vldr	s13, [r3]
 80017de:	4b52      	ldr	r3, [pc, #328]	@ (8001928 <setpwm+0x2a8>)
 80017e0:	edd3 7a00 	vldr	s15, [r3]
 80017e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017ec:	4b4f      	ldr	r3, [pc, #316]	@ (800192c <setpwm+0x2ac>)
 80017ee:	edd3 6a00 	vldr	s13, [r3]
 80017f2:	4b4e      	ldr	r3, [pc, #312]	@ (800192c <setpwm+0x2ac>)
 80017f4:	edd3 7a00 	vldr	s15, [r3]
 80017f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001800:	ee17 0a90 	vmov	r0, s15
 8001804:	f7fe fec0 	bl	8000588 <__aeabi_f2d>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	ec43 2b10 	vmov	d0, r2, r3
 8001810:	f00a fc92 	bl	800c138 <sqrt>
 8001814:	ec53 2b10 	vmov	r2, r3, d0
 8001818:	4610      	mov	r0, r2
 800181a:	4619      	mov	r1, r3
 800181c:	f7ff fa04 	bl	8000c28 <__aeabi_d2f>
 8001820:	4603      	mov	r3, r0
 8001822:	4a43      	ldr	r2, [pc, #268]	@ (8001930 <setpwm+0x2b0>)
 8001824:	6013      	str	r3, [r2, #0]
	 //current_sq = ia * ia + ib * ib + ic * ic;


	if (current_sq > OVERCURRENT_LIMIT_SQ) {
 8001826:	4b42      	ldr	r3, [pc, #264]	@ (8001930 <setpwm+0x2b0>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f7fe feac 	bl	8000588 <__aeabi_f2d>
 8001830:	a331      	add	r3, pc, #196	@ (adr r3, 80018f8 <setpwm+0x278>)
 8001832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001836:	f7ff f98f 	bl	8000b58 <__aeabi_dcmpgt>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d00c      	beq.n	800185a <setpwm+0x1da>
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001840:	4b3c      	ldr	r3, [pc, #240]	@ (8001934 <setpwm+0x2b4>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2200      	movs	r2, #0
 8001846:	635a      	str	r2, [r3, #52]	@ 0x34
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001848:	4b3a      	ldr	r3, [pc, #232]	@ (8001934 <setpwm+0x2b4>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2200      	movs	r2, #0
 800184e:	639a      	str	r2, [r3, #56]	@ 0x38
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001850:	4b38      	ldr	r3, [pc, #224]	@ (8001934 <setpwm+0x2b4>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2200      	movs	r2, #0
 8001856:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001858:	e00e      	b.n	8001878 <setpwm+0x1f8>
	    //HAL_Delay(5000);
	} else {
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM_A);
 800185a:	4b2d      	ldr	r3, [pc, #180]	@ (8001910 <setpwm+0x290>)
 800185c:	881a      	ldrh	r2, [r3, #0]
 800185e:	4b35      	ldr	r3, [pc, #212]	@ (8001934 <setpwm+0x2b4>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	635a      	str	r2, [r3, #52]	@ 0x34
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWM_B);
 8001864:	4b2c      	ldr	r3, [pc, #176]	@ (8001918 <setpwm+0x298>)
 8001866:	881a      	ldrh	r2, [r3, #0]
 8001868:	4b32      	ldr	r3, [pc, #200]	@ (8001934 <setpwm+0x2b4>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	639a      	str	r2, [r3, #56]	@ 0x38
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, PWM_C);
 800186e:	4b2c      	ldr	r3, [pc, #176]	@ (8001920 <setpwm+0x2a0>)
 8001870:	881a      	ldrh	r2, [r3, #0]
 8001872:	4b30      	ldr	r3, [pc, #192]	@ (8001934 <setpwm+0x2b4>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	63da      	str	r2, [r3, #60]	@ 0x3c
	}
	if (adc_dma_voltage < 1.5 || adc_dma_voltage > 1.9) {
 8001878:	4b2f      	ldr	r3, [pc, #188]	@ (8001938 <setpwm+0x2b8>)
 800187a:	edd3 7a00 	vldr	s15, [r3]
 800187e:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8001882:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800188a:	d40c      	bmi.n	80018a6 <setpwm+0x226>
 800188c:	4b2a      	ldr	r3, [pc, #168]	@ (8001938 <setpwm+0x2b8>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	f7fe fe79 	bl	8000588 <__aeabi_f2d>
 8001896:	a31a      	add	r3, pc, #104	@ (adr r3, 8001900 <setpwm+0x280>)
 8001898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189c:	f7ff f95c 	bl	8000b58 <__aeabi_dcmpgt>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d00c      	beq.n	80018c0 <setpwm+0x240>
		    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80018a6:	4b23      	ldr	r3, [pc, #140]	@ (8001934 <setpwm+0x2b4>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2200      	movs	r2, #0
 80018ac:	635a      	str	r2, [r3, #52]	@ 0x34
		    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80018ae:	4b21      	ldr	r3, [pc, #132]	@ (8001934 <setpwm+0x2b4>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2200      	movs	r2, #0
 80018b4:	639a      	str	r2, [r3, #56]	@ 0x38
		    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80018b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001934 <setpwm+0x2b4>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2200      	movs	r2, #0
 80018bc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80018be:	e00f      	b.n	80018e0 <setpwm+0x260>
		    //HAL_Delay(5000);

		} else {
		    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM_A);
 80018c0:	4b13      	ldr	r3, [pc, #76]	@ (8001910 <setpwm+0x290>)
 80018c2:	881a      	ldrh	r2, [r3, #0]
 80018c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001934 <setpwm+0x2b4>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	635a      	str	r2, [r3, #52]	@ 0x34
		    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWM_B);
 80018ca:	4b13      	ldr	r3, [pc, #76]	@ (8001918 <setpwm+0x298>)
 80018cc:	881a      	ldrh	r2, [r3, #0]
 80018ce:	4b19      	ldr	r3, [pc, #100]	@ (8001934 <setpwm+0x2b4>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	639a      	str	r2, [r3, #56]	@ 0x38
		    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, PWM_C);
 80018d4:	4b12      	ldr	r3, [pc, #72]	@ (8001920 <setpwm+0x2a0>)
 80018d6:	881a      	ldrh	r2, [r3, #0]
 80018d8:	4b16      	ldr	r3, [pc, #88]	@ (8001934 <setpwm+0x2b4>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	63da      	str	r2, [r3, #60]	@ 0x3c
		}
}
 80018de:	bf00      	nop
 80018e0:	bf00      	nop
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	f3af 8000 	nop.w
 80018e8:	00000000 	.word	0x00000000
 80018ec:	40b76e00 	.word	0x40b76e00
 80018f0:	33333333 	.word	0x33333333
 80018f4:	3fd33333 	.word	0x3fd33333
 80018f8:	70a3d70a 	.word	0x70a3d70a
 80018fc:	3ff70a3d 	.word	0x3ff70a3d
 8001900:	66666666 	.word	0x66666666
 8001904:	3ffe6666 	.word	0x3ffe6666
 8001908:	20000260 	.word	0x20000260
 800190c:	3ff00000 	.word	0x3ff00000
 8001910:	200002e4 	.word	0x200002e4
 8001914:	20000264 	.word	0x20000264
 8001918:	200002e6 	.word	0x200002e6
 800191c:	20000268 	.word	0x20000268
 8001920:	200002e8 	.word	0x200002e8
 8001924:	2000023c 	.word	0x2000023c
 8001928:	20000240 	.word	0x20000240
 800192c:	20000244 	.word	0x20000244
 8001930:	200002c8 	.word	0x200002c8
 8001934:	20000478 	.word	0x20000478
 8001938:	200002ac 	.word	0x200002ac

0800193c <update_PID>:

void update_PID()
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
	if ((fabs(error_pos) >= 0.0f) && (fabs(error_pos) <= (6.0f * (float)M_PI)))//(6.0f * (float)M_PI) ))
 8001940:	4bb0      	ldr	r3, [pc, #704]	@ (8001c04 <update_PID+0x2c8>)
 8001942:	edd3 7a00 	vldr	s15, [r3]
 8001946:	eef0 7ae7 	vabs.f32	s15, s15
 800194a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800194e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001952:	f2c0 80e7 	blt.w	8001b24 <update_PID+0x1e8>
 8001956:	4bab      	ldr	r3, [pc, #684]	@ (8001c04 <update_PID+0x2c8>)
 8001958:	edd3 7a00 	vldr	s15, [r3]
 800195c:	eef0 7ae7 	vabs.f32	s15, s15
 8001960:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 8001c08 <update_PID+0x2cc>
 8001964:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800196c:	f200 80da 	bhi.w	8001b24 <update_PID+0x1e8>
//		else
//		{
//		Ki = 7;
//		Kp = 2;
//		}
		Kp_speed = 20.0f;
 8001970:	4ba6      	ldr	r3, [pc, #664]	@ (8001c0c <update_PID+0x2d0>)
 8001972:	4aa7      	ldr	r2, [pc, #668]	@ (8001c10 <update_PID+0x2d4>)
 8001974:	601a      	str	r2, [r3, #0]
				Ki_speed = 2.0f;
 8001976:	4ba7      	ldr	r3, [pc, #668]	@ (8001c14 <update_PID+0x2d8>)
 8001978:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800197c:	601a      	str	r2, [r3, #0]
				Kd_speed = 2.0f;
 800197e:	4ba6      	ldr	r3, [pc, #664]	@ (8001c18 <update_PID+0x2dc>)
 8001980:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001984:	601a      	str	r2, [r3, #0]
				Ki_pos = 1.0f;
 8001986:	4ba5      	ldr	r3, [pc, #660]	@ (8001c1c <update_PID+0x2e0>)
 8001988:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800198c:	601a      	str	r2, [r3, #0]
				Kp_pos = 100.0f;
 800198e:	4ba4      	ldr	r3, [pc, #656]	@ (8001c20 <update_PID+0x2e4>)
 8001990:	4aa4      	ldr	r2, [pc, #656]	@ (8001c24 <update_PID+0x2e8>)
 8001992:	601a      	str	r2, [r3, #0]
				Kd_pos = 15.0f;
 8001994:	4ba4      	ldr	r3, [pc, #656]	@ (8001c28 <update_PID+0x2ec>)
 8001996:	4aa5      	ldr	r2, [pc, #660]	@ (8001c2c <update_PID+0x2f0>)
 8001998:	601a      	str	r2, [r3, #0]
			    if((velocity_ref > -200 && velocity_ref <= 0) || (velocity_ref > 0 && velocity_ref <= 200))
 800199a:	4ba5      	ldr	r3, [pc, #660]	@ (8001c30 <update_PID+0x2f4>)
 800199c:	edd3 7a00 	vldr	s15, [r3]
 80019a0:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 8001c34 <update_PID+0x2f8>
 80019a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ac:	dd07      	ble.n	80019be <update_PID+0x82>
 80019ae:	4ba0      	ldr	r3, [pc, #640]	@ (8001c30 <update_PID+0x2f4>)
 80019b0:	edd3 7a00 	vldr	s15, [r3]
 80019b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019bc:	d911      	bls.n	80019e2 <update_PID+0xa6>
 80019be:	4b9c      	ldr	r3, [pc, #624]	@ (8001c30 <update_PID+0x2f4>)
 80019c0:	edd3 7a00 	vldr	s15, [r3]
 80019c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019cc:	dd11      	ble.n	80019f2 <update_PID+0xb6>
 80019ce:	4b98      	ldr	r3, [pc, #608]	@ (8001c30 <update_PID+0x2f4>)
 80019d0:	edd3 7a00 	vldr	s15, [r3]
 80019d4:	ed9f 7a98 	vldr	s14, [pc, #608]	@ 8001c38 <update_PID+0x2fc>
 80019d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e0:	d807      	bhi.n	80019f2 <update_PID+0xb6>
			    {
			        Ki = 3.5;
 80019e2:	4b96      	ldr	r3, [pc, #600]	@ (8001c3c <update_PID+0x300>)
 80019e4:	4a96      	ldr	r2, [pc, #600]	@ (8001c40 <update_PID+0x304>)
 80019e6:	601a      	str	r2, [r3, #0]
			        Kp = 1.0;
 80019e8:	4b96      	ldr	r3, [pc, #600]	@ (8001c44 <update_PID+0x308>)
 80019ea:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	e097      	b.n	8001b22 <update_PID+0x1e6>
			    }
			    else if((velocity_ref > -500 && velocity_ref <= -200)||(velocity_ref > 200 && velocity_ref <= 500))
 80019f2:	4b8f      	ldr	r3, [pc, #572]	@ (8001c30 <update_PID+0x2f4>)
 80019f4:	edd3 7a00 	vldr	s15, [r3]
 80019f8:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 8001c48 <update_PID+0x30c>
 80019fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a04:	dd09      	ble.n	8001a1a <update_PID+0xde>
 8001a06:	4b8a      	ldr	r3, [pc, #552]	@ (8001c30 <update_PID+0x2f4>)
 8001a08:	edd3 7a00 	vldr	s15, [r3]
 8001a0c:	ed9f 7a89 	vldr	s14, [pc, #548]	@ 8001c34 <update_PID+0x2f8>
 8001a10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a18:	d913      	bls.n	8001a42 <update_PID+0x106>
 8001a1a:	4b85      	ldr	r3, [pc, #532]	@ (8001c30 <update_PID+0x2f4>)
 8001a1c:	edd3 7a00 	vldr	s15, [r3]
 8001a20:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8001c38 <update_PID+0x2fc>
 8001a24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a2c:	dd11      	ble.n	8001a52 <update_PID+0x116>
 8001a2e:	4b80      	ldr	r3, [pc, #512]	@ (8001c30 <update_PID+0x2f4>)
 8001a30:	edd3 7a00 	vldr	s15, [r3]
 8001a34:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8001c4c <update_PID+0x310>
 8001a38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a40:	d807      	bhi.n	8001a52 <update_PID+0x116>
			    {
			        Ki = 5.0;
 8001a42:	4b7e      	ldr	r3, [pc, #504]	@ (8001c3c <update_PID+0x300>)
 8001a44:	4a82      	ldr	r2, [pc, #520]	@ (8001c50 <update_PID+0x314>)
 8001a46:	601a      	str	r2, [r3, #0]
			        Kp = 2.0;
 8001a48:	4b7e      	ldr	r3, [pc, #504]	@ (8001c44 <update_PID+0x308>)
 8001a4a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	e067      	b.n	8001b22 <update_PID+0x1e6>
			    }
			    else if((velocity_ref > -1000 && velocity_ref <= -500)||(velocity_ref > 500 && velocity_ref <= 1000))
 8001a52:	4b77      	ldr	r3, [pc, #476]	@ (8001c30 <update_PID+0x2f4>)
 8001a54:	edd3 7a00 	vldr	s15, [r3]
 8001a58:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 8001c54 <update_PID+0x318>
 8001a5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a64:	dd09      	ble.n	8001a7a <update_PID+0x13e>
 8001a66:	4b72      	ldr	r3, [pc, #456]	@ (8001c30 <update_PID+0x2f4>)
 8001a68:	edd3 7a00 	vldr	s15, [r3]
 8001a6c:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 8001c48 <update_PID+0x30c>
 8001a70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a78:	d913      	bls.n	8001aa2 <update_PID+0x166>
 8001a7a:	4b6d      	ldr	r3, [pc, #436]	@ (8001c30 <update_PID+0x2f4>)
 8001a7c:	edd3 7a00 	vldr	s15, [r3]
 8001a80:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 8001c4c <update_PID+0x310>
 8001a84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a8c:	dd11      	ble.n	8001ab2 <update_PID+0x176>
 8001a8e:	4b68      	ldr	r3, [pc, #416]	@ (8001c30 <update_PID+0x2f4>)
 8001a90:	edd3 7a00 	vldr	s15, [r3]
 8001a94:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 8001c58 <update_PID+0x31c>
 8001a98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa0:	d807      	bhi.n	8001ab2 <update_PID+0x176>
			    {
			        Ki = 7.0;
 8001aa2:	4b66      	ldr	r3, [pc, #408]	@ (8001c3c <update_PID+0x300>)
 8001aa4:	4a6d      	ldr	r2, [pc, #436]	@ (8001c5c <update_PID+0x320>)
 8001aa6:	601a      	str	r2, [r3, #0]
			        Kp = 2.0;
 8001aa8:	4b66      	ldr	r3, [pc, #408]	@ (8001c44 <update_PID+0x308>)
 8001aaa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	e037      	b.n	8001b22 <update_PID+0x1e6>
			    }
			    else if((velocity_ref > -1500 && velocity_ref <= -1000)||(velocity_ref > 1000 && velocity_ref <= 1500))
 8001ab2:	4b5f      	ldr	r3, [pc, #380]	@ (8001c30 <update_PID+0x2f4>)
 8001ab4:	edd3 7a00 	vldr	s15, [r3]
 8001ab8:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8001c60 <update_PID+0x324>
 8001abc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac4:	dd09      	ble.n	8001ada <update_PID+0x19e>
 8001ac6:	4b5a      	ldr	r3, [pc, #360]	@ (8001c30 <update_PID+0x2f4>)
 8001ac8:	edd3 7a00 	vldr	s15, [r3]
 8001acc:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 8001c54 <update_PID+0x318>
 8001ad0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad8:	d913      	bls.n	8001b02 <update_PID+0x1c6>
 8001ada:	4b55      	ldr	r3, [pc, #340]	@ (8001c30 <update_PID+0x2f4>)
 8001adc:	edd3 7a00 	vldr	s15, [r3]
 8001ae0:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8001c58 <update_PID+0x31c>
 8001ae4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aec:	dd11      	ble.n	8001b12 <update_PID+0x1d6>
 8001aee:	4b50      	ldr	r3, [pc, #320]	@ (8001c30 <update_PID+0x2f4>)
 8001af0:	edd3 7a00 	vldr	s15, [r3]
 8001af4:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8001c64 <update_PID+0x328>
 8001af8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b00:	d807      	bhi.n	8001b12 <update_PID+0x1d6>
			    {
			        Ki = 11;
 8001b02:	4b4e      	ldr	r3, [pc, #312]	@ (8001c3c <update_PID+0x300>)
 8001b04:	4a58      	ldr	r2, [pc, #352]	@ (8001c68 <update_PID+0x32c>)
 8001b06:	601a      	str	r2, [r3, #0]
			        Kp = 2.0;
 8001b08:	4b4e      	ldr	r3, [pc, #312]	@ (8001c44 <update_PID+0x308>)
 8001b0a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	e007      	b.n	8001b22 <update_PID+0x1e6>
			    }
			    else
			    {
			        Ki = 13;
 8001b12:	4b4a      	ldr	r3, [pc, #296]	@ (8001c3c <update_PID+0x300>)
 8001b14:	4a55      	ldr	r2, [pc, #340]	@ (8001c6c <update_PID+0x330>)
 8001b16:	601a      	str	r2, [r3, #0]
			        Kp = 2.0;
 8001b18:	4b4a      	ldr	r3, [pc, #296]	@ (8001c44 <update_PID+0x308>)
 8001b1a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b1e:	601a      	str	r2, [r3, #0]
			    if((velocity_ref > -200 && velocity_ref <= 0) || (velocity_ref > 0 && velocity_ref <= 200))
 8001b20:	e111      	b.n	8001d46 <update_PID+0x40a>
 8001b22:	e110      	b.n	8001d46 <update_PID+0x40a>
			    }
	}
else //if  ( (fabs(error_pos) > (6.0f * (float)M_PI)))
	{
		Kp_speed = 10.0f;
 8001b24:	4b39      	ldr	r3, [pc, #228]	@ (8001c0c <update_PID+0x2d0>)
 8001b26:	4a52      	ldr	r2, [pc, #328]	@ (8001c70 <update_PID+0x334>)
 8001b28:	601a      	str	r2, [r3, #0]
		Ki_speed = 0.0f;
 8001b2a:	4b3a      	ldr	r3, [pc, #232]	@ (8001c14 <update_PID+0x2d8>)
 8001b2c:	f04f 0200 	mov.w	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]
		Kd_speed = 0.0f;
 8001b32:	4b39      	ldr	r3, [pc, #228]	@ (8001c18 <update_PID+0x2dc>)
 8001b34:	f04f 0200 	mov.w	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
		Ki_pos = 5.0f;
 8001b3a:	4b38      	ldr	r3, [pc, #224]	@ (8001c1c <update_PID+0x2e0>)
 8001b3c:	4a44      	ldr	r2, [pc, #272]	@ (8001c50 <update_PID+0x314>)
 8001b3e:	601a      	str	r2, [r3, #0]
		Kp_pos = 100.0f;
 8001b40:	4b37      	ldr	r3, [pc, #220]	@ (8001c20 <update_PID+0x2e4>)
 8001b42:	4a38      	ldr	r2, [pc, #224]	@ (8001c24 <update_PID+0x2e8>)
 8001b44:	601a      	str	r2, [r3, #0]
		Kd_pos = 0.5f;
 8001b46:	4b38      	ldr	r3, [pc, #224]	@ (8001c28 <update_PID+0x2ec>)
 8001b48:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8001b4c:	601a      	str	r2, [r3, #0]
		if((velocity_ref > -200 && velocity_ref <= 0) || (velocity_ref > 0 && velocity_ref <= 200))
 8001b4e:	4b38      	ldr	r3, [pc, #224]	@ (8001c30 <update_PID+0x2f4>)
 8001b50:	edd3 7a00 	vldr	s15, [r3]
 8001b54:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8001c34 <update_PID+0x2f8>
 8001b58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b60:	dd07      	ble.n	8001b72 <update_PID+0x236>
 8001b62:	4b33      	ldr	r3, [pc, #204]	@ (8001c30 <update_PID+0x2f4>)
 8001b64:	edd3 7a00 	vldr	s15, [r3]
 8001b68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b70:	d911      	bls.n	8001b96 <update_PID+0x25a>
 8001b72:	4b2f      	ldr	r3, [pc, #188]	@ (8001c30 <update_PID+0x2f4>)
 8001b74:	edd3 7a00 	vldr	s15, [r3]
 8001b78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b80:	dd10      	ble.n	8001ba4 <update_PID+0x268>
 8001b82:	4b2b      	ldr	r3, [pc, #172]	@ (8001c30 <update_PID+0x2f4>)
 8001b84:	edd3 7a00 	vldr	s15, [r3]
 8001b88:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8001c38 <update_PID+0x2fc>
 8001b8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b94:	d806      	bhi.n	8001ba4 <update_PID+0x268>
		{
		Ki = 7.5;
 8001b96:	4b29      	ldr	r3, [pc, #164]	@ (8001c3c <update_PID+0x300>)
 8001b98:	4a36      	ldr	r2, [pc, #216]	@ (8001c74 <update_PID+0x338>)
 8001b9a:	601a      	str	r2, [r3, #0]
		Kp = 5.5;
 8001b9c:	4b29      	ldr	r3, [pc, #164]	@ (8001c44 <update_PID+0x308>)
 8001b9e:	4a36      	ldr	r2, [pc, #216]	@ (8001c78 <update_PID+0x33c>)
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	e0d0      	b.n	8001d46 <update_PID+0x40a>
		}
		else if((velocity_ref > -500 && velocity_ref <= -200)||(velocity_ref > 200 && velocity_ref <= 500))
 8001ba4:	4b22      	ldr	r3, [pc, #136]	@ (8001c30 <update_PID+0x2f4>)
 8001ba6:	edd3 7a00 	vldr	s15, [r3]
 8001baa:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8001c48 <update_PID+0x30c>
 8001bae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb6:	dd09      	ble.n	8001bcc <update_PID+0x290>
 8001bb8:	4b1d      	ldr	r3, [pc, #116]	@ (8001c30 <update_PID+0x2f4>)
 8001bba:	edd3 7a00 	vldr	s15, [r3]
 8001bbe:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001c34 <update_PID+0x2f8>
 8001bc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bca:	d913      	bls.n	8001bf4 <update_PID+0x2b8>
 8001bcc:	4b18      	ldr	r3, [pc, #96]	@ (8001c30 <update_PID+0x2f4>)
 8001bce:	edd3 7a00 	vldr	s15, [r3]
 8001bd2:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8001c38 <update_PID+0x2fc>
 8001bd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bde:	dd4d      	ble.n	8001c7c <update_PID+0x340>
 8001be0:	4b13      	ldr	r3, [pc, #76]	@ (8001c30 <update_PID+0x2f4>)
 8001be2:	edd3 7a00 	vldr	s15, [r3]
 8001be6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8001c4c <update_PID+0x310>
 8001bea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf2:	d843      	bhi.n	8001c7c <update_PID+0x340>
		{
		 Ki = 8.0;
 8001bf4:	4b11      	ldr	r3, [pc, #68]	@ (8001c3c <update_PID+0x300>)
 8001bf6:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8001bfa:	601a      	str	r2, [r3, #0]
		 Kp = 5.5;
 8001bfc:	4b11      	ldr	r3, [pc, #68]	@ (8001c44 <update_PID+0x308>)
 8001bfe:	4a1e      	ldr	r2, [pc, #120]	@ (8001c78 <update_PID+0x33c>)
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	e0a0      	b.n	8001d46 <update_PID+0x40a>
 8001c04:	20000290 	.word	0x20000290
 8001c08:	4196cbe4 	.word	0x4196cbe4
 8001c0c:	20000010 	.word	0x20000010
 8001c10:	41a00000 	.word	0x41a00000
 8001c14:	20000014 	.word	0x20000014
 8001c18:	20000018 	.word	0x20000018
 8001c1c:	2000001c 	.word	0x2000001c
 8001c20:	20000020 	.word	0x20000020
 8001c24:	42c80000 	.word	0x42c80000
 8001c28:	20000024 	.word	0x20000024
 8001c2c:	41700000 	.word	0x41700000
 8001c30:	20000004 	.word	0x20000004
 8001c34:	c3480000 	.word	0xc3480000
 8001c38:	43480000 	.word	0x43480000
 8001c3c:	20000008 	.word	0x20000008
 8001c40:	40600000 	.word	0x40600000
 8001c44:	2000000c 	.word	0x2000000c
 8001c48:	c3fa0000 	.word	0xc3fa0000
 8001c4c:	43fa0000 	.word	0x43fa0000
 8001c50:	40a00000 	.word	0x40a00000
 8001c54:	c47a0000 	.word	0xc47a0000
 8001c58:	447a0000 	.word	0x447a0000
 8001c5c:	40e00000 	.word	0x40e00000
 8001c60:	c4bb8000 	.word	0xc4bb8000
 8001c64:	44bb8000 	.word	0x44bb8000
 8001c68:	41300000 	.word	0x41300000
 8001c6c:	41500000 	.word	0x41500000
 8001c70:	41200000 	.word	0x41200000
 8001c74:	40f00000 	.word	0x40f00000
 8001c78:	40b00000 	.word	0x40b00000
		 }
		else if((velocity_ref > -1000 && velocity_ref <= -500)||(velocity_ref > 500 && velocity_ref <= 1000))
 8001c7c:	4b34      	ldr	r3, [pc, #208]	@ (8001d50 <update_PID+0x414>)
 8001c7e:	edd3 7a00 	vldr	s15, [r3]
 8001c82:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8001d54 <update_PID+0x418>
 8001c86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c8e:	dd09      	ble.n	8001ca4 <update_PID+0x368>
 8001c90:	4b2f      	ldr	r3, [pc, #188]	@ (8001d50 <update_PID+0x414>)
 8001c92:	edd3 7a00 	vldr	s15, [r3]
 8001c96:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001d58 <update_PID+0x41c>
 8001c9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca2:	d913      	bls.n	8001ccc <update_PID+0x390>
 8001ca4:	4b2a      	ldr	r3, [pc, #168]	@ (8001d50 <update_PID+0x414>)
 8001ca6:	edd3 7a00 	vldr	s15, [r3]
 8001caa:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8001d5c <update_PID+0x420>
 8001cae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb6:	dd10      	ble.n	8001cda <update_PID+0x39e>
 8001cb8:	4b25      	ldr	r3, [pc, #148]	@ (8001d50 <update_PID+0x414>)
 8001cba:	edd3 7a00 	vldr	s15, [r3]
 8001cbe:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001d60 <update_PID+0x424>
 8001cc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cca:	d806      	bhi.n	8001cda <update_PID+0x39e>
		{
		 Ki = 9.0;
 8001ccc:	4b25      	ldr	r3, [pc, #148]	@ (8001d64 <update_PID+0x428>)
 8001cce:	4a26      	ldr	r2, [pc, #152]	@ (8001d68 <update_PID+0x42c>)
 8001cd0:	601a      	str	r2, [r3, #0]
		 Kp = 5.5;
 8001cd2:	4b26      	ldr	r3, [pc, #152]	@ (8001d6c <update_PID+0x430>)
 8001cd4:	4a26      	ldr	r2, [pc, #152]	@ (8001d70 <update_PID+0x434>)
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	e035      	b.n	8001d46 <update_PID+0x40a>
		 }
		else if((velocity_ref > -1500 && velocity_ref <= -1000)||(velocity_ref > 1000 && velocity_ref <= 1500))
 8001cda:	4b1d      	ldr	r3, [pc, #116]	@ (8001d50 <update_PID+0x414>)
 8001cdc:	edd3 7a00 	vldr	s15, [r3]
 8001ce0:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8001d74 <update_PID+0x438>
 8001ce4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cec:	dd09      	ble.n	8001d02 <update_PID+0x3c6>
 8001cee:	4b18      	ldr	r3, [pc, #96]	@ (8001d50 <update_PID+0x414>)
 8001cf0:	edd3 7a00 	vldr	s15, [r3]
 8001cf4:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001d54 <update_PID+0x418>
 8001cf8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d00:	d913      	bls.n	8001d2a <update_PID+0x3ee>
 8001d02:	4b13      	ldr	r3, [pc, #76]	@ (8001d50 <update_PID+0x414>)
 8001d04:	edd3 7a00 	vldr	s15, [r3]
 8001d08:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001d60 <update_PID+0x424>
 8001d0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d14:	dd10      	ble.n	8001d38 <update_PID+0x3fc>
 8001d16:	4b0e      	ldr	r3, [pc, #56]	@ (8001d50 <update_PID+0x414>)
 8001d18:	edd3 7a00 	vldr	s15, [r3]
 8001d1c:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001d78 <update_PID+0x43c>
 8001d20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d28:	d806      	bhi.n	8001d38 <update_PID+0x3fc>
		{
		Ki = 13;
 8001d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d64 <update_PID+0x428>)
 8001d2c:	4a13      	ldr	r2, [pc, #76]	@ (8001d7c <update_PID+0x440>)
 8001d2e:	601a      	str	r2, [r3, #0]
		Kp = 5.5;
 8001d30:	4b0e      	ldr	r3, [pc, #56]	@ (8001d6c <update_PID+0x430>)
 8001d32:	4a0f      	ldr	r2, [pc, #60]	@ (8001d70 <update_PID+0x434>)
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	e006      	b.n	8001d46 <update_PID+0x40a>
		}
		else
		{
		Ki = 13;
 8001d38:	4b0a      	ldr	r3, [pc, #40]	@ (8001d64 <update_PID+0x428>)
 8001d3a:	4a10      	ldr	r2, [pc, #64]	@ (8001d7c <update_PID+0x440>)
 8001d3c:	601a      	str	r2, [r3, #0]
		Kp = 5.5;
 8001d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d6c <update_PID+0x430>)
 8001d40:	4a0b      	ldr	r2, [pc, #44]	@ (8001d70 <update_PID+0x434>)
 8001d42:	601a      	str	r2, [r3, #0]
		}
	}

}
 8001d44:	bf00      	nop
 8001d46:	bf00      	nop
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	20000004 	.word	0x20000004
 8001d54:	c47a0000 	.word	0xc47a0000
 8001d58:	c3fa0000 	.word	0xc3fa0000
 8001d5c:	43fa0000 	.word	0x43fa0000
 8001d60:	447a0000 	.word	0x447a0000
 8001d64:	20000008 	.word	0x20000008
 8001d68:	41100000 	.word	0x41100000
 8001d6c:	2000000c 	.word	0x2000000c
 8001d70:	40b00000 	.word	0x40b00000
 8001d74:	c4bb8000 	.word	0xc4bb8000
 8001d78:	44bb8000 	.word	0x44bb8000
 8001d7c:	41500000 	.word	0x41500000

08001d80 <position_loop>:


void position_loop()
{
 8001d80:	b5b0      	push	{r4, r5, r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
	update_position_dt();
 8001d86:	f7ff f967 	bl	8001058 <update_position_dt>
	    static float raw_angle_prev = 0;
	    static int turn_count = 0;

	    static float velocity_ref_prev = 0;

	     raw_angle = AS5147U_GetAngleRad();
 8001d8a:	f7ff fa1d 	bl	80011c8 <AS5147U_GetAngleRad>
 8001d8e:	eef0 7a40 	vmov.f32	s15, s0
 8001d92:	4b8f      	ldr	r3, [pc, #572]	@ (8001fd0 <position_loop+0x250>)
 8001d94:	edc3 7a00 	vstr	s15, [r3]
	     angle_deg = raw_angle * (180.0f / M_PI);
 8001d98:	4b8d      	ldr	r3, [pc, #564]	@ (8001fd0 <position_loop+0x250>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7fe fbf3 	bl	8000588 <__aeabi_f2d>
 8001da2:	a385      	add	r3, pc, #532	@ (adr r3, 8001fb8 <position_loop+0x238>)
 8001da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da8:	f7fe fc46 	bl	8000638 <__aeabi_dmul>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4610      	mov	r0, r2
 8001db2:	4619      	mov	r1, r3
 8001db4:	f7fe ff38 	bl	8000c28 <__aeabi_d2f>
 8001db8:	4603      	mov	r3, r0
 8001dba:	4a86      	ldr	r2, [pc, #536]	@ (8001fd4 <position_loop+0x254>)
 8001dbc:	6013      	str	r3, [r2, #0]
	    float delta = raw_angle - raw_angle_prev;
 8001dbe:	4b84      	ldr	r3, [pc, #528]	@ (8001fd0 <position_loop+0x250>)
 8001dc0:	ed93 7a00 	vldr	s14, [r3]
 8001dc4:	4b84      	ldr	r3, [pc, #528]	@ (8001fd8 <position_loop+0x258>)
 8001dc6:	edd3 7a00 	vldr	s15, [r3]
 8001dca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dce:	edc7 7a03 	vstr	s15, [r7, #12]

	    if (delta > M_PI) turn_count--;
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	f7fe fbd8 	bl	8000588 <__aeabi_f2d>
 8001dd8:	a379      	add	r3, pc, #484	@ (adr r3, 8001fc0 <position_loop+0x240>)
 8001dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dde:	f7fe febb 	bl	8000b58 <__aeabi_dcmpgt>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d005      	beq.n	8001df4 <position_loop+0x74>
 8001de8:	4b7c      	ldr	r3, [pc, #496]	@ (8001fdc <position_loop+0x25c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	3b01      	subs	r3, #1
 8001dee:	4a7b      	ldr	r2, [pc, #492]	@ (8001fdc <position_loop+0x25c>)
 8001df0:	6013      	str	r3, [r2, #0]
 8001df2:	e00f      	b.n	8001e14 <position_loop+0x94>
	    else if (delta < -M_PI) turn_count++;
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f7fe fbc7 	bl	8000588 <__aeabi_f2d>
 8001dfa:	a373      	add	r3, pc, #460	@ (adr r3, 8001fc8 <position_loop+0x248>)
 8001dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e00:	f7fe fe8c 	bl	8000b1c <__aeabi_dcmplt>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d004      	beq.n	8001e14 <position_loop+0x94>
 8001e0a:	4b74      	ldr	r3, [pc, #464]	@ (8001fdc <position_loop+0x25c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	4a72      	ldr	r2, [pc, #456]	@ (8001fdc <position_loop+0x25c>)
 8001e12:	6013      	str	r3, [r2, #0]

	    raw_angle_prev = raw_angle;
 8001e14:	4b6e      	ldr	r3, [pc, #440]	@ (8001fd0 <position_loop+0x250>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a6f      	ldr	r2, [pc, #444]	@ (8001fd8 <position_loop+0x258>)
 8001e1a:	6013      	str	r3, [r2, #0]

	    theta_now = raw_angle + turn_count * 2.0f * M_PI;
 8001e1c:	4b6c      	ldr	r3, [pc, #432]	@ (8001fd0 <position_loop+0x250>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7fe fbb1 	bl	8000588 <__aeabi_f2d>
 8001e26:	4604      	mov	r4, r0
 8001e28:	460d      	mov	r5, r1
 8001e2a:	4b6c      	ldr	r3, [pc, #432]	@ (8001fdc <position_loop+0x25c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	ee07 3a90 	vmov	s15, r3
 8001e32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e36:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e3a:	ee17 0a90 	vmov	r0, s15
 8001e3e:	f7fe fba3 	bl	8000588 <__aeabi_f2d>
 8001e42:	a35f      	add	r3, pc, #380	@ (adr r3, 8001fc0 <position_loop+0x240>)
 8001e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e48:	f7fe fbf6 	bl	8000638 <__aeabi_dmul>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	4620      	mov	r0, r4
 8001e52:	4629      	mov	r1, r5
 8001e54:	f7fe fa3a 	bl	80002cc <__adddf3>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	4610      	mov	r0, r2
 8001e5e:	4619      	mov	r1, r3
 8001e60:	f7fe fee2 	bl	8000c28 <__aeabi_d2f>
 8001e64:	4603      	mov	r3, r0
 8001e66:	4a5e      	ldr	r2, [pc, #376]	@ (8001fe0 <position_loop+0x260>)
 8001e68:	6013      	str	r3, [r2, #0]
	    error_pos = theta_ref - theta_now;
 8001e6a:	4b5e      	ldr	r3, [pc, #376]	@ (8001fe4 <position_loop+0x264>)
 8001e6c:	ed93 7a00 	vldr	s14, [r3]
 8001e70:	4b5b      	ldr	r3, [pc, #364]	@ (8001fe0 <position_loop+0x260>)
 8001e72:	edd3 7a00 	vldr	s15, [r3]
 8001e76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e7a:	4b5b      	ldr	r3, [pc, #364]	@ (8001fe8 <position_loop+0x268>)
 8001e7c:	edc3 7a00 	vstr	s15, [r3]

	    error_pos_sum += error_pos * position_dt;
 8001e80:	4b59      	ldr	r3, [pc, #356]	@ (8001fe8 <position_loop+0x268>)
 8001e82:	ed93 7a00 	vldr	s14, [r3]
 8001e86:	4b59      	ldr	r3, [pc, #356]	@ (8001fec <position_loop+0x26c>)
 8001e88:	edd3 7a00 	vldr	s15, [r3]
 8001e8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e90:	4b57      	ldr	r3, [pc, #348]	@ (8001ff0 <position_loop+0x270>)
 8001e92:	edd3 7a00 	vldr	s15, [r3]
 8001e96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e9a:	4b55      	ldr	r3, [pc, #340]	@ (8001ff0 <position_loop+0x270>)
 8001e9c:	edc3 7a00 	vstr	s15, [r3]
	    error_pos_sum = fminf(fmaxf(error_pos_sum, -0.5f), 0.5f);
 8001ea0:	4b53      	ldr	r3, [pc, #332]	@ (8001ff0 <position_loop+0x270>)
 8001ea2:	edd3 7a00 	vldr	s15, [r3]
 8001ea6:	eefe 0a00 	vmov.f32	s1, #224	@ 0xbf000000 -0.5
 8001eaa:	eeb0 0a67 	vmov.f32	s0, s15
 8001eae:	f00a fa17 	bl	800c2e0 <fmaxf>
 8001eb2:	eef0 7a40 	vmov.f32	s15, s0
 8001eb6:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 8001eba:	eeb0 0a67 	vmov.f32	s0, s15
 8001ebe:	f00a fa2c 	bl	800c31a <fminf>
 8001ec2:	eef0 7a40 	vmov.f32	s15, s0
 8001ec6:	4b4a      	ldr	r3, [pc, #296]	@ (8001ff0 <position_loop+0x270>)
 8001ec8:	edc3 7a00 	vstr	s15, [r3]

	    float velocity_unclamped = Kp_pos * error_pos + Ki_pos * error_pos_sum;// + Kd_pos * derivative_pos;
 8001ecc:	4b49      	ldr	r3, [pc, #292]	@ (8001ff4 <position_loop+0x274>)
 8001ece:	ed93 7a00 	vldr	s14, [r3]
 8001ed2:	4b45      	ldr	r3, [pc, #276]	@ (8001fe8 <position_loop+0x268>)
 8001ed4:	edd3 7a00 	vldr	s15, [r3]
 8001ed8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001edc:	4b46      	ldr	r3, [pc, #280]	@ (8001ff8 <position_loop+0x278>)
 8001ede:	edd3 6a00 	vldr	s13, [r3]
 8001ee2:	4b43      	ldr	r3, [pc, #268]	@ (8001ff0 <position_loop+0x270>)
 8001ee4:	edd3 7a00 	vldr	s15, [r3]
 8001ee8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ef0:	edc7 7a02 	vstr	s15, [r7, #8]
	    velocity_unclamped = fminf(fmaxf(velocity_unclamped, -1700), 1700);
 8001ef4:	eddf 0a41 	vldr	s1, [pc, #260]	@ 8001ffc <position_loop+0x27c>
 8001ef8:	ed97 0a02 	vldr	s0, [r7, #8]
 8001efc:	f00a f9f0 	bl	800c2e0 <fmaxf>
 8001f00:	eef0 7a40 	vmov.f32	s15, s0
 8001f04:	eddf 0a3e 	vldr	s1, [pc, #248]	@ 8002000 <position_loop+0x280>
 8001f08:	eeb0 0a67 	vmov.f32	s0, s15
 8001f0c:	f00a fa05 	bl	800c31a <fminf>
 8001f10:	ed87 0a02 	vstr	s0, [r7, #8]


	    float velocity_ramp = 5000.0f;
 8001f14:	4b3b      	ldr	r3, [pc, #236]	@ (8002004 <position_loop+0x284>)
 8001f16:	607b      	str	r3, [r7, #4]
	    float velocity_rate = (velocity_unclamped - velocity_ref_prev) / position_dt;
 8001f18:	4b3b      	ldr	r3, [pc, #236]	@ (8002008 <position_loop+0x288>)
 8001f1a:	edd3 7a00 	vldr	s15, [r3]
 8001f1e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001f22:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001f26:	4b31      	ldr	r3, [pc, #196]	@ (8001fec <position_loop+0x26c>)
 8001f28:	ed93 7a00 	vldr	s14, [r3]
 8001f2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f30:	edc7 7a00 	vstr	s15, [r7]

	    if (velocity_rate > velocity_ramp)
 8001f34:	ed97 7a00 	vldr	s14, [r7]
 8001f38:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f44:	dd0f      	ble.n	8001f66 <position_loop+0x1e6>
	        velocity_ref = velocity_ref_prev + velocity_ramp * position_dt;
 8001f46:	4b29      	ldr	r3, [pc, #164]	@ (8001fec <position_loop+0x26c>)
 8001f48:	ed93 7a00 	vldr	s14, [r3]
 8001f4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f54:	4b2c      	ldr	r3, [pc, #176]	@ (8002008 <position_loop+0x288>)
 8001f56:	edd3 7a00 	vldr	s15, [r3]
 8001f5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f5e:	4b2b      	ldr	r3, [pc, #172]	@ (800200c <position_loop+0x28c>)
 8001f60:	edc3 7a00 	vstr	s15, [r3]
 8001f64:	e01d      	b.n	8001fa2 <position_loop+0x222>
	    else if (velocity_rate < -velocity_ramp)
 8001f66:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f6a:	eef1 7a67 	vneg.f32	s15, s15
 8001f6e:	ed97 7a00 	vldr	s14, [r7]
 8001f72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f7a:	d50f      	bpl.n	8001f9c <position_loop+0x21c>
	        velocity_ref = velocity_ref_prev - velocity_ramp * position_dt;
 8001f7c:	4b22      	ldr	r3, [pc, #136]	@ (8002008 <position_loop+0x288>)
 8001f7e:	ed93 7a00 	vldr	s14, [r3]
 8001f82:	4b1a      	ldr	r3, [pc, #104]	@ (8001fec <position_loop+0x26c>)
 8001f84:	edd3 6a00 	vldr	s13, [r3]
 8001f88:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f94:	4b1d      	ldr	r3, [pc, #116]	@ (800200c <position_loop+0x28c>)
 8001f96:	edc3 7a00 	vstr	s15, [r3]
 8001f9a:	e002      	b.n	8001fa2 <position_loop+0x222>
	    else
	        velocity_ref = velocity_unclamped;
 8001f9c:	4a1b      	ldr	r2, [pc, #108]	@ (800200c <position_loop+0x28c>)
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	6013      	str	r3, [r2, #0]

	    velocity_ref_prev = velocity_ref;
 8001fa2:	4b1a      	ldr	r3, [pc, #104]	@ (800200c <position_loop+0x28c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a18      	ldr	r2, [pc, #96]	@ (8002008 <position_loop+0x288>)
 8001fa8:	6013      	str	r3, [r2, #0]
}
 8001faa:	bf00      	nop
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bdb0      	pop	{r4, r5, r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	f3af 8000 	nop.w
 8001fb8:	1a63c1f8 	.word	0x1a63c1f8
 8001fbc:	404ca5dc 	.word	0x404ca5dc
 8001fc0:	54442d18 	.word	0x54442d18
 8001fc4:	400921fb 	.word	0x400921fb
 8001fc8:	54442d18 	.word	0x54442d18
 8001fcc:	c00921fb 	.word	0xc00921fb
 8001fd0:	20000328 	.word	0x20000328
 8001fd4:	2000032c 	.word	0x2000032c
 8001fd8:	20000694 	.word	0x20000694
 8001fdc:	20000698 	.word	0x20000698
 8001fe0:	20000294 	.word	0x20000294
 8001fe4:	20000288 	.word	0x20000288
 8001fe8:	20000290 	.word	0x20000290
 8001fec:	200002cc 	.word	0x200002cc
 8001ff0:	2000069c 	.word	0x2000069c
 8001ff4:	20000020 	.word	0x20000020
 8001ff8:	2000001c 	.word	0x2000001c
 8001ffc:	c4d48000 	.word	0xc4d48000
 8002000:	44d48000 	.word	0x44d48000
 8002004:	459c4000 	.word	0x459c4000
 8002008:	200006a0 	.word	0x200006a0
 800200c:	20000004 	.word	0x20000004

08002010 <Speed_Loop>:

void Speed_Loop()
{
 8002010:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002014:	b086      	sub	sp, #24
 8002016:	af00      	add	r7, sp, #0
	update_speed_dt();
 8002018:	f7fe fffc 	bl	8001014 <update_speed_dt>
    static float angle_prev = 0;
    static float error_speed_prev = 0;
    float angle_now = electricalAngle();
 800201c:	f7ff f944 	bl	80012a8 <electricalAngle>
 8002020:	ed87 0a04 	vstr	s0, [r7, #16]
    float delta_angle = angle_now - angle_prev;
 8002024:	4bae      	ldr	r3, [pc, #696]	@ (80022e0 <Speed_Loop+0x2d0>)
 8002026:	edd3 7a00 	vldr	s15, [r3]
 800202a:	ed97 7a04 	vldr	s14, [r7, #16]
 800202e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002032:	edc7 7a05 	vstr	s15, [r7, #20]

    if (delta_angle > PI) delta_angle -= 2 * PI;
 8002036:	6978      	ldr	r0, [r7, #20]
 8002038:	f7fe faa6 	bl	8000588 <__aeabi_f2d>
 800203c:	a3a0      	add	r3, pc, #640	@ (adr r3, 80022c0 <Speed_Loop+0x2b0>)
 800203e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002042:	f7fe fd89 	bl	8000b58 <__aeabi_dcmpgt>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d00f      	beq.n	800206c <Speed_Loop+0x5c>
 800204c:	6978      	ldr	r0, [r7, #20]
 800204e:	f7fe fa9b 	bl	8000588 <__aeabi_f2d>
 8002052:	a39d      	add	r3, pc, #628	@ (adr r3, 80022c8 <Speed_Loop+0x2b8>)
 8002054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002058:	f7fe f936 	bl	80002c8 <__aeabi_dsub>
 800205c:	4602      	mov	r2, r0
 800205e:	460b      	mov	r3, r1
 8002060:	4610      	mov	r0, r2
 8002062:	4619      	mov	r1, r3
 8002064:	f7fe fde0 	bl	8000c28 <__aeabi_d2f>
 8002068:	4603      	mov	r3, r0
 800206a:	617b      	str	r3, [r7, #20]
    if (delta_angle < -PI) delta_angle += 2 * PI;
 800206c:	6978      	ldr	r0, [r7, #20]
 800206e:	f7fe fa8b 	bl	8000588 <__aeabi_f2d>
 8002072:	a397      	add	r3, pc, #604	@ (adr r3, 80022d0 <Speed_Loop+0x2c0>)
 8002074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002078:	f7fe fd50 	bl	8000b1c <__aeabi_dcmplt>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d00f      	beq.n	80020a2 <Speed_Loop+0x92>
 8002082:	6978      	ldr	r0, [r7, #20]
 8002084:	f7fe fa80 	bl	8000588 <__aeabi_f2d>
 8002088:	a38f      	add	r3, pc, #572	@ (adr r3, 80022c8 <Speed_Loop+0x2b8>)
 800208a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800208e:	f7fe f91d 	bl	80002cc <__adddf3>
 8002092:	4602      	mov	r2, r0
 8002094:	460b      	mov	r3, r1
 8002096:	4610      	mov	r0, r2
 8002098:	4619      	mov	r1, r3
 800209a:	f7fe fdc5 	bl	8000c28 <__aeabi_d2f>
 800209e:	4603      	mov	r3, r0
 80020a0:	617b      	str	r3, [r7, #20]

    velocity = alpha * velocity + (1 - alpha) * ((delta_angle / speed_dt) * (60.0f / (2.0f * PI)));
 80020a2:	4b90      	ldr	r3, [pc, #576]	@ (80022e4 <Speed_Loop+0x2d4>)
 80020a4:	ed93 7a00 	vldr	s14, [r3]
 80020a8:	4b8f      	ldr	r3, [pc, #572]	@ (80022e8 <Speed_Loop+0x2d8>)
 80020aa:	edd3 7a00 	vldr	s15, [r3]
 80020ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020b2:	ee17 0a90 	vmov	r0, s15
 80020b6:	f7fe fa67 	bl	8000588 <__aeabi_f2d>
 80020ba:	4604      	mov	r4, r0
 80020bc:	460d      	mov	r5, r1
 80020be:	4b89      	ldr	r3, [pc, #548]	@ (80022e4 <Speed_Loop+0x2d4>)
 80020c0:	edd3 7a00 	vldr	s15, [r3]
 80020c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80020c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020cc:	ee17 0a90 	vmov	r0, s15
 80020d0:	f7fe fa5a 	bl	8000588 <__aeabi_f2d>
 80020d4:	4680      	mov	r8, r0
 80020d6:	4689      	mov	r9, r1
 80020d8:	4b84      	ldr	r3, [pc, #528]	@ (80022ec <Speed_Loop+0x2dc>)
 80020da:	edd3 7a00 	vldr	s15, [r3]
 80020de:	ed97 7a05 	vldr	s14, [r7, #20]
 80020e2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80020e6:	ee16 0a90 	vmov	r0, s13
 80020ea:	f7fe fa4d 	bl	8000588 <__aeabi_f2d>
 80020ee:	a37a      	add	r3, pc, #488	@ (adr r3, 80022d8 <Speed_Loop+0x2c8>)
 80020f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f4:	f7fe faa0 	bl	8000638 <__aeabi_dmul>
 80020f8:	4602      	mov	r2, r0
 80020fa:	460b      	mov	r3, r1
 80020fc:	4640      	mov	r0, r8
 80020fe:	4649      	mov	r1, r9
 8002100:	f7fe fa9a 	bl	8000638 <__aeabi_dmul>
 8002104:	4602      	mov	r2, r0
 8002106:	460b      	mov	r3, r1
 8002108:	4620      	mov	r0, r4
 800210a:	4629      	mov	r1, r5
 800210c:	f7fe f8de 	bl	80002cc <__adddf3>
 8002110:	4602      	mov	r2, r0
 8002112:	460b      	mov	r3, r1
 8002114:	4610      	mov	r0, r2
 8002116:	4619      	mov	r1, r3
 8002118:	f7fe fd86 	bl	8000c28 <__aeabi_d2f>
 800211c:	4603      	mov	r3, r0
 800211e:	4a72      	ldr	r2, [pc, #456]	@ (80022e8 <Speed_Loop+0x2d8>)
 8002120:	6013      	str	r3, [r2, #0]
    error_speed = velocity_ref - velocity;
 8002122:	4b73      	ldr	r3, [pc, #460]	@ (80022f0 <Speed_Loop+0x2e0>)
 8002124:	ed93 7a00 	vldr	s14, [r3]
 8002128:	4b6f      	ldr	r3, [pc, #444]	@ (80022e8 <Speed_Loop+0x2d8>)
 800212a:	edd3 7a00 	vldr	s15, [r3]
 800212e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002132:	4b70      	ldr	r3, [pc, #448]	@ (80022f4 <Speed_Loop+0x2e4>)
 8002134:	edc3 7a00 	vstr	s15, [r3]
    speed_error_sum += error_speed * speed_dt;
 8002138:	4b6e      	ldr	r3, [pc, #440]	@ (80022f4 <Speed_Loop+0x2e4>)
 800213a:	ed93 7a00 	vldr	s14, [r3]
 800213e:	4b6b      	ldr	r3, [pc, #428]	@ (80022ec <Speed_Loop+0x2dc>)
 8002140:	edd3 7a00 	vldr	s15, [r3]
 8002144:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002148:	4b6b      	ldr	r3, [pc, #428]	@ (80022f8 <Speed_Loop+0x2e8>)
 800214a:	edd3 7a00 	vldr	s15, [r3]
 800214e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002152:	4b69      	ldr	r3, [pc, #420]	@ (80022f8 <Speed_Loop+0x2e8>)
 8002154:	edc3 7a00 	vstr	s15, [r3]
    speed_error_sum = fminf(fmaxf(speed_error_sum, -0.8f), 0.8f);
 8002158:	4b67      	ldr	r3, [pc, #412]	@ (80022f8 <Speed_Loop+0x2e8>)
 800215a:	edd3 7a00 	vldr	s15, [r3]
 800215e:	eddf 0a67 	vldr	s1, [pc, #412]	@ 80022fc <Speed_Loop+0x2ec>
 8002162:	eeb0 0a67 	vmov.f32	s0, s15
 8002166:	f00a f8bb 	bl	800c2e0 <fmaxf>
 800216a:	eef0 7a40 	vmov.f32	s15, s0
 800216e:	eddf 0a64 	vldr	s1, [pc, #400]	@ 8002300 <Speed_Loop+0x2f0>
 8002172:	eeb0 0a67 	vmov.f32	s0, s15
 8002176:	f00a f8d0 	bl	800c31a <fminf>
 800217a:	eef0 7a40 	vmov.f32	s15, s0
 800217e:	4b5e      	ldr	r3, [pc, #376]	@ (80022f8 <Speed_Loop+0x2e8>)
 8002180:	edc3 7a00 	vstr	s15, [r3]

    float derivative = (error_speed - error_speed_prev) / speed_dt;
 8002184:	4b5b      	ldr	r3, [pc, #364]	@ (80022f4 <Speed_Loop+0x2e4>)
 8002186:	ed93 7a00 	vldr	s14, [r3]
 800218a:	4b5e      	ldr	r3, [pc, #376]	@ (8002304 <Speed_Loop+0x2f4>)
 800218c:	edd3 7a00 	vldr	s15, [r3]
 8002190:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002194:	4b55      	ldr	r3, [pc, #340]	@ (80022ec <Speed_Loop+0x2dc>)
 8002196:	ed93 7a00 	vldr	s14, [r3]
 800219a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800219e:	edc7 7a03 	vstr	s15, [r7, #12]
    error_speed_prev = error_speed;
 80021a2:	4b54      	ldr	r3, [pc, #336]	@ (80022f4 <Speed_Loop+0x2e4>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a57      	ldr	r2, [pc, #348]	@ (8002304 <Speed_Loop+0x2f4>)
 80021a8:	6013      	str	r3, [r2, #0]

    float Iq_unlimited = Kp_speed * error_speed + Ki_speed * speed_error_sum + Kd_speed * derivative;
 80021aa:	4b57      	ldr	r3, [pc, #348]	@ (8002308 <Speed_Loop+0x2f8>)
 80021ac:	ed93 7a00 	vldr	s14, [r3]
 80021b0:	4b50      	ldr	r3, [pc, #320]	@ (80022f4 <Speed_Loop+0x2e4>)
 80021b2:	edd3 7a00 	vldr	s15, [r3]
 80021b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021ba:	4b54      	ldr	r3, [pc, #336]	@ (800230c <Speed_Loop+0x2fc>)
 80021bc:	edd3 6a00 	vldr	s13, [r3]
 80021c0:	4b4d      	ldr	r3, [pc, #308]	@ (80022f8 <Speed_Loop+0x2e8>)
 80021c2:	edd3 7a00 	vldr	s15, [r3]
 80021c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021ce:	4b50      	ldr	r3, [pc, #320]	@ (8002310 <Speed_Loop+0x300>)
 80021d0:	edd3 6a00 	vldr	s13, [r3]
 80021d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80021d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021e0:	edc7 7a02 	vstr	s15, [r7, #8]

       float Ts = speed_dt;
 80021e4:	4b41      	ldr	r3, [pc, #260]	@ (80022ec <Speed_Loop+0x2dc>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	607b      	str	r3, [r7, #4]
       float Iq_ramp = 5000;
 80021ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002314 <Speed_Loop+0x304>)
 80021ec:	603b      	str	r3, [r7, #0]


       static float iq_ref_prev = 0.0f;
        Iq_rate = (Iq_unlimited - iq_ref_prev) / Ts;
 80021ee:	4b4a      	ldr	r3, [pc, #296]	@ (8002318 <Speed_Loop+0x308>)
 80021f0:	edd3 7a00 	vldr	s15, [r3]
 80021f4:	ed97 7a02 	vldr	s14, [r7, #8]
 80021f8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80021fc:	ed97 7a01 	vldr	s14, [r7, #4]
 8002200:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002204:	4b45      	ldr	r3, [pc, #276]	@ (800231c <Speed_Loop+0x30c>)
 8002206:	edc3 7a00 	vstr	s15, [r3]
       if (Iq_rate > Iq_ramp)
 800220a:	4b44      	ldr	r3, [pc, #272]	@ (800231c <Speed_Loop+0x30c>)
 800220c:	edd3 7a00 	vldr	s15, [r3]
 8002210:	ed97 7a00 	vldr	s14, [r7]
 8002214:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800221c:	d50e      	bpl.n	800223c <Speed_Loop+0x22c>
           iq_ref = iq_ref_prev + Iq_ramp * Ts;
 800221e:	ed97 7a00 	vldr	s14, [r7]
 8002222:	edd7 7a01 	vldr	s15, [r7, #4]
 8002226:	ee27 7a27 	vmul.f32	s14, s14, s15
 800222a:	4b3b      	ldr	r3, [pc, #236]	@ (8002318 <Speed_Loop+0x308>)
 800222c:	edd3 7a00 	vldr	s15, [r3]
 8002230:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002234:	4b3a      	ldr	r3, [pc, #232]	@ (8002320 <Speed_Loop+0x310>)
 8002236:	edc3 7a00 	vstr	s15, [r3]
 800223a:	e01d      	b.n	8002278 <Speed_Loop+0x268>
       else if (Iq_rate < -Iq_ramp)
 800223c:	edd7 7a00 	vldr	s15, [r7]
 8002240:	eeb1 7a67 	vneg.f32	s14, s15
 8002244:	4b35      	ldr	r3, [pc, #212]	@ (800231c <Speed_Loop+0x30c>)
 8002246:	edd3 7a00 	vldr	s15, [r3]
 800224a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800224e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002252:	dd0e      	ble.n	8002272 <Speed_Loop+0x262>
           iq_ref = iq_ref_prev - Iq_ramp * Ts;
 8002254:	4b30      	ldr	r3, [pc, #192]	@ (8002318 <Speed_Loop+0x308>)
 8002256:	ed93 7a00 	vldr	s14, [r3]
 800225a:	edd7 6a00 	vldr	s13, [r7]
 800225e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002262:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002266:	ee77 7a67 	vsub.f32	s15, s14, s15
 800226a:	4b2d      	ldr	r3, [pc, #180]	@ (8002320 <Speed_Loop+0x310>)
 800226c:	edc3 7a00 	vstr	s15, [r3]
 8002270:	e002      	b.n	8002278 <Speed_Loop+0x268>
       else
           iq_ref = Iq_unlimited;
 8002272:	4a2b      	ldr	r2, [pc, #172]	@ (8002320 <Speed_Loop+0x310>)
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	6013      	str	r3, [r2, #0]

       iq_ref = fminf(fmaxf(iq_ref, -1.0f), 1.0f);
 8002278:	4b29      	ldr	r3, [pc, #164]	@ (8002320 <Speed_Loop+0x310>)
 800227a:	edd3 7a00 	vldr	s15, [r3]
 800227e:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 8002282:	eeb0 0a67 	vmov.f32	s0, s15
 8002286:	f00a f82b 	bl	800c2e0 <fmaxf>
 800228a:	eef0 7a40 	vmov.f32	s15, s0
 800228e:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002292:	eeb0 0a67 	vmov.f32	s0, s15
 8002296:	f00a f840 	bl	800c31a <fminf>
 800229a:	eef0 7a40 	vmov.f32	s15, s0
 800229e:	4b20      	ldr	r3, [pc, #128]	@ (8002320 <Speed_Loop+0x310>)
 80022a0:	edc3 7a00 	vstr	s15, [r3]


       iq_ref_prev = iq_ref;
 80022a4:	4b1e      	ldr	r3, [pc, #120]	@ (8002320 <Speed_Loop+0x310>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a1b      	ldr	r2, [pc, #108]	@ (8002318 <Speed_Loop+0x308>)
 80022aa:	6013      	str	r3, [r2, #0]

    angle_prev = angle_now;
 80022ac:	4a0c      	ldr	r2, [pc, #48]	@ (80022e0 <Speed_Loop+0x2d0>)
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	6013      	str	r3, [r2, #0]

}
 80022b2:	bf00      	nop
 80022b4:	3718      	adds	r7, #24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80022bc:	f3af 8000 	nop.w
 80022c0:	54442eea 	.word	0x54442eea
 80022c4:	400921fb 	.word	0x400921fb
 80022c8:	54442eea 	.word	0x54442eea
 80022cc:	401921fb 	.word	0x401921fb
 80022d0:	54442eea 	.word	0x54442eea
 80022d4:	c00921fb 	.word	0xc00921fb
 80022d8:	66ed2a99 	.word	0x66ed2a99
 80022dc:	4023193d 	.word	0x4023193d
 80022e0:	200006a4 	.word	0x200006a4
 80022e4:	20000028 	.word	0x20000028
 80022e8:	2000028c 	.word	0x2000028c
 80022ec:	2000002c 	.word	0x2000002c
 80022f0:	20000004 	.word	0x20000004
 80022f4:	200002a0 	.word	0x200002a0
 80022f8:	20000280 	.word	0x20000280
 80022fc:	bf4ccccd 	.word	0xbf4ccccd
 8002300:	3f4ccccd 	.word	0x3f4ccccd
 8002304:	200006a8 	.word	0x200006a8
 8002308:	20000010 	.word	0x20000010
 800230c:	20000014 	.word	0x20000014
 8002310:	20000018 	.word	0x20000018
 8002314:	459c4000 	.word	0x459c4000
 8002318:	200006ac 	.word	0x200006ac
 800231c:	200002b4 	.word	0x200002b4
 8002320:	20000000 	.word	0x20000000

08002324 <Current_Loop>:


void Current_Loop()
{
 8002324:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002328:	b084      	sub	sp, #16
 800232a:	af00      	add	r7, sp, #0
    Update_dt();
 800232c:	f7fe fe50 	bl	8000fd0 <Update_dt>

    theta = electricalAngle();
 8002330:	f7fe ffba 	bl	80012a8 <electricalAngle>
 8002334:	eef0 7a40 	vmov.f32	s15, s0
 8002338:	4b90      	ldr	r3, [pc, #576]	@ (800257c <Current_Loop+0x258>)
 800233a:	edc3 7a00 	vstr	s15, [r3]
    clark();
 800233e:	f7ff f8ab 	bl	8001498 <clark>
    park();
 8002342:	f7ff f8db 	bl	80014fc <park>

    error_d = id_ref - i_d;
 8002346:	4b8e      	ldr	r3, [pc, #568]	@ (8002580 <Current_Loop+0x25c>)
 8002348:	ed93 7a00 	vldr	s14, [r3]
 800234c:	4b8d      	ldr	r3, [pc, #564]	@ (8002584 <Current_Loop+0x260>)
 800234e:	edd3 7a00 	vldr	s15, [r3]
 8002352:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002356:	4b8c      	ldr	r3, [pc, #560]	@ (8002588 <Current_Loop+0x264>)
 8002358:	edc3 7a00 	vstr	s15, [r3]
    error_q = iq_ref - i_q;
 800235c:	4b8b      	ldr	r3, [pc, #556]	@ (800258c <Current_Loop+0x268>)
 800235e:	ed93 7a00 	vldr	s14, [r3]
 8002362:	4b8b      	ldr	r3, [pc, #556]	@ (8002590 <Current_Loop+0x26c>)
 8002364:	edd3 7a00 	vldr	s15, [r3]
 8002368:	ee77 7a67 	vsub.f32	s15, s14, s15
 800236c:	4b89      	ldr	r3, [pc, #548]	@ (8002594 <Current_Loop+0x270>)
 800236e:	edc3 7a00 	vstr	s15, [r3]


    error_d_sum += error_d * dt;
 8002372:	4b85      	ldr	r3, [pc, #532]	@ (8002588 <Current_Loop+0x264>)
 8002374:	ed93 7a00 	vldr	s14, [r3]
 8002378:	4b87      	ldr	r3, [pc, #540]	@ (8002598 <Current_Loop+0x274>)
 800237a:	edd3 7a00 	vldr	s15, [r3]
 800237e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002382:	4b86      	ldr	r3, [pc, #536]	@ (800259c <Current_Loop+0x278>)
 8002384:	edd3 7a00 	vldr	s15, [r3]
 8002388:	ee77 7a27 	vadd.f32	s15, s14, s15
 800238c:	4b83      	ldr	r3, [pc, #524]	@ (800259c <Current_Loop+0x278>)
 800238e:	edc3 7a00 	vstr	s15, [r3]
    error_q_sum += error_q * dt;
 8002392:	4b80      	ldr	r3, [pc, #512]	@ (8002594 <Current_Loop+0x270>)
 8002394:	ed93 7a00 	vldr	s14, [r3]
 8002398:	4b7f      	ldr	r3, [pc, #508]	@ (8002598 <Current_Loop+0x274>)
 800239a:	edd3 7a00 	vldr	s15, [r3]
 800239e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023a2:	4b7f      	ldr	r3, [pc, #508]	@ (80025a0 <Current_Loop+0x27c>)
 80023a4:	edd3 7a00 	vldr	s15, [r3]
 80023a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023ac:	4b7c      	ldr	r3, [pc, #496]	@ (80025a0 <Current_Loop+0x27c>)
 80023ae:	edc3 7a00 	vstr	s15, [r3]

    error_d_sum = fminf(fmaxf(error_d_sum, -INTEGRAL_LIMIT), INTEGRAL_LIMIT);
 80023b2:	4b7a      	ldr	r3, [pc, #488]	@ (800259c <Current_Loop+0x278>)
 80023b4:	edd3 7a00 	vldr	s15, [r3]
 80023b8:	eeff 0a08 	vmov.f32	s1, #248	@ 0xbfc00000 -1.5
 80023bc:	eeb0 0a67 	vmov.f32	s0, s15
 80023c0:	f009 ff8e 	bl	800c2e0 <fmaxf>
 80023c4:	eef0 7a40 	vmov.f32	s15, s0
 80023c8:	eef7 0a08 	vmov.f32	s1, #120	@ 0x3fc00000  1.5
 80023cc:	eeb0 0a67 	vmov.f32	s0, s15
 80023d0:	f009 ffa3 	bl	800c31a <fminf>
 80023d4:	eef0 7a40 	vmov.f32	s15, s0
 80023d8:	4b70      	ldr	r3, [pc, #448]	@ (800259c <Current_Loop+0x278>)
 80023da:	edc3 7a00 	vstr	s15, [r3]
    error_q_sum = fminf(fmaxf(error_q_sum, -INTEGRAL_LIMIT), INTEGRAL_LIMIT);
 80023de:	4b70      	ldr	r3, [pc, #448]	@ (80025a0 <Current_Loop+0x27c>)
 80023e0:	edd3 7a00 	vldr	s15, [r3]
 80023e4:	eeff 0a08 	vmov.f32	s1, #248	@ 0xbfc00000 -1.5
 80023e8:	eeb0 0a67 	vmov.f32	s0, s15
 80023ec:	f009 ff78 	bl	800c2e0 <fmaxf>
 80023f0:	eef0 7a40 	vmov.f32	s15, s0
 80023f4:	eef7 0a08 	vmov.f32	s1, #120	@ 0x3fc00000  1.5
 80023f8:	eeb0 0a67 	vmov.f32	s0, s15
 80023fc:	f009 ff8d 	bl	800c31a <fminf>
 8002400:	eef0 7a40 	vmov.f32	s15, s0
 8002404:	4b66      	ldr	r3, [pc, #408]	@ (80025a0 <Current_Loop+0x27c>)
 8002406:	edc3 7a00 	vstr	s15, [r3]

    float Vd_unclamped = Kp * error_d + Ki * error_d_sum ;
 800240a:	4b66      	ldr	r3, [pc, #408]	@ (80025a4 <Current_Loop+0x280>)
 800240c:	ed93 7a00 	vldr	s14, [r3]
 8002410:	4b5d      	ldr	r3, [pc, #372]	@ (8002588 <Current_Loop+0x264>)
 8002412:	edd3 7a00 	vldr	s15, [r3]
 8002416:	ee27 7a27 	vmul.f32	s14, s14, s15
 800241a:	4b63      	ldr	r3, [pc, #396]	@ (80025a8 <Current_Loop+0x284>)
 800241c:	edd3 6a00 	vldr	s13, [r3]
 8002420:	4b5e      	ldr	r3, [pc, #376]	@ (800259c <Current_Loop+0x278>)
 8002422:	edd3 7a00 	vldr	s15, [r3]
 8002426:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800242a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800242e:	edc7 7a03 	vstr	s15, [r7, #12]
     Vq_unclamped = Kp * error_q + Ki * error_q_sum ;
 8002432:	4b5c      	ldr	r3, [pc, #368]	@ (80025a4 <Current_Loop+0x280>)
 8002434:	ed93 7a00 	vldr	s14, [r3]
 8002438:	4b56      	ldr	r3, [pc, #344]	@ (8002594 <Current_Loop+0x270>)
 800243a:	edd3 7a00 	vldr	s15, [r3]
 800243e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002442:	4b59      	ldr	r3, [pc, #356]	@ (80025a8 <Current_Loop+0x284>)
 8002444:	edd3 6a00 	vldr	s13, [r3]
 8002448:	4b55      	ldr	r3, [pc, #340]	@ (80025a0 <Current_Loop+0x27c>)
 800244a:	edd3 7a00 	vldr	s15, [r3]
 800244e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002452:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002456:	4b55      	ldr	r3, [pc, #340]	@ (80025ac <Current_Loop+0x288>)
 8002458:	edc3 7a00 	vstr	s15, [r3]

    float V_limit = 8.0f;
 800245c:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8002460:	60bb      	str	r3, [r7, #8]
//    Vq_unclamped = fminf(fmaxf(Vq_unclamped, -V_limit), V_limit);

    // Ramping
    static float Vd_prev = 0;
    static float Vq_prev = 0;
    float output_ramp = 1000.0f;
 8002462:	4b53      	ldr	r3, [pc, #332]	@ (80025b0 <Current_Loop+0x28c>)
 8002464:	607b      	str	r3, [r7, #4]

    float output_d_rate = (Vd_unclamped - Vd_prev) / dt;
 8002466:	4b53      	ldr	r3, [pc, #332]	@ (80025b4 <Current_Loop+0x290>)
 8002468:	edd3 7a00 	vldr	s15, [r3]
 800246c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002470:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002474:	4b48      	ldr	r3, [pc, #288]	@ (8002598 <Current_Loop+0x274>)
 8002476:	ed93 7a00 	vldr	s14, [r3]
 800247a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800247e:	edc7 7a00 	vstr	s15, [r7]
    output_q_rate = (Vq_unclamped - Vq_prev) / dt;
 8002482:	4b4a      	ldr	r3, [pc, #296]	@ (80025ac <Current_Loop+0x288>)
 8002484:	ed93 7a00 	vldr	s14, [r3]
 8002488:	4b4b      	ldr	r3, [pc, #300]	@ (80025b8 <Current_Loop+0x294>)
 800248a:	edd3 7a00 	vldr	s15, [r3]
 800248e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002492:	4b41      	ldr	r3, [pc, #260]	@ (8002598 <Current_Loop+0x274>)
 8002494:	ed93 7a00 	vldr	s14, [r3]
 8002498:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800249c:	4b47      	ldr	r3, [pc, #284]	@ (80025bc <Current_Loop+0x298>)
 800249e:	edc3 7a00 	vstr	s15, [r3]

    if (output_d_rate > output_ramp)
 80024a2:	ed97 7a00 	vldr	s14, [r7]
 80024a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80024aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b2:	dd0f      	ble.n	80024d4 <Current_Loop+0x1b0>
        Vd = Vd_prev + output_ramp * dt;
 80024b4:	4b38      	ldr	r3, [pc, #224]	@ (8002598 <Current_Loop+0x274>)
 80024b6:	ed93 7a00 	vldr	s14, [r3]
 80024ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80024be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024c2:	4b3c      	ldr	r3, [pc, #240]	@ (80025b4 <Current_Loop+0x290>)
 80024c4:	edd3 7a00 	vldr	s15, [r3]
 80024c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024cc:	4b3c      	ldr	r3, [pc, #240]	@ (80025c0 <Current_Loop+0x29c>)
 80024ce:	edc3 7a00 	vstr	s15, [r3]
 80024d2:	e01d      	b.n	8002510 <Current_Loop+0x1ec>
    else if (output_d_rate < -output_ramp)
 80024d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80024d8:	eef1 7a67 	vneg.f32	s15, s15
 80024dc:	ed97 7a00 	vldr	s14, [r7]
 80024e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024e8:	d50f      	bpl.n	800250a <Current_Loop+0x1e6>
        Vd = Vd_prev - output_ramp * dt;
 80024ea:	4b32      	ldr	r3, [pc, #200]	@ (80025b4 <Current_Loop+0x290>)
 80024ec:	ed93 7a00 	vldr	s14, [r3]
 80024f0:	4b29      	ldr	r3, [pc, #164]	@ (8002598 <Current_Loop+0x274>)
 80024f2:	edd3 6a00 	vldr	s13, [r3]
 80024f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80024fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002502:	4b2f      	ldr	r3, [pc, #188]	@ (80025c0 <Current_Loop+0x29c>)
 8002504:	edc3 7a00 	vstr	s15, [r3]
 8002508:	e002      	b.n	8002510 <Current_Loop+0x1ec>
    else
        Vd = Vd_unclamped;
 800250a:	4a2d      	ldr	r2, [pc, #180]	@ (80025c0 <Current_Loop+0x29c>)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6013      	str	r3, [r2, #0]

    if (output_q_rate > output_ramp)
 8002510:	4b2a      	ldr	r3, [pc, #168]	@ (80025bc <Current_Loop+0x298>)
 8002512:	edd3 7a00 	vldr	s15, [r3]
 8002516:	ed97 7a01 	vldr	s14, [r7, #4]
 800251a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800251e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002522:	d50f      	bpl.n	8002544 <Current_Loop+0x220>
        Vq = Vq_prev + output_ramp * dt;
 8002524:	4b1c      	ldr	r3, [pc, #112]	@ (8002598 <Current_Loop+0x274>)
 8002526:	ed93 7a00 	vldr	s14, [r3]
 800252a:	edd7 7a01 	vldr	s15, [r7, #4]
 800252e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002532:	4b21      	ldr	r3, [pc, #132]	@ (80025b8 <Current_Loop+0x294>)
 8002534:	edd3 7a00 	vldr	s15, [r3]
 8002538:	ee77 7a27 	vadd.f32	s15, s14, s15
 800253c:	4b21      	ldr	r3, [pc, #132]	@ (80025c4 <Current_Loop+0x2a0>)
 800253e:	edc3 7a00 	vstr	s15, [r3]
 8002542:	e045      	b.n	80025d0 <Current_Loop+0x2ac>
    else if (output_q_rate < -output_ramp)
 8002544:	edd7 7a01 	vldr	s15, [r7, #4]
 8002548:	eeb1 7a67 	vneg.f32	s14, s15
 800254c:	4b1b      	ldr	r3, [pc, #108]	@ (80025bc <Current_Loop+0x298>)
 800254e:	edd3 7a00 	vldr	s15, [r3]
 8002552:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800255a:	dd35      	ble.n	80025c8 <Current_Loop+0x2a4>
        Vq = Vq_prev - output_ramp * dt;
 800255c:	4b16      	ldr	r3, [pc, #88]	@ (80025b8 <Current_Loop+0x294>)
 800255e:	ed93 7a00 	vldr	s14, [r3]
 8002562:	4b0d      	ldr	r3, [pc, #52]	@ (8002598 <Current_Loop+0x274>)
 8002564:	edd3 6a00 	vldr	s13, [r3]
 8002568:	edd7 7a01 	vldr	s15, [r7, #4]
 800256c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002570:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002574:	4b13      	ldr	r3, [pc, #76]	@ (80025c4 <Current_Loop+0x2a0>)
 8002576:	edc3 7a00 	vstr	s15, [r3]
 800257a:	e029      	b.n	80025d0 <Current_Loop+0x2ac>
 800257c:	200002a4 	.word	0x200002a4
 8002580:	20000284 	.word	0x20000284
 8002584:	20000250 	.word	0x20000250
 8002588:	20000270 	.word	0x20000270
 800258c:	20000000 	.word	0x20000000
 8002590:	20000254 	.word	0x20000254
 8002594:	20000274 	.word	0x20000274
 8002598:	20000298 	.word	0x20000298
 800259c:	20000278 	.word	0x20000278
 80025a0:	2000027c 	.word	0x2000027c
 80025a4:	2000000c 	.word	0x2000000c
 80025a8:	20000008 	.word	0x20000008
 80025ac:	200002c4 	.word	0x200002c4
 80025b0:	447a0000 	.word	0x447a0000
 80025b4:	200006b0 	.word	0x200006b0
 80025b8:	200006b4 	.word	0x200006b4
 80025bc:	200002bc 	.word	0x200002bc
 80025c0:	200002a8 	.word	0x200002a8
 80025c4:	200002b0 	.word	0x200002b0
    else
        Vq = Vq_unclamped;
 80025c8:	4ba0      	ldr	r3, [pc, #640]	@ (800284c <Current_Loop+0x528>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4aa0      	ldr	r2, [pc, #640]	@ (8002850 <Current_Loop+0x52c>)
 80025ce:	6013      	str	r3, [r2, #0]

    Vd = fminf(fmaxf(Vd, -V_limit), V_limit);
 80025d0:	4ba0      	ldr	r3, [pc, #640]	@ (8002854 <Current_Loop+0x530>)
 80025d2:	ed93 7a00 	vldr	s14, [r3]
 80025d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80025da:	eef1 7a67 	vneg.f32	s15, s15
 80025de:	eef0 0a67 	vmov.f32	s1, s15
 80025e2:	eeb0 0a47 	vmov.f32	s0, s14
 80025e6:	f009 fe7b 	bl	800c2e0 <fmaxf>
 80025ea:	eef0 7a40 	vmov.f32	s15, s0
 80025ee:	eef0 0a67 	vmov.f32	s1, s15
 80025f2:	ed97 0a02 	vldr	s0, [r7, #8]
 80025f6:	f009 fe90 	bl	800c31a <fminf>
 80025fa:	eef0 7a40 	vmov.f32	s15, s0
 80025fe:	4b95      	ldr	r3, [pc, #596]	@ (8002854 <Current_Loop+0x530>)
 8002600:	edc3 7a00 	vstr	s15, [r3]
    Vq = fminf(fmaxf(Vq, -V_limit), V_limit);
 8002604:	4b92      	ldr	r3, [pc, #584]	@ (8002850 <Current_Loop+0x52c>)
 8002606:	ed93 7a00 	vldr	s14, [r3]
 800260a:	edd7 7a02 	vldr	s15, [r7, #8]
 800260e:	eef1 7a67 	vneg.f32	s15, s15
 8002612:	eef0 0a67 	vmov.f32	s1, s15
 8002616:	eeb0 0a47 	vmov.f32	s0, s14
 800261a:	f009 fe61 	bl	800c2e0 <fmaxf>
 800261e:	eef0 7a40 	vmov.f32	s15, s0
 8002622:	eef0 0a67 	vmov.f32	s1, s15
 8002626:	ed97 0a02 	vldr	s0, [r7, #8]
 800262a:	f009 fe76 	bl	800c31a <fminf>
 800262e:	eef0 7a40 	vmov.f32	s15, s0
 8002632:	4b87      	ldr	r3, [pc, #540]	@ (8002850 <Current_Loop+0x52c>)
 8002634:	edc3 7a00 	vstr	s15, [r3]

    Vd_prev = Vd;
 8002638:	4b86      	ldr	r3, [pc, #536]	@ (8002854 <Current_Loop+0x530>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a86      	ldr	r2, [pc, #536]	@ (8002858 <Current_Loop+0x534>)
 800263e:	6013      	str	r3, [r2, #0]
    Vq_prev = Vq;
 8002640:	4b83      	ldr	r3, [pc, #524]	@ (8002850 <Current_Loop+0x52c>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a85      	ldr	r2, [pc, #532]	@ (800285c <Current_Loop+0x538>)
 8002646:	6013      	str	r3, [r2, #0]

	Valpha = Vd * cos(theta) - Vq * sin(theta);
 8002648:	4b82      	ldr	r3, [pc, #520]	@ (8002854 <Current_Loop+0x530>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f7fd ff9b 	bl	8000588 <__aeabi_f2d>
 8002652:	4604      	mov	r4, r0
 8002654:	460d      	mov	r5, r1
 8002656:	4b82      	ldr	r3, [pc, #520]	@ (8002860 <Current_Loop+0x53c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f7fd ff94 	bl	8000588 <__aeabi_f2d>
 8002660:	4602      	mov	r2, r0
 8002662:	460b      	mov	r3, r1
 8002664:	ec43 2b10 	vmov	d0, r2, r3
 8002668:	f009 fd92 	bl	800c190 <cos>
 800266c:	ec53 2b10 	vmov	r2, r3, d0
 8002670:	4620      	mov	r0, r4
 8002672:	4629      	mov	r1, r5
 8002674:	f7fd ffe0 	bl	8000638 <__aeabi_dmul>
 8002678:	4602      	mov	r2, r0
 800267a:	460b      	mov	r3, r1
 800267c:	4690      	mov	r8, r2
 800267e:	4699      	mov	r9, r3
 8002680:	4b73      	ldr	r3, [pc, #460]	@ (8002850 <Current_Loop+0x52c>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f7fd ff7f 	bl	8000588 <__aeabi_f2d>
 800268a:	4604      	mov	r4, r0
 800268c:	460d      	mov	r5, r1
 800268e:	4b74      	ldr	r3, [pc, #464]	@ (8002860 <Current_Loop+0x53c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4618      	mov	r0, r3
 8002694:	f7fd ff78 	bl	8000588 <__aeabi_f2d>
 8002698:	4602      	mov	r2, r0
 800269a:	460b      	mov	r3, r1
 800269c:	ec43 2b10 	vmov	d0, r2, r3
 80026a0:	f009 fdca 	bl	800c238 <sin>
 80026a4:	ec53 2b10 	vmov	r2, r3, d0
 80026a8:	4620      	mov	r0, r4
 80026aa:	4629      	mov	r1, r5
 80026ac:	f7fd ffc4 	bl	8000638 <__aeabi_dmul>
 80026b0:	4602      	mov	r2, r0
 80026b2:	460b      	mov	r3, r1
 80026b4:	4640      	mov	r0, r8
 80026b6:	4649      	mov	r1, r9
 80026b8:	f7fd fe06 	bl	80002c8 <__aeabi_dsub>
 80026bc:	4602      	mov	r2, r0
 80026be:	460b      	mov	r3, r1
 80026c0:	4610      	mov	r0, r2
 80026c2:	4619      	mov	r1, r3
 80026c4:	f7fe fab0 	bl	8000c28 <__aeabi_d2f>
 80026c8:	4603      	mov	r3, r0
 80026ca:	4a66      	ldr	r2, [pc, #408]	@ (8002864 <Current_Loop+0x540>)
 80026cc:	6013      	str	r3, [r2, #0]
	Vbeta  = Vd * sin(theta) + Vq * cos(theta);
 80026ce:	4b61      	ldr	r3, [pc, #388]	@ (8002854 <Current_Loop+0x530>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fd ff58 	bl	8000588 <__aeabi_f2d>
 80026d8:	4604      	mov	r4, r0
 80026da:	460d      	mov	r5, r1
 80026dc:	4b60      	ldr	r3, [pc, #384]	@ (8002860 <Current_Loop+0x53c>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7fd ff51 	bl	8000588 <__aeabi_f2d>
 80026e6:	4602      	mov	r2, r0
 80026e8:	460b      	mov	r3, r1
 80026ea:	ec43 2b10 	vmov	d0, r2, r3
 80026ee:	f009 fda3 	bl	800c238 <sin>
 80026f2:	ec53 2b10 	vmov	r2, r3, d0
 80026f6:	4620      	mov	r0, r4
 80026f8:	4629      	mov	r1, r5
 80026fa:	f7fd ff9d 	bl	8000638 <__aeabi_dmul>
 80026fe:	4602      	mov	r2, r0
 8002700:	460b      	mov	r3, r1
 8002702:	4690      	mov	r8, r2
 8002704:	4699      	mov	r9, r3
 8002706:	4b52      	ldr	r3, [pc, #328]	@ (8002850 <Current_Loop+0x52c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f7fd ff3c 	bl	8000588 <__aeabi_f2d>
 8002710:	4604      	mov	r4, r0
 8002712:	460d      	mov	r5, r1
 8002714:	4b52      	ldr	r3, [pc, #328]	@ (8002860 <Current_Loop+0x53c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f7fd ff35 	bl	8000588 <__aeabi_f2d>
 800271e:	4602      	mov	r2, r0
 8002720:	460b      	mov	r3, r1
 8002722:	ec43 2b10 	vmov	d0, r2, r3
 8002726:	f009 fd33 	bl	800c190 <cos>
 800272a:	ec53 2b10 	vmov	r2, r3, d0
 800272e:	4620      	mov	r0, r4
 8002730:	4629      	mov	r1, r5
 8002732:	f7fd ff81 	bl	8000638 <__aeabi_dmul>
 8002736:	4602      	mov	r2, r0
 8002738:	460b      	mov	r3, r1
 800273a:	4640      	mov	r0, r8
 800273c:	4649      	mov	r1, r9
 800273e:	f7fd fdc5 	bl	80002cc <__adddf3>
 8002742:	4602      	mov	r2, r0
 8002744:	460b      	mov	r3, r1
 8002746:	4610      	mov	r0, r2
 8002748:	4619      	mov	r1, r3
 800274a:	f7fe fa6d 	bl	8000c28 <__aeabi_d2f>
 800274e:	4603      	mov	r3, r0
 8002750:	4a45      	ldr	r2, [pc, #276]	@ (8002868 <Current_Loop+0x544>)
 8002752:	6013      	str	r3, [r2, #0]

    Va = Valpha;
 8002754:	4b43      	ldr	r3, [pc, #268]	@ (8002864 <Current_Loop+0x540>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a44      	ldr	r2, [pc, #272]	@ (800286c <Current_Loop+0x548>)
 800275a:	6013      	str	r3, [r2, #0]
    Vb = -0.5 * Valpha + (sqrtf(3) / 2) * Vbeta ;
 800275c:	4b41      	ldr	r3, [pc, #260]	@ (8002864 <Current_Loop+0x540>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	f7fd ff11 	bl	8000588 <__aeabi_f2d>
 8002766:	f04f 0200 	mov.w	r2, #0
 800276a:	4b41      	ldr	r3, [pc, #260]	@ (8002870 <Current_Loop+0x54c>)
 800276c:	f7fd ff64 	bl	8000638 <__aeabi_dmul>
 8002770:	4602      	mov	r2, r0
 8002772:	460b      	mov	r3, r1
 8002774:	4614      	mov	r4, r2
 8002776:	461d      	mov	r5, r3
 8002778:	4b3b      	ldr	r3, [pc, #236]	@ (8002868 <Current_Loop+0x544>)
 800277a:	edd3 7a00 	vldr	s15, [r3]
 800277e:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8002874 <Current_Loop+0x550>
 8002782:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002786:	ee17 0a90 	vmov	r0, s15
 800278a:	f7fd fefd 	bl	8000588 <__aeabi_f2d>
 800278e:	4602      	mov	r2, r0
 8002790:	460b      	mov	r3, r1
 8002792:	4620      	mov	r0, r4
 8002794:	4629      	mov	r1, r5
 8002796:	f7fd fd99 	bl	80002cc <__adddf3>
 800279a:	4602      	mov	r2, r0
 800279c:	460b      	mov	r3, r1
 800279e:	4610      	mov	r0, r2
 80027a0:	4619      	mov	r1, r3
 80027a2:	f7fe fa41 	bl	8000c28 <__aeabi_d2f>
 80027a6:	4603      	mov	r3, r0
 80027a8:	4a33      	ldr	r2, [pc, #204]	@ (8002878 <Current_Loop+0x554>)
 80027aa:	6013      	str	r3, [r2, #0]
    Vc = -0.5 * Valpha - (sqrtf(3) / 2) * Vbeta ;
 80027ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002864 <Current_Loop+0x540>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7fd fee9 	bl	8000588 <__aeabi_f2d>
 80027b6:	f04f 0200 	mov.w	r2, #0
 80027ba:	4b2d      	ldr	r3, [pc, #180]	@ (8002870 <Current_Loop+0x54c>)
 80027bc:	f7fd ff3c 	bl	8000638 <__aeabi_dmul>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	4614      	mov	r4, r2
 80027c6:	461d      	mov	r5, r3
 80027c8:	4b27      	ldr	r3, [pc, #156]	@ (8002868 <Current_Loop+0x544>)
 80027ca:	edd3 7a00 	vldr	s15, [r3]
 80027ce:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8002874 <Current_Loop+0x550>
 80027d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027d6:	ee17 0a90 	vmov	r0, s15
 80027da:	f7fd fed5 	bl	8000588 <__aeabi_f2d>
 80027de:	4602      	mov	r2, r0
 80027e0:	460b      	mov	r3, r1
 80027e2:	4620      	mov	r0, r4
 80027e4:	4629      	mov	r1, r5
 80027e6:	f7fd fd6f 	bl	80002c8 <__aeabi_dsub>
 80027ea:	4602      	mov	r2, r0
 80027ec:	460b      	mov	r3, r1
 80027ee:	4610      	mov	r0, r2
 80027f0:	4619      	mov	r1, r3
 80027f2:	f7fe fa19 	bl	8000c28 <__aeabi_d2f>
 80027f6:	4603      	mov	r3, r0
 80027f8:	4a20      	ldr	r2, [pc, #128]	@ (800287c <Current_Loop+0x558>)
 80027fa:	6013      	str	r3, [r2, #0]

    setpwm(Va, Vb, Vc);
 80027fc:	4b1b      	ldr	r3, [pc, #108]	@ (800286c <Current_Loop+0x548>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4618      	mov	r0, r3
 8002802:	f7fd fec1 	bl	8000588 <__aeabi_f2d>
 8002806:	4604      	mov	r4, r0
 8002808:	460d      	mov	r5, r1
 800280a:	4b1b      	ldr	r3, [pc, #108]	@ (8002878 <Current_Loop+0x554>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f7fd feba 	bl	8000588 <__aeabi_f2d>
 8002814:	4680      	mov	r8, r0
 8002816:	4689      	mov	r9, r1
 8002818:	4b18      	ldr	r3, [pc, #96]	@ (800287c <Current_Loop+0x558>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4618      	mov	r0, r3
 800281e:	f7fd feb3 	bl	8000588 <__aeabi_f2d>
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
 8002826:	ec43 2b12 	vmov	d2, r2, r3
 800282a:	ec49 8b11 	vmov	d1, r8, r9
 800282e:	ec45 4b10 	vmov	d0, r4, r5
 8002832:	f7fe ff25 	bl	8001680 <setpwm>
    HAL_ADC_Start_DMA(&hadc2, &adc_dma_value, 1);
 8002836:	2201      	movs	r2, #1
 8002838:	4911      	ldr	r1, [pc, #68]	@ (8002880 <Current_Loop+0x55c>)
 800283a:	4812      	ldr	r0, [pc, #72]	@ (8002884 <Current_Loop+0x560>)
 800283c:	f001 fc12 	bl	8004064 <HAL_ADC_Start_DMA>
}
 8002840:	bf00      	nop
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800284a:	bf00      	nop
 800284c:	200002c4 	.word	0x200002c4
 8002850:	200002b0 	.word	0x200002b0
 8002854:	200002a8 	.word	0x200002a8
 8002858:	200006b0 	.word	0x200006b0
 800285c:	200006b4 	.word	0x200006b4
 8002860:	200002a4 	.word	0x200002a4
 8002864:	20000258 	.word	0x20000258
 8002868:	2000025c 	.word	0x2000025c
 800286c:	20000260 	.word	0x20000260
 8002870:	bfe00000 	.word	0xbfe00000
 8002874:	3f5db3d7 	.word	0x3f5db3d7
 8002878:	20000264 	.word	0x20000264
 800287c:	20000268 	.word	0x20000268
 8002880:	200002e0 	.word	0x200002e0
 8002884:	20000378 	.word	0x20000378

08002888 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002888:	b5b0      	push	{r4, r5, r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800288e:	f001 f9ff 	bl	8003c90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002892:	f000 f8b9 	bl	8002a08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002896:	f000 fc67 	bl	8003168 <MX_GPIO_Init>
  MX_DMA_Init();
 800289a:	f000 fc2f 	bl	80030fc <MX_DMA_Init>
  MX_TIM1_Init();
 800289e:	f000 fa37 	bl	8002d10 <MX_TIM1_Init>
  MX_ADC1_Init();
 80028a2:	f000 f925 	bl	8002af0 <MX_ADC1_Init>
  MX_SPI1_Init();
 80028a6:	f000 f9fb 	bl	8002ca0 <MX_SPI1_Init>
  MX_TIM3_Init();
 80028aa:	f000 fb35 	bl	8002f18 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80028ae:	f000 fbfb 	bl	80030a8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80028b2:	f000 fae5 	bl	8002e80 <MX_TIM2_Init>
  MX_TIM8_Init();
 80028b6:	f000 fb7d 	bl	8002fb4 <MX_TIM8_Init>
  MX_UART4_Init();
 80028ba:	f000 fbcb 	bl	8003054 <MX_UART4_Init>
  MX_ADC2_Init();
 80028be:	f000 f99d 	bl	8002bfc <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 80028c2:	483f      	ldr	r0, [pc, #252]	@ (80029c0 <main+0x138>)
 80028c4:	f004 fcfe 	bl	80072c4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80028c8:	2100      	movs	r1, #0
 80028ca:	483d      	ldr	r0, [pc, #244]	@ (80029c0 <main+0x138>)
 80028cc:	f004 fe2c 	bl	8007528 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80028d0:	2104      	movs	r1, #4
 80028d2:	483b      	ldr	r0, [pc, #236]	@ (80029c0 <main+0x138>)
 80028d4:	f004 fe28 	bl	8007528 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80028d8:	2108      	movs	r1, #8
 80028da:	4839      	ldr	r0, [pc, #228]	@ (80029c0 <main+0x138>)
 80028dc:	f004 fe24 	bl	8007528 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim8);
 80028e0:	4838      	ldr	r0, [pc, #224]	@ (80029c4 <main+0x13c>)
 80028e2:	f004 fd57 	bl	8007394 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim3);
 80028e6:	4838      	ldr	r0, [pc, #224]	@ (80029c8 <main+0x140>)
 80028e8:	f004 fcec 	bl	80072c4 <HAL_TIM_Base_Start>
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 80028ec:	4b37      	ldr	r3, [pc, #220]	@ (80029cc <main+0x144>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2200      	movs	r2, #0
 80028f2:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_TIM_Base_Start(&htim2);
 80028f4:	4835      	ldr	r0, [pc, #212]	@ (80029cc <main+0x144>)
 80028f6:	f004 fce5 	bl	80072c4 <HAL_TIM_Base_Start>
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 80028fa:	4835      	ldr	r0, [pc, #212]	@ (80029d0 <main+0x148>)
 80028fc:	f001 ff90 	bl	8004820 <HAL_ADCEx_InjectedStart_IT>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8002900:	2201      	movs	r2, #1
 8002902:	2108      	movs	r1, #8
 8002904:	4833      	ldr	r0, [pc, #204]	@ (80029d4 <main+0x14c>)
 8002906:	f003 f8d7 	bl	8005ab8 <HAL_GPIO_WritePin>
  HAL_ADC_Start_DMA(&hadc2, &adc_dma_value, 1);
 800290a:	2201      	movs	r2, #1
 800290c:	4932      	ldr	r1, [pc, #200]	@ (80029d8 <main+0x150>)
 800290e:	4833      	ldr	r0, [pc, #204]	@ (80029dc <main+0x154>)
 8002910:	f001 fba8 	bl	8004064 <HAL_ADC_Start_DMA>
  angle = AS5147U_GetAngleRad();
 8002914:	f7fe fc58 	bl	80011c8 <AS5147U_GetAngleRad>
 8002918:	eef0 7a40 	vmov.f32	s15, s0
 800291c:	4b30      	ldr	r3, [pc, #192]	@ (80029e0 <main+0x158>)
 800291e:	edc3 7a00 	vstr	s15, [r3]
  alignRotor();
 8002922:	f7fe fd2d 	bl	8001380 <alignRotor>
  position_loop();
 8002926:	f7ff fa2b 	bl	8001d80 <position_loop>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (flag_current_loop)
 800292a:	4b2e      	ldr	r3, [pc, #184]	@ (80029e4 <main+0x15c>)
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	b2db      	uxtb	r3, r3
 8002930:	2b00      	cmp	r3, #0
 8002932:	d01b      	beq.n	800296c <main+0xe4>
	     {
	         flag_current_loop = 0;
 8002934:	4b2b      	ldr	r3, [pc, #172]	@ (80029e4 <main+0x15c>)
 8002936:	2200      	movs	r2, #0
 8002938:	701a      	strb	r2, [r3, #0]
	         update_PID();
 800293a:	f7fe ffff 	bl	800193c <update_PID>
	         Current_Loop();
 800293e:	f7ff fcf1 	bl	8002324 <Current_Loop>
	         Speed_Loop();
 8002942:	f7ff fb65 	bl	8002010 <Speed_Loop>
	         i++;
 8002946:	4b28      	ldr	r3, [pc, #160]	@ (80029e8 <main+0x160>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	3301      	adds	r3, #1
 800294c:	4a26      	ldr	r2, [pc, #152]	@ (80029e8 <main+0x160>)
 800294e:	6013      	str	r3, [r2, #0]
	         position_loop_counter++;
 8002950:	4b26      	ldr	r3, [pc, #152]	@ (80029ec <main+0x164>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	3301      	adds	r3, #1
 8002956:	4a25      	ldr	r2, [pc, #148]	@ (80029ec <main+0x164>)
 8002958:	6013      	str	r3, [r2, #0]
	         if(position_loop_counter >= 12)
 800295a:	4b24      	ldr	r3, [pc, #144]	@ (80029ec <main+0x164>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2b0b      	cmp	r3, #11
 8002960:	dd04      	ble.n	800296c <main+0xe4>
	         {
       	     position_loop();
 8002962:	f7ff fa0d 	bl	8001d80 <position_loop>
          	 position_loop_counter = 0;
 8002966:	4b21      	ldr	r3, [pc, #132]	@ (80029ec <main+0x164>)
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]
//	                   {
//	                	   theta_ref -= M_PI/2;
//	                	   i = 0;
//	                   }
	     }
	      if (!uart_busy)
 800296c:	4b20      	ldr	r3, [pc, #128]	@ (80029f0 <main+0x168>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1d9      	bne.n	800292a <main+0xa2>
	    	  //in xung pwm
//	    	   	  sprintf((char*)array_iq, "%u\t%u\t%u\t\r\n", PWM_A, PWM_B, PWM_C);
//			      uart_busy = 1; // Đánh dấu UART đang bận
//				  HAL_UART_Transmit_DMA(&huart2, array_iq, strlen((char*)array_iq));

	    	    sprintf((char*)array_iq, "%f\t%f\t\r\n", i_d, i_q);
 8002976:	4b1f      	ldr	r3, [pc, #124]	@ (80029f4 <main+0x16c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f7fd fe04 	bl	8000588 <__aeabi_f2d>
 8002980:	4604      	mov	r4, r0
 8002982:	460d      	mov	r5, r1
 8002984:	4b1c      	ldr	r3, [pc, #112]	@ (80029f8 <main+0x170>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4618      	mov	r0, r3
 800298a:	f7fd fdfd 	bl	8000588 <__aeabi_f2d>
 800298e:	4602      	mov	r2, r0
 8002990:	460b      	mov	r3, r1
 8002992:	e9cd 2300 	strd	r2, r3, [sp]
 8002996:	4622      	mov	r2, r4
 8002998:	462b      	mov	r3, r5
 800299a:	4918      	ldr	r1, [pc, #96]	@ (80029fc <main+0x174>)
 800299c:	4818      	ldr	r0, [pc, #96]	@ (8002a00 <main+0x178>)
 800299e:	f007 fa9f 	bl	8009ee0 <siprintf>
	    	    uart_busy = 1; // Đánh dấu UART đang bận
 80029a2:	4b13      	ldr	r3, [pc, #76]	@ (80029f0 <main+0x168>)
 80029a4:	2201      	movs	r2, #1
 80029a6:	701a      	strb	r2, [r3, #0]
	    	    HAL_UART_Transmit_DMA(&huart2, array_iq, strlen((char*)array_iq));
 80029a8:	4815      	ldr	r0, [pc, #84]	@ (8002a00 <main+0x178>)
 80029aa:	f7fd fc81 	bl	80002b0 <strlen>
 80029ae:	4603      	mov	r3, r0
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	461a      	mov	r2, r3
 80029b4:	4912      	ldr	r1, [pc, #72]	@ (8002a00 <main+0x178>)
 80029b6:	4813      	ldr	r0, [pc, #76]	@ (8002a04 <main+0x17c>)
 80029b8:	f005 fd6e 	bl	8008498 <HAL_UART_Transmit_DMA>
	  if (flag_current_loop)
 80029bc:	e7b5      	b.n	800292a <main+0xa2>
 80029be:	bf00      	nop
 80029c0:	20000478 	.word	0x20000478
 80029c4:	20000550 	.word	0x20000550
 80029c8:	20000508 	.word	0x20000508
 80029cc:	200004c0 	.word	0x200004c0
 80029d0:	20000330 	.word	0x20000330
 80029d4:	40020400 	.word	0x40020400
 80029d8:	200002e0 	.word	0x200002e0
 80029dc:	20000378 	.word	0x20000378
 80029e0:	2000026c 	.word	0x2000026c
 80029e4:	200002dc 	.word	0x200002dc
 80029e8:	200002d8 	.word	0x200002d8
 80029ec:	200002d4 	.word	0x200002d4
 80029f0:	200002dd 	.word	0x200002dd
 80029f4:	20000250 	.word	0x20000250
 80029f8:	20000254 	.word	0x20000254
 80029fc:	0800d510 	.word	0x0800d510
 8002a00:	200002f4 	.word	0x200002f4
 8002a04:	200005e0 	.word	0x200005e0

08002a08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b094      	sub	sp, #80	@ 0x50
 8002a0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a0e:	f107 031c 	add.w	r3, r7, #28
 8002a12:	2234      	movs	r2, #52	@ 0x34
 8002a14:	2100      	movs	r1, #0
 8002a16:	4618      	mov	r0, r3
 8002a18:	f007 fac5 	bl	8009fa6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a1c:	f107 0308 	add.w	r3, r7, #8
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	605a      	str	r2, [r3, #4]
 8002a26:	609a      	str	r2, [r3, #8]
 8002a28:	60da      	str	r2, [r3, #12]
 8002a2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	607b      	str	r3, [r7, #4]
 8002a30:	4b2d      	ldr	r3, [pc, #180]	@ (8002ae8 <SystemClock_Config+0xe0>)
 8002a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a34:	4a2c      	ldr	r2, [pc, #176]	@ (8002ae8 <SystemClock_Config+0xe0>)
 8002a36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a3c:	4b2a      	ldr	r3, [pc, #168]	@ (8002ae8 <SystemClock_Config+0xe0>)
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a44:	607b      	str	r3, [r7, #4]
 8002a46:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a48:	2300      	movs	r3, #0
 8002a4a:	603b      	str	r3, [r7, #0]
 8002a4c:	4b27      	ldr	r3, [pc, #156]	@ (8002aec <SystemClock_Config+0xe4>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a26      	ldr	r2, [pc, #152]	@ (8002aec <SystemClock_Config+0xe4>)
 8002a52:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a56:	6013      	str	r3, [r2, #0]
 8002a58:	4b24      	ldr	r3, [pc, #144]	@ (8002aec <SystemClock_Config+0xe4>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002a60:	603b      	str	r3, [r7, #0]
 8002a62:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a64:	2302      	movs	r3, #2
 8002a66:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a6c:	2310      	movs	r3, #16
 8002a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a70:	2302      	movs	r3, #2
 8002a72:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a74:	2300      	movs	r3, #0
 8002a76:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002a78:	2310      	movs	r3, #16
 8002a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8002a7c:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8002a80:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a82:	2302      	movs	r3, #2
 8002a84:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002a86:	2302      	movs	r3, #2
 8002a88:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a8e:	f107 031c 	add.w	r3, r7, #28
 8002a92:	4618      	mov	r0, r3
 8002a94:	f003 fbc4 	bl	8006220 <HAL_RCC_OscConfig>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002a9e:	f000 fcf5 	bl	800348c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002aa2:	f003 f823 	bl	8005aec <HAL_PWREx_EnableOverDrive>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8002aac:	f000 fcee 	bl	800348c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ab0:	230f      	movs	r3, #15
 8002ab2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002abc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002ac0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002ac2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ac6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002ac8:	f107 0308 	add.w	r3, r7, #8
 8002acc:	2105      	movs	r1, #5
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f003 f85c 	bl	8005b8c <HAL_RCC_ClockConfig>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8002ada:	f000 fcd7 	bl	800348c <Error_Handler>
  }
}
 8002ade:	bf00      	nop
 8002ae0:	3750      	adds	r7, #80	@ 0x50
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	40007000 	.word	0x40007000

08002af0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b08c      	sub	sp, #48	@ 0x30
 8002af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002af6:	f107 0320 	add.w	r3, r7, #32
 8002afa:	2200      	movs	r2, #0
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	605a      	str	r2, [r3, #4]
 8002b00:	609a      	str	r2, [r3, #8]
 8002b02:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8002b04:	463b      	mov	r3, r7
 8002b06:	2220      	movs	r2, #32
 8002b08:	2100      	movs	r1, #0
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f007 fa4b 	bl	8009fa6 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002b10:	4b37      	ldr	r3, [pc, #220]	@ (8002bf0 <MX_ADC1_Init+0x100>)
 8002b12:	4a38      	ldr	r2, [pc, #224]	@ (8002bf4 <MX_ADC1_Init+0x104>)
 8002b14:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8002b16:	4b36      	ldr	r3, [pc, #216]	@ (8002bf0 <MX_ADC1_Init+0x100>)
 8002b18:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002b1c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002b1e:	4b34      	ldr	r3, [pc, #208]	@ (8002bf0 <MX_ADC1_Init+0x100>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002b24:	4b32      	ldr	r3, [pc, #200]	@ (8002bf0 <MX_ADC1_Init+0x100>)
 8002b26:	2201      	movs	r2, #1
 8002b28:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002b2a:	4b31      	ldr	r3, [pc, #196]	@ (8002bf0 <MX_ADC1_Init+0x100>)
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002b30:	4b2f      	ldr	r3, [pc, #188]	@ (8002bf0 <MX_ADC1_Init+0x100>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002b38:	4b2d      	ldr	r3, [pc, #180]	@ (8002bf0 <MX_ADC1_Init+0x100>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b3e:	4b2c      	ldr	r3, [pc, #176]	@ (8002bf0 <MX_ADC1_Init+0x100>)
 8002b40:	4a2d      	ldr	r2, [pc, #180]	@ (8002bf8 <MX_ADC1_Init+0x108>)
 8002b42:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b44:	4b2a      	ldr	r3, [pc, #168]	@ (8002bf0 <MX_ADC1_Init+0x100>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002b4a:	4b29      	ldr	r3, [pc, #164]	@ (8002bf0 <MX_ADC1_Init+0x100>)
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002b50:	4b27      	ldr	r3, [pc, #156]	@ (8002bf0 <MX_ADC1_Init+0x100>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002b58:	4b25      	ldr	r3, [pc, #148]	@ (8002bf0 <MX_ADC1_Init+0x100>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002b5e:	4824      	ldr	r0, [pc, #144]	@ (8002bf0 <MX_ADC1_Init+0x100>)
 8002b60:	f001 f92c 	bl	8003dbc <HAL_ADC_Init>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 8002b6a:	f000 fc8f 	bl	800348c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8002b72:	2301      	movs	r3, #1
 8002b74:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002b76:	2307      	movs	r3, #7
 8002b78:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b7a:	f107 0320 	add.w	r3, r7, #32
 8002b7e:	4619      	mov	r1, r3
 8002b80:	481b      	ldr	r0, [pc, #108]	@ (8002bf0 <MX_ADC1_Init+0x100>)
 8002b82:	f001 fb9d 	bl	80042c0 <HAL_ADC_ConfigChannel>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8002b8c:	f000 fc7e 	bl	800348c <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 8002b90:	2300      	movs	r3, #0
 8002b92:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8002b94:	2301      	movs	r3, #1
 8002b96:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 2;
 8002b98:	2302      	movs	r3, #2
 8002b9a:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002b9c:	2307      	movs	r3, #7
 8002b9e:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 8002ba0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002ba4:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_TRGO;
 8002ba6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002baa:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8002bac:	2300      	movs	r3, #0
 8002bae:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = ENABLE;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8002bb8:	463b      	mov	r3, r7
 8002bba:	4619      	mov	r1, r3
 8002bbc:	480c      	ldr	r0, [pc, #48]	@ (8002bf0 <MX_ADC1_Init+0x100>)
 8002bbe:	f001 ff39 	bl	8004a34 <HAL_ADCEx_InjectedConfigChannel>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8002bc8:	f000 fc60 	bl	800348c <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8002bcc:	2304      	movs	r3, #4
 8002bce:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8002bd4:	463b      	mov	r3, r7
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	4805      	ldr	r0, [pc, #20]	@ (8002bf0 <MX_ADC1_Init+0x100>)
 8002bda:	f001 ff2b 	bl	8004a34 <HAL_ADCEx_InjectedConfigChannel>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8002be4:	f000 fc52 	bl	800348c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002be8:	bf00      	nop
 8002bea:	3730      	adds	r7, #48	@ 0x30
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	20000330 	.word	0x20000330
 8002bf4:	40012000 	.word	0x40012000
 8002bf8:	0f000001 	.word	0x0f000001

08002bfc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002c02:	463b      	mov	r3, r7
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	605a      	str	r2, [r3, #4]
 8002c0a:	609a      	str	r2, [r3, #8]
 8002c0c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8002c0e:	4b21      	ldr	r3, [pc, #132]	@ (8002c94 <MX_ADC2_Init+0x98>)
 8002c10:	4a21      	ldr	r2, [pc, #132]	@ (8002c98 <MX_ADC2_Init+0x9c>)
 8002c12:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8002c14:	4b1f      	ldr	r3, [pc, #124]	@ (8002c94 <MX_ADC2_Init+0x98>)
 8002c16:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002c1a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002c1c:	4b1d      	ldr	r3, [pc, #116]	@ (8002c94 <MX_ADC2_Init+0x98>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8002c22:	4b1c      	ldr	r3, [pc, #112]	@ (8002c94 <MX_ADC2_Init+0x98>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002c28:	4b1a      	ldr	r3, [pc, #104]	@ (8002c94 <MX_ADC2_Init+0x98>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002c2e:	4b19      	ldr	r3, [pc, #100]	@ (8002c94 <MX_ADC2_Init+0x98>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002c36:	4b17      	ldr	r3, [pc, #92]	@ (8002c94 <MX_ADC2_Init+0x98>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002c3c:	4b15      	ldr	r3, [pc, #84]	@ (8002c94 <MX_ADC2_Init+0x98>)
 8002c3e:	4a17      	ldr	r2, [pc, #92]	@ (8002c9c <MX_ADC2_Init+0xa0>)
 8002c40:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c42:	4b14      	ldr	r3, [pc, #80]	@ (8002c94 <MX_ADC2_Init+0x98>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8002c48:	4b12      	ldr	r3, [pc, #72]	@ (8002c94 <MX_ADC2_Init+0x98>)
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002c4e:	4b11      	ldr	r3, [pc, #68]	@ (8002c94 <MX_ADC2_Init+0x98>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002c56:	4b0f      	ldr	r3, [pc, #60]	@ (8002c94 <MX_ADC2_Init+0x98>)
 8002c58:	2201      	movs	r2, #1
 8002c5a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002c5c:	480d      	ldr	r0, [pc, #52]	@ (8002c94 <MX_ADC2_Init+0x98>)
 8002c5e:	f001 f8ad 	bl	8003dbc <HAL_ADC_Init>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8002c68:	f000 fc10 	bl	800348c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002c70:	2301      	movs	r3, #1
 8002c72:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8002c74:	2301      	movs	r3, #1
 8002c76:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002c78:	463b      	mov	r3, r7
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4805      	ldr	r0, [pc, #20]	@ (8002c94 <MX_ADC2_Init+0x98>)
 8002c7e:	f001 fb1f 	bl	80042c0 <HAL_ADC_ConfigChannel>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8002c88:	f000 fc00 	bl	800348c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002c8c:	bf00      	nop
 8002c8e:	3710      	adds	r7, #16
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	20000378 	.word	0x20000378
 8002c98:	40012100 	.word	0x40012100
 8002c9c:	0f000001 	.word	0x0f000001

08002ca0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002ca4:	4b18      	ldr	r3, [pc, #96]	@ (8002d08 <MX_SPI1_Init+0x68>)
 8002ca6:	4a19      	ldr	r2, [pc, #100]	@ (8002d0c <MX_SPI1_Init+0x6c>)
 8002ca8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002caa:	4b17      	ldr	r3, [pc, #92]	@ (8002d08 <MX_SPI1_Init+0x68>)
 8002cac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002cb0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002cb2:	4b15      	ldr	r3, [pc, #84]	@ (8002d08 <MX_SPI1_Init+0x68>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8002cb8:	4b13      	ldr	r3, [pc, #76]	@ (8002d08 <MX_SPI1_Init+0x68>)
 8002cba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002cbe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cc0:	4b11      	ldr	r3, [pc, #68]	@ (8002d08 <MX_SPI1_Init+0x68>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002cc6:	4b10      	ldr	r3, [pc, #64]	@ (8002d08 <MX_SPI1_Init+0x68>)
 8002cc8:	2201      	movs	r2, #1
 8002cca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002ccc:	4b0e      	ldr	r3, [pc, #56]	@ (8002d08 <MX_SPI1_Init+0x68>)
 8002cce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cd2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002d08 <MX_SPI1_Init+0x68>)
 8002cd6:	2218      	movs	r2, #24
 8002cd8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cda:	4b0b      	ldr	r3, [pc, #44]	@ (8002d08 <MX_SPI1_Init+0x68>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ce0:	4b09      	ldr	r3, [pc, #36]	@ (8002d08 <MX_SPI1_Init+0x68>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ce6:	4b08      	ldr	r3, [pc, #32]	@ (8002d08 <MX_SPI1_Init+0x68>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002cec:	4b06      	ldr	r3, [pc, #24]	@ (8002d08 <MX_SPI1_Init+0x68>)
 8002cee:	220a      	movs	r2, #10
 8002cf0:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002cf2:	4805      	ldr	r0, [pc, #20]	@ (8002d08 <MX_SPI1_Init+0x68>)
 8002cf4:	f003 fd32 	bl	800675c <HAL_SPI_Init>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8002cfe:	f000 fbc5 	bl	800348c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d02:	bf00      	nop
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	20000420 	.word	0x20000420
 8002d0c:	40013000 	.word	0x40013000

08002d10 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b096      	sub	sp, #88	@ 0x58
 8002d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d16:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	605a      	str	r2, [r3, #4]
 8002d20:	609a      	str	r2, [r3, #8]
 8002d22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d24:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]
 8002d2c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d32:	2200      	movs	r2, #0
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	605a      	str	r2, [r3, #4]
 8002d38:	609a      	str	r2, [r3, #8]
 8002d3a:	60da      	str	r2, [r3, #12]
 8002d3c:	611a      	str	r2, [r3, #16]
 8002d3e:	615a      	str	r2, [r3, #20]
 8002d40:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002d42:	1d3b      	adds	r3, r7, #4
 8002d44:	2220      	movs	r2, #32
 8002d46:	2100      	movs	r1, #0
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f007 f92c 	bl	8009fa6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002d4e:	4b4a      	ldr	r3, [pc, #296]	@ (8002e78 <MX_TIM1_Init+0x168>)
 8002d50:	4a4a      	ldr	r2, [pc, #296]	@ (8002e7c <MX_TIM1_Init+0x16c>)
 8002d52:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002d54:	4b48      	ldr	r3, [pc, #288]	@ (8002e78 <MX_TIM1_Init+0x168>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002d5a:	4b47      	ldr	r3, [pc, #284]	@ (8002e78 <MX_TIM1_Init+0x168>)
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2999;
 8002d60:	4b45      	ldr	r3, [pc, #276]	@ (8002e78 <MX_TIM1_Init+0x168>)
 8002d62:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8002d66:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d68:	4b43      	ldr	r3, [pc, #268]	@ (8002e78 <MX_TIM1_Init+0x168>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002d6e:	4b42      	ldr	r3, [pc, #264]	@ (8002e78 <MX_TIM1_Init+0x168>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d74:	4b40      	ldr	r3, [pc, #256]	@ (8002e78 <MX_TIM1_Init+0x168>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002d7a:	483f      	ldr	r0, [pc, #252]	@ (8002e78 <MX_TIM1_Init+0x168>)
 8002d7c:	f004 fa52 	bl	8007224 <HAL_TIM_Base_Init>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002d86:	f000 fb81 	bl	800348c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d8e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002d90:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002d94:	4619      	mov	r1, r3
 8002d96:	4838      	ldr	r0, [pc, #224]	@ (8002e78 <MX_TIM1_Init+0x168>)
 8002d98:	f004 fe40 	bl	8007a1c <HAL_TIM_ConfigClockSource>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002da2:	f000 fb73 	bl	800348c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002da6:	4834      	ldr	r0, [pc, #208]	@ (8002e78 <MX_TIM1_Init+0x168>)
 8002da8:	f004 fb64 	bl	8007474 <HAL_TIM_PWM_Init>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002db2:	f000 fb6b 	bl	800348c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002db6:	2320      	movs	r3, #32
 8002db8:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002dbe:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	482c      	ldr	r0, [pc, #176]	@ (8002e78 <MX_TIM1_Init+0x168>)
 8002dc6:	f005 fa35 	bl	8008234 <HAL_TIMEx_MasterConfigSynchronization>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002dd0:	f000 fb5c 	bl	800348c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002dd4:	2370      	movs	r3, #112	@ 0x70
 8002dd6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002de0:	2300      	movs	r3, #0
 8002de2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002de4:	2304      	movs	r3, #4
 8002de6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002de8:	2300      	movs	r3, #0
 8002dea:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002dec:	2300      	movs	r3, #0
 8002dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002df0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002df4:	2200      	movs	r2, #0
 8002df6:	4619      	mov	r1, r3
 8002df8:	481f      	ldr	r0, [pc, #124]	@ (8002e78 <MX_TIM1_Init+0x168>)
 8002dfa:	f004 fd4d 	bl	8007898 <HAL_TIM_PWM_ConfigChannel>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002e04:	f000 fb42 	bl	800348c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e0c:	2204      	movs	r2, #4
 8002e0e:	4619      	mov	r1, r3
 8002e10:	4819      	ldr	r0, [pc, #100]	@ (8002e78 <MX_TIM1_Init+0x168>)
 8002e12:	f004 fd41 	bl	8007898 <HAL_TIM_PWM_ConfigChannel>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002e1c:	f000 fb36 	bl	800348c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002e20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e24:	2208      	movs	r2, #8
 8002e26:	4619      	mov	r1, r3
 8002e28:	4813      	ldr	r0, [pc, #76]	@ (8002e78 <MX_TIM1_Init+0x168>)
 8002e2a:	f004 fd35 	bl	8007898 <HAL_TIM_PWM_ConfigChannel>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d001      	beq.n	8002e38 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002e34:	f000 fb2a 	bl	800348c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002e40:	2300      	movs	r3, #0
 8002e42:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002e44:	2300      	movs	r3, #0
 8002e46:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002e4c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e50:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002e52:	2300      	movs	r3, #0
 8002e54:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002e56:	1d3b      	adds	r3, r7, #4
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4807      	ldr	r0, [pc, #28]	@ (8002e78 <MX_TIM1_Init+0x168>)
 8002e5c:	f005 fa66 	bl	800832c <HAL_TIMEx_ConfigBreakDeadTime>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8002e66:	f000 fb11 	bl	800348c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002e6a:	4803      	ldr	r0, [pc, #12]	@ (8002e78 <MX_TIM1_Init+0x168>)
 8002e6c:	f000 fcac 	bl	80037c8 <HAL_TIM_MspPostInit>

}
 8002e70:	bf00      	nop
 8002e72:	3758      	adds	r7, #88	@ 0x58
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	20000478 	.word	0x20000478
 8002e7c:	40010000 	.word	0x40010000

08002e80 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e86:	f107 0308 	add.w	r3, r7, #8
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	601a      	str	r2, [r3, #0]
 8002e8e:	605a      	str	r2, [r3, #4]
 8002e90:	609a      	str	r2, [r3, #8]
 8002e92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e94:	463b      	mov	r3, r7
 8002e96:	2200      	movs	r2, #0
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e9c:	4b1d      	ldr	r3, [pc, #116]	@ (8002f14 <MX_TIM2_Init+0x94>)
 8002e9e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002ea2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 44;
 8002ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8002f14 <MX_TIM2_Init+0x94>)
 8002ea6:	222c      	movs	r2, #44	@ 0x2c
 8002ea8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eaa:	4b1a      	ldr	r3, [pc, #104]	@ (8002f14 <MX_TIM2_Init+0x94>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002eb0:	4b18      	ldr	r3, [pc, #96]	@ (8002f14 <MX_TIM2_Init+0x94>)
 8002eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8002eb6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002eb8:	4b16      	ldr	r3, [pc, #88]	@ (8002f14 <MX_TIM2_Init+0x94>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ebe:	4b15      	ldr	r3, [pc, #84]	@ (8002f14 <MX_TIM2_Init+0x94>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002ec4:	4813      	ldr	r0, [pc, #76]	@ (8002f14 <MX_TIM2_Init+0x94>)
 8002ec6:	f004 f9ad 	bl	8007224 <HAL_TIM_Base_Init>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002ed0:	f000 fadc 	bl	800348c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ed4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ed8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002eda:	f107 0308 	add.w	r3, r7, #8
 8002ede:	4619      	mov	r1, r3
 8002ee0:	480c      	ldr	r0, [pc, #48]	@ (8002f14 <MX_TIM2_Init+0x94>)
 8002ee2:	f004 fd9b 	bl	8007a1c <HAL_TIM_ConfigClockSource>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002eec:	f000 face 	bl	800348c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ef8:	463b      	mov	r3, r7
 8002efa:	4619      	mov	r1, r3
 8002efc:	4805      	ldr	r0, [pc, #20]	@ (8002f14 <MX_TIM2_Init+0x94>)
 8002efe:	f005 f999 	bl	8008234 <HAL_TIMEx_MasterConfigSynchronization>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002f08:	f000 fac0 	bl	800348c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002f0c:	bf00      	nop
 8002f0e:	3718      	adds	r7, #24
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	200004c0 	.word	0x200004c0

08002f18 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f1e:	f107 0308 	add.w	r3, r7, #8
 8002f22:	2200      	movs	r2, #0
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	605a      	str	r2, [r3, #4]
 8002f28:	609a      	str	r2, [r3, #8]
 8002f2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f2c:	463b      	mov	r3, r7
 8002f2e:	2200      	movs	r2, #0
 8002f30:	601a      	str	r2, [r3, #0]
 8002f32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002f34:	4b1d      	ldr	r3, [pc, #116]	@ (8002fac <MX_TIM3_Init+0x94>)
 8002f36:	4a1e      	ldr	r2, [pc, #120]	@ (8002fb0 <MX_TIM3_Init+0x98>)
 8002f38:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 19;
 8002f3a:	4b1c      	ldr	r3, [pc, #112]	@ (8002fac <MX_TIM3_Init+0x94>)
 8002f3c:	2213      	movs	r2, #19
 8002f3e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f40:	4b1a      	ldr	r3, [pc, #104]	@ (8002fac <MX_TIM3_Init+0x94>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002f46:	4b19      	ldr	r3, [pc, #100]	@ (8002fac <MX_TIM3_Init+0x94>)
 8002f48:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f4c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f4e:	4b17      	ldr	r3, [pc, #92]	@ (8002fac <MX_TIM3_Init+0x94>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f54:	4b15      	ldr	r3, [pc, #84]	@ (8002fac <MX_TIM3_Init+0x94>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002f5a:	4814      	ldr	r0, [pc, #80]	@ (8002fac <MX_TIM3_Init+0x94>)
 8002f5c:	f004 f962 	bl	8007224 <HAL_TIM_Base_Init>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002f66:	f000 fa91 	bl	800348c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f6e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002f70:	f107 0308 	add.w	r3, r7, #8
 8002f74:	4619      	mov	r1, r3
 8002f76:	480d      	ldr	r0, [pc, #52]	@ (8002fac <MX_TIM3_Init+0x94>)
 8002f78:	f004 fd50 	bl	8007a1c <HAL_TIM_ConfigClockSource>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002f82:	f000 fa83 	bl	800348c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f86:	2300      	movs	r3, #0
 8002f88:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f8e:	463b      	mov	r3, r7
 8002f90:	4619      	mov	r1, r3
 8002f92:	4806      	ldr	r0, [pc, #24]	@ (8002fac <MX_TIM3_Init+0x94>)
 8002f94:	f005 f94e 	bl	8008234 <HAL_TIMEx_MasterConfigSynchronization>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002f9e:	f000 fa75 	bl	800348c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002fa2:	bf00      	nop
 8002fa4:	3718      	adds	r7, #24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	20000508 	.word	0x20000508
 8002fb0:	40000400 	.word	0x40000400

08002fb4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fba:	f107 0308 	add.w	r3, r7, #8
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	605a      	str	r2, [r3, #4]
 8002fc4:	609a      	str	r2, [r3, #8]
 8002fc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fc8:	463b      	mov	r3, r7
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002fd0:	4b1e      	ldr	r3, [pc, #120]	@ (800304c <MX_TIM8_Init+0x98>)
 8002fd2:	4a1f      	ldr	r2, [pc, #124]	@ (8003050 <MX_TIM8_Init+0x9c>)
 8002fd4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 179;
 8002fd6:	4b1d      	ldr	r3, [pc, #116]	@ (800304c <MX_TIM8_Init+0x98>)
 8002fd8:	22b3      	movs	r2, #179	@ 0xb3
 8002fda:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fdc:	4b1b      	ldr	r3, [pc, #108]	@ (800304c <MX_TIM8_Init+0x98>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 8002fe2:	4b1a      	ldr	r3, [pc, #104]	@ (800304c <MX_TIM8_Init+0x98>)
 8002fe4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002fe8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fea:	4b18      	ldr	r3, [pc, #96]	@ (800304c <MX_TIM8_Init+0x98>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002ff0:	4b16      	ldr	r3, [pc, #88]	@ (800304c <MX_TIM8_Init+0x98>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ff6:	4b15      	ldr	r3, [pc, #84]	@ (800304c <MX_TIM8_Init+0x98>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002ffc:	4813      	ldr	r0, [pc, #76]	@ (800304c <MX_TIM8_Init+0x98>)
 8002ffe:	f004 f911 	bl	8007224 <HAL_TIM_Base_Init>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8003008:	f000 fa40 	bl	800348c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800300c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003010:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003012:	f107 0308 	add.w	r3, r7, #8
 8003016:	4619      	mov	r1, r3
 8003018:	480c      	ldr	r0, [pc, #48]	@ (800304c <MX_TIM8_Init+0x98>)
 800301a:	f004 fcff 	bl	8007a1c <HAL_TIM_ConfigClockSource>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8003024:	f000 fa32 	bl	800348c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003028:	2300      	movs	r3, #0
 800302a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800302c:	2300      	movs	r3, #0
 800302e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003030:	463b      	mov	r3, r7
 8003032:	4619      	mov	r1, r3
 8003034:	4805      	ldr	r0, [pc, #20]	@ (800304c <MX_TIM8_Init+0x98>)
 8003036:	f005 f8fd 	bl	8008234 <HAL_TIMEx_MasterConfigSynchronization>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8003040:	f000 fa24 	bl	800348c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003044:	bf00      	nop
 8003046:	3718      	adds	r7, #24
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	20000550 	.word	0x20000550
 8003050:	40010400 	.word	0x40010400

08003054 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003058:	4b11      	ldr	r3, [pc, #68]	@ (80030a0 <MX_UART4_Init+0x4c>)
 800305a:	4a12      	ldr	r2, [pc, #72]	@ (80030a4 <MX_UART4_Init+0x50>)
 800305c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800305e:	4b10      	ldr	r3, [pc, #64]	@ (80030a0 <MX_UART4_Init+0x4c>)
 8003060:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003064:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003066:	4b0e      	ldr	r3, [pc, #56]	@ (80030a0 <MX_UART4_Init+0x4c>)
 8003068:	2200      	movs	r2, #0
 800306a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800306c:	4b0c      	ldr	r3, [pc, #48]	@ (80030a0 <MX_UART4_Init+0x4c>)
 800306e:	2200      	movs	r2, #0
 8003070:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003072:	4b0b      	ldr	r3, [pc, #44]	@ (80030a0 <MX_UART4_Init+0x4c>)
 8003074:	2200      	movs	r2, #0
 8003076:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003078:	4b09      	ldr	r3, [pc, #36]	@ (80030a0 <MX_UART4_Init+0x4c>)
 800307a:	220c      	movs	r2, #12
 800307c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800307e:	4b08      	ldr	r3, [pc, #32]	@ (80030a0 <MX_UART4_Init+0x4c>)
 8003080:	2200      	movs	r2, #0
 8003082:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003084:	4b06      	ldr	r3, [pc, #24]	@ (80030a0 <MX_UART4_Init+0x4c>)
 8003086:	2200      	movs	r2, #0
 8003088:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800308a:	4805      	ldr	r0, [pc, #20]	@ (80030a0 <MX_UART4_Init+0x4c>)
 800308c:	f005 f9b4 	bl	80083f8 <HAL_UART_Init>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8003096:	f000 f9f9 	bl	800348c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800309a:	bf00      	nop
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	20000598 	.word	0x20000598
 80030a4:	40004c00 	.word	0x40004c00

080030a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80030ac:	4b11      	ldr	r3, [pc, #68]	@ (80030f4 <MX_USART2_UART_Init+0x4c>)
 80030ae:	4a12      	ldr	r2, [pc, #72]	@ (80030f8 <MX_USART2_UART_Init+0x50>)
 80030b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80030b2:	4b10      	ldr	r3, [pc, #64]	@ (80030f4 <MX_USART2_UART_Init+0x4c>)
 80030b4:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80030b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80030ba:	4b0e      	ldr	r3, [pc, #56]	@ (80030f4 <MX_USART2_UART_Init+0x4c>)
 80030bc:	2200      	movs	r2, #0
 80030be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80030c0:	4b0c      	ldr	r3, [pc, #48]	@ (80030f4 <MX_USART2_UART_Init+0x4c>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80030c6:	4b0b      	ldr	r3, [pc, #44]	@ (80030f4 <MX_USART2_UART_Init+0x4c>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80030cc:	4b09      	ldr	r3, [pc, #36]	@ (80030f4 <MX_USART2_UART_Init+0x4c>)
 80030ce:	220c      	movs	r2, #12
 80030d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030d2:	4b08      	ldr	r3, [pc, #32]	@ (80030f4 <MX_USART2_UART_Init+0x4c>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80030d8:	4b06      	ldr	r3, [pc, #24]	@ (80030f4 <MX_USART2_UART_Init+0x4c>)
 80030da:	2200      	movs	r2, #0
 80030dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80030de:	4805      	ldr	r0, [pc, #20]	@ (80030f4 <MX_USART2_UART_Init+0x4c>)
 80030e0:	f005 f98a 	bl	80083f8 <HAL_UART_Init>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80030ea:	f000 f9cf 	bl	800348c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80030ee:	bf00      	nop
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	200005e0 	.word	0x200005e0
 80030f8:	40004400 	.word	0x40004400

080030fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003102:	2300      	movs	r3, #0
 8003104:	607b      	str	r3, [r7, #4]
 8003106:	4b17      	ldr	r3, [pc, #92]	@ (8003164 <MX_DMA_Init+0x68>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310a:	4a16      	ldr	r2, [pc, #88]	@ (8003164 <MX_DMA_Init+0x68>)
 800310c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003110:	6313      	str	r3, [r2, #48]	@ 0x30
 8003112:	4b14      	ldr	r3, [pc, #80]	@ (8003164 <MX_DMA_Init+0x68>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003116:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800311a:	607b      	str	r3, [r7, #4]
 800311c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800311e:	2300      	movs	r3, #0
 8003120:	603b      	str	r3, [r7, #0]
 8003122:	4b10      	ldr	r3, [pc, #64]	@ (8003164 <MX_DMA_Init+0x68>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003126:	4a0f      	ldr	r2, [pc, #60]	@ (8003164 <MX_DMA_Init+0x68>)
 8003128:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800312c:	6313      	str	r3, [r2, #48]	@ 0x30
 800312e:	4b0d      	ldr	r3, [pc, #52]	@ (8003164 <MX_DMA_Init+0x68>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003132:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003136:	603b      	str	r3, [r7, #0]
 8003138:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800313a:	2200      	movs	r2, #0
 800313c:	2100      	movs	r1, #0
 800313e:	2011      	movs	r0, #17
 8003140:	f001 feed 	bl	8004f1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003144:	2011      	movs	r0, #17
 8003146:	f001 ff06 	bl	8004f56 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800314a:	2200      	movs	r2, #0
 800314c:	2100      	movs	r1, #0
 800314e:	203a      	movs	r0, #58	@ 0x3a
 8003150:	f001 fee5 	bl	8004f1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003154:	203a      	movs	r0, #58	@ 0x3a
 8003156:	f001 fefe 	bl	8004f56 <HAL_NVIC_EnableIRQ>

}
 800315a:	bf00      	nop
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	40023800 	.word	0x40023800

08003168 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b08a      	sub	sp, #40	@ 0x28
 800316c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800316e:	f107 0314 	add.w	r3, r7, #20
 8003172:	2200      	movs	r2, #0
 8003174:	601a      	str	r2, [r3, #0]
 8003176:	605a      	str	r2, [r3, #4]
 8003178:	609a      	str	r2, [r3, #8]
 800317a:	60da      	str	r2, [r3, #12]
 800317c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800317e:	2300      	movs	r3, #0
 8003180:	613b      	str	r3, [r7, #16]
 8003182:	4b2e      	ldr	r3, [pc, #184]	@ (800323c <MX_GPIO_Init+0xd4>)
 8003184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003186:	4a2d      	ldr	r2, [pc, #180]	@ (800323c <MX_GPIO_Init+0xd4>)
 8003188:	f043 0304 	orr.w	r3, r3, #4
 800318c:	6313      	str	r3, [r2, #48]	@ 0x30
 800318e:	4b2b      	ldr	r3, [pc, #172]	@ (800323c <MX_GPIO_Init+0xd4>)
 8003190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003192:	f003 0304 	and.w	r3, r3, #4
 8003196:	613b      	str	r3, [r7, #16]
 8003198:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800319a:	2300      	movs	r3, #0
 800319c:	60fb      	str	r3, [r7, #12]
 800319e:	4b27      	ldr	r3, [pc, #156]	@ (800323c <MX_GPIO_Init+0xd4>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a2:	4a26      	ldr	r2, [pc, #152]	@ (800323c <MX_GPIO_Init+0xd4>)
 80031a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80031aa:	4b24      	ldr	r3, [pc, #144]	@ (800323c <MX_GPIO_Init+0xd4>)
 80031ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031b2:	60fb      	str	r3, [r7, #12]
 80031b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031b6:	2300      	movs	r3, #0
 80031b8:	60bb      	str	r3, [r7, #8]
 80031ba:	4b20      	ldr	r3, [pc, #128]	@ (800323c <MX_GPIO_Init+0xd4>)
 80031bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031be:	4a1f      	ldr	r2, [pc, #124]	@ (800323c <MX_GPIO_Init+0xd4>)
 80031c0:	f043 0301 	orr.w	r3, r3, #1
 80031c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80031c6:	4b1d      	ldr	r3, [pc, #116]	@ (800323c <MX_GPIO_Init+0xd4>)
 80031c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	60bb      	str	r3, [r7, #8]
 80031d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031d2:	2300      	movs	r3, #0
 80031d4:	607b      	str	r3, [r7, #4]
 80031d6:	4b19      	ldr	r3, [pc, #100]	@ (800323c <MX_GPIO_Init+0xd4>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031da:	4a18      	ldr	r2, [pc, #96]	@ (800323c <MX_GPIO_Init+0xd4>)
 80031dc:	f043 0302 	orr.w	r3, r3, #2
 80031e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80031e2:	4b16      	ldr	r3, [pc, #88]	@ (800323c <MX_GPIO_Init+0xd4>)
 80031e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	607b      	str	r3, [r7, #4]
 80031ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_8, GPIO_PIN_RESET);
 80031ee:	2200      	movs	r2, #0
 80031f0:	f44f 7184 	mov.w	r1, #264	@ 0x108
 80031f4:	4812      	ldr	r0, [pc, #72]	@ (8003240 <MX_GPIO_Init+0xd8>)
 80031f6:	f002 fc5f 	bl	8005ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80031fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003200:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003204:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003206:	2300      	movs	r3, #0
 8003208:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800320a:	f107 0314 	add.w	r3, r7, #20
 800320e:	4619      	mov	r1, r3
 8003210:	480c      	ldr	r0, [pc, #48]	@ (8003244 <MX_GPIO_Init+0xdc>)
 8003212:	f002 fabd 	bl	8005790 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_8;
 8003216:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800321a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800321c:	2301      	movs	r3, #1
 800321e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003220:	2300      	movs	r3, #0
 8003222:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003224:	2300      	movs	r3, #0
 8003226:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003228:	f107 0314 	add.w	r3, r7, #20
 800322c:	4619      	mov	r1, r3
 800322e:	4804      	ldr	r0, [pc, #16]	@ (8003240 <MX_GPIO_Init+0xd8>)
 8003230:	f002 faae 	bl	8005790 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003234:	bf00      	nop
 8003236:	3728      	adds	r7, #40	@ 0x28
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	40023800 	.word	0x40023800
 8003240:	40020400 	.word	0x40020400
 8003244:	40020000 	.word	0x40020000

08003248 <HAL_ADCEx_InjectedConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1) {
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a50      	ldr	r2, [pc, #320]	@ (8003398 <HAL_ADCEx_InjectedConvCpltCallback+0x150>)
 8003256:	4293      	cmp	r3, r2
 8003258:	f040 808d 	bne.w	8003376 <HAL_ADCEx_InjectedConvCpltCallback+0x12e>


   	     cnt_val = __HAL_TIM_GET_COUNTER(&htim1);
 800325c:	4b4f      	ldr	r3, [pc, #316]	@ (800339c <HAL_ADCEx_InjectedConvCpltCallback+0x154>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003262:	b29a      	uxth	r2, r3
 8003264:	4b4e      	ldr	r3, [pc, #312]	@ (80033a0 <HAL_ADCEx_InjectedConvCpltCallback+0x158>)
 8003266:	801a      	strh	r2, [r3, #0]
   	     adc_inj_val[0]= HAL_ADCEx_InjectedGetValue(hadc, ADC_INJECTED_RANK_1);
 8003268:	2101      	movs	r1, #1
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f001 fbaa 	bl	80049c4 <HAL_ADCEx_InjectedGetValue>
 8003270:	4603      	mov	r3, r0
 8003272:	b29a      	uxth	r2, r3
 8003274:	4b4b      	ldr	r3, [pc, #300]	@ (80033a4 <HAL_ADCEx_InjectedConvCpltCallback+0x15c>)
 8003276:	801a      	strh	r2, [r3, #0]
         adc_value_A0 = HAL_ADCEx_InjectedGetValue(hadc, ADC_INJECTED_RANK_1);
 8003278:	2101      	movs	r1, #1
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f001 fba2 	bl	80049c4 <HAL_ADCEx_InjectedGetValue>
 8003280:	4603      	mov	r3, r0
 8003282:	4a49      	ldr	r2, [pc, #292]	@ (80033a8 <HAL_ADCEx_InjectedConvCpltCallback+0x160>)
 8003284:	6013      	str	r3, [r2, #0]
         adc_inj_val[1]= HAL_ADCEx_InjectedGetValue(hadc, ADC_INJECTED_RANK_2);
 8003286:	2102      	movs	r1, #2
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f001 fb9b 	bl	80049c4 <HAL_ADCEx_InjectedGetValue>
 800328e:	4603      	mov	r3, r0
 8003290:	b29a      	uxth	r2, r3
 8003292:	4b44      	ldr	r3, [pc, #272]	@ (80033a4 <HAL_ADCEx_InjectedConvCpltCallback+0x15c>)
 8003294:	805a      	strh	r2, [r3, #2]
         adc_value_A2 = HAL_ADCEx_InjectedGetValue(hadc, ADC_INJECTED_RANK_2);
 8003296:	2102      	movs	r1, #2
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f001 fb93 	bl	80049c4 <HAL_ADCEx_InjectedGetValue>
 800329e:	4603      	mov	r3, r0
 80032a0:	4a42      	ldr	r2, [pc, #264]	@ (80033ac <HAL_ADCEx_InjectedConvCpltCallback+0x164>)
 80032a2:	6013      	str	r3, [r2, #0]
         ia = (((adc_value_A0/4095.0)*3.3 - 1.65))/(50.0*0.01);
 80032a4:	4b40      	ldr	r3, [pc, #256]	@ (80033a8 <HAL_ADCEx_InjectedConvCpltCallback+0x160>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7fd f94b 	bl	8000544 <__aeabi_ui2d>
 80032ae:	a334      	add	r3, pc, #208	@ (adr r3, 8003380 <HAL_ADCEx_InjectedConvCpltCallback+0x138>)
 80032b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b4:	f7fd faea 	bl	800088c <__aeabi_ddiv>
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	4610      	mov	r0, r2
 80032be:	4619      	mov	r1, r3
 80032c0:	a331      	add	r3, pc, #196	@ (adr r3, 8003388 <HAL_ADCEx_InjectedConvCpltCallback+0x140>)
 80032c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c6:	f7fd f9b7 	bl	8000638 <__aeabi_dmul>
 80032ca:	4602      	mov	r2, r0
 80032cc:	460b      	mov	r3, r1
 80032ce:	4610      	mov	r0, r2
 80032d0:	4619      	mov	r1, r3
 80032d2:	a32f      	add	r3, pc, #188	@ (adr r3, 8003390 <HAL_ADCEx_InjectedConvCpltCallback+0x148>)
 80032d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d8:	f7fc fff6 	bl	80002c8 <__aeabi_dsub>
 80032dc:	4602      	mov	r2, r0
 80032de:	460b      	mov	r3, r1
 80032e0:	4610      	mov	r0, r2
 80032e2:	4619      	mov	r1, r3
 80032e4:	f04f 0200 	mov.w	r2, #0
 80032e8:	4b31      	ldr	r3, [pc, #196]	@ (80033b0 <HAL_ADCEx_InjectedConvCpltCallback+0x168>)
 80032ea:	f7fd facf 	bl	800088c <__aeabi_ddiv>
 80032ee:	4602      	mov	r2, r0
 80032f0:	460b      	mov	r3, r1
 80032f2:	4610      	mov	r0, r2
 80032f4:	4619      	mov	r1, r3
 80032f6:	f7fd fc97 	bl	8000c28 <__aeabi_d2f>
 80032fa:	4603      	mov	r3, r0
 80032fc:	4a2d      	ldr	r2, [pc, #180]	@ (80033b4 <HAL_ADCEx_InjectedConvCpltCallback+0x16c>)
 80032fe:	6013      	str	r3, [r2, #0]
         ib = (((adc_value_A2/4095.0)*3.3 - 1.65))/(50.0*0.01);
 8003300:	4b2a      	ldr	r3, [pc, #168]	@ (80033ac <HAL_ADCEx_InjectedConvCpltCallback+0x164>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4618      	mov	r0, r3
 8003306:	f7fd f91d 	bl	8000544 <__aeabi_ui2d>
 800330a:	a31d      	add	r3, pc, #116	@ (adr r3, 8003380 <HAL_ADCEx_InjectedConvCpltCallback+0x138>)
 800330c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003310:	f7fd fabc 	bl	800088c <__aeabi_ddiv>
 8003314:	4602      	mov	r2, r0
 8003316:	460b      	mov	r3, r1
 8003318:	4610      	mov	r0, r2
 800331a:	4619      	mov	r1, r3
 800331c:	a31a      	add	r3, pc, #104	@ (adr r3, 8003388 <HAL_ADCEx_InjectedConvCpltCallback+0x140>)
 800331e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003322:	f7fd f989 	bl	8000638 <__aeabi_dmul>
 8003326:	4602      	mov	r2, r0
 8003328:	460b      	mov	r3, r1
 800332a:	4610      	mov	r0, r2
 800332c:	4619      	mov	r1, r3
 800332e:	a318      	add	r3, pc, #96	@ (adr r3, 8003390 <HAL_ADCEx_InjectedConvCpltCallback+0x148>)
 8003330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003334:	f7fc ffc8 	bl	80002c8 <__aeabi_dsub>
 8003338:	4602      	mov	r2, r0
 800333a:	460b      	mov	r3, r1
 800333c:	4610      	mov	r0, r2
 800333e:	4619      	mov	r1, r3
 8003340:	f04f 0200 	mov.w	r2, #0
 8003344:	4b1a      	ldr	r3, [pc, #104]	@ (80033b0 <HAL_ADCEx_InjectedConvCpltCallback+0x168>)
 8003346:	f7fd faa1 	bl	800088c <__aeabi_ddiv>
 800334a:	4602      	mov	r2, r0
 800334c:	460b      	mov	r3, r1
 800334e:	4610      	mov	r0, r2
 8003350:	4619      	mov	r1, r3
 8003352:	f7fd fc69 	bl	8000c28 <__aeabi_d2f>
 8003356:	4603      	mov	r3, r0
 8003358:	4a17      	ldr	r2, [pc, #92]	@ (80033b8 <HAL_ADCEx_InjectedConvCpltCallback+0x170>)
 800335a:	6013      	str	r3, [r2, #0]
         ic= -( ia + ib);
 800335c:	4b15      	ldr	r3, [pc, #84]	@ (80033b4 <HAL_ADCEx_InjectedConvCpltCallback+0x16c>)
 800335e:	ed93 7a00 	vldr	s14, [r3]
 8003362:	4b15      	ldr	r3, [pc, #84]	@ (80033b8 <HAL_ADCEx_InjectedConvCpltCallback+0x170>)
 8003364:	edd3 7a00 	vldr	s15, [r3]
 8003368:	ee77 7a27 	vadd.f32	s15, s14, s15
 800336c:	eef1 7a67 	vneg.f32	s15, s15
 8003370:	4b12      	ldr	r3, [pc, #72]	@ (80033bc <HAL_ADCEx_InjectedConvCpltCallback+0x174>)
 8003372:	edc3 7a00 	vstr	s15, [r3]
    }
}
 8003376:	bf00      	nop
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	00000000 	.word	0x00000000
 8003384:	40affe00 	.word	0x40affe00
 8003388:	66666666 	.word	0x66666666
 800338c:	400a6666 	.word	0x400a6666
 8003390:	66666666 	.word	0x66666666
 8003394:	3ffa6666 	.word	0x3ffa6666
 8003398:	40012000 	.word	0x40012000
 800339c:	20000478 	.word	0x20000478
 80033a0:	200002f0 	.word	0x200002f0
 80033a4:	200002ec 	.word	0x200002ec
 80033a8:	20000234 	.word	0x20000234
 80033ac:	20000238 	.word	0x20000238
 80033b0:	3fe00000 	.word	0x3fe00000
 80033b4:	2000023c 	.word	0x2000023c
 80033b8:	20000240 	.word	0x20000240
 80033bc:	20000244 	.word	0x20000244

080033c0 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM8)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a05      	ldr	r2, [pc, #20]	@ (80033e4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d102      	bne.n	80033d8 <HAL_TIM_PeriodElapsedCallback+0x18>
    {
        flag_current_loop = 1;
 80033d2:	4b05      	ldr	r3, [pc, #20]	@ (80033e8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80033d4:	2201      	movs	r2, #1
 80033d6:	701a      	strb	r2, [r3, #0]
    }
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	40010400 	.word	0x40010400
 80033e8:	200002dc 	.word	0x200002dc

080033ec <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a05      	ldr	r2, [pc, #20]	@ (8003410 <HAL_UART_TxCpltCallback+0x24>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d102      	bne.n	8003404 <HAL_UART_TxCpltCallback+0x18>
    {
        uart_busy = 0;
 80033fe:	4b05      	ldr	r3, [pc, #20]	@ (8003414 <HAL_UART_TxCpltCallback+0x28>)
 8003400:	2200      	movs	r2, #0
 8003402:	701a      	strb	r2, [r3, #0]
    }
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	40004400 	.word	0x40004400
 8003414:	200002dd 	.word	0x200002dd

08003418 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC2)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a16      	ldr	r2, [pc, #88]	@ (8003480 <HAL_ADC_ConvCpltCallback+0x68>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d11b      	bne.n	8003462 <HAL_ADC_ConvCpltCallback+0x4a>
    {
        adc_dma_voltage = (adc_dma_value / 4095.0) * 3.3;
 800342a:	4b16      	ldr	r3, [pc, #88]	@ (8003484 <HAL_ADC_ConvCpltCallback+0x6c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4618      	mov	r0, r3
 8003430:	f7fd f888 	bl	8000544 <__aeabi_ui2d>
 8003434:	a30e      	add	r3, pc, #56	@ (adr r3, 8003470 <HAL_ADC_ConvCpltCallback+0x58>)
 8003436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800343a:	f7fd fa27 	bl	800088c <__aeabi_ddiv>
 800343e:	4602      	mov	r2, r0
 8003440:	460b      	mov	r3, r1
 8003442:	4610      	mov	r0, r2
 8003444:	4619      	mov	r1, r3
 8003446:	a30c      	add	r3, pc, #48	@ (adr r3, 8003478 <HAL_ADC_ConvCpltCallback+0x60>)
 8003448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344c:	f7fd f8f4 	bl	8000638 <__aeabi_dmul>
 8003450:	4602      	mov	r2, r0
 8003452:	460b      	mov	r3, r1
 8003454:	4610      	mov	r0, r2
 8003456:	4619      	mov	r1, r3
 8003458:	f7fd fbe6 	bl	8000c28 <__aeabi_d2f>
 800345c:	4603      	mov	r3, r0
 800345e:	4a0a      	ldr	r2, [pc, #40]	@ (8003488 <HAL_ADC_ConvCpltCallback+0x70>)
 8003460:	6013      	str	r3, [r2, #0]
    }
}
 8003462:	bf00      	nop
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	f3af 8000 	nop.w
 8003470:	00000000 	.word	0x00000000
 8003474:	40affe00 	.word	0x40affe00
 8003478:	66666666 	.word	0x66666666
 800347c:	400a6666 	.word	0x400a6666
 8003480:	40012100 	.word	0x40012100
 8003484:	200002e0 	.word	0x200002e0
 8003488:	200002ac 	.word	0x200002ac

0800348c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003490:	b672      	cpsid	i
}
 8003492:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003494:	bf00      	nop
 8003496:	e7fd      	b.n	8003494 <Error_Handler+0x8>

08003498 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800349e:	2300      	movs	r3, #0
 80034a0:	607b      	str	r3, [r7, #4]
 80034a2:	4b10      	ldr	r3, [pc, #64]	@ (80034e4 <HAL_MspInit+0x4c>)
 80034a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034a6:	4a0f      	ldr	r2, [pc, #60]	@ (80034e4 <HAL_MspInit+0x4c>)
 80034a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80034ae:	4b0d      	ldr	r3, [pc, #52]	@ (80034e4 <HAL_MspInit+0x4c>)
 80034b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034b6:	607b      	str	r3, [r7, #4]
 80034b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034ba:	2300      	movs	r3, #0
 80034bc:	603b      	str	r3, [r7, #0]
 80034be:	4b09      	ldr	r3, [pc, #36]	@ (80034e4 <HAL_MspInit+0x4c>)
 80034c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c2:	4a08      	ldr	r2, [pc, #32]	@ (80034e4 <HAL_MspInit+0x4c>)
 80034c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80034ca:	4b06      	ldr	r3, [pc, #24]	@ (80034e4 <HAL_MspInit+0x4c>)
 80034cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034d2:	603b      	str	r3, [r7, #0]
 80034d4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80034d6:	2007      	movs	r0, #7
 80034d8:	f001 fd16 	bl	8004f08 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034dc:	bf00      	nop
 80034de:	3708      	adds	r7, #8
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40023800 	.word	0x40023800

080034e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b08c      	sub	sp, #48	@ 0x30
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034f0:	f107 031c 	add.w	r3, r7, #28
 80034f4:	2200      	movs	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	605a      	str	r2, [r3, #4]
 80034fa:	609a      	str	r2, [r3, #8]
 80034fc:	60da      	str	r2, [r3, #12]
 80034fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a4e      	ldr	r2, [pc, #312]	@ (8003640 <HAL_ADC_MspInit+0x158>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d130      	bne.n	800356c <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800350a:	2300      	movs	r3, #0
 800350c:	61bb      	str	r3, [r7, #24]
 800350e:	4b4d      	ldr	r3, [pc, #308]	@ (8003644 <HAL_ADC_MspInit+0x15c>)
 8003510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003512:	4a4c      	ldr	r2, [pc, #304]	@ (8003644 <HAL_ADC_MspInit+0x15c>)
 8003514:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003518:	6453      	str	r3, [r2, #68]	@ 0x44
 800351a:	4b4a      	ldr	r3, [pc, #296]	@ (8003644 <HAL_ADC_MspInit+0x15c>)
 800351c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800351e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003522:	61bb      	str	r3, [r7, #24]
 8003524:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003526:	2300      	movs	r3, #0
 8003528:	617b      	str	r3, [r7, #20]
 800352a:	4b46      	ldr	r3, [pc, #280]	@ (8003644 <HAL_ADC_MspInit+0x15c>)
 800352c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352e:	4a45      	ldr	r2, [pc, #276]	@ (8003644 <HAL_ADC_MspInit+0x15c>)
 8003530:	f043 0301 	orr.w	r3, r3, #1
 8003534:	6313      	str	r3, [r2, #48]	@ 0x30
 8003536:	4b43      	ldr	r3, [pc, #268]	@ (8003644 <HAL_ADC_MspInit+0x15c>)
 8003538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	617b      	str	r3, [r7, #20]
 8003540:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 8003542:	2311      	movs	r3, #17
 8003544:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003546:	2303      	movs	r3, #3
 8003548:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354a:	2300      	movs	r3, #0
 800354c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800354e:	f107 031c 	add.w	r3, r7, #28
 8003552:	4619      	mov	r1, r3
 8003554:	483c      	ldr	r0, [pc, #240]	@ (8003648 <HAL_ADC_MspInit+0x160>)
 8003556:	f002 f91b 	bl	8005790 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800355a:	2200      	movs	r2, #0
 800355c:	2100      	movs	r1, #0
 800355e:	2012      	movs	r0, #18
 8003560:	f001 fcdd 	bl	8004f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003564:	2012      	movs	r0, #18
 8003566:	f001 fcf6 	bl	8004f56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800356a:	e065      	b.n	8003638 <HAL_ADC_MspInit+0x150>
  else if(hadc->Instance==ADC2)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a36      	ldr	r2, [pc, #216]	@ (800364c <HAL_ADC_MspInit+0x164>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d160      	bne.n	8003638 <HAL_ADC_MspInit+0x150>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003576:	2300      	movs	r3, #0
 8003578:	613b      	str	r3, [r7, #16]
 800357a:	4b32      	ldr	r3, [pc, #200]	@ (8003644 <HAL_ADC_MspInit+0x15c>)
 800357c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800357e:	4a31      	ldr	r2, [pc, #196]	@ (8003644 <HAL_ADC_MspInit+0x15c>)
 8003580:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003584:	6453      	str	r3, [r2, #68]	@ 0x44
 8003586:	4b2f      	ldr	r3, [pc, #188]	@ (8003644 <HAL_ADC_MspInit+0x15c>)
 8003588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800358a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800358e:	613b      	str	r3, [r7, #16]
 8003590:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003592:	2300      	movs	r3, #0
 8003594:	60fb      	str	r3, [r7, #12]
 8003596:	4b2b      	ldr	r3, [pc, #172]	@ (8003644 <HAL_ADC_MspInit+0x15c>)
 8003598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800359a:	4a2a      	ldr	r2, [pc, #168]	@ (8003644 <HAL_ADC_MspInit+0x15c>)
 800359c:	f043 0301 	orr.w	r3, r3, #1
 80035a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80035a2:	4b28      	ldr	r3, [pc, #160]	@ (8003644 <HAL_ADC_MspInit+0x15c>)
 80035a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	60fb      	str	r3, [r7, #12]
 80035ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80035ae:	2302      	movs	r3, #2
 80035b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035b2:	2303      	movs	r3, #3
 80035b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b6:	2300      	movs	r3, #0
 80035b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ba:	f107 031c 	add.w	r3, r7, #28
 80035be:	4619      	mov	r1, r3
 80035c0:	4821      	ldr	r0, [pc, #132]	@ (8003648 <HAL_ADC_MspInit+0x160>)
 80035c2:	f002 f8e5 	bl	8005790 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 80035c6:	4b22      	ldr	r3, [pc, #136]	@ (8003650 <HAL_ADC_MspInit+0x168>)
 80035c8:	4a22      	ldr	r2, [pc, #136]	@ (8003654 <HAL_ADC_MspInit+0x16c>)
 80035ca:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80035cc:	4b20      	ldr	r3, [pc, #128]	@ (8003650 <HAL_ADC_MspInit+0x168>)
 80035ce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80035d2:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035d4:	4b1e      	ldr	r3, [pc, #120]	@ (8003650 <HAL_ADC_MspInit+0x168>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80035da:	4b1d      	ldr	r3, [pc, #116]	@ (8003650 <HAL_ADC_MspInit+0x168>)
 80035dc:	2200      	movs	r2, #0
 80035de:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80035e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003650 <HAL_ADC_MspInit+0x168>)
 80035e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035e6:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80035e8:	4b19      	ldr	r3, [pc, #100]	@ (8003650 <HAL_ADC_MspInit+0x168>)
 80035ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80035ee:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80035f0:	4b17      	ldr	r3, [pc, #92]	@ (8003650 <HAL_ADC_MspInit+0x168>)
 80035f2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80035f6:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 80035f8:	4b15      	ldr	r3, [pc, #84]	@ (8003650 <HAL_ADC_MspInit+0x168>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 80035fe:	4b14      	ldr	r3, [pc, #80]	@ (8003650 <HAL_ADC_MspInit+0x168>)
 8003600:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003604:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003606:	4b12      	ldr	r3, [pc, #72]	@ (8003650 <HAL_ADC_MspInit+0x168>)
 8003608:	2200      	movs	r2, #0
 800360a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800360c:	4810      	ldr	r0, [pc, #64]	@ (8003650 <HAL_ADC_MspInit+0x168>)
 800360e:	f001 fcbd 	bl	8004f8c <HAL_DMA_Init>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <HAL_ADC_MspInit+0x134>
      Error_Handler();
 8003618:	f7ff ff38 	bl	800348c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a0c      	ldr	r2, [pc, #48]	@ (8003650 <HAL_ADC_MspInit+0x168>)
 8003620:	639a      	str	r2, [r3, #56]	@ 0x38
 8003622:	4a0b      	ldr	r2, [pc, #44]	@ (8003650 <HAL_ADC_MspInit+0x168>)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003628:	2200      	movs	r2, #0
 800362a:	2100      	movs	r1, #0
 800362c:	2012      	movs	r0, #18
 800362e:	f001 fc76 	bl	8004f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003632:	2012      	movs	r0, #18
 8003634:	f001 fc8f 	bl	8004f56 <HAL_NVIC_EnableIRQ>
}
 8003638:	bf00      	nop
 800363a:	3730      	adds	r7, #48	@ 0x30
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	40012000 	.word	0x40012000
 8003644:	40023800 	.word	0x40023800
 8003648:	40020000 	.word	0x40020000
 800364c:	40012100 	.word	0x40012100
 8003650:	200003c0 	.word	0x200003c0
 8003654:	40026440 	.word	0x40026440

08003658 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b08a      	sub	sp, #40	@ 0x28
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003660:	f107 0314 	add.w	r3, r7, #20
 8003664:	2200      	movs	r2, #0
 8003666:	601a      	str	r2, [r3, #0]
 8003668:	605a      	str	r2, [r3, #4]
 800366a:	609a      	str	r2, [r3, #8]
 800366c:	60da      	str	r2, [r3, #12]
 800366e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a1d      	ldr	r2, [pc, #116]	@ (80036ec <HAL_SPI_MspInit+0x94>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d133      	bne.n	80036e2 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800367a:	2300      	movs	r3, #0
 800367c:	613b      	str	r3, [r7, #16]
 800367e:	4b1c      	ldr	r3, [pc, #112]	@ (80036f0 <HAL_SPI_MspInit+0x98>)
 8003680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003682:	4a1b      	ldr	r2, [pc, #108]	@ (80036f0 <HAL_SPI_MspInit+0x98>)
 8003684:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003688:	6453      	str	r3, [r2, #68]	@ 0x44
 800368a:	4b19      	ldr	r3, [pc, #100]	@ (80036f0 <HAL_SPI_MspInit+0x98>)
 800368c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800368e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003692:	613b      	str	r3, [r7, #16]
 8003694:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003696:	2300      	movs	r3, #0
 8003698:	60fb      	str	r3, [r7, #12]
 800369a:	4b15      	ldr	r3, [pc, #84]	@ (80036f0 <HAL_SPI_MspInit+0x98>)
 800369c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800369e:	4a14      	ldr	r2, [pc, #80]	@ (80036f0 <HAL_SPI_MspInit+0x98>)
 80036a0:	f043 0301 	orr.w	r3, r3, #1
 80036a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80036a6:	4b12      	ldr	r3, [pc, #72]	@ (80036f0 <HAL_SPI_MspInit+0x98>)
 80036a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	60fb      	str	r3, [r7, #12]
 80036b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80036b2:	23e0      	movs	r3, #224	@ 0xe0
 80036b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036b6:	2302      	movs	r3, #2
 80036b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ba:	2300      	movs	r3, #0
 80036bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036be:	2303      	movs	r3, #3
 80036c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80036c2:	2305      	movs	r3, #5
 80036c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036c6:	f107 0314 	add.w	r3, r7, #20
 80036ca:	4619      	mov	r1, r3
 80036cc:	4809      	ldr	r0, [pc, #36]	@ (80036f4 <HAL_SPI_MspInit+0x9c>)
 80036ce:	f002 f85f 	bl	8005790 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80036d2:	2200      	movs	r2, #0
 80036d4:	2100      	movs	r1, #0
 80036d6:	2023      	movs	r0, #35	@ 0x23
 80036d8:	f001 fc21 	bl	8004f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80036dc:	2023      	movs	r0, #35	@ 0x23
 80036de:	f001 fc3a 	bl	8004f56 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80036e2:	bf00      	nop
 80036e4:	3728      	adds	r7, #40	@ 0x28
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	40013000 	.word	0x40013000
 80036f0:	40023800 	.word	0x40023800
 80036f4:	40020000 	.word	0x40020000

080036f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a2c      	ldr	r2, [pc, #176]	@ (80037b8 <HAL_TIM_Base_MspInit+0xc0>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d10e      	bne.n	8003728 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800370a:	2300      	movs	r3, #0
 800370c:	617b      	str	r3, [r7, #20]
 800370e:	4b2b      	ldr	r3, [pc, #172]	@ (80037bc <HAL_TIM_Base_MspInit+0xc4>)
 8003710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003712:	4a2a      	ldr	r2, [pc, #168]	@ (80037bc <HAL_TIM_Base_MspInit+0xc4>)
 8003714:	f043 0301 	orr.w	r3, r3, #1
 8003718:	6453      	str	r3, [r2, #68]	@ 0x44
 800371a:	4b28      	ldr	r3, [pc, #160]	@ (80037bc <HAL_TIM_Base_MspInit+0xc4>)
 800371c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	617b      	str	r3, [r7, #20]
 8003724:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003726:	e042      	b.n	80037ae <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003730:	d10e      	bne.n	8003750 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003732:	2300      	movs	r3, #0
 8003734:	613b      	str	r3, [r7, #16]
 8003736:	4b21      	ldr	r3, [pc, #132]	@ (80037bc <HAL_TIM_Base_MspInit+0xc4>)
 8003738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373a:	4a20      	ldr	r2, [pc, #128]	@ (80037bc <HAL_TIM_Base_MspInit+0xc4>)
 800373c:	f043 0301 	orr.w	r3, r3, #1
 8003740:	6413      	str	r3, [r2, #64]	@ 0x40
 8003742:	4b1e      	ldr	r3, [pc, #120]	@ (80037bc <HAL_TIM_Base_MspInit+0xc4>)
 8003744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	613b      	str	r3, [r7, #16]
 800374c:	693b      	ldr	r3, [r7, #16]
}
 800374e:	e02e      	b.n	80037ae <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a1a      	ldr	r2, [pc, #104]	@ (80037c0 <HAL_TIM_Base_MspInit+0xc8>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d10e      	bne.n	8003778 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800375a:	2300      	movs	r3, #0
 800375c:	60fb      	str	r3, [r7, #12]
 800375e:	4b17      	ldr	r3, [pc, #92]	@ (80037bc <HAL_TIM_Base_MspInit+0xc4>)
 8003760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003762:	4a16      	ldr	r2, [pc, #88]	@ (80037bc <HAL_TIM_Base_MspInit+0xc4>)
 8003764:	f043 0302 	orr.w	r3, r3, #2
 8003768:	6413      	str	r3, [r2, #64]	@ 0x40
 800376a:	4b14      	ldr	r3, [pc, #80]	@ (80037bc <HAL_TIM_Base_MspInit+0xc4>)
 800376c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	60fb      	str	r3, [r7, #12]
 8003774:	68fb      	ldr	r3, [r7, #12]
}
 8003776:	e01a      	b.n	80037ae <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM8)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a11      	ldr	r2, [pc, #68]	@ (80037c4 <HAL_TIM_Base_MspInit+0xcc>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d115      	bne.n	80037ae <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003782:	2300      	movs	r3, #0
 8003784:	60bb      	str	r3, [r7, #8]
 8003786:	4b0d      	ldr	r3, [pc, #52]	@ (80037bc <HAL_TIM_Base_MspInit+0xc4>)
 8003788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800378a:	4a0c      	ldr	r2, [pc, #48]	@ (80037bc <HAL_TIM_Base_MspInit+0xc4>)
 800378c:	f043 0302 	orr.w	r3, r3, #2
 8003790:	6453      	str	r3, [r2, #68]	@ 0x44
 8003792:	4b0a      	ldr	r3, [pc, #40]	@ (80037bc <HAL_TIM_Base_MspInit+0xc4>)
 8003794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	60bb      	str	r3, [r7, #8]
 800379c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800379e:	2200      	movs	r2, #0
 80037a0:	2100      	movs	r1, #0
 80037a2:	202c      	movs	r0, #44	@ 0x2c
 80037a4:	f001 fbbb 	bl	8004f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80037a8:	202c      	movs	r0, #44	@ 0x2c
 80037aa:	f001 fbd4 	bl	8004f56 <HAL_NVIC_EnableIRQ>
}
 80037ae:	bf00      	nop
 80037b0:	3718      	adds	r7, #24
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	40010000 	.word	0x40010000
 80037bc:	40023800 	.word	0x40023800
 80037c0:	40000400 	.word	0x40000400
 80037c4:	40010400 	.word	0x40010400

080037c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b088      	sub	sp, #32
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037d0:	f107 030c 	add.w	r3, r7, #12
 80037d4:	2200      	movs	r2, #0
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	605a      	str	r2, [r3, #4]
 80037da:	609a      	str	r2, [r3, #8]
 80037dc:	60da      	str	r2, [r3, #12]
 80037de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a12      	ldr	r2, [pc, #72]	@ (8003830 <HAL_TIM_MspPostInit+0x68>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d11e      	bne.n	8003828 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037ea:	2300      	movs	r3, #0
 80037ec:	60bb      	str	r3, [r7, #8]
 80037ee:	4b11      	ldr	r3, [pc, #68]	@ (8003834 <HAL_TIM_MspPostInit+0x6c>)
 80037f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f2:	4a10      	ldr	r2, [pc, #64]	@ (8003834 <HAL_TIM_MspPostInit+0x6c>)
 80037f4:	f043 0301 	orr.w	r3, r3, #1
 80037f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80037fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003834 <HAL_TIM_MspPostInit+0x6c>)
 80037fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	60bb      	str	r3, [r7, #8]
 8003804:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8003806:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800380a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800380c:	2302      	movs	r3, #2
 800380e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003810:	2300      	movs	r3, #0
 8003812:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003814:	2300      	movs	r3, #0
 8003816:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003818:	2301      	movs	r3, #1
 800381a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800381c:	f107 030c 	add.w	r3, r7, #12
 8003820:	4619      	mov	r1, r3
 8003822:	4805      	ldr	r0, [pc, #20]	@ (8003838 <HAL_TIM_MspPostInit+0x70>)
 8003824:	f001 ffb4 	bl	8005790 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003828:	bf00      	nop
 800382a:	3720      	adds	r7, #32
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	40010000 	.word	0x40010000
 8003834:	40023800 	.word	0x40023800
 8003838:	40020000 	.word	0x40020000

0800383c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b08c      	sub	sp, #48	@ 0x30
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003844:	f107 031c 	add.w	r3, r7, #28
 8003848:	2200      	movs	r2, #0
 800384a:	601a      	str	r2, [r3, #0]
 800384c:	605a      	str	r2, [r3, #4]
 800384e:	609a      	str	r2, [r3, #8]
 8003850:	60da      	str	r2, [r3, #12]
 8003852:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a4d      	ldr	r2, [pc, #308]	@ (8003990 <HAL_UART_MspInit+0x154>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d12d      	bne.n	80038ba <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800385e:	2300      	movs	r3, #0
 8003860:	61bb      	str	r3, [r7, #24]
 8003862:	4b4c      	ldr	r3, [pc, #304]	@ (8003994 <HAL_UART_MspInit+0x158>)
 8003864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003866:	4a4b      	ldr	r2, [pc, #300]	@ (8003994 <HAL_UART_MspInit+0x158>)
 8003868:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800386c:	6413      	str	r3, [r2, #64]	@ 0x40
 800386e:	4b49      	ldr	r3, [pc, #292]	@ (8003994 <HAL_UART_MspInit+0x158>)
 8003870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003872:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003876:	61bb      	str	r3, [r7, #24]
 8003878:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800387a:	2300      	movs	r3, #0
 800387c:	617b      	str	r3, [r7, #20]
 800387e:	4b45      	ldr	r3, [pc, #276]	@ (8003994 <HAL_UART_MspInit+0x158>)
 8003880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003882:	4a44      	ldr	r2, [pc, #272]	@ (8003994 <HAL_UART_MspInit+0x158>)
 8003884:	f043 0304 	orr.w	r3, r3, #4
 8003888:	6313      	str	r3, [r2, #48]	@ 0x30
 800388a:	4b42      	ldr	r3, [pc, #264]	@ (8003994 <HAL_UART_MspInit+0x158>)
 800388c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800388e:	f003 0304 	and.w	r3, r3, #4
 8003892:	617b      	str	r3, [r7, #20]
 8003894:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003896:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800389a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800389c:	2302      	movs	r3, #2
 800389e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a0:	2300      	movs	r3, #0
 80038a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038a4:	2303      	movs	r3, #3
 80038a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80038a8:	2308      	movs	r3, #8
 80038aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038ac:	f107 031c 	add.w	r3, r7, #28
 80038b0:	4619      	mov	r1, r3
 80038b2:	4839      	ldr	r0, [pc, #228]	@ (8003998 <HAL_UART_MspInit+0x15c>)
 80038b4:	f001 ff6c 	bl	8005790 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80038b8:	e066      	b.n	8003988 <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART2)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a37      	ldr	r2, [pc, #220]	@ (800399c <HAL_UART_MspInit+0x160>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d161      	bne.n	8003988 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80038c4:	2300      	movs	r3, #0
 80038c6:	613b      	str	r3, [r7, #16]
 80038c8:	4b32      	ldr	r3, [pc, #200]	@ (8003994 <HAL_UART_MspInit+0x158>)
 80038ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038cc:	4a31      	ldr	r2, [pc, #196]	@ (8003994 <HAL_UART_MspInit+0x158>)
 80038ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80038d4:	4b2f      	ldr	r3, [pc, #188]	@ (8003994 <HAL_UART_MspInit+0x158>)
 80038d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038dc:	613b      	str	r3, [r7, #16]
 80038de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038e0:	2300      	movs	r3, #0
 80038e2:	60fb      	str	r3, [r7, #12]
 80038e4:	4b2b      	ldr	r3, [pc, #172]	@ (8003994 <HAL_UART_MspInit+0x158>)
 80038e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e8:	4a2a      	ldr	r2, [pc, #168]	@ (8003994 <HAL_UART_MspInit+0x158>)
 80038ea:	f043 0301 	orr.w	r3, r3, #1
 80038ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80038f0:	4b28      	ldr	r3, [pc, #160]	@ (8003994 <HAL_UART_MspInit+0x158>)
 80038f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	60fb      	str	r3, [r7, #12]
 80038fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80038fc:	230c      	movs	r3, #12
 80038fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003900:	2302      	movs	r3, #2
 8003902:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003904:	2300      	movs	r3, #0
 8003906:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003908:	2303      	movs	r3, #3
 800390a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800390c:	2307      	movs	r3, #7
 800390e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003910:	f107 031c 	add.w	r3, r7, #28
 8003914:	4619      	mov	r1, r3
 8003916:	4822      	ldr	r0, [pc, #136]	@ (80039a0 <HAL_UART_MspInit+0x164>)
 8003918:	f001 ff3a 	bl	8005790 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800391c:	4b21      	ldr	r3, [pc, #132]	@ (80039a4 <HAL_UART_MspInit+0x168>)
 800391e:	4a22      	ldr	r2, [pc, #136]	@ (80039a8 <HAL_UART_MspInit+0x16c>)
 8003920:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003922:	4b20      	ldr	r3, [pc, #128]	@ (80039a4 <HAL_UART_MspInit+0x168>)
 8003924:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003928:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800392a:	4b1e      	ldr	r3, [pc, #120]	@ (80039a4 <HAL_UART_MspInit+0x168>)
 800392c:	2240      	movs	r2, #64	@ 0x40
 800392e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003930:	4b1c      	ldr	r3, [pc, #112]	@ (80039a4 <HAL_UART_MspInit+0x168>)
 8003932:	2200      	movs	r2, #0
 8003934:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003936:	4b1b      	ldr	r3, [pc, #108]	@ (80039a4 <HAL_UART_MspInit+0x168>)
 8003938:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800393c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800393e:	4b19      	ldr	r3, [pc, #100]	@ (80039a4 <HAL_UART_MspInit+0x168>)
 8003940:	2200      	movs	r2, #0
 8003942:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003944:	4b17      	ldr	r3, [pc, #92]	@ (80039a4 <HAL_UART_MspInit+0x168>)
 8003946:	2200      	movs	r2, #0
 8003948:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800394a:	4b16      	ldr	r3, [pc, #88]	@ (80039a4 <HAL_UART_MspInit+0x168>)
 800394c:	2200      	movs	r2, #0
 800394e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003950:	4b14      	ldr	r3, [pc, #80]	@ (80039a4 <HAL_UART_MspInit+0x168>)
 8003952:	2200      	movs	r2, #0
 8003954:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003956:	4b13      	ldr	r3, [pc, #76]	@ (80039a4 <HAL_UART_MspInit+0x168>)
 8003958:	2200      	movs	r2, #0
 800395a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800395c:	4811      	ldr	r0, [pc, #68]	@ (80039a4 <HAL_UART_MspInit+0x168>)
 800395e:	f001 fb15 	bl	8004f8c <HAL_DMA_Init>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d001      	beq.n	800396c <HAL_UART_MspInit+0x130>
      Error_Handler();
 8003968:	f7ff fd90 	bl	800348c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a0d      	ldr	r2, [pc, #52]	@ (80039a4 <HAL_UART_MspInit+0x168>)
 8003970:	639a      	str	r2, [r3, #56]	@ 0x38
 8003972:	4a0c      	ldr	r2, [pc, #48]	@ (80039a4 <HAL_UART_MspInit+0x168>)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003978:	2200      	movs	r2, #0
 800397a:	2100      	movs	r1, #0
 800397c:	2026      	movs	r0, #38	@ 0x26
 800397e:	f001 face 	bl	8004f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003982:	2026      	movs	r0, #38	@ 0x26
 8003984:	f001 fae7 	bl	8004f56 <HAL_NVIC_EnableIRQ>
}
 8003988:	bf00      	nop
 800398a:	3730      	adds	r7, #48	@ 0x30
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	40004c00 	.word	0x40004c00
 8003994:	40023800 	.word	0x40023800
 8003998:	40020800 	.word	0x40020800
 800399c:	40004400 	.word	0x40004400
 80039a0:	40020000 	.word	0x40020000
 80039a4:	20000628 	.word	0x20000628
 80039a8:	400260a0 	.word	0x400260a0

080039ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80039b0:	bf00      	nop
 80039b2:	e7fd      	b.n	80039b0 <NMI_Handler+0x4>

080039b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039b8:	bf00      	nop
 80039ba:	e7fd      	b.n	80039b8 <HardFault_Handler+0x4>

080039bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039c0:	bf00      	nop
 80039c2:	e7fd      	b.n	80039c0 <MemManage_Handler+0x4>

080039c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039c4:	b480      	push	{r7}
 80039c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039c8:	bf00      	nop
 80039ca:	e7fd      	b.n	80039c8 <BusFault_Handler+0x4>

080039cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039d0:	bf00      	nop
 80039d2:	e7fd      	b.n	80039d0 <UsageFault_Handler+0x4>

080039d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039d8:	bf00      	nop
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039e2:	b480      	push	{r7}
 80039e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039e6:	bf00      	nop
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039f4:	bf00      	nop
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr

080039fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a02:	f000 f997 	bl	8003d34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a06:	bf00      	nop
 8003a08:	bd80      	pop	{r7, pc}
	...

08003a0c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003a10:	4802      	ldr	r0, [pc, #8]	@ (8003a1c <DMA1_Stream6_IRQHandler+0x10>)
 8003a12:	f001 fc53 	bl	80052bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003a16:	bf00      	nop
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	20000628 	.word	0x20000628

08003a20 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003a24:	4803      	ldr	r0, [pc, #12]	@ (8003a34 <ADC_IRQHandler+0x14>)
 8003a26:	f000 fa0c 	bl	8003e42 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8003a2a:	4803      	ldr	r0, [pc, #12]	@ (8003a38 <ADC_IRQHandler+0x18>)
 8003a2c:	f000 fa09 	bl	8003e42 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003a30:	bf00      	nop
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	20000330 	.word	0x20000330
 8003a38:	20000378 	.word	0x20000378

08003a3c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003a40:	4802      	ldr	r0, [pc, #8]	@ (8003a4c <SPI1_IRQHandler+0x10>)
 8003a42:	f003 fa01 	bl	8006e48 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003a46:	bf00      	nop
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	20000420 	.word	0x20000420

08003a50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003a54:	4802      	ldr	r0, [pc, #8]	@ (8003a60 <USART2_IRQHandler+0x10>)
 8003a56:	f004 fd8f 	bl	8008578 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003a5a:	bf00      	nop
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	200005e0 	.word	0x200005e0

08003a64 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003a68:	4802      	ldr	r0, [pc, #8]	@ (8003a74 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8003a6a:	f003 fe25 	bl	80076b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003a6e:	bf00      	nop
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	20000550 	.word	0x20000550

08003a78 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003a7c:	4802      	ldr	r0, [pc, #8]	@ (8003a88 <DMA2_Stream2_IRQHandler+0x10>)
 8003a7e:	f001 fc1d 	bl	80052bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003a82:	bf00      	nop
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	200003c0 	.word	0x200003c0

08003a8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
  return 1;
 8003a90:	2301      	movs	r3, #1
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <_kill>:

int _kill(int pid, int sig)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003aa6:	f006 fad1 	bl	800a04c <__errno>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2216      	movs	r2, #22
 8003aae:	601a      	str	r2, [r3, #0]
  return -1;
 8003ab0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3708      	adds	r7, #8
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <_exit>:

void _exit (int status)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f7ff ffe7 	bl	8003a9c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003ace:	bf00      	nop
 8003ad0:	e7fd      	b.n	8003ace <_exit+0x12>

08003ad2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b086      	sub	sp, #24
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	60f8      	str	r0, [r7, #12]
 8003ada:	60b9      	str	r1, [r7, #8]
 8003adc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ade:	2300      	movs	r3, #0
 8003ae0:	617b      	str	r3, [r7, #20]
 8003ae2:	e00a      	b.n	8003afa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003ae4:	f3af 8000 	nop.w
 8003ae8:	4601      	mov	r1, r0
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	1c5a      	adds	r2, r3, #1
 8003aee:	60ba      	str	r2, [r7, #8]
 8003af0:	b2ca      	uxtb	r2, r1
 8003af2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	3301      	adds	r3, #1
 8003af8:	617b      	str	r3, [r7, #20]
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	dbf0      	blt.n	8003ae4 <_read+0x12>
  }

  return len;
 8003b02:	687b      	ldr	r3, [r7, #4]
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3718      	adds	r7, #24
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b086      	sub	sp, #24
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b18:	2300      	movs	r3, #0
 8003b1a:	617b      	str	r3, [r7, #20]
 8003b1c:	e009      	b.n	8003b32 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	1c5a      	adds	r2, r3, #1
 8003b22:	60ba      	str	r2, [r7, #8]
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	3301      	adds	r3, #1
 8003b30:	617b      	str	r3, [r7, #20]
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	dbf1      	blt.n	8003b1e <_write+0x12>
  }
  return len;
 8003b3a:	687b      	ldr	r3, [r7, #4]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3718      	adds	r7, #24
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <_close>:

int _close(int file)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003b4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003b6c:	605a      	str	r2, [r3, #4]
  return 0;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <_isatty>:

int _isatty(int file)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003b84:	2301      	movs	r3, #1
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b085      	sub	sp, #20
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	60f8      	str	r0, [r7, #12]
 8003b9a:	60b9      	str	r1, [r7, #8]
 8003b9c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3714      	adds	r7, #20
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b086      	sub	sp, #24
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003bb4:	4a14      	ldr	r2, [pc, #80]	@ (8003c08 <_sbrk+0x5c>)
 8003bb6:	4b15      	ldr	r3, [pc, #84]	@ (8003c0c <_sbrk+0x60>)
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003bc0:	4b13      	ldr	r3, [pc, #76]	@ (8003c10 <_sbrk+0x64>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d102      	bne.n	8003bce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003bc8:	4b11      	ldr	r3, [pc, #68]	@ (8003c10 <_sbrk+0x64>)
 8003bca:	4a12      	ldr	r2, [pc, #72]	@ (8003c14 <_sbrk+0x68>)
 8003bcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003bce:	4b10      	ldr	r3, [pc, #64]	@ (8003c10 <_sbrk+0x64>)
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d207      	bcs.n	8003bec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003bdc:	f006 fa36 	bl	800a04c <__errno>
 8003be0:	4603      	mov	r3, r0
 8003be2:	220c      	movs	r2, #12
 8003be4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003be6:	f04f 33ff 	mov.w	r3, #4294967295
 8003bea:	e009      	b.n	8003c00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003bec:	4b08      	ldr	r3, [pc, #32]	@ (8003c10 <_sbrk+0x64>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003bf2:	4b07      	ldr	r3, [pc, #28]	@ (8003c10 <_sbrk+0x64>)
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	4a05      	ldr	r2, [pc, #20]	@ (8003c10 <_sbrk+0x64>)
 8003bfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3718      	adds	r7, #24
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	20020000 	.word	0x20020000
 8003c0c:	00000400 	.word	0x00000400
 8003c10:	200006b8 	.word	0x200006b8
 8003c14:	20000810 	.word	0x20000810

08003c18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c1c:	4b06      	ldr	r3, [pc, #24]	@ (8003c38 <SystemInit+0x20>)
 8003c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c22:	4a05      	ldr	r2, [pc, #20]	@ (8003c38 <SystemInit+0x20>)
 8003c24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003c28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c2c:	bf00      	nop
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	e000ed00 	.word	0xe000ed00

08003c3c <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

 	  ldr   sp, =_estack      /* set stack pointer */
 8003c3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003c74 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003c40:	f7ff ffea 	bl	8003c18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003c44:	480c      	ldr	r0, [pc, #48]	@ (8003c78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003c46:	490d      	ldr	r1, [pc, #52]	@ (8003c7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003c48:	4a0d      	ldr	r2, [pc, #52]	@ (8003c80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003c4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c4c:	e002      	b.n	8003c54 <LoopCopyDataInit>

08003c4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c52:	3304      	adds	r3, #4

08003c54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c58:	d3f9      	bcc.n	8003c4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8003c84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003c5c:	4c0a      	ldr	r4, [pc, #40]	@ (8003c88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003c5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c60:	e001      	b.n	8003c66 <LoopFillZerobss>

08003c62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c64:	3204      	adds	r2, #4

08003c66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c68:	d3fb      	bcc.n	8003c62 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003c6a:	f006 f9f5 	bl	800a058 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c6e:	f7fe fe0b 	bl	8002888 <main>
  bx  lr    
 8003c72:	4770      	bx	lr
 	  ldr   sp, =_estack      /* set stack pointer */
 8003c74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003c78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c7c:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8003c80:	0800da98 	.word	0x0800da98
  ldr r2, =_sbss
 8003c84:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8003c88:	2000080c 	.word	0x2000080c

08003c8c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c8c:	e7fe      	b.n	8003c8c <CAN1_RX0_IRQHandler>
	...

08003c90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c94:	4b0e      	ldr	r3, [pc, #56]	@ (8003cd0 <HAL_Init+0x40>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a0d      	ldr	r2, [pc, #52]	@ (8003cd0 <HAL_Init+0x40>)
 8003c9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8003cd0 <HAL_Init+0x40>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a0a      	ldr	r2, [pc, #40]	@ (8003cd0 <HAL_Init+0x40>)
 8003ca6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003caa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003cac:	4b08      	ldr	r3, [pc, #32]	@ (8003cd0 <HAL_Init+0x40>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a07      	ldr	r2, [pc, #28]	@ (8003cd0 <HAL_Init+0x40>)
 8003cb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cb8:	2003      	movs	r0, #3
 8003cba:	f001 f925 	bl	8004f08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003cbe:	2000      	movs	r0, #0
 8003cc0:	f000 f808 	bl	8003cd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003cc4:	f7ff fbe8 	bl	8003498 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	40023c00 	.word	0x40023c00

08003cd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003cdc:	4b12      	ldr	r3, [pc, #72]	@ (8003d28 <HAL_InitTick+0x54>)
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	4b12      	ldr	r3, [pc, #72]	@ (8003d2c <HAL_InitTick+0x58>)
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003cea:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f001 f93d 	bl	8004f72 <HAL_SYSTICK_Config>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e00e      	b.n	8003d20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2b0f      	cmp	r3, #15
 8003d06:	d80a      	bhi.n	8003d1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d08:	2200      	movs	r2, #0
 8003d0a:	6879      	ldr	r1, [r7, #4]
 8003d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d10:	f001 f905 	bl	8004f1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d14:	4a06      	ldr	r2, [pc, #24]	@ (8003d30 <HAL_InitTick+0x5c>)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	e000      	b.n	8003d20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3708      	adds	r7, #8
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	20000034 	.word	0x20000034
 8003d2c:	2000003c 	.word	0x2000003c
 8003d30:	20000038 	.word	0x20000038

08003d34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d34:	b480      	push	{r7}
 8003d36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d38:	4b06      	ldr	r3, [pc, #24]	@ (8003d54 <HAL_IncTick+0x20>)
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	4b06      	ldr	r3, [pc, #24]	@ (8003d58 <HAL_IncTick+0x24>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4413      	add	r3, r2
 8003d44:	4a04      	ldr	r2, [pc, #16]	@ (8003d58 <HAL_IncTick+0x24>)
 8003d46:	6013      	str	r3, [r2, #0]
}
 8003d48:	bf00      	nop
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	2000003c 	.word	0x2000003c
 8003d58:	200006bc 	.word	0x200006bc

08003d5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	af00      	add	r7, sp, #0
  return uwTick;
 8003d60:	4b03      	ldr	r3, [pc, #12]	@ (8003d70 <HAL_GetTick+0x14>)
 8003d62:	681b      	ldr	r3, [r3, #0]
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	200006bc 	.word	0x200006bc

08003d74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d7c:	f7ff ffee 	bl	8003d5c <HAL_GetTick>
 8003d80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d8c:	d005      	beq.n	8003d9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8003db8 <HAL_Delay+0x44>)
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	461a      	mov	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	4413      	add	r3, r2
 8003d98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d9a:	bf00      	nop
 8003d9c:	f7ff ffde 	bl	8003d5c <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d8f7      	bhi.n	8003d9c <HAL_Delay+0x28>
  {
  }
}
 8003dac:	bf00      	nop
 8003dae:	bf00      	nop
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	2000003c 	.word	0x2000003c

08003dbc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e033      	b.n	8003e3a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d109      	bne.n	8003dee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7ff fb84 	bl	80034e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df2:	f003 0310 	and.w	r3, r3, #16
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d118      	bne.n	8003e2c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfe:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003e02:	f023 0302 	bic.w	r3, r3, #2
 8003e06:	f043 0202 	orr.w	r2, r3, #2
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 fb88 	bl	8004524 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e1e:	f023 0303 	bic.w	r3, r3, #3
 8003e22:	f043 0201 	orr.w	r2, r3, #1
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	641a      	str	r2, [r3, #64]	@ 0x40
 8003e2a:	e001      	b.n	8003e30 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3710      	adds	r7, #16
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b086      	sub	sp, #24
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	617b      	str	r3, [r7, #20]
 8003e4e:	2300      	movs	r3, #0
 8003e50:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	f003 0320 	and.w	r3, r3, #32
 8003e70:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d049      	beq.n	8003f0c <HAL_ADC_IRQHandler+0xca>
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d046      	beq.n	8003f0c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e82:	f003 0310 	and.w	r3, r3, #16
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d105      	bne.n	8003e96 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e8e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d12b      	bne.n	8003efc <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d127      	bne.n	8003efc <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d006      	beq.n	8003ec8 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d119      	bne.n	8003efc <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 0220 	bic.w	r2, r2, #32
 8003ed6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003edc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d105      	bne.n	8003efc <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef4:	f043 0201 	orr.w	r2, r3, #1
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f7ff fa8b 	bl	8003418 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f06f 0212 	mvn.w	r2, #18
 8003f0a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f003 0304 	and.w	r3, r3, #4
 8003f12:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f1a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d057      	beq.n	8003fd2 <HAL_ADC_IRQHandler+0x190>
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d054      	beq.n	8003fd2 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2c:	f003 0310 	and.w	r3, r3, #16
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d105      	bne.n	8003f40 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f38:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d139      	bne.n	8003fc2 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f54:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d006      	beq.n	8003f6a <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d12b      	bne.n	8003fc2 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d124      	bne.n	8003fc2 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d11d      	bne.n	8003fc2 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d119      	bne.n	8003fc2 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f9c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d105      	bne.n	8003fc2 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fba:	f043 0201 	orr.w	r2, r3, #1
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f7ff f940 	bl	8003248 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f06f 020c 	mvn.w	r2, #12
 8003fd0:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f003 0301 	and.w	r3, r3, #1
 8003fd8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fe0:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d017      	beq.n	8004018 <HAL_ADC_IRQHandler+0x1d6>
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d014      	beq.n	8004018 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d10d      	bne.n	8004018 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004000:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 f945 	bl	8004298 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f06f 0201 	mvn.w	r2, #1
 8004016:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f003 0320 	and.w	r3, r3, #32
 800401e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004026:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d015      	beq.n	800405a <HAL_ADC_IRQHandler+0x218>
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d012      	beq.n	800405a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004038:	f043 0202 	orr.w	r2, r3, #2
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f06f 0220 	mvn.w	r2, #32
 8004048:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f92e 	bl	80042ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f06f 0220 	mvn.w	r2, #32
 8004058:	601a      	str	r2, [r3, #0]
  }
}
 800405a:	bf00      	nop
 800405c:	3718      	adds	r7, #24
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
	...

08004064 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004070:	2300      	movs	r3, #0
 8004072:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800407a:	2b01      	cmp	r3, #1
 800407c:	d101      	bne.n	8004082 <HAL_ADC_Start_DMA+0x1e>
 800407e:	2302      	movs	r3, #2
 8004080:	e0e9      	b.n	8004256 <HAL_ADC_Start_DMA+0x1f2>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2201      	movs	r2, #1
 8004086:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	2b01      	cmp	r3, #1
 8004096:	d018      	beq.n	80040ca <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	689a      	ldr	r2, [r3, #8]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f042 0201 	orr.w	r2, r2, #1
 80040a6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80040a8:	4b6d      	ldr	r3, [pc, #436]	@ (8004260 <HAL_ADC_Start_DMA+0x1fc>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a6d      	ldr	r2, [pc, #436]	@ (8004264 <HAL_ADC_Start_DMA+0x200>)
 80040ae:	fba2 2303 	umull	r2, r3, r2, r3
 80040b2:	0c9a      	lsrs	r2, r3, #18
 80040b4:	4613      	mov	r3, r2
 80040b6:	005b      	lsls	r3, r3, #1
 80040b8:	4413      	add	r3, r2
 80040ba:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80040bc:	e002      	b.n	80040c4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	3b01      	subs	r3, #1
 80040c2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1f9      	bne.n	80040be <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040d8:	d107      	bne.n	80040ea <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	689a      	ldr	r2, [r3, #8]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80040e8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f003 0301 	and.w	r3, r3, #1
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	f040 80a1 	bne.w	800423c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fe:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004102:	f023 0301 	bic.w	r3, r3, #1
 8004106:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004118:	2b00      	cmp	r3, #0
 800411a:	d007      	beq.n	800412c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004120:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004124:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004130:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004134:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004138:	d106      	bne.n	8004148 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800413e:	f023 0206 	bic.w	r2, r3, #6
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	645a      	str	r2, [r3, #68]	@ 0x44
 8004146:	e002      	b.n	800414e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004156:	4b44      	ldr	r3, [pc, #272]	@ (8004268 <HAL_ADC_Start_DMA+0x204>)
 8004158:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800415e:	4a43      	ldr	r2, [pc, #268]	@ (800426c <HAL_ADC_Start_DMA+0x208>)
 8004160:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004166:	4a42      	ldr	r2, [pc, #264]	@ (8004270 <HAL_ADC_Start_DMA+0x20c>)
 8004168:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800416e:	4a41      	ldr	r2, [pc, #260]	@ (8004274 <HAL_ADC_Start_DMA+0x210>)
 8004170:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800417a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800418a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689a      	ldr	r2, [r3, #8]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800419a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	334c      	adds	r3, #76	@ 0x4c
 80041a6:	4619      	mov	r1, r3
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f000 ff9c 	bl	80050e8 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f003 031f 	and.w	r3, r3, #31
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d12a      	bne.n	8004212 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a2d      	ldr	r2, [pc, #180]	@ (8004278 <HAL_ADC_Start_DMA+0x214>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d015      	beq.n	80041f2 <HAL_ADC_Start_DMA+0x18e>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a2c      	ldr	r2, [pc, #176]	@ (800427c <HAL_ADC_Start_DMA+0x218>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d105      	bne.n	80041dc <HAL_ADC_Start_DMA+0x178>
 80041d0:	4b25      	ldr	r3, [pc, #148]	@ (8004268 <HAL_ADC_Start_DMA+0x204>)
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f003 031f 	and.w	r3, r3, #31
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00a      	beq.n	80041f2 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a27      	ldr	r2, [pc, #156]	@ (8004280 <HAL_ADC_Start_DMA+0x21c>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d136      	bne.n	8004254 <HAL_ADC_Start_DMA+0x1f0>
 80041e6:	4b20      	ldr	r3, [pc, #128]	@ (8004268 <HAL_ADC_Start_DMA+0x204>)
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f003 0310 	and.w	r3, r3, #16
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d130      	bne.n	8004254 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d129      	bne.n	8004254 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689a      	ldr	r2, [r3, #8]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800420e:	609a      	str	r2, [r3, #8]
 8004210:	e020      	b.n	8004254 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a18      	ldr	r2, [pc, #96]	@ (8004278 <HAL_ADC_Start_DMA+0x214>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d11b      	bne.n	8004254 <HAL_ADC_Start_DMA+0x1f0>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d114      	bne.n	8004254 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004238:	609a      	str	r2, [r3, #8]
 800423a:	e00b      	b.n	8004254 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004240:	f043 0210 	orr.w	r2, r3, #16
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800424c:	f043 0201 	orr.w	r2, r3, #1
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3718      	adds	r7, #24
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	20000034 	.word	0x20000034
 8004264:	431bde83 	.word	0x431bde83
 8004268:	40012300 	.word	0x40012300
 800426c:	0800471d 	.word	0x0800471d
 8004270:	080047d7 	.word	0x080047d7
 8004274:	080047f3 	.word	0x080047f3
 8004278:	40012000 	.word	0x40012000
 800427c:	40012100 	.word	0x40012100
 8004280:	40012200 	.word	0x40012200

08004284 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80042ca:	2300      	movs	r3, #0
 80042cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d101      	bne.n	80042dc <HAL_ADC_ConfigChannel+0x1c>
 80042d8:	2302      	movs	r3, #2
 80042da:	e113      	b.n	8004504 <HAL_ADC_ConfigChannel+0x244>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2b09      	cmp	r3, #9
 80042ea:	d925      	bls.n	8004338 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68d9      	ldr	r1, [r3, #12]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	461a      	mov	r2, r3
 80042fa:	4613      	mov	r3, r2
 80042fc:	005b      	lsls	r3, r3, #1
 80042fe:	4413      	add	r3, r2
 8004300:	3b1e      	subs	r3, #30
 8004302:	2207      	movs	r2, #7
 8004304:	fa02 f303 	lsl.w	r3, r2, r3
 8004308:	43da      	mvns	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	400a      	ands	r2, r1
 8004310:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68d9      	ldr	r1, [r3, #12]
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	689a      	ldr	r2, [r3, #8]
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	b29b      	uxth	r3, r3
 8004322:	4618      	mov	r0, r3
 8004324:	4603      	mov	r3, r0
 8004326:	005b      	lsls	r3, r3, #1
 8004328:	4403      	add	r3, r0
 800432a:	3b1e      	subs	r3, #30
 800432c:	409a      	lsls	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	430a      	orrs	r2, r1
 8004334:	60da      	str	r2, [r3, #12]
 8004336:	e022      	b.n	800437e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6919      	ldr	r1, [r3, #16]
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	b29b      	uxth	r3, r3
 8004344:	461a      	mov	r2, r3
 8004346:	4613      	mov	r3, r2
 8004348:	005b      	lsls	r3, r3, #1
 800434a:	4413      	add	r3, r2
 800434c:	2207      	movs	r2, #7
 800434e:	fa02 f303 	lsl.w	r3, r2, r3
 8004352:	43da      	mvns	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	400a      	ands	r2, r1
 800435a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	6919      	ldr	r1, [r3, #16]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	689a      	ldr	r2, [r3, #8]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	b29b      	uxth	r3, r3
 800436c:	4618      	mov	r0, r3
 800436e:	4603      	mov	r3, r0
 8004370:	005b      	lsls	r3, r3, #1
 8004372:	4403      	add	r3, r0
 8004374:	409a      	lsls	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	430a      	orrs	r2, r1
 800437c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	2b06      	cmp	r3, #6
 8004384:	d824      	bhi.n	80043d0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	4613      	mov	r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	4413      	add	r3, r2
 8004396:	3b05      	subs	r3, #5
 8004398:	221f      	movs	r2, #31
 800439a:	fa02 f303 	lsl.w	r3, r2, r3
 800439e:	43da      	mvns	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	400a      	ands	r2, r1
 80043a6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	4618      	mov	r0, r3
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	685a      	ldr	r2, [r3, #4]
 80043ba:	4613      	mov	r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	4413      	add	r3, r2
 80043c0:	3b05      	subs	r3, #5
 80043c2:	fa00 f203 	lsl.w	r2, r0, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80043ce:	e04c      	b.n	800446a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	2b0c      	cmp	r3, #12
 80043d6:	d824      	bhi.n	8004422 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	4613      	mov	r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	4413      	add	r3, r2
 80043e8:	3b23      	subs	r3, #35	@ 0x23
 80043ea:	221f      	movs	r2, #31
 80043ec:	fa02 f303 	lsl.w	r3, r2, r3
 80043f0:	43da      	mvns	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	400a      	ands	r2, r1
 80043f8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	b29b      	uxth	r3, r3
 8004406:	4618      	mov	r0, r3
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	4613      	mov	r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	4413      	add	r3, r2
 8004412:	3b23      	subs	r3, #35	@ 0x23
 8004414:	fa00 f203 	lsl.w	r2, r0, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	430a      	orrs	r2, r1
 800441e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004420:	e023      	b.n	800446a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	685a      	ldr	r2, [r3, #4]
 800442c:	4613      	mov	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4413      	add	r3, r2
 8004432:	3b41      	subs	r3, #65	@ 0x41
 8004434:	221f      	movs	r2, #31
 8004436:	fa02 f303 	lsl.w	r3, r2, r3
 800443a:	43da      	mvns	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	400a      	ands	r2, r1
 8004442:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	b29b      	uxth	r3, r3
 8004450:	4618      	mov	r0, r3
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	685a      	ldr	r2, [r3, #4]
 8004456:	4613      	mov	r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	4413      	add	r3, r2
 800445c:	3b41      	subs	r3, #65	@ 0x41
 800445e:	fa00 f203 	lsl.w	r2, r0, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	430a      	orrs	r2, r1
 8004468:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800446a:	4b29      	ldr	r3, [pc, #164]	@ (8004510 <HAL_ADC_ConfigChannel+0x250>)
 800446c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a28      	ldr	r2, [pc, #160]	@ (8004514 <HAL_ADC_ConfigChannel+0x254>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d10f      	bne.n	8004498 <HAL_ADC_ConfigChannel+0x1d8>
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2b12      	cmp	r3, #18
 800447e:	d10b      	bne.n	8004498 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a1d      	ldr	r2, [pc, #116]	@ (8004514 <HAL_ADC_ConfigChannel+0x254>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d12b      	bne.n	80044fa <HAL_ADC_ConfigChannel+0x23a>
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a1c      	ldr	r2, [pc, #112]	@ (8004518 <HAL_ADC_ConfigChannel+0x258>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d003      	beq.n	80044b4 <HAL_ADC_ConfigChannel+0x1f4>
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2b11      	cmp	r3, #17
 80044b2:	d122      	bne.n	80044fa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a11      	ldr	r2, [pc, #68]	@ (8004518 <HAL_ADC_ConfigChannel+0x258>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d111      	bne.n	80044fa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80044d6:	4b11      	ldr	r3, [pc, #68]	@ (800451c <HAL_ADC_ConfigChannel+0x25c>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a11      	ldr	r2, [pc, #68]	@ (8004520 <HAL_ADC_ConfigChannel+0x260>)
 80044dc:	fba2 2303 	umull	r2, r3, r2, r3
 80044e0:	0c9a      	lsrs	r2, r3, #18
 80044e2:	4613      	mov	r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4413      	add	r3, r2
 80044e8:	005b      	lsls	r3, r3, #1
 80044ea:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80044ec:	e002      	b.n	80044f4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	3b01      	subs	r3, #1
 80044f2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1f9      	bne.n	80044ee <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004502:	2300      	movs	r3, #0
}
 8004504:	4618      	mov	r0, r3
 8004506:	3714      	adds	r7, #20
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr
 8004510:	40012300 	.word	0x40012300
 8004514:	40012000 	.word	0x40012000
 8004518:	10000012 	.word	0x10000012
 800451c:	20000034 	.word	0x20000034
 8004520:	431bde83 	.word	0x431bde83

08004524 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800452c:	4b79      	ldr	r3, [pc, #484]	@ (8004714 <ADC_Init+0x1f0>)
 800452e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	431a      	orrs	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	685a      	ldr	r2, [r3, #4]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004558:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	6859      	ldr	r1, [r3, #4]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	021a      	lsls	r2, r3, #8
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	430a      	orrs	r2, r1
 800456c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	685a      	ldr	r2, [r3, #4]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800457c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	6859      	ldr	r1, [r3, #4]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689a      	ldr	r2, [r3, #8]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	430a      	orrs	r2, r1
 800458e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689a      	ldr	r2, [r3, #8]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800459e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6899      	ldr	r1, [r3, #8]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	68da      	ldr	r2, [r3, #12]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045b6:	4a58      	ldr	r2, [pc, #352]	@ (8004718 <ADC_Init+0x1f4>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d022      	beq.n	8004602 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	689a      	ldr	r2, [r3, #8]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80045ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6899      	ldr	r1, [r3, #8]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	430a      	orrs	r2, r1
 80045dc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	689a      	ldr	r2, [r3, #8]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80045ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	6899      	ldr	r1, [r3, #8]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	430a      	orrs	r2, r1
 80045fe:	609a      	str	r2, [r3, #8]
 8004600:	e00f      	b.n	8004622 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689a      	ldr	r2, [r3, #8]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004610:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	689a      	ldr	r2, [r3, #8]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004620:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	689a      	ldr	r2, [r3, #8]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 0202 	bic.w	r2, r2, #2
 8004630:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6899      	ldr	r1, [r3, #8]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	7e1b      	ldrb	r3, [r3, #24]
 800463c:	005a      	lsls	r2, r3, #1
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	430a      	orrs	r2, r1
 8004644:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 3020 	ldrb.w	r3, [r3, #32]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d01b      	beq.n	8004688 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	685a      	ldr	r2, [r3, #4]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800465e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800466e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	6859      	ldr	r1, [r3, #4]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800467a:	3b01      	subs	r3, #1
 800467c:	035a      	lsls	r2, r3, #13
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	430a      	orrs	r2, r1
 8004684:	605a      	str	r2, [r3, #4]
 8004686:	e007      	b.n	8004698 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004696:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80046a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	3b01      	subs	r3, #1
 80046b4:	051a      	lsls	r2, r3, #20
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80046cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	6899      	ldr	r1, [r3, #8]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80046da:	025a      	lsls	r2, r3, #9
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	430a      	orrs	r2, r1
 80046e2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	689a      	ldr	r2, [r3, #8]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6899      	ldr	r1, [r3, #8]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	029a      	lsls	r2, r3, #10
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	430a      	orrs	r2, r1
 8004706:	609a      	str	r2, [r3, #8]
}
 8004708:	bf00      	nop
 800470a:	3714      	adds	r7, #20
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr
 8004714:	40012300 	.word	0x40012300
 8004718:	0f000001 	.word	0x0f000001

0800471c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004728:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004732:	2b00      	cmp	r3, #0
 8004734:	d13c      	bne.n	80047b0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800473a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d12b      	bne.n	80047a8 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004754:	2b00      	cmp	r3, #0
 8004756:	d127      	bne.n	80047a8 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800475e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004762:	2b00      	cmp	r3, #0
 8004764:	d006      	beq.n	8004774 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004770:	2b00      	cmp	r3, #0
 8004772:	d119      	bne.n	80047a8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	685a      	ldr	r2, [r3, #4]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f022 0220 	bic.w	r2, r2, #32
 8004782:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004788:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004794:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d105      	bne.n	80047a8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047a0:	f043 0201 	orr.w	r2, r3, #1
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f7fe fe35 	bl	8003418 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80047ae:	e00e      	b.n	80047ce <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b4:	f003 0310 	and.w	r3, r3, #16
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d003      	beq.n	80047c4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	f7ff fd75 	bl	80042ac <HAL_ADC_ErrorCallback>
}
 80047c2:	e004      	b.n	80047ce <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	4798      	blx	r3
}
 80047ce:	bf00      	nop
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b084      	sub	sp, #16
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047e2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f7ff fd4d 	bl	8004284 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80047ea:	bf00      	nop
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b084      	sub	sp, #16
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047fe:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2240      	movs	r2, #64	@ 0x40
 8004804:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800480a:	f043 0204 	orr.w	r2, r3, #4
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f7ff fd4a 	bl	80042ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004818:	bf00      	nop
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <HAL_ADCEx_InjectedStart_IT>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8004820:	b480      	push	{r7}
 8004822:	b087      	sub	sp, #28
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004828:	2300      	movs	r3, #0
 800482a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800482c:	2300      	movs	r3, #0
 800482e:	617b      	str	r3, [r7, #20]
 8004830:	2300      	movs	r3, #0
 8004832:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;

  /* Process locked */
  __HAL_LOCK(hadc);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800483a:	2b01      	cmp	r3, #1
 800483c:	d101      	bne.n	8004842 <HAL_ADCEx_InjectedStart_IT+0x22>
 800483e:	2302      	movs	r3, #2
 8004840:	e0b2      	b.n	80049a8 <HAL_ADCEx_InjectedStart_IT+0x188>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */

  /* Check if ADC peripheral is disabled in order to enable it and wait during
     Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f003 0301 	and.w	r3, r3, #1
 8004854:	2b01      	cmp	r3, #1
 8004856:	d018      	beq.n	800488a <HAL_ADCEx_InjectedStart_IT+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	689a      	ldr	r2, [r3, #8]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f042 0201 	orr.w	r2, r2, #1
 8004866:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004868:	4b52      	ldr	r3, [pc, #328]	@ (80049b4 <HAL_ADCEx_InjectedStart_IT+0x194>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a52      	ldr	r2, [pc, #328]	@ (80049b8 <HAL_ADCEx_InjectedStart_IT+0x198>)
 800486e:	fba2 2303 	umull	r2, r3, r2, r3
 8004872:	0c9a      	lsrs	r2, r3, #18
 8004874:	4613      	mov	r3, r2
 8004876:	005b      	lsls	r3, r3, #1
 8004878:	4413      	add	r3, r2
 800487a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800487c:	e002      	b.n	8004884 <HAL_ADCEx_InjectedStart_IT+0x64>
    {
      counter--;
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	3b01      	subs	r3, #1
 8004882:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1f9      	bne.n	800487e <HAL_ADCEx_InjectedStart_IT+0x5e>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f003 0301 	and.w	r3, r3, #1
 8004894:	2b01      	cmp	r3, #1
 8004896:	d17a      	bne.n	800498e <HAL_ADCEx_InjectedStart_IT+0x16e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80048a0:	f023 0301 	bic.w	r3, r3, #1
 80048a4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d102      	bne.n	80048be <HAL_ADCEx_InjectedStart_IT+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f06f 0204 	mvn.w	r2, #4
 80048ce:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for injected channels */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	685a      	ldr	r2, [r3, #4]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80048de:	605a      	str	r2, [r3, #4]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80048e0:	4b36      	ldr	r3, [pc, #216]	@ (80049bc <HAL_ADCEx_InjectedStart_IT+0x19c>)
 80048e2:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f003 031f 	and.w	r3, r3, #31
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d124      	bne.n	800493a <HAL_ADCEx_InjectedStart_IT+0x11a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	bf0c      	ite	eq
 80048fe:	2301      	moveq	r3, #1
 8004900:	2300      	movne	r3, #0
 8004902:	b2db      	uxtb	r3, r3
 8004904:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004910:	2b00      	cmp	r3, #0
 8004912:	bf0c      	ite	eq
 8004914:	2301      	moveq	r3, #1
 8004916:	2300      	movne	r3, #0
 8004918:	b2db      	uxtb	r3, r3
 800491a:	613b      	str	r3, [r7, #16]
      if (tmp1 && tmp2)
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d041      	beq.n	80049a6 <HAL_ADCEx_InjectedStart_IT+0x186>
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d03e      	beq.n	80049a6 <HAL_ADCEx_InjectedStart_IT+0x186>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	689a      	ldr	r2, [r3, #8]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8004936:	609a      	str	r2, [r3, #8]
 8004938:	e035      	b.n	80049a6 <HAL_ADCEx_InjectedStart_IT+0x186>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004944:	2b00      	cmp	r3, #0
 8004946:	bf0c      	ite	eq
 8004948:	2301      	moveq	r3, #1
 800494a:	2300      	movne	r3, #0
 800494c:	b2db      	uxtb	r3, r3
 800494e:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800495a:	2b00      	cmp	r3, #0
 800495c:	bf0c      	ite	eq
 800495e:	2301      	moveq	r3, #1
 8004960:	2300      	movne	r3, #0
 8004962:	b2db      	uxtb	r3, r3
 8004964:	613b      	str	r3, [r7, #16]
      if ((hadc->Instance == ADC1) && tmp1 && tmp2)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a15      	ldr	r2, [pc, #84]	@ (80049c0 <HAL_ADCEx_InjectedStart_IT+0x1a0>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d11a      	bne.n	80049a6 <HAL_ADCEx_InjectedStart_IT+0x186>
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d017      	beq.n	80049a6 <HAL_ADCEx_InjectedStart_IT+0x186>
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d014      	beq.n	80049a6 <HAL_ADCEx_InjectedStart_IT+0x186>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	689a      	ldr	r2, [r3, #8]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800498a:	609a      	str	r2, [r3, #8]
 800498c:	e00b      	b.n	80049a6 <HAL_ADCEx_InjectedStart_IT+0x186>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004992:	f043 0210 	orr.w	r2, r3, #16
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800499e:	f043 0201 	orr.w	r2, r3, #1
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	371c      	adds	r7, #28
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr
 80049b4:	20000034 	.word	0x20000034
 80049b8:	431bde83 	.word	0x431bde83
 80049bc:	40012300 	.word	0x40012300
 80049c0:	40012000 	.word	0x40012000

080049c4 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef *hadc, uint32_t InjectedRank)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 80049ce:	2300      	movs	r3, #0
 80049d0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));

  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f06f 0204 	mvn.w	r2, #4
 80049da:	601a      	str	r2, [r3, #0]

  /* Return the selected ADC converted value */
  switch (InjectedRank)
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	3b01      	subs	r3, #1
 80049e0:	2b03      	cmp	r3, #3
 80049e2:	d81f      	bhi.n	8004a24 <HAL_ADCEx_InjectedGetValue+0x60>
 80049e4:	a201      	add	r2, pc, #4	@ (adr r2, 80049ec <HAL_ADCEx_InjectedGetValue+0x28>)
 80049e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ea:	bf00      	nop
 80049ec:	08004a1b 	.word	0x08004a1b
 80049f0:	08004a11 	.word	0x08004a11
 80049f4:	08004a07 	.word	0x08004a07
 80049f8:	080049fd 	.word	0x080049fd
  {
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a02:	60fb      	str	r3, [r7, #12]
    }
    break;
 8004a04:	e00f      	b.n	8004a26 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3:
    {
      tmp =  hadc->Instance->JDR3;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a0c:	60fb      	str	r3, [r7, #12]
    }
    break;
 8004a0e:	e00a      	b.n	8004a26 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2:
    {
      tmp =  hadc->Instance->JDR2;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a16:	60fb      	str	r3, [r7, #12]
    }
    break;
 8004a18:	e005      	b.n	8004a26 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a20:	60fb      	str	r3, [r7, #12]
    }
    break;
 8004a22:	e000      	b.n	8004a26 <HAL_ADCEx_InjectedGetValue+0x62>
    default:
      break;
 8004a24:	bf00      	nop
  }
  return tmp;
 8004a26:	68fb      	ldr	r3, [r7, #12]
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3714      	adds	r7, #20
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d101      	bne.n	8004a4c <HAL_ADCEx_InjectedConfigChannel+0x18>
 8004a48:	2302      	movs	r3, #2
 8004a4a:	e17e      	b.n	8004d4a <HAL_ADCEx_InjectedConfigChannel+0x316>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2b09      	cmp	r3, #9
 8004a5a:	d925      	bls.n	8004aa8 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68d9      	ldr	r1, [r3, #12]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	461a      	mov	r2, r3
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	005b      	lsls	r3, r3, #1
 8004a6e:	4413      	add	r3, r2
 8004a70:	3b1e      	subs	r3, #30
 8004a72:	2207      	movs	r2, #7
 8004a74:	fa02 f303 	lsl.w	r3, r2, r3
 8004a78:	43da      	mvns	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	400a      	ands	r2, r1
 8004a80:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68d9      	ldr	r1, [r3, #12]
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	689a      	ldr	r2, [r3, #8]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	4618      	mov	r0, r3
 8004a94:	4603      	mov	r3, r0
 8004a96:	005b      	lsls	r3, r3, #1
 8004a98:	4403      	add	r3, r0
 8004a9a:	3b1e      	subs	r3, #30
 8004a9c:	409a      	lsls	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	60da      	str	r2, [r3, #12]
 8004aa6:	e022      	b.n	8004aee <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6919      	ldr	r1, [r3, #16]
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	005b      	lsls	r3, r3, #1
 8004aba:	4413      	add	r3, r2
 8004abc:	2207      	movs	r2, #7
 8004abe:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac2:	43da      	mvns	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	400a      	ands	r2, r1
 8004aca:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	6919      	ldr	r1, [r3, #16]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	689a      	ldr	r2, [r3, #8]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	4618      	mov	r0, r3
 8004ade:	4603      	mov	r3, r0
 8004ae0:	005b      	lsls	r3, r3, #1
 8004ae2:	4403      	add	r3, r0
 8004ae4:	409a      	lsls	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	430a      	orrs	r2, r1
 8004aec:	611a      	str	r2, [r3, #16]
  }

  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8004afc:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	051a      	lsls	r2, r3, #20
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	430a      	orrs	r2, r1
 8004b12:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Rank configuration */

  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	b2da      	uxtb	r2, r3
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	3303      	adds	r3, #3
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	461a      	mov	r2, r3
 8004b30:	4613      	mov	r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	4413      	add	r3, r2
 8004b36:	221f      	movs	r2, #31
 8004b38:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3c:	43da      	mvns	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	400a      	ands	r2, r1
 8004b44:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	4618      	mov	r0, r3
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	b2da      	uxtb	r2, r3
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	3303      	adds	r3, #3
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	461a      	mov	r2, r3
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	4413      	add	r3, r2
 8004b70:	fa00 f203 	lsl.w	r2, r0, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	4a75      	ldr	r2, [pc, #468]	@ (8004d58 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d022      	beq.n	8004bcc <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 8004b94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	6899      	ldr	r1, [r3, #8]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	699a      	ldr	r2, [r3, #24]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	689a      	ldr	r2, [r3, #8]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8004bb6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6899      	ldr	r1, [r3, #8]
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	69da      	ldr	r2, [r3, #28]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	609a      	str	r2, [r3, #8]
 8004bca:	e00f      	b.n	8004bec <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	689a      	ldr	r2, [r3, #8]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 8004bda:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	689a      	ldr	r2, [r3, #8]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8004bea:	609a      	str	r2, [r3, #8]
  }

  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	7d5b      	ldrb	r3, [r3, #21]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d008      	beq.n	8004c06 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	685a      	ldr	r2, [r3, #4]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004c02:	605a      	str	r2, [r3, #4]
 8004c04:	e007      	b.n	8004c16 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	685a      	ldr	r2, [r3, #4]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c14:	605a      	str	r2, [r3, #4]
  }

  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	7d1b      	ldrb	r3, [r3, #20]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d008      	beq.n	8004c30 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	685a      	ldr	r2, [r3, #4]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004c2c:	605a      	str	r2, [r3, #4]
 8004c2e:	e007      	b.n	8004c40 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	685a      	ldr	r2, [r3, #4]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004c3e:	605a      	str	r2, [r3, #4]
  }

  switch (sConfigInjected->InjectedRank)
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	2b03      	cmp	r3, #3
 8004c46:	d02e      	beq.n	8004ca6 <HAL_ADCEx_InjectedConfigChannel+0x272>
 8004c48:	2b03      	cmp	r3, #3
 8004c4a:	d840      	bhi.n	8004cce <HAL_ADCEx_InjectedConfigChannel+0x29a>
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d002      	beq.n	8004c56 <HAL_ADCEx_InjectedConfigChannel+0x222>
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d014      	beq.n	8004c7e <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8004c54:	e03b      	b.n	8004cce <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	695b      	ldr	r3, [r3, #20]
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	6812      	ldr	r2, [r2, #0]
 8004c60:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8004c64:	f023 030f 	bic.w	r3, r3, #15
 8004c68:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	6959      	ldr	r1, [r3, #20]
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	68da      	ldr	r2, [r3, #12]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	430a      	orrs	r2, r1
 8004c7a:	615a      	str	r2, [r3, #20]
      break;
 8004c7c:	e03b      	b.n	8004cf6 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	6812      	ldr	r2, [r2, #0]
 8004c88:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8004c8c:	f023 030f 	bic.w	r3, r3, #15
 8004c90:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	6999      	ldr	r1, [r3, #24]
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	68da      	ldr	r2, [r3, #12]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	619a      	str	r2, [r3, #24]
      break;
 8004ca4:	e027      	b.n	8004cf6 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	69db      	ldr	r3, [r3, #28]
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	6812      	ldr	r2, [r2, #0]
 8004cb0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8004cb4:	f023 030f 	bic.w	r3, r3, #15
 8004cb8:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	69d9      	ldr	r1, [r3, #28]
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	68da      	ldr	r2, [r3, #12]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	61da      	str	r2, [r3, #28]
      break;
 8004ccc:	e013      	b.n	8004cf6 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	6a1b      	ldr	r3, [r3, #32]
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	6812      	ldr	r2, [r2, #0]
 8004cd8:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8004cdc:	f023 030f 	bic.w	r3, r3, #15
 8004ce0:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	6a19      	ldr	r1, [r3, #32]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	68da      	ldr	r2, [r3, #12]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	621a      	str	r2, [r3, #32]
      break;
 8004cf4:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004cf6:	4b19      	ldr	r3, [pc, #100]	@ (8004d5c <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8004cf8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a18      	ldr	r2, [pc, #96]	@ (8004d60 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d109      	bne.n	8004d18 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2b12      	cmp	r3, #18
 8004d0a:	d105      	bne.n	8004d18 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a10      	ldr	r2, [pc, #64]	@ (8004d60 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d10e      	bne.n	8004d40 <HAL_ADCEx_InjectedConfigChannel+0x30c>
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a0f      	ldr	r2, [pc, #60]	@ (8004d64 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d003      	beq.n	8004d34 <HAL_ADCEx_InjectedConfigChannel+0x300>
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2b11      	cmp	r3, #17
 8004d32:	d105      	bne.n	8004d40 <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	605a      	str	r2, [r3, #4]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3714      	adds	r7, #20
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	000f0001 	.word	0x000f0001
 8004d5c:	40012300 	.word	0x40012300
 8004d60:	40012000 	.word	0x40012000
 8004d64:	10000012 	.word	0x10000012

08004d68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f003 0307 	and.w	r3, r3, #7
 8004d76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d78:	4b0c      	ldr	r3, [pc, #48]	@ (8004dac <__NVIC_SetPriorityGrouping+0x44>)
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d7e:	68ba      	ldr	r2, [r7, #8]
 8004d80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004d84:	4013      	ands	r3, r2
 8004d86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004d94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d9a:	4a04      	ldr	r2, [pc, #16]	@ (8004dac <__NVIC_SetPriorityGrouping+0x44>)
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	60d3      	str	r3, [r2, #12]
}
 8004da0:	bf00      	nop
 8004da2:	3714      	adds	r7, #20
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr
 8004dac:	e000ed00 	.word	0xe000ed00

08004db0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004db0:	b480      	push	{r7}
 8004db2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004db4:	4b04      	ldr	r3, [pc, #16]	@ (8004dc8 <__NVIC_GetPriorityGrouping+0x18>)
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	0a1b      	lsrs	r3, r3, #8
 8004dba:	f003 0307 	and.w	r3, r3, #7
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr
 8004dc8:	e000ed00 	.word	0xe000ed00

08004dcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	db0b      	blt.n	8004df6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004dde:	79fb      	ldrb	r3, [r7, #7]
 8004de0:	f003 021f 	and.w	r2, r3, #31
 8004de4:	4907      	ldr	r1, [pc, #28]	@ (8004e04 <__NVIC_EnableIRQ+0x38>)
 8004de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dea:	095b      	lsrs	r3, r3, #5
 8004dec:	2001      	movs	r0, #1
 8004dee:	fa00 f202 	lsl.w	r2, r0, r2
 8004df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004df6:	bf00      	nop
 8004df8:	370c      	adds	r7, #12
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	e000e100 	.word	0xe000e100

08004e08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	4603      	mov	r3, r0
 8004e10:	6039      	str	r1, [r7, #0]
 8004e12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	db0a      	blt.n	8004e32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	b2da      	uxtb	r2, r3
 8004e20:	490c      	ldr	r1, [pc, #48]	@ (8004e54 <__NVIC_SetPriority+0x4c>)
 8004e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e26:	0112      	lsls	r2, r2, #4
 8004e28:	b2d2      	uxtb	r2, r2
 8004e2a:	440b      	add	r3, r1
 8004e2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e30:	e00a      	b.n	8004e48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	b2da      	uxtb	r2, r3
 8004e36:	4908      	ldr	r1, [pc, #32]	@ (8004e58 <__NVIC_SetPriority+0x50>)
 8004e38:	79fb      	ldrb	r3, [r7, #7]
 8004e3a:	f003 030f 	and.w	r3, r3, #15
 8004e3e:	3b04      	subs	r3, #4
 8004e40:	0112      	lsls	r2, r2, #4
 8004e42:	b2d2      	uxtb	r2, r2
 8004e44:	440b      	add	r3, r1
 8004e46:	761a      	strb	r2, [r3, #24]
}
 8004e48:	bf00      	nop
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr
 8004e54:	e000e100 	.word	0xe000e100
 8004e58:	e000ed00 	.word	0xe000ed00

08004e5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b089      	sub	sp, #36	@ 0x24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f003 0307 	and.w	r3, r3, #7
 8004e6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	f1c3 0307 	rsb	r3, r3, #7
 8004e76:	2b04      	cmp	r3, #4
 8004e78:	bf28      	it	cs
 8004e7a:	2304      	movcs	r3, #4
 8004e7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	3304      	adds	r3, #4
 8004e82:	2b06      	cmp	r3, #6
 8004e84:	d902      	bls.n	8004e8c <NVIC_EncodePriority+0x30>
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	3b03      	subs	r3, #3
 8004e8a:	e000      	b.n	8004e8e <NVIC_EncodePriority+0x32>
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e90:	f04f 32ff 	mov.w	r2, #4294967295
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9a:	43da      	mvns	r2, r3
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	401a      	ands	r2, r3
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ea4:	f04f 31ff 	mov.w	r1, #4294967295
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8004eae:	43d9      	mvns	r1, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004eb4:	4313      	orrs	r3, r2
         );
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3724      	adds	r7, #36	@ 0x24
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
	...

08004ec4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ed4:	d301      	bcc.n	8004eda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e00f      	b.n	8004efa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004eda:	4a0a      	ldr	r2, [pc, #40]	@ (8004f04 <SysTick_Config+0x40>)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ee2:	210f      	movs	r1, #15
 8004ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ee8:	f7ff ff8e 	bl	8004e08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004eec:	4b05      	ldr	r3, [pc, #20]	@ (8004f04 <SysTick_Config+0x40>)
 8004eee:	2200      	movs	r2, #0
 8004ef0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ef2:	4b04      	ldr	r3, [pc, #16]	@ (8004f04 <SysTick_Config+0x40>)
 8004ef4:	2207      	movs	r2, #7
 8004ef6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3708      	adds	r7, #8
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	e000e010 	.word	0xe000e010

08004f08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f7ff ff29 	bl	8004d68 <__NVIC_SetPriorityGrouping>
}
 8004f16:	bf00      	nop
 8004f18:	3708      	adds	r7, #8
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}

08004f1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004f1e:	b580      	push	{r7, lr}
 8004f20:	b086      	sub	sp, #24
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	4603      	mov	r3, r0
 8004f26:	60b9      	str	r1, [r7, #8]
 8004f28:	607a      	str	r2, [r7, #4]
 8004f2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f30:	f7ff ff3e 	bl	8004db0 <__NVIC_GetPriorityGrouping>
 8004f34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	68b9      	ldr	r1, [r7, #8]
 8004f3a:	6978      	ldr	r0, [r7, #20]
 8004f3c:	f7ff ff8e 	bl	8004e5c <NVIC_EncodePriority>
 8004f40:	4602      	mov	r2, r0
 8004f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f46:	4611      	mov	r1, r2
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f7ff ff5d 	bl	8004e08 <__NVIC_SetPriority>
}
 8004f4e:	bf00      	nop
 8004f50:	3718      	adds	r7, #24
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b082      	sub	sp, #8
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f64:	4618      	mov	r0, r3
 8004f66:	f7ff ff31 	bl	8004dcc <__NVIC_EnableIRQ>
}
 8004f6a:	bf00      	nop
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f72:	b580      	push	{r7, lr}
 8004f74:	b082      	sub	sp, #8
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f7ff ffa2 	bl	8004ec4 <SysTick_Config>
 8004f80:	4603      	mov	r3, r0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
	...

08004f8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b086      	sub	sp, #24
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004f94:	2300      	movs	r3, #0
 8004f96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004f98:	f7fe fee0 	bl	8003d5c <HAL_GetTick>
 8004f9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d101      	bne.n	8004fa8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e099      	b.n	80050dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2202      	movs	r2, #2
 8004fac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f022 0201 	bic.w	r2, r2, #1
 8004fc6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004fc8:	e00f      	b.n	8004fea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004fca:	f7fe fec7 	bl	8003d5c <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	2b05      	cmp	r3, #5
 8004fd6:	d908      	bls.n	8004fea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2220      	movs	r2, #32
 8004fdc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2203      	movs	r2, #3
 8004fe2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e078      	b.n	80050dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0301 	and.w	r3, r3, #1
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1e8      	bne.n	8004fca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	4b38      	ldr	r3, [pc, #224]	@ (80050e4 <HAL_DMA_Init+0x158>)
 8005004:	4013      	ands	r3, r2
 8005006:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685a      	ldr	r2, [r3, #4]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005016:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005022:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800502e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a1b      	ldr	r3, [r3, #32]
 8005034:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	4313      	orrs	r3, r2
 800503a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005040:	2b04      	cmp	r3, #4
 8005042:	d107      	bne.n	8005054 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800504c:	4313      	orrs	r3, r2
 800504e:	697a      	ldr	r2, [r7, #20]
 8005050:	4313      	orrs	r3, r2
 8005052:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	f023 0307 	bic.w	r3, r3, #7
 800506a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005070:	697a      	ldr	r2, [r7, #20]
 8005072:	4313      	orrs	r3, r2
 8005074:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800507a:	2b04      	cmp	r3, #4
 800507c:	d117      	bne.n	80050ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	4313      	orrs	r3, r2
 8005086:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00e      	beq.n	80050ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 fb01 	bl	8005698 <DMA_CheckFifoParam>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d008      	beq.n	80050ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2240      	movs	r2, #64	@ 0x40
 80050a0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80050aa:	2301      	movs	r3, #1
 80050ac:	e016      	b.n	80050dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 fab8 	bl	800562c <DMA_CalcBaseAndBitshift>
 80050bc:	4603      	mov	r3, r0
 80050be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050c4:	223f      	movs	r2, #63	@ 0x3f
 80050c6:	409a      	lsls	r2, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2201      	movs	r2, #1
 80050d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3718      	adds	r7, #24
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	f010803f 	.word	0xf010803f

080050e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b086      	sub	sp, #24
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	607a      	str	r2, [r7, #4]
 80050f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050f6:	2300      	movs	r3, #0
 80050f8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050fe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005106:	2b01      	cmp	r3, #1
 8005108:	d101      	bne.n	800510e <HAL_DMA_Start_IT+0x26>
 800510a:	2302      	movs	r3, #2
 800510c:	e040      	b.n	8005190 <HAL_DMA_Start_IT+0xa8>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b01      	cmp	r3, #1
 8005120:	d12f      	bne.n	8005182 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2202      	movs	r2, #2
 8005126:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2200      	movs	r2, #0
 800512e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	68b9      	ldr	r1, [r7, #8]
 8005136:	68f8      	ldr	r0, [r7, #12]
 8005138:	f000 fa4a 	bl	80055d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005140:	223f      	movs	r2, #63	@ 0x3f
 8005142:	409a      	lsls	r2, r3
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f042 0216 	orr.w	r2, r2, #22
 8005156:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800515c:	2b00      	cmp	r3, #0
 800515e:	d007      	beq.n	8005170 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f042 0208 	orr.w	r2, r2, #8
 800516e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f042 0201 	orr.w	r2, r2, #1
 800517e:	601a      	str	r2, [r3, #0]
 8005180:	e005      	b.n	800518e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800518a:	2302      	movs	r3, #2
 800518c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800518e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005190:	4618      	mov	r0, r3
 8005192:	3718      	adds	r7, #24
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051a4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80051a6:	f7fe fdd9 	bl	8003d5c <HAL_GetTick>
 80051aa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d008      	beq.n	80051ca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2280      	movs	r2, #128	@ 0x80
 80051bc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e052      	b.n	8005270 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f022 0216 	bic.w	r2, r2, #22
 80051d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	695a      	ldr	r2, [r3, #20]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80051e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d103      	bne.n	80051fa <HAL_DMA_Abort+0x62>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d007      	beq.n	800520a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f022 0208 	bic.w	r2, r2, #8
 8005208:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f022 0201 	bic.w	r2, r2, #1
 8005218:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800521a:	e013      	b.n	8005244 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800521c:	f7fe fd9e 	bl	8003d5c <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	2b05      	cmp	r3, #5
 8005228:	d90c      	bls.n	8005244 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2220      	movs	r2, #32
 800522e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2203      	movs	r2, #3
 8005234:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e015      	b.n	8005270 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1e4      	bne.n	800521c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005256:	223f      	movs	r2, #63	@ 0x3f
 8005258:	409a      	lsls	r2, r3
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2201      	movs	r2, #1
 8005262:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005286:	b2db      	uxtb	r3, r3
 8005288:	2b02      	cmp	r3, #2
 800528a:	d004      	beq.n	8005296 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2280      	movs	r2, #128	@ 0x80
 8005290:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e00c      	b.n	80052b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2205      	movs	r2, #5
 800529a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f022 0201 	bic.w	r2, r2, #1
 80052ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b086      	sub	sp, #24
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80052c4:	2300      	movs	r3, #0
 80052c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80052c8:	4b8e      	ldr	r3, [pc, #568]	@ (8005504 <HAL_DMA_IRQHandler+0x248>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a8e      	ldr	r2, [pc, #568]	@ (8005508 <HAL_DMA_IRQHandler+0x24c>)
 80052ce:	fba2 2303 	umull	r2, r3, r2, r3
 80052d2:	0a9b      	lsrs	r3, r3, #10
 80052d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052e6:	2208      	movs	r2, #8
 80052e8:	409a      	lsls	r2, r3
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	4013      	ands	r3, r2
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d01a      	beq.n	8005328 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0304 	and.w	r3, r3, #4
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d013      	beq.n	8005328 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f022 0204 	bic.w	r2, r2, #4
 800530e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005314:	2208      	movs	r2, #8
 8005316:	409a      	lsls	r2, r3
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005320:	f043 0201 	orr.w	r2, r3, #1
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800532c:	2201      	movs	r2, #1
 800532e:	409a      	lsls	r2, r3
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	4013      	ands	r3, r2
 8005334:	2b00      	cmp	r3, #0
 8005336:	d012      	beq.n	800535e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00b      	beq.n	800535e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800534a:	2201      	movs	r2, #1
 800534c:	409a      	lsls	r2, r3
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005356:	f043 0202 	orr.w	r2, r3, #2
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005362:	2204      	movs	r2, #4
 8005364:	409a      	lsls	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	4013      	ands	r3, r2
 800536a:	2b00      	cmp	r3, #0
 800536c:	d012      	beq.n	8005394 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0302 	and.w	r3, r3, #2
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00b      	beq.n	8005394 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005380:	2204      	movs	r2, #4
 8005382:	409a      	lsls	r2, r3
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800538c:	f043 0204 	orr.w	r2, r3, #4
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005398:	2210      	movs	r2, #16
 800539a:	409a      	lsls	r2, r3
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	4013      	ands	r3, r2
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d043      	beq.n	800542c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0308 	and.w	r3, r3, #8
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d03c      	beq.n	800542c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053b6:	2210      	movs	r2, #16
 80053b8:	409a      	lsls	r2, r3
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d018      	beq.n	80053fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d108      	bne.n	80053ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d024      	beq.n	800542c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	4798      	blx	r3
 80053ea:	e01f      	b.n	800542c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d01b      	beq.n	800542c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	4798      	blx	r3
 80053fc:	e016      	b.n	800542c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005408:	2b00      	cmp	r3, #0
 800540a:	d107      	bne.n	800541c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f022 0208 	bic.w	r2, r2, #8
 800541a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005420:	2b00      	cmp	r3, #0
 8005422:	d003      	beq.n	800542c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005430:	2220      	movs	r2, #32
 8005432:	409a      	lsls	r2, r3
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	4013      	ands	r3, r2
 8005438:	2b00      	cmp	r3, #0
 800543a:	f000 808f 	beq.w	800555c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0310 	and.w	r3, r3, #16
 8005448:	2b00      	cmp	r3, #0
 800544a:	f000 8087 	beq.w	800555c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005452:	2220      	movs	r2, #32
 8005454:	409a      	lsls	r2, r3
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005460:	b2db      	uxtb	r3, r3
 8005462:	2b05      	cmp	r3, #5
 8005464:	d136      	bne.n	80054d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f022 0216 	bic.w	r2, r2, #22
 8005474:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	695a      	ldr	r2, [r3, #20]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005484:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800548a:	2b00      	cmp	r3, #0
 800548c:	d103      	bne.n	8005496 <HAL_DMA_IRQHandler+0x1da>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005492:	2b00      	cmp	r3, #0
 8005494:	d007      	beq.n	80054a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f022 0208 	bic.w	r2, r2, #8
 80054a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054aa:	223f      	movs	r2, #63	@ 0x3f
 80054ac:	409a      	lsls	r2, r3
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d07e      	beq.n	80055c8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	4798      	blx	r3
        }
        return;
 80054d2:	e079      	b.n	80055c8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d01d      	beq.n	800551e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d10d      	bne.n	800550c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d031      	beq.n	800555c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	4798      	blx	r3
 8005500:	e02c      	b.n	800555c <HAL_DMA_IRQHandler+0x2a0>
 8005502:	bf00      	nop
 8005504:	20000034 	.word	0x20000034
 8005508:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005510:	2b00      	cmp	r3, #0
 8005512:	d023      	beq.n	800555c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	4798      	blx	r3
 800551c:	e01e      	b.n	800555c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005528:	2b00      	cmp	r3, #0
 800552a:	d10f      	bne.n	800554c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f022 0210 	bic.w	r2, r2, #16
 800553a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005550:	2b00      	cmp	r3, #0
 8005552:	d003      	beq.n	800555c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005560:	2b00      	cmp	r3, #0
 8005562:	d032      	beq.n	80055ca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005568:	f003 0301 	and.w	r3, r3, #1
 800556c:	2b00      	cmp	r3, #0
 800556e:	d022      	beq.n	80055b6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2205      	movs	r2, #5
 8005574:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f022 0201 	bic.w	r2, r2, #1
 8005586:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	3301      	adds	r3, #1
 800558c:	60bb      	str	r3, [r7, #8]
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	429a      	cmp	r2, r3
 8005592:	d307      	bcc.n	80055a4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1f2      	bne.n	8005588 <HAL_DMA_IRQHandler+0x2cc>
 80055a2:	e000      	b.n	80055a6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80055a4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2201      	movs	r2, #1
 80055aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d005      	beq.n	80055ca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	4798      	blx	r3
 80055c6:	e000      	b.n	80055ca <HAL_DMA_IRQHandler+0x30e>
        return;
 80055c8:	bf00      	nop
    }
  }
}
 80055ca:	3718      	adds	r7, #24
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
 80055dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80055ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	683a      	ldr	r2, [r7, #0]
 80055f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	2b40      	cmp	r3, #64	@ 0x40
 80055fc:	d108      	bne.n	8005610 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68ba      	ldr	r2, [r7, #8]
 800560c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800560e:	e007      	b.n	8005620 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68ba      	ldr	r2, [r7, #8]
 8005616:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	60da      	str	r2, [r3, #12]
}
 8005620:	bf00      	nop
 8005622:	3714      	adds	r7, #20
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	b2db      	uxtb	r3, r3
 800563a:	3b10      	subs	r3, #16
 800563c:	4a14      	ldr	r2, [pc, #80]	@ (8005690 <DMA_CalcBaseAndBitshift+0x64>)
 800563e:	fba2 2303 	umull	r2, r3, r2, r3
 8005642:	091b      	lsrs	r3, r3, #4
 8005644:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005646:	4a13      	ldr	r2, [pc, #76]	@ (8005694 <DMA_CalcBaseAndBitshift+0x68>)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	4413      	add	r3, r2
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	461a      	mov	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2b03      	cmp	r3, #3
 8005658:	d909      	bls.n	800566e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005662:	f023 0303 	bic.w	r3, r3, #3
 8005666:	1d1a      	adds	r2, r3, #4
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	659a      	str	r2, [r3, #88]	@ 0x58
 800566c:	e007      	b.n	800567e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005676:	f023 0303 	bic.w	r3, r3, #3
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005682:	4618      	mov	r0, r3
 8005684:	3714      	adds	r7, #20
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	aaaaaaab 	.word	0xaaaaaaab
 8005694:	0800d534 	.word	0x0800d534

08005698 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056a0:	2300      	movs	r3, #0
 80056a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	699b      	ldr	r3, [r3, #24]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d11f      	bne.n	80056f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	2b03      	cmp	r3, #3
 80056b6:	d856      	bhi.n	8005766 <DMA_CheckFifoParam+0xce>
 80056b8:	a201      	add	r2, pc, #4	@ (adr r2, 80056c0 <DMA_CheckFifoParam+0x28>)
 80056ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056be:	bf00      	nop
 80056c0:	080056d1 	.word	0x080056d1
 80056c4:	080056e3 	.word	0x080056e3
 80056c8:	080056d1 	.word	0x080056d1
 80056cc:	08005767 	.word	0x08005767
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d046      	beq.n	800576a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056e0:	e043      	b.n	800576a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80056ea:	d140      	bne.n	800576e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056f0:	e03d      	b.n	800576e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056fa:	d121      	bne.n	8005740 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	2b03      	cmp	r3, #3
 8005700:	d837      	bhi.n	8005772 <DMA_CheckFifoParam+0xda>
 8005702:	a201      	add	r2, pc, #4	@ (adr r2, 8005708 <DMA_CheckFifoParam+0x70>)
 8005704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005708:	08005719 	.word	0x08005719
 800570c:	0800571f 	.word	0x0800571f
 8005710:	08005719 	.word	0x08005719
 8005714:	08005731 	.word	0x08005731
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	73fb      	strb	r3, [r7, #15]
      break;
 800571c:	e030      	b.n	8005780 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005722:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d025      	beq.n	8005776 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800572e:	e022      	b.n	8005776 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005734:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005738:	d11f      	bne.n	800577a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800573e:	e01c      	b.n	800577a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	2b02      	cmp	r3, #2
 8005744:	d903      	bls.n	800574e <DMA_CheckFifoParam+0xb6>
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	2b03      	cmp	r3, #3
 800574a:	d003      	beq.n	8005754 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800574c:	e018      	b.n	8005780 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	73fb      	strb	r3, [r7, #15]
      break;
 8005752:	e015      	b.n	8005780 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005758:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d00e      	beq.n	800577e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	73fb      	strb	r3, [r7, #15]
      break;
 8005764:	e00b      	b.n	800577e <DMA_CheckFifoParam+0xe6>
      break;
 8005766:	bf00      	nop
 8005768:	e00a      	b.n	8005780 <DMA_CheckFifoParam+0xe8>
      break;
 800576a:	bf00      	nop
 800576c:	e008      	b.n	8005780 <DMA_CheckFifoParam+0xe8>
      break;
 800576e:	bf00      	nop
 8005770:	e006      	b.n	8005780 <DMA_CheckFifoParam+0xe8>
      break;
 8005772:	bf00      	nop
 8005774:	e004      	b.n	8005780 <DMA_CheckFifoParam+0xe8>
      break;
 8005776:	bf00      	nop
 8005778:	e002      	b.n	8005780 <DMA_CheckFifoParam+0xe8>
      break;   
 800577a:	bf00      	nop
 800577c:	e000      	b.n	8005780 <DMA_CheckFifoParam+0xe8>
      break;
 800577e:	bf00      	nop
    }
  } 
  
  return status; 
 8005780:	7bfb      	ldrb	r3, [r7, #15]
}
 8005782:	4618      	mov	r0, r3
 8005784:	3714      	adds	r7, #20
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop

08005790 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005790:	b480      	push	{r7}
 8005792:	b089      	sub	sp, #36	@ 0x24
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800579a:	2300      	movs	r3, #0
 800579c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800579e:	2300      	movs	r3, #0
 80057a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80057a2:	2300      	movs	r3, #0
 80057a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80057a6:	2300      	movs	r3, #0
 80057a8:	61fb      	str	r3, [r7, #28]
 80057aa:	e165      	b.n	8005a78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80057ac:	2201      	movs	r2, #1
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	fa02 f303 	lsl.w	r3, r2, r3
 80057b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	4013      	ands	r3, r2
 80057be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	f040 8154 	bne.w	8005a72 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	f003 0303 	and.w	r3, r3, #3
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d005      	beq.n	80057e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d130      	bne.n	8005844 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	005b      	lsls	r3, r3, #1
 80057ec:	2203      	movs	r2, #3
 80057ee:	fa02 f303 	lsl.w	r3, r2, r3
 80057f2:	43db      	mvns	r3, r3
 80057f4:	69ba      	ldr	r2, [r7, #24]
 80057f6:	4013      	ands	r3, r2
 80057f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	68da      	ldr	r2, [r3, #12]
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	005b      	lsls	r3, r3, #1
 8005802:	fa02 f303 	lsl.w	r3, r2, r3
 8005806:	69ba      	ldr	r2, [r7, #24]
 8005808:	4313      	orrs	r3, r2
 800580a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	69ba      	ldr	r2, [r7, #24]
 8005810:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005818:	2201      	movs	r2, #1
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	fa02 f303 	lsl.w	r3, r2, r3
 8005820:	43db      	mvns	r3, r3
 8005822:	69ba      	ldr	r2, [r7, #24]
 8005824:	4013      	ands	r3, r2
 8005826:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	091b      	lsrs	r3, r3, #4
 800582e:	f003 0201 	and.w	r2, r3, #1
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	fa02 f303 	lsl.w	r3, r2, r3
 8005838:	69ba      	ldr	r2, [r7, #24]
 800583a:	4313      	orrs	r3, r2
 800583c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	69ba      	ldr	r2, [r7, #24]
 8005842:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	f003 0303 	and.w	r3, r3, #3
 800584c:	2b03      	cmp	r3, #3
 800584e:	d017      	beq.n	8005880 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	005b      	lsls	r3, r3, #1
 800585a:	2203      	movs	r2, #3
 800585c:	fa02 f303 	lsl.w	r3, r2, r3
 8005860:	43db      	mvns	r3, r3
 8005862:	69ba      	ldr	r2, [r7, #24]
 8005864:	4013      	ands	r3, r2
 8005866:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	689a      	ldr	r2, [r3, #8]
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	005b      	lsls	r3, r3, #1
 8005870:	fa02 f303 	lsl.w	r3, r2, r3
 8005874:	69ba      	ldr	r2, [r7, #24]
 8005876:	4313      	orrs	r3, r2
 8005878:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	69ba      	ldr	r2, [r7, #24]
 800587e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	f003 0303 	and.w	r3, r3, #3
 8005888:	2b02      	cmp	r3, #2
 800588a:	d123      	bne.n	80058d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	08da      	lsrs	r2, r3, #3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	3208      	adds	r2, #8
 8005894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005898:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	f003 0307 	and.w	r3, r3, #7
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	220f      	movs	r2, #15
 80058a4:	fa02 f303 	lsl.w	r3, r2, r3
 80058a8:	43db      	mvns	r3, r3
 80058aa:	69ba      	ldr	r2, [r7, #24]
 80058ac:	4013      	ands	r3, r2
 80058ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	691a      	ldr	r2, [r3, #16]
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	f003 0307 	and.w	r3, r3, #7
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	fa02 f303 	lsl.w	r3, r2, r3
 80058c0:	69ba      	ldr	r2, [r7, #24]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	08da      	lsrs	r2, r3, #3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	3208      	adds	r2, #8
 80058ce:	69b9      	ldr	r1, [r7, #24]
 80058d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	005b      	lsls	r3, r3, #1
 80058de:	2203      	movs	r2, #3
 80058e0:	fa02 f303 	lsl.w	r3, r2, r3
 80058e4:	43db      	mvns	r3, r3
 80058e6:	69ba      	ldr	r2, [r7, #24]
 80058e8:	4013      	ands	r3, r2
 80058ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	f003 0203 	and.w	r2, r3, #3
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	005b      	lsls	r3, r3, #1
 80058f8:	fa02 f303 	lsl.w	r3, r2, r3
 80058fc:	69ba      	ldr	r2, [r7, #24]
 80058fe:	4313      	orrs	r3, r2
 8005900:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	69ba      	ldr	r2, [r7, #24]
 8005906:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005910:	2b00      	cmp	r3, #0
 8005912:	f000 80ae 	beq.w	8005a72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005916:	2300      	movs	r3, #0
 8005918:	60fb      	str	r3, [r7, #12]
 800591a:	4b5d      	ldr	r3, [pc, #372]	@ (8005a90 <HAL_GPIO_Init+0x300>)
 800591c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800591e:	4a5c      	ldr	r2, [pc, #368]	@ (8005a90 <HAL_GPIO_Init+0x300>)
 8005920:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005924:	6453      	str	r3, [r2, #68]	@ 0x44
 8005926:	4b5a      	ldr	r3, [pc, #360]	@ (8005a90 <HAL_GPIO_Init+0x300>)
 8005928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800592a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800592e:	60fb      	str	r3, [r7, #12]
 8005930:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005932:	4a58      	ldr	r2, [pc, #352]	@ (8005a94 <HAL_GPIO_Init+0x304>)
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	089b      	lsrs	r3, r3, #2
 8005938:	3302      	adds	r3, #2
 800593a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800593e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	f003 0303 	and.w	r3, r3, #3
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	220f      	movs	r2, #15
 800594a:	fa02 f303 	lsl.w	r3, r2, r3
 800594e:	43db      	mvns	r3, r3
 8005950:	69ba      	ldr	r2, [r7, #24]
 8005952:	4013      	ands	r3, r2
 8005954:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a4f      	ldr	r2, [pc, #316]	@ (8005a98 <HAL_GPIO_Init+0x308>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d025      	beq.n	80059aa <HAL_GPIO_Init+0x21a>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a4e      	ldr	r2, [pc, #312]	@ (8005a9c <HAL_GPIO_Init+0x30c>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d01f      	beq.n	80059a6 <HAL_GPIO_Init+0x216>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a4d      	ldr	r2, [pc, #308]	@ (8005aa0 <HAL_GPIO_Init+0x310>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d019      	beq.n	80059a2 <HAL_GPIO_Init+0x212>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a4c      	ldr	r2, [pc, #304]	@ (8005aa4 <HAL_GPIO_Init+0x314>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d013      	beq.n	800599e <HAL_GPIO_Init+0x20e>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a4b      	ldr	r2, [pc, #300]	@ (8005aa8 <HAL_GPIO_Init+0x318>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d00d      	beq.n	800599a <HAL_GPIO_Init+0x20a>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a4a      	ldr	r2, [pc, #296]	@ (8005aac <HAL_GPIO_Init+0x31c>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d007      	beq.n	8005996 <HAL_GPIO_Init+0x206>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a49      	ldr	r2, [pc, #292]	@ (8005ab0 <HAL_GPIO_Init+0x320>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d101      	bne.n	8005992 <HAL_GPIO_Init+0x202>
 800598e:	2306      	movs	r3, #6
 8005990:	e00c      	b.n	80059ac <HAL_GPIO_Init+0x21c>
 8005992:	2307      	movs	r3, #7
 8005994:	e00a      	b.n	80059ac <HAL_GPIO_Init+0x21c>
 8005996:	2305      	movs	r3, #5
 8005998:	e008      	b.n	80059ac <HAL_GPIO_Init+0x21c>
 800599a:	2304      	movs	r3, #4
 800599c:	e006      	b.n	80059ac <HAL_GPIO_Init+0x21c>
 800599e:	2303      	movs	r3, #3
 80059a0:	e004      	b.n	80059ac <HAL_GPIO_Init+0x21c>
 80059a2:	2302      	movs	r3, #2
 80059a4:	e002      	b.n	80059ac <HAL_GPIO_Init+0x21c>
 80059a6:	2301      	movs	r3, #1
 80059a8:	e000      	b.n	80059ac <HAL_GPIO_Init+0x21c>
 80059aa:	2300      	movs	r3, #0
 80059ac:	69fa      	ldr	r2, [r7, #28]
 80059ae:	f002 0203 	and.w	r2, r2, #3
 80059b2:	0092      	lsls	r2, r2, #2
 80059b4:	4093      	lsls	r3, r2
 80059b6:	69ba      	ldr	r2, [r7, #24]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80059bc:	4935      	ldr	r1, [pc, #212]	@ (8005a94 <HAL_GPIO_Init+0x304>)
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	089b      	lsrs	r3, r3, #2
 80059c2:	3302      	adds	r3, #2
 80059c4:	69ba      	ldr	r2, [r7, #24]
 80059c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80059ca:	4b3a      	ldr	r3, [pc, #232]	@ (8005ab4 <HAL_GPIO_Init+0x324>)
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	43db      	mvns	r3, r3
 80059d4:	69ba      	ldr	r2, [r7, #24]
 80059d6:	4013      	ands	r3, r2
 80059d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d003      	beq.n	80059ee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80059e6:	69ba      	ldr	r2, [r7, #24]
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80059ee:	4a31      	ldr	r2, [pc, #196]	@ (8005ab4 <HAL_GPIO_Init+0x324>)
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80059f4:	4b2f      	ldr	r3, [pc, #188]	@ (8005ab4 <HAL_GPIO_Init+0x324>)
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	43db      	mvns	r3, r3
 80059fe:	69ba      	ldr	r2, [r7, #24]
 8005a00:	4013      	ands	r3, r2
 8005a02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d003      	beq.n	8005a18 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005a10:	69ba      	ldr	r2, [r7, #24]
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005a18:	4a26      	ldr	r2, [pc, #152]	@ (8005ab4 <HAL_GPIO_Init+0x324>)
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005a1e:	4b25      	ldr	r3, [pc, #148]	@ (8005ab4 <HAL_GPIO_Init+0x324>)
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	43db      	mvns	r3, r3
 8005a28:	69ba      	ldr	r2, [r7, #24]
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d003      	beq.n	8005a42 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005a3a:	69ba      	ldr	r2, [r7, #24]
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005a42:	4a1c      	ldr	r2, [pc, #112]	@ (8005ab4 <HAL_GPIO_Init+0x324>)
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a48:	4b1a      	ldr	r3, [pc, #104]	@ (8005ab4 <HAL_GPIO_Init+0x324>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	43db      	mvns	r3, r3
 8005a52:	69ba      	ldr	r2, [r7, #24]
 8005a54:	4013      	ands	r3, r2
 8005a56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d003      	beq.n	8005a6c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005a6c:	4a11      	ldr	r2, [pc, #68]	@ (8005ab4 <HAL_GPIO_Init+0x324>)
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	3301      	adds	r3, #1
 8005a76:	61fb      	str	r3, [r7, #28]
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	2b0f      	cmp	r3, #15
 8005a7c:	f67f ae96 	bls.w	80057ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005a80:	bf00      	nop
 8005a82:	bf00      	nop
 8005a84:	3724      	adds	r7, #36	@ 0x24
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop
 8005a90:	40023800 	.word	0x40023800
 8005a94:	40013800 	.word	0x40013800
 8005a98:	40020000 	.word	0x40020000
 8005a9c:	40020400 	.word	0x40020400
 8005aa0:	40020800 	.word	0x40020800
 8005aa4:	40020c00 	.word	0x40020c00
 8005aa8:	40021000 	.word	0x40021000
 8005aac:	40021400 	.word	0x40021400
 8005ab0:	40021800 	.word	0x40021800
 8005ab4:	40013c00 	.word	0x40013c00

08005ab8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	807b      	strh	r3, [r7, #2]
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005ac8:	787b      	ldrb	r3, [r7, #1]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d003      	beq.n	8005ad6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ace:	887a      	ldrh	r2, [r7, #2]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005ad4:	e003      	b.n	8005ade <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005ad6:	887b      	ldrh	r3, [r7, #2]
 8005ad8:	041a      	lsls	r2, r3, #16
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	619a      	str	r2, [r3, #24]
}
 8005ade:	bf00      	nop
 8005ae0:	370c      	adds	r7, #12
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
	...

08005aec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005af2:	2300      	movs	r3, #0
 8005af4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005af6:	2300      	movs	r3, #0
 8005af8:	603b      	str	r3, [r7, #0]
 8005afa:	4b20      	ldr	r3, [pc, #128]	@ (8005b7c <HAL_PWREx_EnableOverDrive+0x90>)
 8005afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005afe:	4a1f      	ldr	r2, [pc, #124]	@ (8005b7c <HAL_PWREx_EnableOverDrive+0x90>)
 8005b00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b04:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b06:	4b1d      	ldr	r3, [pc, #116]	@ (8005b7c <HAL_PWREx_EnableOverDrive+0x90>)
 8005b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b0e:	603b      	str	r3, [r7, #0]
 8005b10:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005b12:	4b1b      	ldr	r3, [pc, #108]	@ (8005b80 <HAL_PWREx_EnableOverDrive+0x94>)
 8005b14:	2201      	movs	r2, #1
 8005b16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005b18:	f7fe f920 	bl	8003d5c <HAL_GetTick>
 8005b1c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005b1e:	e009      	b.n	8005b34 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005b20:	f7fe f91c 	bl	8003d5c <HAL_GetTick>
 8005b24:	4602      	mov	r2, r0
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005b2e:	d901      	bls.n	8005b34 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e01f      	b.n	8005b74 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005b34:	4b13      	ldr	r3, [pc, #76]	@ (8005b84 <HAL_PWREx_EnableOverDrive+0x98>)
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b40:	d1ee      	bne.n	8005b20 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005b42:	4b11      	ldr	r3, [pc, #68]	@ (8005b88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005b44:	2201      	movs	r2, #1
 8005b46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005b48:	f7fe f908 	bl	8003d5c <HAL_GetTick>
 8005b4c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005b4e:	e009      	b.n	8005b64 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005b50:	f7fe f904 	bl	8003d5c <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005b5e:	d901      	bls.n	8005b64 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005b60:	2303      	movs	r3, #3
 8005b62:	e007      	b.n	8005b74 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005b64:	4b07      	ldr	r3, [pc, #28]	@ (8005b84 <HAL_PWREx_EnableOverDrive+0x98>)
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b70:	d1ee      	bne.n	8005b50 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3708      	adds	r7, #8
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	40023800 	.word	0x40023800
 8005b80:	420e0040 	.word	0x420e0040
 8005b84:	40007000 	.word	0x40007000
 8005b88:	420e0044 	.word	0x420e0044

08005b8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d101      	bne.n	8005ba0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e0cc      	b.n	8005d3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ba0:	4b68      	ldr	r3, [pc, #416]	@ (8005d44 <HAL_RCC_ClockConfig+0x1b8>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 030f 	and.w	r3, r3, #15
 8005ba8:	683a      	ldr	r2, [r7, #0]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d90c      	bls.n	8005bc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bae:	4b65      	ldr	r3, [pc, #404]	@ (8005d44 <HAL_RCC_ClockConfig+0x1b8>)
 8005bb0:	683a      	ldr	r2, [r7, #0]
 8005bb2:	b2d2      	uxtb	r2, r2
 8005bb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bb6:	4b63      	ldr	r3, [pc, #396]	@ (8005d44 <HAL_RCC_ClockConfig+0x1b8>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 030f 	and.w	r3, r3, #15
 8005bbe:	683a      	ldr	r2, [r7, #0]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d001      	beq.n	8005bc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e0b8      	b.n	8005d3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 0302 	and.w	r3, r3, #2
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d020      	beq.n	8005c16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0304 	and.w	r3, r3, #4
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d005      	beq.n	8005bec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005be0:	4b59      	ldr	r3, [pc, #356]	@ (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	4a58      	ldr	r2, [pc, #352]	@ (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005be6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005bea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0308 	and.w	r3, r3, #8
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d005      	beq.n	8005c04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005bf8:	4b53      	ldr	r3, [pc, #332]	@ (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	4a52      	ldr	r2, [pc, #328]	@ (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005bfe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005c02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c04:	4b50      	ldr	r3, [pc, #320]	@ (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	494d      	ldr	r1, [pc, #308]	@ (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005c12:	4313      	orrs	r3, r2
 8005c14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0301 	and.w	r3, r3, #1
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d044      	beq.n	8005cac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d107      	bne.n	8005c3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c2a:	4b47      	ldr	r3, [pc, #284]	@ (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d119      	bne.n	8005c6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e07f      	b.n	8005d3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d003      	beq.n	8005c4a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c46:	2b03      	cmp	r3, #3
 8005c48:	d107      	bne.n	8005c5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c4a:	4b3f      	ldr	r3, [pc, #252]	@ (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d109      	bne.n	8005c6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e06f      	b.n	8005d3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c5a:	4b3b      	ldr	r3, [pc, #236]	@ (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0302 	and.w	r3, r3, #2
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d101      	bne.n	8005c6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e067      	b.n	8005d3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c6a:	4b37      	ldr	r3, [pc, #220]	@ (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f023 0203 	bic.w	r2, r3, #3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	4934      	ldr	r1, [pc, #208]	@ (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c7c:	f7fe f86e 	bl	8003d5c <HAL_GetTick>
 8005c80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c82:	e00a      	b.n	8005c9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c84:	f7fe f86a 	bl	8003d5c <HAL_GetTick>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d901      	bls.n	8005c9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e04f      	b.n	8005d3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c9a:	4b2b      	ldr	r3, [pc, #172]	@ (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	f003 020c 	and.w	r2, r3, #12
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d1eb      	bne.n	8005c84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005cac:	4b25      	ldr	r3, [pc, #148]	@ (8005d44 <HAL_RCC_ClockConfig+0x1b8>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 030f 	and.w	r3, r3, #15
 8005cb4:	683a      	ldr	r2, [r7, #0]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d20c      	bcs.n	8005cd4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cba:	4b22      	ldr	r3, [pc, #136]	@ (8005d44 <HAL_RCC_ClockConfig+0x1b8>)
 8005cbc:	683a      	ldr	r2, [r7, #0]
 8005cbe:	b2d2      	uxtb	r2, r2
 8005cc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cc2:	4b20      	ldr	r3, [pc, #128]	@ (8005d44 <HAL_RCC_ClockConfig+0x1b8>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 030f 	and.w	r3, r3, #15
 8005cca:	683a      	ldr	r2, [r7, #0]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d001      	beq.n	8005cd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e032      	b.n	8005d3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0304 	and.w	r3, r3, #4
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d008      	beq.n	8005cf2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ce0:	4b19      	ldr	r3, [pc, #100]	@ (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	4916      	ldr	r1, [pc, #88]	@ (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0308 	and.w	r3, r3, #8
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d009      	beq.n	8005d12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005cfe:	4b12      	ldr	r3, [pc, #72]	@ (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	00db      	lsls	r3, r3, #3
 8005d0c:	490e      	ldr	r1, [pc, #56]	@ (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005d12:	f000 f855 	bl	8005dc0 <HAL_RCC_GetSysClockFreq>
 8005d16:	4602      	mov	r2, r0
 8005d18:	4b0b      	ldr	r3, [pc, #44]	@ (8005d48 <HAL_RCC_ClockConfig+0x1bc>)
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	091b      	lsrs	r3, r3, #4
 8005d1e:	f003 030f 	and.w	r3, r3, #15
 8005d22:	490a      	ldr	r1, [pc, #40]	@ (8005d4c <HAL_RCC_ClockConfig+0x1c0>)
 8005d24:	5ccb      	ldrb	r3, [r1, r3]
 8005d26:	fa22 f303 	lsr.w	r3, r2, r3
 8005d2a:	4a09      	ldr	r2, [pc, #36]	@ (8005d50 <HAL_RCC_ClockConfig+0x1c4>)
 8005d2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005d2e:	4b09      	ldr	r3, [pc, #36]	@ (8005d54 <HAL_RCC_ClockConfig+0x1c8>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4618      	mov	r0, r3
 8005d34:	f7fd ffce 	bl	8003cd4 <HAL_InitTick>

  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	40023c00 	.word	0x40023c00
 8005d48:	40023800 	.word	0x40023800
 8005d4c:	0800d51c 	.word	0x0800d51c
 8005d50:	20000034 	.word	0x20000034
 8005d54:	20000038 	.word	0x20000038

08005d58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d5c:	4b03      	ldr	r3, [pc, #12]	@ (8005d6c <HAL_RCC_GetHCLKFreq+0x14>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	20000034 	.word	0x20000034

08005d70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005d74:	f7ff fff0 	bl	8005d58 <HAL_RCC_GetHCLKFreq>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	4b05      	ldr	r3, [pc, #20]	@ (8005d90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	0a9b      	lsrs	r3, r3, #10
 8005d80:	f003 0307 	and.w	r3, r3, #7
 8005d84:	4903      	ldr	r1, [pc, #12]	@ (8005d94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d86:	5ccb      	ldrb	r3, [r1, r3]
 8005d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	40023800 	.word	0x40023800
 8005d94:	0800d52c 	.word	0x0800d52c

08005d98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005d9c:	f7ff ffdc 	bl	8005d58 <HAL_RCC_GetHCLKFreq>
 8005da0:	4602      	mov	r2, r0
 8005da2:	4b05      	ldr	r3, [pc, #20]	@ (8005db8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	0b5b      	lsrs	r3, r3, #13
 8005da8:	f003 0307 	and.w	r3, r3, #7
 8005dac:	4903      	ldr	r1, [pc, #12]	@ (8005dbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005dae:	5ccb      	ldrb	r3, [r1, r3]
 8005db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	40023800 	.word	0x40023800
 8005dbc:	0800d52c 	.word	0x0800d52c

08005dc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005dc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005dc4:	b0ae      	sub	sp, #184	@ 0xb8
 8005dc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8005de0:	2300      	movs	r3, #0
 8005de2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005de6:	4bcb      	ldr	r3, [pc, #812]	@ (8006114 <HAL_RCC_GetSysClockFreq+0x354>)
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	f003 030c 	and.w	r3, r3, #12
 8005dee:	2b0c      	cmp	r3, #12
 8005df0:	f200 8206 	bhi.w	8006200 <HAL_RCC_GetSysClockFreq+0x440>
 8005df4:	a201      	add	r2, pc, #4	@ (adr r2, 8005dfc <HAL_RCC_GetSysClockFreq+0x3c>)
 8005df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dfa:	bf00      	nop
 8005dfc:	08005e31 	.word	0x08005e31
 8005e00:	08006201 	.word	0x08006201
 8005e04:	08006201 	.word	0x08006201
 8005e08:	08006201 	.word	0x08006201
 8005e0c:	08005e39 	.word	0x08005e39
 8005e10:	08006201 	.word	0x08006201
 8005e14:	08006201 	.word	0x08006201
 8005e18:	08006201 	.word	0x08006201
 8005e1c:	08005e41 	.word	0x08005e41
 8005e20:	08006201 	.word	0x08006201
 8005e24:	08006201 	.word	0x08006201
 8005e28:	08006201 	.word	0x08006201
 8005e2c:	08006031 	.word	0x08006031
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e30:	4bb9      	ldr	r3, [pc, #740]	@ (8006118 <HAL_RCC_GetSysClockFreq+0x358>)
 8005e32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005e36:	e1e7      	b.n	8006208 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e38:	4bb8      	ldr	r3, [pc, #736]	@ (800611c <HAL_RCC_GetSysClockFreq+0x35c>)
 8005e3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005e3e:	e1e3      	b.n	8006208 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e40:	4bb4      	ldr	r3, [pc, #720]	@ (8006114 <HAL_RCC_GetSysClockFreq+0x354>)
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e4c:	4bb1      	ldr	r3, [pc, #708]	@ (8006114 <HAL_RCC_GetSysClockFreq+0x354>)
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d071      	beq.n	8005f3c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e58:	4bae      	ldr	r3, [pc, #696]	@ (8006114 <HAL_RCC_GetSysClockFreq+0x354>)
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	099b      	lsrs	r3, r3, #6
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005e64:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005e68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005e6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e70:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005e74:	2300      	movs	r3, #0
 8005e76:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005e7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005e7e:	4622      	mov	r2, r4
 8005e80:	462b      	mov	r3, r5
 8005e82:	f04f 0000 	mov.w	r0, #0
 8005e86:	f04f 0100 	mov.w	r1, #0
 8005e8a:	0159      	lsls	r1, r3, #5
 8005e8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e90:	0150      	lsls	r0, r2, #5
 8005e92:	4602      	mov	r2, r0
 8005e94:	460b      	mov	r3, r1
 8005e96:	4621      	mov	r1, r4
 8005e98:	1a51      	subs	r1, r2, r1
 8005e9a:	6439      	str	r1, [r7, #64]	@ 0x40
 8005e9c:	4629      	mov	r1, r5
 8005e9e:	eb63 0301 	sbc.w	r3, r3, r1
 8005ea2:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ea4:	f04f 0200 	mov.w	r2, #0
 8005ea8:	f04f 0300 	mov.w	r3, #0
 8005eac:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8005eb0:	4649      	mov	r1, r9
 8005eb2:	018b      	lsls	r3, r1, #6
 8005eb4:	4641      	mov	r1, r8
 8005eb6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005eba:	4641      	mov	r1, r8
 8005ebc:	018a      	lsls	r2, r1, #6
 8005ebe:	4641      	mov	r1, r8
 8005ec0:	1a51      	subs	r1, r2, r1
 8005ec2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005ec4:	4649      	mov	r1, r9
 8005ec6:	eb63 0301 	sbc.w	r3, r3, r1
 8005eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ecc:	f04f 0200 	mov.w	r2, #0
 8005ed0:	f04f 0300 	mov.w	r3, #0
 8005ed4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8005ed8:	4649      	mov	r1, r9
 8005eda:	00cb      	lsls	r3, r1, #3
 8005edc:	4641      	mov	r1, r8
 8005ede:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ee2:	4641      	mov	r1, r8
 8005ee4:	00ca      	lsls	r2, r1, #3
 8005ee6:	4610      	mov	r0, r2
 8005ee8:	4619      	mov	r1, r3
 8005eea:	4603      	mov	r3, r0
 8005eec:	4622      	mov	r2, r4
 8005eee:	189b      	adds	r3, r3, r2
 8005ef0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ef2:	462b      	mov	r3, r5
 8005ef4:	460a      	mov	r2, r1
 8005ef6:	eb42 0303 	adc.w	r3, r2, r3
 8005efa:	637b      	str	r3, [r7, #52]	@ 0x34
 8005efc:	f04f 0200 	mov.w	r2, #0
 8005f00:	f04f 0300 	mov.w	r3, #0
 8005f04:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005f08:	4629      	mov	r1, r5
 8005f0a:	024b      	lsls	r3, r1, #9
 8005f0c:	4621      	mov	r1, r4
 8005f0e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005f12:	4621      	mov	r1, r4
 8005f14:	024a      	lsls	r2, r1, #9
 8005f16:	4610      	mov	r0, r2
 8005f18:	4619      	mov	r1, r3
 8005f1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005f24:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005f28:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8005f2c:	f7fa fecc 	bl	8000cc8 <__aeabi_uldivmod>
 8005f30:	4602      	mov	r2, r0
 8005f32:	460b      	mov	r3, r1
 8005f34:	4613      	mov	r3, r2
 8005f36:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f3a:	e067      	b.n	800600c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f3c:	4b75      	ldr	r3, [pc, #468]	@ (8006114 <HAL_RCC_GetSysClockFreq+0x354>)
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	099b      	lsrs	r3, r3, #6
 8005f42:	2200      	movs	r2, #0
 8005f44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005f48:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8005f4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005f50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f54:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005f56:	2300      	movs	r3, #0
 8005f58:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005f5a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8005f5e:	4622      	mov	r2, r4
 8005f60:	462b      	mov	r3, r5
 8005f62:	f04f 0000 	mov.w	r0, #0
 8005f66:	f04f 0100 	mov.w	r1, #0
 8005f6a:	0159      	lsls	r1, r3, #5
 8005f6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f70:	0150      	lsls	r0, r2, #5
 8005f72:	4602      	mov	r2, r0
 8005f74:	460b      	mov	r3, r1
 8005f76:	4621      	mov	r1, r4
 8005f78:	1a51      	subs	r1, r2, r1
 8005f7a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005f7c:	4629      	mov	r1, r5
 8005f7e:	eb63 0301 	sbc.w	r3, r3, r1
 8005f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f84:	f04f 0200 	mov.w	r2, #0
 8005f88:	f04f 0300 	mov.w	r3, #0
 8005f8c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8005f90:	4649      	mov	r1, r9
 8005f92:	018b      	lsls	r3, r1, #6
 8005f94:	4641      	mov	r1, r8
 8005f96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005f9a:	4641      	mov	r1, r8
 8005f9c:	018a      	lsls	r2, r1, #6
 8005f9e:	4641      	mov	r1, r8
 8005fa0:	ebb2 0a01 	subs.w	sl, r2, r1
 8005fa4:	4649      	mov	r1, r9
 8005fa6:	eb63 0b01 	sbc.w	fp, r3, r1
 8005faa:	f04f 0200 	mov.w	r2, #0
 8005fae:	f04f 0300 	mov.w	r3, #0
 8005fb2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005fb6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005fba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fbe:	4692      	mov	sl, r2
 8005fc0:	469b      	mov	fp, r3
 8005fc2:	4623      	mov	r3, r4
 8005fc4:	eb1a 0303 	adds.w	r3, sl, r3
 8005fc8:	623b      	str	r3, [r7, #32]
 8005fca:	462b      	mov	r3, r5
 8005fcc:	eb4b 0303 	adc.w	r3, fp, r3
 8005fd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fd2:	f04f 0200 	mov.w	r2, #0
 8005fd6:	f04f 0300 	mov.w	r3, #0
 8005fda:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005fde:	4629      	mov	r1, r5
 8005fe0:	028b      	lsls	r3, r1, #10
 8005fe2:	4621      	mov	r1, r4
 8005fe4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005fe8:	4621      	mov	r1, r4
 8005fea:	028a      	lsls	r2, r1, #10
 8005fec:	4610      	mov	r0, r2
 8005fee:	4619      	mov	r1, r3
 8005ff0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	673b      	str	r3, [r7, #112]	@ 0x70
 8005ff8:	677a      	str	r2, [r7, #116]	@ 0x74
 8005ffa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8005ffe:	f7fa fe63 	bl	8000cc8 <__aeabi_uldivmod>
 8006002:	4602      	mov	r2, r0
 8006004:	460b      	mov	r3, r1
 8006006:	4613      	mov	r3, r2
 8006008:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800600c:	4b41      	ldr	r3, [pc, #260]	@ (8006114 <HAL_RCC_GetSysClockFreq+0x354>)
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	0c1b      	lsrs	r3, r3, #16
 8006012:	f003 0303 	and.w	r3, r3, #3
 8006016:	3301      	adds	r3, #1
 8006018:	005b      	lsls	r3, r3, #1
 800601a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800601e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006022:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006026:	fbb2 f3f3 	udiv	r3, r2, r3
 800602a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800602e:	e0eb      	b.n	8006208 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006030:	4b38      	ldr	r3, [pc, #224]	@ (8006114 <HAL_RCC_GetSysClockFreq+0x354>)
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006038:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800603c:	4b35      	ldr	r3, [pc, #212]	@ (8006114 <HAL_RCC_GetSysClockFreq+0x354>)
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d06b      	beq.n	8006120 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006048:	4b32      	ldr	r3, [pc, #200]	@ (8006114 <HAL_RCC_GetSysClockFreq+0x354>)
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	099b      	lsrs	r3, r3, #6
 800604e:	2200      	movs	r2, #0
 8006050:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006052:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006054:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800605a:	663b      	str	r3, [r7, #96]	@ 0x60
 800605c:	2300      	movs	r3, #0
 800605e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006060:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8006064:	4622      	mov	r2, r4
 8006066:	462b      	mov	r3, r5
 8006068:	f04f 0000 	mov.w	r0, #0
 800606c:	f04f 0100 	mov.w	r1, #0
 8006070:	0159      	lsls	r1, r3, #5
 8006072:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006076:	0150      	lsls	r0, r2, #5
 8006078:	4602      	mov	r2, r0
 800607a:	460b      	mov	r3, r1
 800607c:	4621      	mov	r1, r4
 800607e:	1a51      	subs	r1, r2, r1
 8006080:	61b9      	str	r1, [r7, #24]
 8006082:	4629      	mov	r1, r5
 8006084:	eb63 0301 	sbc.w	r3, r3, r1
 8006088:	61fb      	str	r3, [r7, #28]
 800608a:	f04f 0200 	mov.w	r2, #0
 800608e:	f04f 0300 	mov.w	r3, #0
 8006092:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8006096:	4659      	mov	r1, fp
 8006098:	018b      	lsls	r3, r1, #6
 800609a:	4651      	mov	r1, sl
 800609c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80060a0:	4651      	mov	r1, sl
 80060a2:	018a      	lsls	r2, r1, #6
 80060a4:	4651      	mov	r1, sl
 80060a6:	ebb2 0801 	subs.w	r8, r2, r1
 80060aa:	4659      	mov	r1, fp
 80060ac:	eb63 0901 	sbc.w	r9, r3, r1
 80060b0:	f04f 0200 	mov.w	r2, #0
 80060b4:	f04f 0300 	mov.w	r3, #0
 80060b8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060bc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80060c0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80060c4:	4690      	mov	r8, r2
 80060c6:	4699      	mov	r9, r3
 80060c8:	4623      	mov	r3, r4
 80060ca:	eb18 0303 	adds.w	r3, r8, r3
 80060ce:	613b      	str	r3, [r7, #16]
 80060d0:	462b      	mov	r3, r5
 80060d2:	eb49 0303 	adc.w	r3, r9, r3
 80060d6:	617b      	str	r3, [r7, #20]
 80060d8:	f04f 0200 	mov.w	r2, #0
 80060dc:	f04f 0300 	mov.w	r3, #0
 80060e0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80060e4:	4629      	mov	r1, r5
 80060e6:	024b      	lsls	r3, r1, #9
 80060e8:	4621      	mov	r1, r4
 80060ea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80060ee:	4621      	mov	r1, r4
 80060f0:	024a      	lsls	r2, r1, #9
 80060f2:	4610      	mov	r0, r2
 80060f4:	4619      	mov	r1, r3
 80060f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80060fa:	2200      	movs	r2, #0
 80060fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80060fe:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8006100:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006104:	f7fa fde0 	bl	8000cc8 <__aeabi_uldivmod>
 8006108:	4602      	mov	r2, r0
 800610a:	460b      	mov	r3, r1
 800610c:	4613      	mov	r3, r2
 800610e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006112:	e065      	b.n	80061e0 <HAL_RCC_GetSysClockFreq+0x420>
 8006114:	40023800 	.word	0x40023800
 8006118:	00f42400 	.word	0x00f42400
 800611c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006120:	4b3d      	ldr	r3, [pc, #244]	@ (8006218 <HAL_RCC_GetSysClockFreq+0x458>)
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	099b      	lsrs	r3, r3, #6
 8006126:	2200      	movs	r2, #0
 8006128:	4618      	mov	r0, r3
 800612a:	4611      	mov	r1, r2
 800612c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006130:	653b      	str	r3, [r7, #80]	@ 0x50
 8006132:	2300      	movs	r3, #0
 8006134:	657b      	str	r3, [r7, #84]	@ 0x54
 8006136:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800613a:	4642      	mov	r2, r8
 800613c:	464b      	mov	r3, r9
 800613e:	f04f 0000 	mov.w	r0, #0
 8006142:	f04f 0100 	mov.w	r1, #0
 8006146:	0159      	lsls	r1, r3, #5
 8006148:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800614c:	0150      	lsls	r0, r2, #5
 800614e:	4602      	mov	r2, r0
 8006150:	460b      	mov	r3, r1
 8006152:	4641      	mov	r1, r8
 8006154:	1a51      	subs	r1, r2, r1
 8006156:	60b9      	str	r1, [r7, #8]
 8006158:	4649      	mov	r1, r9
 800615a:	eb63 0301 	sbc.w	r3, r3, r1
 800615e:	60fb      	str	r3, [r7, #12]
 8006160:	f04f 0200 	mov.w	r2, #0
 8006164:	f04f 0300 	mov.w	r3, #0
 8006168:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800616c:	4659      	mov	r1, fp
 800616e:	018b      	lsls	r3, r1, #6
 8006170:	4651      	mov	r1, sl
 8006172:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006176:	4651      	mov	r1, sl
 8006178:	018a      	lsls	r2, r1, #6
 800617a:	4651      	mov	r1, sl
 800617c:	1a54      	subs	r4, r2, r1
 800617e:	4659      	mov	r1, fp
 8006180:	eb63 0501 	sbc.w	r5, r3, r1
 8006184:	f04f 0200 	mov.w	r2, #0
 8006188:	f04f 0300 	mov.w	r3, #0
 800618c:	00eb      	lsls	r3, r5, #3
 800618e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006192:	00e2      	lsls	r2, r4, #3
 8006194:	4614      	mov	r4, r2
 8006196:	461d      	mov	r5, r3
 8006198:	4643      	mov	r3, r8
 800619a:	18e3      	adds	r3, r4, r3
 800619c:	603b      	str	r3, [r7, #0]
 800619e:	464b      	mov	r3, r9
 80061a0:	eb45 0303 	adc.w	r3, r5, r3
 80061a4:	607b      	str	r3, [r7, #4]
 80061a6:	f04f 0200 	mov.w	r2, #0
 80061aa:	f04f 0300 	mov.w	r3, #0
 80061ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80061b2:	4629      	mov	r1, r5
 80061b4:	028b      	lsls	r3, r1, #10
 80061b6:	4621      	mov	r1, r4
 80061b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80061bc:	4621      	mov	r1, r4
 80061be:	028a      	lsls	r2, r1, #10
 80061c0:	4610      	mov	r0, r2
 80061c2:	4619      	mov	r1, r3
 80061c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80061c8:	2200      	movs	r2, #0
 80061ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061cc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80061ce:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80061d2:	f7fa fd79 	bl	8000cc8 <__aeabi_uldivmod>
 80061d6:	4602      	mov	r2, r0
 80061d8:	460b      	mov	r3, r1
 80061da:	4613      	mov	r3, r2
 80061dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80061e0:	4b0d      	ldr	r3, [pc, #52]	@ (8006218 <HAL_RCC_GetSysClockFreq+0x458>)
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	0f1b      	lsrs	r3, r3, #28
 80061e6:	f003 0307 	and.w	r3, r3, #7
 80061ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80061ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80061f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80061f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80061fe:	e003      	b.n	8006208 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006200:	4b06      	ldr	r3, [pc, #24]	@ (800621c <HAL_RCC_GetSysClockFreq+0x45c>)
 8006202:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006206:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006208:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800620c:	4618      	mov	r0, r3
 800620e:	37b8      	adds	r7, #184	@ 0xb8
 8006210:	46bd      	mov	sp, r7
 8006212:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006216:	bf00      	nop
 8006218:	40023800 	.word	0x40023800
 800621c:	00f42400 	.word	0x00f42400

08006220 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b086      	sub	sp, #24
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d101      	bne.n	8006232 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e28d      	b.n	800674e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 0301 	and.w	r3, r3, #1
 800623a:	2b00      	cmp	r3, #0
 800623c:	f000 8083 	beq.w	8006346 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006240:	4b94      	ldr	r3, [pc, #592]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	f003 030c 	and.w	r3, r3, #12
 8006248:	2b04      	cmp	r3, #4
 800624a:	d019      	beq.n	8006280 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800624c:	4b91      	ldr	r3, [pc, #580]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	f003 030c 	and.w	r3, r3, #12
        || \
 8006254:	2b08      	cmp	r3, #8
 8006256:	d106      	bne.n	8006266 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006258:	4b8e      	ldr	r3, [pc, #568]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006260:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006264:	d00c      	beq.n	8006280 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006266:	4b8b      	ldr	r3, [pc, #556]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800626e:	2b0c      	cmp	r3, #12
 8006270:	d112      	bne.n	8006298 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006272:	4b88      	ldr	r3, [pc, #544]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800627a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800627e:	d10b      	bne.n	8006298 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006280:	4b84      	ldr	r3, [pc, #528]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006288:	2b00      	cmp	r3, #0
 800628a:	d05b      	beq.n	8006344 <HAL_RCC_OscConfig+0x124>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d157      	bne.n	8006344 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e25a      	b.n	800674e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062a0:	d106      	bne.n	80062b0 <HAL_RCC_OscConfig+0x90>
 80062a2:	4b7c      	ldr	r3, [pc, #496]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a7b      	ldr	r2, [pc, #492]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 80062a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062ac:	6013      	str	r3, [r2, #0]
 80062ae:	e01d      	b.n	80062ec <HAL_RCC_OscConfig+0xcc>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80062b8:	d10c      	bne.n	80062d4 <HAL_RCC_OscConfig+0xb4>
 80062ba:	4b76      	ldr	r3, [pc, #472]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a75      	ldr	r2, [pc, #468]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 80062c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80062c4:	6013      	str	r3, [r2, #0]
 80062c6:	4b73      	ldr	r3, [pc, #460]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a72      	ldr	r2, [pc, #456]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 80062cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062d0:	6013      	str	r3, [r2, #0]
 80062d2:	e00b      	b.n	80062ec <HAL_RCC_OscConfig+0xcc>
 80062d4:	4b6f      	ldr	r3, [pc, #444]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a6e      	ldr	r2, [pc, #440]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 80062da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062de:	6013      	str	r3, [r2, #0]
 80062e0:	4b6c      	ldr	r3, [pc, #432]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a6b      	ldr	r2, [pc, #428]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 80062e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80062ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d013      	beq.n	800631c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062f4:	f7fd fd32 	bl	8003d5c <HAL_GetTick>
 80062f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062fa:	e008      	b.n	800630e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062fc:	f7fd fd2e 	bl	8003d5c <HAL_GetTick>
 8006300:	4602      	mov	r2, r0
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	2b64      	cmp	r3, #100	@ 0x64
 8006308:	d901      	bls.n	800630e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e21f      	b.n	800674e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800630e:	4b61      	ldr	r3, [pc, #388]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006316:	2b00      	cmp	r3, #0
 8006318:	d0f0      	beq.n	80062fc <HAL_RCC_OscConfig+0xdc>
 800631a:	e014      	b.n	8006346 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800631c:	f7fd fd1e 	bl	8003d5c <HAL_GetTick>
 8006320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006322:	e008      	b.n	8006336 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006324:	f7fd fd1a 	bl	8003d5c <HAL_GetTick>
 8006328:	4602      	mov	r2, r0
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	2b64      	cmp	r3, #100	@ 0x64
 8006330:	d901      	bls.n	8006336 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e20b      	b.n	800674e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006336:	4b57      	ldr	r3, [pc, #348]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800633e:	2b00      	cmp	r3, #0
 8006340:	d1f0      	bne.n	8006324 <HAL_RCC_OscConfig+0x104>
 8006342:	e000      	b.n	8006346 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006344:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0302 	and.w	r3, r3, #2
 800634e:	2b00      	cmp	r3, #0
 8006350:	d06f      	beq.n	8006432 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006352:	4b50      	ldr	r3, [pc, #320]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	f003 030c 	and.w	r3, r3, #12
 800635a:	2b00      	cmp	r3, #0
 800635c:	d017      	beq.n	800638e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800635e:	4b4d      	ldr	r3, [pc, #308]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	f003 030c 	and.w	r3, r3, #12
        || \
 8006366:	2b08      	cmp	r3, #8
 8006368:	d105      	bne.n	8006376 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800636a:	4b4a      	ldr	r3, [pc, #296]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00b      	beq.n	800638e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006376:	4b47      	ldr	r3, [pc, #284]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800637e:	2b0c      	cmp	r3, #12
 8006380:	d11c      	bne.n	80063bc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006382:	4b44      	ldr	r3, [pc, #272]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800638a:	2b00      	cmp	r3, #0
 800638c:	d116      	bne.n	80063bc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800638e:	4b41      	ldr	r3, [pc, #260]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 0302 	and.w	r3, r3, #2
 8006396:	2b00      	cmp	r3, #0
 8006398:	d005      	beq.n	80063a6 <HAL_RCC_OscConfig+0x186>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d001      	beq.n	80063a6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e1d3      	b.n	800674e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063a6:	4b3b      	ldr	r3, [pc, #236]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	00db      	lsls	r3, r3, #3
 80063b4:	4937      	ldr	r1, [pc, #220]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 80063b6:	4313      	orrs	r3, r2
 80063b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063ba:	e03a      	b.n	8006432 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d020      	beq.n	8006406 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063c4:	4b34      	ldr	r3, [pc, #208]	@ (8006498 <HAL_RCC_OscConfig+0x278>)
 80063c6:	2201      	movs	r2, #1
 80063c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ca:	f7fd fcc7 	bl	8003d5c <HAL_GetTick>
 80063ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063d0:	e008      	b.n	80063e4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063d2:	f7fd fcc3 	bl	8003d5c <HAL_GetTick>
 80063d6:	4602      	mov	r2, r0
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d901      	bls.n	80063e4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80063e0:	2303      	movs	r3, #3
 80063e2:	e1b4      	b.n	800674e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063e4:	4b2b      	ldr	r3, [pc, #172]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 0302 	and.w	r3, r3, #2
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d0f0      	beq.n	80063d2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063f0:	4b28      	ldr	r3, [pc, #160]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	00db      	lsls	r3, r3, #3
 80063fe:	4925      	ldr	r1, [pc, #148]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 8006400:	4313      	orrs	r3, r2
 8006402:	600b      	str	r3, [r1, #0]
 8006404:	e015      	b.n	8006432 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006406:	4b24      	ldr	r3, [pc, #144]	@ (8006498 <HAL_RCC_OscConfig+0x278>)
 8006408:	2200      	movs	r2, #0
 800640a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800640c:	f7fd fca6 	bl	8003d5c <HAL_GetTick>
 8006410:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006412:	e008      	b.n	8006426 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006414:	f7fd fca2 	bl	8003d5c <HAL_GetTick>
 8006418:	4602      	mov	r2, r0
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	2b02      	cmp	r3, #2
 8006420:	d901      	bls.n	8006426 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e193      	b.n	800674e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006426:	4b1b      	ldr	r3, [pc, #108]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 0302 	and.w	r3, r3, #2
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1f0      	bne.n	8006414 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 0308 	and.w	r3, r3, #8
 800643a:	2b00      	cmp	r3, #0
 800643c:	d036      	beq.n	80064ac <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d016      	beq.n	8006474 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006446:	4b15      	ldr	r3, [pc, #84]	@ (800649c <HAL_RCC_OscConfig+0x27c>)
 8006448:	2201      	movs	r2, #1
 800644a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800644c:	f7fd fc86 	bl	8003d5c <HAL_GetTick>
 8006450:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006452:	e008      	b.n	8006466 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006454:	f7fd fc82 	bl	8003d5c <HAL_GetTick>
 8006458:	4602      	mov	r2, r0
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	2b02      	cmp	r3, #2
 8006460:	d901      	bls.n	8006466 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006462:	2303      	movs	r3, #3
 8006464:	e173      	b.n	800674e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006466:	4b0b      	ldr	r3, [pc, #44]	@ (8006494 <HAL_RCC_OscConfig+0x274>)
 8006468:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800646a:	f003 0302 	and.w	r3, r3, #2
 800646e:	2b00      	cmp	r3, #0
 8006470:	d0f0      	beq.n	8006454 <HAL_RCC_OscConfig+0x234>
 8006472:	e01b      	b.n	80064ac <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006474:	4b09      	ldr	r3, [pc, #36]	@ (800649c <HAL_RCC_OscConfig+0x27c>)
 8006476:	2200      	movs	r2, #0
 8006478:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800647a:	f7fd fc6f 	bl	8003d5c <HAL_GetTick>
 800647e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006480:	e00e      	b.n	80064a0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006482:	f7fd fc6b 	bl	8003d5c <HAL_GetTick>
 8006486:	4602      	mov	r2, r0
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	1ad3      	subs	r3, r2, r3
 800648c:	2b02      	cmp	r3, #2
 800648e:	d907      	bls.n	80064a0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006490:	2303      	movs	r3, #3
 8006492:	e15c      	b.n	800674e <HAL_RCC_OscConfig+0x52e>
 8006494:	40023800 	.word	0x40023800
 8006498:	42470000 	.word	0x42470000
 800649c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064a0:	4b8a      	ldr	r3, [pc, #552]	@ (80066cc <HAL_RCC_OscConfig+0x4ac>)
 80064a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064a4:	f003 0302 	and.w	r3, r3, #2
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d1ea      	bne.n	8006482 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0304 	and.w	r3, r3, #4
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f000 8097 	beq.w	80065e8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064ba:	2300      	movs	r3, #0
 80064bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064be:	4b83      	ldr	r3, [pc, #524]	@ (80066cc <HAL_RCC_OscConfig+0x4ac>)
 80064c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d10f      	bne.n	80064ea <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064ca:	2300      	movs	r3, #0
 80064cc:	60bb      	str	r3, [r7, #8]
 80064ce:	4b7f      	ldr	r3, [pc, #508]	@ (80066cc <HAL_RCC_OscConfig+0x4ac>)
 80064d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064d2:	4a7e      	ldr	r2, [pc, #504]	@ (80066cc <HAL_RCC_OscConfig+0x4ac>)
 80064d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80064da:	4b7c      	ldr	r3, [pc, #496]	@ (80066cc <HAL_RCC_OscConfig+0x4ac>)
 80064dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064e2:	60bb      	str	r3, [r7, #8]
 80064e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064e6:	2301      	movs	r3, #1
 80064e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064ea:	4b79      	ldr	r3, [pc, #484]	@ (80066d0 <HAL_RCC_OscConfig+0x4b0>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d118      	bne.n	8006528 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80064f6:	4b76      	ldr	r3, [pc, #472]	@ (80066d0 <HAL_RCC_OscConfig+0x4b0>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a75      	ldr	r2, [pc, #468]	@ (80066d0 <HAL_RCC_OscConfig+0x4b0>)
 80064fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006500:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006502:	f7fd fc2b 	bl	8003d5c <HAL_GetTick>
 8006506:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006508:	e008      	b.n	800651c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800650a:	f7fd fc27 	bl	8003d5c <HAL_GetTick>
 800650e:	4602      	mov	r2, r0
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	2b02      	cmp	r3, #2
 8006516:	d901      	bls.n	800651c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006518:	2303      	movs	r3, #3
 800651a:	e118      	b.n	800674e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800651c:	4b6c      	ldr	r3, [pc, #432]	@ (80066d0 <HAL_RCC_OscConfig+0x4b0>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006524:	2b00      	cmp	r3, #0
 8006526:	d0f0      	beq.n	800650a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	2b01      	cmp	r3, #1
 800652e:	d106      	bne.n	800653e <HAL_RCC_OscConfig+0x31e>
 8006530:	4b66      	ldr	r3, [pc, #408]	@ (80066cc <HAL_RCC_OscConfig+0x4ac>)
 8006532:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006534:	4a65      	ldr	r2, [pc, #404]	@ (80066cc <HAL_RCC_OscConfig+0x4ac>)
 8006536:	f043 0301 	orr.w	r3, r3, #1
 800653a:	6713      	str	r3, [r2, #112]	@ 0x70
 800653c:	e01c      	b.n	8006578 <HAL_RCC_OscConfig+0x358>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	2b05      	cmp	r3, #5
 8006544:	d10c      	bne.n	8006560 <HAL_RCC_OscConfig+0x340>
 8006546:	4b61      	ldr	r3, [pc, #388]	@ (80066cc <HAL_RCC_OscConfig+0x4ac>)
 8006548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800654a:	4a60      	ldr	r2, [pc, #384]	@ (80066cc <HAL_RCC_OscConfig+0x4ac>)
 800654c:	f043 0304 	orr.w	r3, r3, #4
 8006550:	6713      	str	r3, [r2, #112]	@ 0x70
 8006552:	4b5e      	ldr	r3, [pc, #376]	@ (80066cc <HAL_RCC_OscConfig+0x4ac>)
 8006554:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006556:	4a5d      	ldr	r2, [pc, #372]	@ (80066cc <HAL_RCC_OscConfig+0x4ac>)
 8006558:	f043 0301 	orr.w	r3, r3, #1
 800655c:	6713      	str	r3, [r2, #112]	@ 0x70
 800655e:	e00b      	b.n	8006578 <HAL_RCC_OscConfig+0x358>
 8006560:	4b5a      	ldr	r3, [pc, #360]	@ (80066cc <HAL_RCC_OscConfig+0x4ac>)
 8006562:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006564:	4a59      	ldr	r2, [pc, #356]	@ (80066cc <HAL_RCC_OscConfig+0x4ac>)
 8006566:	f023 0301 	bic.w	r3, r3, #1
 800656a:	6713      	str	r3, [r2, #112]	@ 0x70
 800656c:	4b57      	ldr	r3, [pc, #348]	@ (80066cc <HAL_RCC_OscConfig+0x4ac>)
 800656e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006570:	4a56      	ldr	r2, [pc, #344]	@ (80066cc <HAL_RCC_OscConfig+0x4ac>)
 8006572:	f023 0304 	bic.w	r3, r3, #4
 8006576:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d015      	beq.n	80065ac <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006580:	f7fd fbec 	bl	8003d5c <HAL_GetTick>
 8006584:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006586:	e00a      	b.n	800659e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006588:	f7fd fbe8 	bl	8003d5c <HAL_GetTick>
 800658c:	4602      	mov	r2, r0
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006596:	4293      	cmp	r3, r2
 8006598:	d901      	bls.n	800659e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	e0d7      	b.n	800674e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800659e:	4b4b      	ldr	r3, [pc, #300]	@ (80066cc <HAL_RCC_OscConfig+0x4ac>)
 80065a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065a2:	f003 0302 	and.w	r3, r3, #2
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d0ee      	beq.n	8006588 <HAL_RCC_OscConfig+0x368>
 80065aa:	e014      	b.n	80065d6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065ac:	f7fd fbd6 	bl	8003d5c <HAL_GetTick>
 80065b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065b2:	e00a      	b.n	80065ca <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065b4:	f7fd fbd2 	bl	8003d5c <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d901      	bls.n	80065ca <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80065c6:	2303      	movs	r3, #3
 80065c8:	e0c1      	b.n	800674e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065ca:	4b40      	ldr	r3, [pc, #256]	@ (80066cc <HAL_RCC_OscConfig+0x4ac>)
 80065cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065ce:	f003 0302 	and.w	r3, r3, #2
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d1ee      	bne.n	80065b4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80065d6:	7dfb      	ldrb	r3, [r7, #23]
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d105      	bne.n	80065e8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065dc:	4b3b      	ldr	r3, [pc, #236]	@ (80066cc <HAL_RCC_OscConfig+0x4ac>)
 80065de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065e0:	4a3a      	ldr	r2, [pc, #232]	@ (80066cc <HAL_RCC_OscConfig+0x4ac>)
 80065e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80065e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f000 80ad 	beq.w	800674c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80065f2:	4b36      	ldr	r3, [pc, #216]	@ (80066cc <HAL_RCC_OscConfig+0x4ac>)
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	f003 030c 	and.w	r3, r3, #12
 80065fa:	2b08      	cmp	r3, #8
 80065fc:	d060      	beq.n	80066c0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	2b02      	cmp	r3, #2
 8006604:	d145      	bne.n	8006692 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006606:	4b33      	ldr	r3, [pc, #204]	@ (80066d4 <HAL_RCC_OscConfig+0x4b4>)
 8006608:	2200      	movs	r2, #0
 800660a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800660c:	f7fd fba6 	bl	8003d5c <HAL_GetTick>
 8006610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006612:	e008      	b.n	8006626 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006614:	f7fd fba2 	bl	8003d5c <HAL_GetTick>
 8006618:	4602      	mov	r2, r0
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	2b02      	cmp	r3, #2
 8006620:	d901      	bls.n	8006626 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006622:	2303      	movs	r3, #3
 8006624:	e093      	b.n	800674e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006626:	4b29      	ldr	r3, [pc, #164]	@ (80066cc <HAL_RCC_OscConfig+0x4ac>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800662e:	2b00      	cmp	r3, #0
 8006630:	d1f0      	bne.n	8006614 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	69da      	ldr	r2, [r3, #28]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a1b      	ldr	r3, [r3, #32]
 800663a:	431a      	orrs	r2, r3
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006640:	019b      	lsls	r3, r3, #6
 8006642:	431a      	orrs	r2, r3
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006648:	085b      	lsrs	r3, r3, #1
 800664a:	3b01      	subs	r3, #1
 800664c:	041b      	lsls	r3, r3, #16
 800664e:	431a      	orrs	r2, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006654:	061b      	lsls	r3, r3, #24
 8006656:	431a      	orrs	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800665c:	071b      	lsls	r3, r3, #28
 800665e:	491b      	ldr	r1, [pc, #108]	@ (80066cc <HAL_RCC_OscConfig+0x4ac>)
 8006660:	4313      	orrs	r3, r2
 8006662:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006664:	4b1b      	ldr	r3, [pc, #108]	@ (80066d4 <HAL_RCC_OscConfig+0x4b4>)
 8006666:	2201      	movs	r2, #1
 8006668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800666a:	f7fd fb77 	bl	8003d5c <HAL_GetTick>
 800666e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006670:	e008      	b.n	8006684 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006672:	f7fd fb73 	bl	8003d5c <HAL_GetTick>
 8006676:	4602      	mov	r2, r0
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	1ad3      	subs	r3, r2, r3
 800667c:	2b02      	cmp	r3, #2
 800667e:	d901      	bls.n	8006684 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006680:	2303      	movs	r3, #3
 8006682:	e064      	b.n	800674e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006684:	4b11      	ldr	r3, [pc, #68]	@ (80066cc <HAL_RCC_OscConfig+0x4ac>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800668c:	2b00      	cmp	r3, #0
 800668e:	d0f0      	beq.n	8006672 <HAL_RCC_OscConfig+0x452>
 8006690:	e05c      	b.n	800674c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006692:	4b10      	ldr	r3, [pc, #64]	@ (80066d4 <HAL_RCC_OscConfig+0x4b4>)
 8006694:	2200      	movs	r2, #0
 8006696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006698:	f7fd fb60 	bl	8003d5c <HAL_GetTick>
 800669c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800669e:	e008      	b.n	80066b2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066a0:	f7fd fb5c 	bl	8003d5c <HAL_GetTick>
 80066a4:	4602      	mov	r2, r0
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	1ad3      	subs	r3, r2, r3
 80066aa:	2b02      	cmp	r3, #2
 80066ac:	d901      	bls.n	80066b2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80066ae:	2303      	movs	r3, #3
 80066b0:	e04d      	b.n	800674e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066b2:	4b06      	ldr	r3, [pc, #24]	@ (80066cc <HAL_RCC_OscConfig+0x4ac>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d1f0      	bne.n	80066a0 <HAL_RCC_OscConfig+0x480>
 80066be:	e045      	b.n	800674c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	699b      	ldr	r3, [r3, #24]
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d107      	bne.n	80066d8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	e040      	b.n	800674e <HAL_RCC_OscConfig+0x52e>
 80066cc:	40023800 	.word	0x40023800
 80066d0:	40007000 	.word	0x40007000
 80066d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80066d8:	4b1f      	ldr	r3, [pc, #124]	@ (8006758 <HAL_RCC_OscConfig+0x538>)
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d030      	beq.n	8006748 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d129      	bne.n	8006748 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066fe:	429a      	cmp	r2, r3
 8006700:	d122      	bne.n	8006748 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006708:	4013      	ands	r3, r2
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800670e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006710:	4293      	cmp	r3, r2
 8006712:	d119      	bne.n	8006748 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800671e:	085b      	lsrs	r3, r3, #1
 8006720:	3b01      	subs	r3, #1
 8006722:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006724:	429a      	cmp	r2, r3
 8006726:	d10f      	bne.n	8006748 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006732:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006734:	429a      	cmp	r2, r3
 8006736:	d107      	bne.n	8006748 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006742:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006744:	429a      	cmp	r2, r3
 8006746:	d001      	beq.n	800674c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	e000      	b.n	800674e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3718      	adds	r7, #24
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	40023800 	.word	0x40023800

0800675c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b082      	sub	sp, #8
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d101      	bne.n	800676e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e07b      	b.n	8006866 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006772:	2b00      	cmp	r3, #0
 8006774:	d108      	bne.n	8006788 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800677e:	d009      	beq.n	8006794 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	61da      	str	r2, [r3, #28]
 8006786:	e005      	b.n	8006794 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d106      	bne.n	80067b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f7fc ff52 	bl	8003658 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2202      	movs	r2, #2
 80067b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80067ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80067dc:	431a      	orrs	r2, r3
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067e6:	431a      	orrs	r2, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	f003 0302 	and.w	r3, r3, #2
 80067f0:	431a      	orrs	r2, r3
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	695b      	ldr	r3, [r3, #20]
 80067f6:	f003 0301 	and.w	r3, r3, #1
 80067fa:	431a      	orrs	r2, r3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	699b      	ldr	r3, [r3, #24]
 8006800:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006804:	431a      	orrs	r2, r3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	69db      	ldr	r3, [r3, #28]
 800680a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800680e:	431a      	orrs	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6a1b      	ldr	r3, [r3, #32]
 8006814:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006818:	ea42 0103 	orr.w	r1, r2, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006820:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	430a      	orrs	r2, r1
 800682a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	699b      	ldr	r3, [r3, #24]
 8006830:	0c1b      	lsrs	r3, r3, #16
 8006832:	f003 0104 	and.w	r1, r3, #4
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800683a:	f003 0210 	and.w	r2, r3, #16
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	430a      	orrs	r2, r1
 8006844:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	69da      	ldr	r2, [r3, #28]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006854:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006864:	2300      	movs	r3, #0
}
 8006866:	4618      	mov	r0, r3
 8006868:	3708      	adds	r7, #8
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}

0800686e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800686e:	b580      	push	{r7, lr}
 8006870:	b088      	sub	sp, #32
 8006872:	af00      	add	r7, sp, #0
 8006874:	60f8      	str	r0, [r7, #12]
 8006876:	60b9      	str	r1, [r7, #8]
 8006878:	603b      	str	r3, [r7, #0]
 800687a:	4613      	mov	r3, r2
 800687c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800687e:	f7fd fa6d 	bl	8003d5c <HAL_GetTick>
 8006882:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006884:	88fb      	ldrh	r3, [r7, #6]
 8006886:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800688e:	b2db      	uxtb	r3, r3
 8006890:	2b01      	cmp	r3, #1
 8006892:	d001      	beq.n	8006898 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006894:	2302      	movs	r3, #2
 8006896:	e12a      	b.n	8006aee <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d002      	beq.n	80068a4 <HAL_SPI_Transmit+0x36>
 800689e:	88fb      	ldrh	r3, [r7, #6]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d101      	bne.n	80068a8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e122      	b.n	8006aee <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d101      	bne.n	80068b6 <HAL_SPI_Transmit+0x48>
 80068b2:	2302      	movs	r3, #2
 80068b4:	e11b      	b.n	8006aee <HAL_SPI_Transmit+0x280>
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2201      	movs	r2, #1
 80068ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2203      	movs	r2, #3
 80068c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2200      	movs	r2, #0
 80068ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	68ba      	ldr	r2, [r7, #8]
 80068d0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	88fa      	ldrh	r2, [r7, #6]
 80068d6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	88fa      	ldrh	r2, [r7, #6]
 80068dc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2200      	movs	r2, #0
 80068e2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2200      	movs	r2, #0
 80068e8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2200      	movs	r2, #0
 80068ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2200      	movs	r2, #0
 80068f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2200      	movs	r2, #0
 80068fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006904:	d10f      	bne.n	8006926 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006914:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006924:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006930:	2b40      	cmp	r3, #64	@ 0x40
 8006932:	d007      	beq.n	8006944 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006942:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800694c:	d152      	bne.n	80069f4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d002      	beq.n	800695c <HAL_SPI_Transmit+0xee>
 8006956:	8b7b      	ldrh	r3, [r7, #26]
 8006958:	2b01      	cmp	r3, #1
 800695a:	d145      	bne.n	80069e8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006960:	881a      	ldrh	r2, [r3, #0]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800696c:	1c9a      	adds	r2, r3, #2
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006976:	b29b      	uxth	r3, r3
 8006978:	3b01      	subs	r3, #1
 800697a:	b29a      	uxth	r2, r3
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006980:	e032      	b.n	80069e8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	f003 0302 	and.w	r3, r3, #2
 800698c:	2b02      	cmp	r3, #2
 800698e:	d112      	bne.n	80069b6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006994:	881a      	ldrh	r2, [r3, #0]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069a0:	1c9a      	adds	r2, r3, #2
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	3b01      	subs	r3, #1
 80069ae:	b29a      	uxth	r2, r3
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80069b4:	e018      	b.n	80069e8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069b6:	f7fd f9d1 	bl	8003d5c <HAL_GetTick>
 80069ba:	4602      	mov	r2, r0
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	1ad3      	subs	r3, r2, r3
 80069c0:	683a      	ldr	r2, [r7, #0]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d803      	bhi.n	80069ce <HAL_SPI_Transmit+0x160>
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069cc:	d102      	bne.n	80069d4 <HAL_SPI_Transmit+0x166>
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d109      	bne.n	80069e8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2200      	movs	r2, #0
 80069e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80069e4:	2303      	movs	r3, #3
 80069e6:	e082      	b.n	8006aee <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d1c7      	bne.n	8006982 <HAL_SPI_Transmit+0x114>
 80069f2:	e053      	b.n	8006a9c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d002      	beq.n	8006a02 <HAL_SPI_Transmit+0x194>
 80069fc:	8b7b      	ldrh	r3, [r7, #26]
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d147      	bne.n	8006a92 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	330c      	adds	r3, #12
 8006a0c:	7812      	ldrb	r2, [r2, #0]
 8006a0e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a14:	1c5a      	adds	r2, r3, #1
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	3b01      	subs	r3, #1
 8006a22:	b29a      	uxth	r2, r3
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006a28:	e033      	b.n	8006a92 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	f003 0302 	and.w	r3, r3, #2
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d113      	bne.n	8006a60 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	330c      	adds	r3, #12
 8006a42:	7812      	ldrb	r2, [r2, #0]
 8006a44:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a4a:	1c5a      	adds	r2, r3, #1
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	3b01      	subs	r3, #1
 8006a58:	b29a      	uxth	r2, r3
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006a5e:	e018      	b.n	8006a92 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a60:	f7fd f97c 	bl	8003d5c <HAL_GetTick>
 8006a64:	4602      	mov	r2, r0
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	1ad3      	subs	r3, r2, r3
 8006a6a:	683a      	ldr	r2, [r7, #0]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d803      	bhi.n	8006a78 <HAL_SPI_Transmit+0x20a>
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a76:	d102      	bne.n	8006a7e <HAL_SPI_Transmit+0x210>
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d109      	bne.n	8006a92 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2201      	movs	r2, #1
 8006a82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e02d      	b.n	8006aee <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d1c6      	bne.n	8006a2a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a9c:	69fa      	ldr	r2, [r7, #28]
 8006a9e:	6839      	ldr	r1, [r7, #0]
 8006aa0:	68f8      	ldr	r0, [r7, #12]
 8006aa2:	f000 fb6b 	bl	800717c <SPI_EndRxTxTransaction>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d002      	beq.n	8006ab2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2220      	movs	r2, #32
 8006ab0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d10a      	bne.n	8006ad0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006aba:	2300      	movs	r3, #0
 8006abc:	617b      	str	r3, [r7, #20]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	617b      	str	r3, [r7, #20]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	617b      	str	r3, [r7, #20]
 8006ace:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d001      	beq.n	8006aec <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e000      	b.n	8006aee <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006aec:	2300      	movs	r3, #0
  }
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3720      	adds	r7, #32
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}

08006af6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006af6:	b580      	push	{r7, lr}
 8006af8:	b08a      	sub	sp, #40	@ 0x28
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	60f8      	str	r0, [r7, #12]
 8006afe:	60b9      	str	r1, [r7, #8]
 8006b00:	607a      	str	r2, [r7, #4]
 8006b02:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006b04:	2301      	movs	r3, #1
 8006b06:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b08:	f7fd f928 	bl	8003d5c <HAL_GetTick>
 8006b0c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006b14:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006b1c:	887b      	ldrh	r3, [r7, #2]
 8006b1e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006b20:	7ffb      	ldrb	r3, [r7, #31]
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d00c      	beq.n	8006b40 <HAL_SPI_TransmitReceive+0x4a>
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b2c:	d106      	bne.n	8006b3c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d102      	bne.n	8006b3c <HAL_SPI_TransmitReceive+0x46>
 8006b36:	7ffb      	ldrb	r3, [r7, #31]
 8006b38:	2b04      	cmp	r3, #4
 8006b3a:	d001      	beq.n	8006b40 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8006b3c:	2302      	movs	r3, #2
 8006b3e:	e17f      	b.n	8006e40 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d005      	beq.n	8006b52 <HAL_SPI_TransmitReceive+0x5c>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d002      	beq.n	8006b52 <HAL_SPI_TransmitReceive+0x5c>
 8006b4c:	887b      	ldrh	r3, [r7, #2]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d101      	bne.n	8006b56 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e174      	b.n	8006e40 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d101      	bne.n	8006b64 <HAL_SPI_TransmitReceive+0x6e>
 8006b60:	2302      	movs	r3, #2
 8006b62:	e16d      	b.n	8006e40 <HAL_SPI_TransmitReceive+0x34a>
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	2b04      	cmp	r3, #4
 8006b76:	d003      	beq.n	8006b80 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2205      	movs	r2, #5
 8006b7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2200      	movs	r2, #0
 8006b84:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	887a      	ldrh	r2, [r7, #2]
 8006b90:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	887a      	ldrh	r2, [r7, #2]
 8006b96:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	68ba      	ldr	r2, [r7, #8]
 8006b9c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	887a      	ldrh	r2, [r7, #2]
 8006ba2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	887a      	ldrh	r2, [r7, #2]
 8006ba8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2200      	movs	r2, #0
 8006bae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bc0:	2b40      	cmp	r3, #64	@ 0x40
 8006bc2:	d007      	beq.n	8006bd4 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006bd2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006bdc:	d17e      	bne.n	8006cdc <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d002      	beq.n	8006bec <HAL_SPI_TransmitReceive+0xf6>
 8006be6:	8afb      	ldrh	r3, [r7, #22]
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d16c      	bne.n	8006cc6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bf0:	881a      	ldrh	r2, [r3, #0]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bfc:	1c9a      	adds	r2, r3, #2
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	3b01      	subs	r3, #1
 8006c0a:	b29a      	uxth	r2, r3
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c10:	e059      	b.n	8006cc6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	f003 0302 	and.w	r3, r3, #2
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	d11b      	bne.n	8006c58 <HAL_SPI_TransmitReceive+0x162>
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d016      	beq.n	8006c58 <HAL_SPI_TransmitReceive+0x162>
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d113      	bne.n	8006c58 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c34:	881a      	ldrh	r2, [r3, #0]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c40:	1c9a      	adds	r2, r3, #2
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	3b01      	subs	r3, #1
 8006c4e:	b29a      	uxth	r2, r3
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006c54:	2300      	movs	r3, #0
 8006c56:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	f003 0301 	and.w	r3, r3, #1
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d119      	bne.n	8006c9a <HAL_SPI_TransmitReceive+0x1a4>
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d014      	beq.n	8006c9a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	68da      	ldr	r2, [r3, #12]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c7a:	b292      	uxth	r2, r2
 8006c7c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c82:	1c9a      	adds	r2, r3, #2
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	b29a      	uxth	r2, r3
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c96:	2301      	movs	r3, #1
 8006c98:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006c9a:	f7fd f85f 	bl	8003d5c <HAL_GetTick>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	6a3b      	ldr	r3, [r7, #32]
 8006ca2:	1ad3      	subs	r3, r2, r3
 8006ca4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d80d      	bhi.n	8006cc6 <HAL_SPI_TransmitReceive+0x1d0>
 8006caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb0:	d009      	beq.n	8006cc6 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	e0bc      	b.n	8006e40 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d1a0      	bne.n	8006c12 <HAL_SPI_TransmitReceive+0x11c>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d19b      	bne.n	8006c12 <HAL_SPI_TransmitReceive+0x11c>
 8006cda:	e082      	b.n	8006de2 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d002      	beq.n	8006cea <HAL_SPI_TransmitReceive+0x1f4>
 8006ce4:	8afb      	ldrh	r3, [r7, #22]
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d171      	bne.n	8006dce <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	330c      	adds	r3, #12
 8006cf4:	7812      	ldrb	r2, [r2, #0]
 8006cf6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cfc:	1c5a      	adds	r2, r3, #1
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	3b01      	subs	r3, #1
 8006d0a:	b29a      	uxth	r2, r3
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d10:	e05d      	b.n	8006dce <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	f003 0302 	and.w	r3, r3, #2
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d11c      	bne.n	8006d5a <HAL_SPI_TransmitReceive+0x264>
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d017      	beq.n	8006d5a <HAL_SPI_TransmitReceive+0x264>
 8006d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d114      	bne.n	8006d5a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	330c      	adds	r3, #12
 8006d3a:	7812      	ldrb	r2, [r2, #0]
 8006d3c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d42:	1c5a      	adds	r2, r3, #1
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	3b01      	subs	r3, #1
 8006d50:	b29a      	uxth	r2, r3
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006d56:	2300      	movs	r3, #0
 8006d58:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	f003 0301 	and.w	r3, r3, #1
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d119      	bne.n	8006d9c <HAL_SPI_TransmitReceive+0x2a6>
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d014      	beq.n	8006d9c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68da      	ldr	r2, [r3, #12]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d7c:	b2d2      	uxtb	r2, r2
 8006d7e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d84:	1c5a      	adds	r2, r3, #1
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	3b01      	subs	r3, #1
 8006d92:	b29a      	uxth	r2, r3
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006d9c:	f7fc ffde 	bl	8003d5c <HAL_GetTick>
 8006da0:	4602      	mov	r2, r0
 8006da2:	6a3b      	ldr	r3, [r7, #32]
 8006da4:	1ad3      	subs	r3, r2, r3
 8006da6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d803      	bhi.n	8006db4 <HAL_SPI_TransmitReceive+0x2be>
 8006dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db2:	d102      	bne.n	8006dba <HAL_SPI_TransmitReceive+0x2c4>
 8006db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d109      	bne.n	8006dce <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	e038      	b.n	8006e40 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d19c      	bne.n	8006d12 <HAL_SPI_TransmitReceive+0x21c>
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d197      	bne.n	8006d12 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006de2:	6a3a      	ldr	r2, [r7, #32]
 8006de4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006de6:	68f8      	ldr	r0, [r7, #12]
 8006de8:	f000 f9c8 	bl	800717c <SPI_EndRxTxTransaction>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d008      	beq.n	8006e04 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2220      	movs	r2, #32
 8006df6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	e01d      	b.n	8006e40 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d10a      	bne.n	8006e22 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	613b      	str	r3, [r7, #16]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	613b      	str	r3, [r7, #16]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	613b      	str	r3, [r7, #16]
 8006e20:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2201      	movs	r2, #1
 8006e26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d001      	beq.n	8006e3e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e000      	b.n	8006e40 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006e3e:	2300      	movs	r3, #0
  }
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3728      	adds	r7, #40	@ 0x28
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b088      	sub	sp, #32
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d10e      	bne.n	8006e88 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d009      	beq.n	8006e88 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006e74:	69fb      	ldr	r3, [r7, #28]
 8006e76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d004      	beq.n	8006e88 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	4798      	blx	r3
    return;
 8006e86:	e0ce      	b.n	8007026 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	f003 0302 	and.w	r3, r3, #2
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d009      	beq.n	8006ea6 <HAL_SPI_IRQHandler+0x5e>
 8006e92:	69fb      	ldr	r3, [r7, #28]
 8006e94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d004      	beq.n	8006ea6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	4798      	blx	r3
    return;
 8006ea4:	e0bf      	b.n	8007026 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	f003 0320 	and.w	r3, r3, #32
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d10a      	bne.n	8006ec6 <HAL_SPI_IRQHandler+0x7e>
 8006eb0:	69bb      	ldr	r3, [r7, #24]
 8006eb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d105      	bne.n	8006ec6 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	f000 80b0 	beq.w	8007026 <HAL_SPI_IRQHandler+0x1de>
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	f003 0320 	and.w	r3, r3, #32
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	f000 80aa 	beq.w	8007026 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d023      	beq.n	8006f24 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	2b03      	cmp	r3, #3
 8006ee6:	d011      	beq.n	8006f0c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006eec:	f043 0204 	orr.w	r2, r3, #4
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	617b      	str	r3, [r7, #20]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	68db      	ldr	r3, [r3, #12]
 8006efe:	617b      	str	r3, [r7, #20]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	617b      	str	r3, [r7, #20]
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	e00b      	b.n	8006f24 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	613b      	str	r3, [r7, #16]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	613b      	str	r3, [r7, #16]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	613b      	str	r3, [r7, #16]
 8006f20:	693b      	ldr	r3, [r7, #16]
        return;
 8006f22:	e080      	b.n	8007026 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	f003 0320 	and.w	r3, r3, #32
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d014      	beq.n	8006f58 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f32:	f043 0201 	orr.w	r2, r3, #1
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	60fb      	str	r3, [r7, #12]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	60fb      	str	r3, [r7, #12]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f54:	601a      	str	r2, [r3, #0]
 8006f56:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d00c      	beq.n	8006f7c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f66:	f043 0208 	orr.w	r2, r3, #8
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006f6e:	2300      	movs	r3, #0
 8006f70:	60bb      	str	r3, [r7, #8]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	60bb      	str	r3, [r7, #8]
 8006f7a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d04f      	beq.n	8007024 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	685a      	ldr	r2, [r3, #4]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006f92:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	f003 0302 	and.w	r3, r3, #2
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d104      	bne.n	8006fb0 <HAL_SPI_IRQHandler+0x168>
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	f003 0301 	and.w	r3, r3, #1
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d034      	beq.n	800701a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	685a      	ldr	r2, [r3, #4]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f022 0203 	bic.w	r2, r2, #3
 8006fbe:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d011      	beq.n	8006fec <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fcc:	4a17      	ldr	r2, [pc, #92]	@ (800702c <HAL_SPI_IRQHandler+0x1e4>)
 8006fce:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f7fe f94f 	bl	8005278 <HAL_DMA_Abort_IT>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d005      	beq.n	8006fec <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fe4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d016      	beq.n	8007022 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ff8:	4a0c      	ldr	r2, [pc, #48]	@ (800702c <HAL_SPI_IRQHandler+0x1e4>)
 8006ffa:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007000:	4618      	mov	r0, r3
 8007002:	f7fe f939 	bl	8005278 <HAL_DMA_Abort_IT>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d00a      	beq.n	8007022 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007010:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8007018:	e003      	b.n	8007022 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 f808 	bl	8007030 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007020:	e000      	b.n	8007024 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8007022:	bf00      	nop
    return;
 8007024:	bf00      	nop
  }
}
 8007026:	3720      	adds	r7, #32
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}
 800702c:	08007045 	.word	0x08007045

08007030 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007038:	bf00      	nop
 800703a:	370c      	adds	r7, #12
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007050:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2200      	movs	r2, #0
 8007056:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2200      	movs	r2, #0
 800705c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800705e:	68f8      	ldr	r0, [r7, #12]
 8007060:	f7ff ffe6 	bl	8007030 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007064:	bf00      	nop
 8007066:	3710      	adds	r7, #16
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b088      	sub	sp, #32
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	603b      	str	r3, [r7, #0]
 8007078:	4613      	mov	r3, r2
 800707a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800707c:	f7fc fe6e 	bl	8003d5c <HAL_GetTick>
 8007080:	4602      	mov	r2, r0
 8007082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007084:	1a9b      	subs	r3, r3, r2
 8007086:	683a      	ldr	r2, [r7, #0]
 8007088:	4413      	add	r3, r2
 800708a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800708c:	f7fc fe66 	bl	8003d5c <HAL_GetTick>
 8007090:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007092:	4b39      	ldr	r3, [pc, #228]	@ (8007178 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	015b      	lsls	r3, r3, #5
 8007098:	0d1b      	lsrs	r3, r3, #20
 800709a:	69fa      	ldr	r2, [r7, #28]
 800709c:	fb02 f303 	mul.w	r3, r2, r3
 80070a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80070a2:	e054      	b.n	800714e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070aa:	d050      	beq.n	800714e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80070ac:	f7fc fe56 	bl	8003d5c <HAL_GetTick>
 80070b0:	4602      	mov	r2, r0
 80070b2:	69bb      	ldr	r3, [r7, #24]
 80070b4:	1ad3      	subs	r3, r2, r3
 80070b6:	69fa      	ldr	r2, [r7, #28]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d902      	bls.n	80070c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d13d      	bne.n	800713e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	685a      	ldr	r2, [r3, #4]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80070d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80070da:	d111      	bne.n	8007100 <SPI_WaitFlagStateUntilTimeout+0x94>
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070e4:	d004      	beq.n	80070f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070ee:	d107      	bne.n	8007100 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80070fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007104:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007108:	d10f      	bne.n	800712a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007118:	601a      	str	r2, [r3, #0]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007128:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2201      	movs	r2, #1
 800712e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2200      	movs	r2, #0
 8007136:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800713a:	2303      	movs	r3, #3
 800713c:	e017      	b.n	800716e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d101      	bne.n	8007148 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007144:	2300      	movs	r3, #0
 8007146:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	3b01      	subs	r3, #1
 800714c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	689a      	ldr	r2, [r3, #8]
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	4013      	ands	r3, r2
 8007158:	68ba      	ldr	r2, [r7, #8]
 800715a:	429a      	cmp	r2, r3
 800715c:	bf0c      	ite	eq
 800715e:	2301      	moveq	r3, #1
 8007160:	2300      	movne	r3, #0
 8007162:	b2db      	uxtb	r3, r3
 8007164:	461a      	mov	r2, r3
 8007166:	79fb      	ldrb	r3, [r7, #7]
 8007168:	429a      	cmp	r2, r3
 800716a:	d19b      	bne.n	80070a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800716c:	2300      	movs	r3, #0
}
 800716e:	4618      	mov	r0, r3
 8007170:	3720      	adds	r7, #32
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	20000034 	.word	0x20000034

0800717c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b088      	sub	sp, #32
 8007180:	af02      	add	r7, sp, #8
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	9300      	str	r3, [sp, #0]
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	2201      	movs	r2, #1
 8007190:	2102      	movs	r1, #2
 8007192:	68f8      	ldr	r0, [r7, #12]
 8007194:	f7ff ff6a 	bl	800706c <SPI_WaitFlagStateUntilTimeout>
 8007198:	4603      	mov	r3, r0
 800719a:	2b00      	cmp	r3, #0
 800719c:	d007      	beq.n	80071ae <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071a2:	f043 0220 	orr.w	r2, r3, #32
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80071aa:	2303      	movs	r3, #3
 80071ac:	e032      	b.n	8007214 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80071ae:	4b1b      	ldr	r3, [pc, #108]	@ (800721c <SPI_EndRxTxTransaction+0xa0>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a1b      	ldr	r2, [pc, #108]	@ (8007220 <SPI_EndRxTxTransaction+0xa4>)
 80071b4:	fba2 2303 	umull	r2, r3, r2, r3
 80071b8:	0d5b      	lsrs	r3, r3, #21
 80071ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80071be:	fb02 f303 	mul.w	r3, r2, r3
 80071c2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80071cc:	d112      	bne.n	80071f4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	9300      	str	r3, [sp, #0]
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	2200      	movs	r2, #0
 80071d6:	2180      	movs	r1, #128	@ 0x80
 80071d8:	68f8      	ldr	r0, [r7, #12]
 80071da:	f7ff ff47 	bl	800706c <SPI_WaitFlagStateUntilTimeout>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d016      	beq.n	8007212 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071e8:	f043 0220 	orr.w	r2, r3, #32
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80071f0:	2303      	movs	r3, #3
 80071f2:	e00f      	b.n	8007214 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00a      	beq.n	8007210 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	3b01      	subs	r3, #1
 80071fe:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800720a:	2b80      	cmp	r3, #128	@ 0x80
 800720c:	d0f2      	beq.n	80071f4 <SPI_EndRxTxTransaction+0x78>
 800720e:	e000      	b.n	8007212 <SPI_EndRxTxTransaction+0x96>
        break;
 8007210:	bf00      	nop
  }

  return HAL_OK;
 8007212:	2300      	movs	r3, #0
}
 8007214:	4618      	mov	r0, r3
 8007216:	3718      	adds	r7, #24
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	20000034 	.word	0x20000034
 8007220:	165e9f81 	.word	0x165e9f81

08007224 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b082      	sub	sp, #8
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d101      	bne.n	8007236 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	e041      	b.n	80072ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800723c:	b2db      	uxtb	r3, r3
 800723e:	2b00      	cmp	r3, #0
 8007240:	d106      	bne.n	8007250 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f7fc fa54 	bl	80036f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2202      	movs	r2, #2
 8007254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	3304      	adds	r3, #4
 8007260:	4619      	mov	r1, r3
 8007262:	4610      	mov	r0, r2
 8007264:	f000 fcca 	bl	8007bfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2201      	movs	r2, #1
 800726c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2201      	movs	r2, #1
 8007274:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2201      	movs	r2, #1
 8007284:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2201      	movs	r2, #1
 800728c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2201      	movs	r2, #1
 8007294:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2201      	movs	r2, #1
 80072ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2201      	movs	r2, #1
 80072b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80072b8:	2300      	movs	r3, #0
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3708      	adds	r7, #8
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
	...

080072c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b085      	sub	sp, #20
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d001      	beq.n	80072dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	e046      	b.n	800736a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2202      	movs	r2, #2
 80072e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a23      	ldr	r2, [pc, #140]	@ (8007378 <HAL_TIM_Base_Start+0xb4>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d022      	beq.n	8007334 <HAL_TIM_Base_Start+0x70>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072f6:	d01d      	beq.n	8007334 <HAL_TIM_Base_Start+0x70>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a1f      	ldr	r2, [pc, #124]	@ (800737c <HAL_TIM_Base_Start+0xb8>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d018      	beq.n	8007334 <HAL_TIM_Base_Start+0x70>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a1e      	ldr	r2, [pc, #120]	@ (8007380 <HAL_TIM_Base_Start+0xbc>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d013      	beq.n	8007334 <HAL_TIM_Base_Start+0x70>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a1c      	ldr	r2, [pc, #112]	@ (8007384 <HAL_TIM_Base_Start+0xc0>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d00e      	beq.n	8007334 <HAL_TIM_Base_Start+0x70>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a1b      	ldr	r2, [pc, #108]	@ (8007388 <HAL_TIM_Base_Start+0xc4>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d009      	beq.n	8007334 <HAL_TIM_Base_Start+0x70>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a19      	ldr	r2, [pc, #100]	@ (800738c <HAL_TIM_Base_Start+0xc8>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d004      	beq.n	8007334 <HAL_TIM_Base_Start+0x70>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a18      	ldr	r2, [pc, #96]	@ (8007390 <HAL_TIM_Base_Start+0xcc>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d111      	bne.n	8007358 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	f003 0307 	and.w	r3, r3, #7
 800733e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2b06      	cmp	r3, #6
 8007344:	d010      	beq.n	8007368 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f042 0201 	orr.w	r2, r2, #1
 8007354:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007356:	e007      	b.n	8007368 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f042 0201 	orr.w	r2, r2, #1
 8007366:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007368:	2300      	movs	r3, #0
}
 800736a:	4618      	mov	r0, r3
 800736c:	3714      	adds	r7, #20
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr
 8007376:	bf00      	nop
 8007378:	40010000 	.word	0x40010000
 800737c:	40000400 	.word	0x40000400
 8007380:	40000800 	.word	0x40000800
 8007384:	40000c00 	.word	0x40000c00
 8007388:	40010400 	.word	0x40010400
 800738c:	40014000 	.word	0x40014000
 8007390:	40001800 	.word	0x40001800

08007394 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007394:	b480      	push	{r7}
 8007396:	b085      	sub	sp, #20
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d001      	beq.n	80073ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	e04e      	b.n	800744a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2202      	movs	r2, #2
 80073b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	68da      	ldr	r2, [r3, #12]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f042 0201 	orr.w	r2, r2, #1
 80073c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a23      	ldr	r2, [pc, #140]	@ (8007458 <HAL_TIM_Base_Start_IT+0xc4>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d022      	beq.n	8007414 <HAL_TIM_Base_Start_IT+0x80>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073d6:	d01d      	beq.n	8007414 <HAL_TIM_Base_Start_IT+0x80>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a1f      	ldr	r2, [pc, #124]	@ (800745c <HAL_TIM_Base_Start_IT+0xc8>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d018      	beq.n	8007414 <HAL_TIM_Base_Start_IT+0x80>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a1e      	ldr	r2, [pc, #120]	@ (8007460 <HAL_TIM_Base_Start_IT+0xcc>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d013      	beq.n	8007414 <HAL_TIM_Base_Start_IT+0x80>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a1c      	ldr	r2, [pc, #112]	@ (8007464 <HAL_TIM_Base_Start_IT+0xd0>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d00e      	beq.n	8007414 <HAL_TIM_Base_Start_IT+0x80>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a1b      	ldr	r2, [pc, #108]	@ (8007468 <HAL_TIM_Base_Start_IT+0xd4>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d009      	beq.n	8007414 <HAL_TIM_Base_Start_IT+0x80>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a19      	ldr	r2, [pc, #100]	@ (800746c <HAL_TIM_Base_Start_IT+0xd8>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d004      	beq.n	8007414 <HAL_TIM_Base_Start_IT+0x80>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a18      	ldr	r2, [pc, #96]	@ (8007470 <HAL_TIM_Base_Start_IT+0xdc>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d111      	bne.n	8007438 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	f003 0307 	and.w	r3, r3, #7
 800741e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2b06      	cmp	r3, #6
 8007424:	d010      	beq.n	8007448 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f042 0201 	orr.w	r2, r2, #1
 8007434:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007436:	e007      	b.n	8007448 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f042 0201 	orr.w	r2, r2, #1
 8007446:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007448:	2300      	movs	r3, #0
}
 800744a:	4618      	mov	r0, r3
 800744c:	3714      	adds	r7, #20
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr
 8007456:	bf00      	nop
 8007458:	40010000 	.word	0x40010000
 800745c:	40000400 	.word	0x40000400
 8007460:	40000800 	.word	0x40000800
 8007464:	40000c00 	.word	0x40000c00
 8007468:	40010400 	.word	0x40010400
 800746c:	40014000 	.word	0x40014000
 8007470:	40001800 	.word	0x40001800

08007474 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b082      	sub	sp, #8
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d101      	bne.n	8007486 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007482:	2301      	movs	r3, #1
 8007484:	e041      	b.n	800750a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800748c:	b2db      	uxtb	r3, r3
 800748e:	2b00      	cmp	r3, #0
 8007490:	d106      	bne.n	80074a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 f839 	bl	8007512 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2202      	movs	r2, #2
 80074a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	3304      	adds	r3, #4
 80074b0:	4619      	mov	r1, r3
 80074b2:	4610      	mov	r0, r2
 80074b4:	f000 fba2 	bl	8007bfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2201      	movs	r2, #1
 8007504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	3708      	adds	r7, #8
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}

08007512 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007512:	b480      	push	{r7}
 8007514:	b083      	sub	sp, #12
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800751a:	bf00      	nop
 800751c:	370c      	adds	r7, #12
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr
	...

08007528 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d109      	bne.n	800754c <HAL_TIM_PWM_Start+0x24>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800753e:	b2db      	uxtb	r3, r3
 8007540:	2b01      	cmp	r3, #1
 8007542:	bf14      	ite	ne
 8007544:	2301      	movne	r3, #1
 8007546:	2300      	moveq	r3, #0
 8007548:	b2db      	uxtb	r3, r3
 800754a:	e022      	b.n	8007592 <HAL_TIM_PWM_Start+0x6a>
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	2b04      	cmp	r3, #4
 8007550:	d109      	bne.n	8007566 <HAL_TIM_PWM_Start+0x3e>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007558:	b2db      	uxtb	r3, r3
 800755a:	2b01      	cmp	r3, #1
 800755c:	bf14      	ite	ne
 800755e:	2301      	movne	r3, #1
 8007560:	2300      	moveq	r3, #0
 8007562:	b2db      	uxtb	r3, r3
 8007564:	e015      	b.n	8007592 <HAL_TIM_PWM_Start+0x6a>
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	2b08      	cmp	r3, #8
 800756a:	d109      	bne.n	8007580 <HAL_TIM_PWM_Start+0x58>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007572:	b2db      	uxtb	r3, r3
 8007574:	2b01      	cmp	r3, #1
 8007576:	bf14      	ite	ne
 8007578:	2301      	movne	r3, #1
 800757a:	2300      	moveq	r3, #0
 800757c:	b2db      	uxtb	r3, r3
 800757e:	e008      	b.n	8007592 <HAL_TIM_PWM_Start+0x6a>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007586:	b2db      	uxtb	r3, r3
 8007588:	2b01      	cmp	r3, #1
 800758a:	bf14      	ite	ne
 800758c:	2301      	movne	r3, #1
 800758e:	2300      	moveq	r3, #0
 8007590:	b2db      	uxtb	r3, r3
 8007592:	2b00      	cmp	r3, #0
 8007594:	d001      	beq.n	800759a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	e07c      	b.n	8007694 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d104      	bne.n	80075aa <HAL_TIM_PWM_Start+0x82>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2202      	movs	r2, #2
 80075a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80075a8:	e013      	b.n	80075d2 <HAL_TIM_PWM_Start+0xaa>
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	2b04      	cmp	r3, #4
 80075ae:	d104      	bne.n	80075ba <HAL_TIM_PWM_Start+0x92>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2202      	movs	r2, #2
 80075b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80075b8:	e00b      	b.n	80075d2 <HAL_TIM_PWM_Start+0xaa>
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	2b08      	cmp	r3, #8
 80075be:	d104      	bne.n	80075ca <HAL_TIM_PWM_Start+0xa2>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2202      	movs	r2, #2
 80075c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80075c8:	e003      	b.n	80075d2 <HAL_TIM_PWM_Start+0xaa>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2202      	movs	r2, #2
 80075ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2201      	movs	r2, #1
 80075d8:	6839      	ldr	r1, [r7, #0]
 80075da:	4618      	mov	r0, r3
 80075dc:	f000 fe04 	bl	80081e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a2d      	ldr	r2, [pc, #180]	@ (800769c <HAL_TIM_PWM_Start+0x174>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d004      	beq.n	80075f4 <HAL_TIM_PWM_Start+0xcc>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a2c      	ldr	r2, [pc, #176]	@ (80076a0 <HAL_TIM_PWM_Start+0x178>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d101      	bne.n	80075f8 <HAL_TIM_PWM_Start+0xd0>
 80075f4:	2301      	movs	r3, #1
 80075f6:	e000      	b.n	80075fa <HAL_TIM_PWM_Start+0xd2>
 80075f8:	2300      	movs	r3, #0
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d007      	beq.n	800760e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800760c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a22      	ldr	r2, [pc, #136]	@ (800769c <HAL_TIM_PWM_Start+0x174>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d022      	beq.n	800765e <HAL_TIM_PWM_Start+0x136>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007620:	d01d      	beq.n	800765e <HAL_TIM_PWM_Start+0x136>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a1f      	ldr	r2, [pc, #124]	@ (80076a4 <HAL_TIM_PWM_Start+0x17c>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d018      	beq.n	800765e <HAL_TIM_PWM_Start+0x136>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a1d      	ldr	r2, [pc, #116]	@ (80076a8 <HAL_TIM_PWM_Start+0x180>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d013      	beq.n	800765e <HAL_TIM_PWM_Start+0x136>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a1c      	ldr	r2, [pc, #112]	@ (80076ac <HAL_TIM_PWM_Start+0x184>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d00e      	beq.n	800765e <HAL_TIM_PWM_Start+0x136>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a16      	ldr	r2, [pc, #88]	@ (80076a0 <HAL_TIM_PWM_Start+0x178>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d009      	beq.n	800765e <HAL_TIM_PWM_Start+0x136>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a18      	ldr	r2, [pc, #96]	@ (80076b0 <HAL_TIM_PWM_Start+0x188>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d004      	beq.n	800765e <HAL_TIM_PWM_Start+0x136>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a16      	ldr	r2, [pc, #88]	@ (80076b4 <HAL_TIM_PWM_Start+0x18c>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d111      	bne.n	8007682 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	f003 0307 	and.w	r3, r3, #7
 8007668:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2b06      	cmp	r3, #6
 800766e:	d010      	beq.n	8007692 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f042 0201 	orr.w	r2, r2, #1
 800767e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007680:	e007      	b.n	8007692 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f042 0201 	orr.w	r2, r2, #1
 8007690:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007692:	2300      	movs	r3, #0
}
 8007694:	4618      	mov	r0, r3
 8007696:	3710      	adds	r7, #16
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}
 800769c:	40010000 	.word	0x40010000
 80076a0:	40010400 	.word	0x40010400
 80076a4:	40000400 	.word	0x40000400
 80076a8:	40000800 	.word	0x40000800
 80076ac:	40000c00 	.word	0x40000c00
 80076b0:	40014000 	.word	0x40014000
 80076b4:	40001800 	.word	0x40001800

080076b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	f003 0302 	and.w	r3, r3, #2
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d020      	beq.n	800771c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f003 0302 	and.w	r3, r3, #2
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d01b      	beq.n	800771c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f06f 0202 	mvn.w	r2, #2
 80076ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2201      	movs	r2, #1
 80076f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	699b      	ldr	r3, [r3, #24]
 80076fa:	f003 0303 	and.w	r3, r3, #3
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d003      	beq.n	800770a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 fa5b 	bl	8007bbe <HAL_TIM_IC_CaptureCallback>
 8007708:	e005      	b.n	8007716 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 fa4d 	bl	8007baa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 fa5e 	bl	8007bd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	f003 0304 	and.w	r3, r3, #4
 8007722:	2b00      	cmp	r3, #0
 8007724:	d020      	beq.n	8007768 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	f003 0304 	and.w	r3, r3, #4
 800772c:	2b00      	cmp	r3, #0
 800772e:	d01b      	beq.n	8007768 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f06f 0204 	mvn.w	r2, #4
 8007738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2202      	movs	r2, #2
 800773e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	699b      	ldr	r3, [r3, #24]
 8007746:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800774a:	2b00      	cmp	r3, #0
 800774c:	d003      	beq.n	8007756 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 fa35 	bl	8007bbe <HAL_TIM_IC_CaptureCallback>
 8007754:	e005      	b.n	8007762 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 fa27 	bl	8007baa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 fa38 	bl	8007bd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	f003 0308 	and.w	r3, r3, #8
 800776e:	2b00      	cmp	r3, #0
 8007770:	d020      	beq.n	80077b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f003 0308 	and.w	r3, r3, #8
 8007778:	2b00      	cmp	r3, #0
 800777a:	d01b      	beq.n	80077b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f06f 0208 	mvn.w	r2, #8
 8007784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2204      	movs	r2, #4
 800778a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	69db      	ldr	r3, [r3, #28]
 8007792:	f003 0303 	and.w	r3, r3, #3
 8007796:	2b00      	cmp	r3, #0
 8007798:	d003      	beq.n	80077a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 fa0f 	bl	8007bbe <HAL_TIM_IC_CaptureCallback>
 80077a0:	e005      	b.n	80077ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 fa01 	bl	8007baa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 fa12 	bl	8007bd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	f003 0310 	and.w	r3, r3, #16
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d020      	beq.n	8007800 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f003 0310 	and.w	r3, r3, #16
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d01b      	beq.n	8007800 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f06f 0210 	mvn.w	r2, #16
 80077d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2208      	movs	r2, #8
 80077d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	69db      	ldr	r3, [r3, #28]
 80077de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d003      	beq.n	80077ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 f9e9 	bl	8007bbe <HAL_TIM_IC_CaptureCallback>
 80077ec:	e005      	b.n	80077fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 f9db 	bl	8007baa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 f9ec 	bl	8007bd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	f003 0301 	and.w	r3, r3, #1
 8007806:	2b00      	cmp	r3, #0
 8007808:	d00c      	beq.n	8007824 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f003 0301 	and.w	r3, r3, #1
 8007810:	2b00      	cmp	r3, #0
 8007812:	d007      	beq.n	8007824 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f06f 0201 	mvn.w	r2, #1
 800781c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f7fb fdce 	bl	80033c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00c      	beq.n	8007848 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007834:	2b00      	cmp	r3, #0
 8007836:	d007      	beq.n	8007848 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 fdce 	bl	80083e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800784e:	2b00      	cmp	r3, #0
 8007850:	d00c      	beq.n	800786c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007858:	2b00      	cmp	r3, #0
 800785a:	d007      	beq.n	800786c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 f9bd 	bl	8007be6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	f003 0320 	and.w	r3, r3, #32
 8007872:	2b00      	cmp	r3, #0
 8007874:	d00c      	beq.n	8007890 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f003 0320 	and.w	r3, r3, #32
 800787c:	2b00      	cmp	r3, #0
 800787e:	d007      	beq.n	8007890 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f06f 0220 	mvn.w	r2, #32
 8007888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 fda0 	bl	80083d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007890:	bf00      	nop
 8007892:	3710      	adds	r7, #16
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b086      	sub	sp, #24
 800789c:	af00      	add	r7, sp, #0
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078a4:	2300      	movs	r3, #0
 80078a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d101      	bne.n	80078b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80078b2:	2302      	movs	r3, #2
 80078b4:	e0ae      	b.n	8007a14 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2201      	movs	r2, #1
 80078ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2b0c      	cmp	r3, #12
 80078c2:	f200 809f 	bhi.w	8007a04 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80078c6:	a201      	add	r2, pc, #4	@ (adr r2, 80078cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80078c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078cc:	08007901 	.word	0x08007901
 80078d0:	08007a05 	.word	0x08007a05
 80078d4:	08007a05 	.word	0x08007a05
 80078d8:	08007a05 	.word	0x08007a05
 80078dc:	08007941 	.word	0x08007941
 80078e0:	08007a05 	.word	0x08007a05
 80078e4:	08007a05 	.word	0x08007a05
 80078e8:	08007a05 	.word	0x08007a05
 80078ec:	08007983 	.word	0x08007983
 80078f0:	08007a05 	.word	0x08007a05
 80078f4:	08007a05 	.word	0x08007a05
 80078f8:	08007a05 	.word	0x08007a05
 80078fc:	080079c3 	.word	0x080079c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	68b9      	ldr	r1, [r7, #8]
 8007906:	4618      	mov	r0, r3
 8007908:	f000 fa24 	bl	8007d54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	699a      	ldr	r2, [r3, #24]
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f042 0208 	orr.w	r2, r2, #8
 800791a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	699a      	ldr	r2, [r3, #24]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f022 0204 	bic.w	r2, r2, #4
 800792a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	6999      	ldr	r1, [r3, #24]
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	691a      	ldr	r2, [r3, #16]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	430a      	orrs	r2, r1
 800793c:	619a      	str	r2, [r3, #24]
      break;
 800793e:	e064      	b.n	8007a0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	68b9      	ldr	r1, [r7, #8]
 8007946:	4618      	mov	r0, r3
 8007948:	f000 fa74 	bl	8007e34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	699a      	ldr	r2, [r3, #24]
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800795a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	699a      	ldr	r2, [r3, #24]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800796a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	6999      	ldr	r1, [r3, #24]
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	691b      	ldr	r3, [r3, #16]
 8007976:	021a      	lsls	r2, r3, #8
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	430a      	orrs	r2, r1
 800797e:	619a      	str	r2, [r3, #24]
      break;
 8007980:	e043      	b.n	8007a0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	68b9      	ldr	r1, [r7, #8]
 8007988:	4618      	mov	r0, r3
 800798a:	f000 fac9 	bl	8007f20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	69da      	ldr	r2, [r3, #28]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f042 0208 	orr.w	r2, r2, #8
 800799c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	69da      	ldr	r2, [r3, #28]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f022 0204 	bic.w	r2, r2, #4
 80079ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	69d9      	ldr	r1, [r3, #28]
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	691a      	ldr	r2, [r3, #16]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	430a      	orrs	r2, r1
 80079be:	61da      	str	r2, [r3, #28]
      break;
 80079c0:	e023      	b.n	8007a0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	68b9      	ldr	r1, [r7, #8]
 80079c8:	4618      	mov	r0, r3
 80079ca:	f000 fb1d 	bl	8008008 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	69da      	ldr	r2, [r3, #28]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80079dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	69da      	ldr	r2, [r3, #28]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80079ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	69d9      	ldr	r1, [r3, #28]
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	691b      	ldr	r3, [r3, #16]
 80079f8:	021a      	lsls	r2, r3, #8
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	430a      	orrs	r2, r1
 8007a00:	61da      	str	r2, [r3, #28]
      break;
 8007a02:	e002      	b.n	8007a0a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	75fb      	strb	r3, [r7, #23]
      break;
 8007a08:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007a12:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3718      	adds	r7, #24
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a26:	2300      	movs	r3, #0
 8007a28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d101      	bne.n	8007a38 <HAL_TIM_ConfigClockSource+0x1c>
 8007a34:	2302      	movs	r3, #2
 8007a36:	e0b4      	b.n	8007ba2 <HAL_TIM_ConfigClockSource+0x186>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2202      	movs	r2, #2
 8007a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007a56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007a5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	68ba      	ldr	r2, [r7, #8]
 8007a66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a70:	d03e      	beq.n	8007af0 <HAL_TIM_ConfigClockSource+0xd4>
 8007a72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a76:	f200 8087 	bhi.w	8007b88 <HAL_TIM_ConfigClockSource+0x16c>
 8007a7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a7e:	f000 8086 	beq.w	8007b8e <HAL_TIM_ConfigClockSource+0x172>
 8007a82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a86:	d87f      	bhi.n	8007b88 <HAL_TIM_ConfigClockSource+0x16c>
 8007a88:	2b70      	cmp	r3, #112	@ 0x70
 8007a8a:	d01a      	beq.n	8007ac2 <HAL_TIM_ConfigClockSource+0xa6>
 8007a8c:	2b70      	cmp	r3, #112	@ 0x70
 8007a8e:	d87b      	bhi.n	8007b88 <HAL_TIM_ConfigClockSource+0x16c>
 8007a90:	2b60      	cmp	r3, #96	@ 0x60
 8007a92:	d050      	beq.n	8007b36 <HAL_TIM_ConfigClockSource+0x11a>
 8007a94:	2b60      	cmp	r3, #96	@ 0x60
 8007a96:	d877      	bhi.n	8007b88 <HAL_TIM_ConfigClockSource+0x16c>
 8007a98:	2b50      	cmp	r3, #80	@ 0x50
 8007a9a:	d03c      	beq.n	8007b16 <HAL_TIM_ConfigClockSource+0xfa>
 8007a9c:	2b50      	cmp	r3, #80	@ 0x50
 8007a9e:	d873      	bhi.n	8007b88 <HAL_TIM_ConfigClockSource+0x16c>
 8007aa0:	2b40      	cmp	r3, #64	@ 0x40
 8007aa2:	d058      	beq.n	8007b56 <HAL_TIM_ConfigClockSource+0x13a>
 8007aa4:	2b40      	cmp	r3, #64	@ 0x40
 8007aa6:	d86f      	bhi.n	8007b88 <HAL_TIM_ConfigClockSource+0x16c>
 8007aa8:	2b30      	cmp	r3, #48	@ 0x30
 8007aaa:	d064      	beq.n	8007b76 <HAL_TIM_ConfigClockSource+0x15a>
 8007aac:	2b30      	cmp	r3, #48	@ 0x30
 8007aae:	d86b      	bhi.n	8007b88 <HAL_TIM_ConfigClockSource+0x16c>
 8007ab0:	2b20      	cmp	r3, #32
 8007ab2:	d060      	beq.n	8007b76 <HAL_TIM_ConfigClockSource+0x15a>
 8007ab4:	2b20      	cmp	r3, #32
 8007ab6:	d867      	bhi.n	8007b88 <HAL_TIM_ConfigClockSource+0x16c>
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d05c      	beq.n	8007b76 <HAL_TIM_ConfigClockSource+0x15a>
 8007abc:	2b10      	cmp	r3, #16
 8007abe:	d05a      	beq.n	8007b76 <HAL_TIM_ConfigClockSource+0x15a>
 8007ac0:	e062      	b.n	8007b88 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007ad2:	f000 fb69 	bl	80081a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007ae4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	68ba      	ldr	r2, [r7, #8]
 8007aec:	609a      	str	r2, [r3, #8]
      break;
 8007aee:	e04f      	b.n	8007b90 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007b00:	f000 fb52 	bl	80081a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	689a      	ldr	r2, [r3, #8]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007b12:	609a      	str	r2, [r3, #8]
      break;
 8007b14:	e03c      	b.n	8007b90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b22:	461a      	mov	r2, r3
 8007b24:	f000 fac6 	bl	80080b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	2150      	movs	r1, #80	@ 0x50
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f000 fb1f 	bl	8008172 <TIM_ITRx_SetConfig>
      break;
 8007b34:	e02c      	b.n	8007b90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b42:	461a      	mov	r2, r3
 8007b44:	f000 fae5 	bl	8008112 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	2160      	movs	r1, #96	@ 0x60
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f000 fb0f 	bl	8008172 <TIM_ITRx_SetConfig>
      break;
 8007b54:	e01c      	b.n	8007b90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b62:	461a      	mov	r2, r3
 8007b64:	f000 faa6 	bl	80080b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	2140      	movs	r1, #64	@ 0x40
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f000 faff 	bl	8008172 <TIM_ITRx_SetConfig>
      break;
 8007b74:	e00c      	b.n	8007b90 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4619      	mov	r1, r3
 8007b80:	4610      	mov	r0, r2
 8007b82:	f000 faf6 	bl	8008172 <TIM_ITRx_SetConfig>
      break;
 8007b86:	e003      	b.n	8007b90 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	73fb      	strb	r3, [r7, #15]
      break;
 8007b8c:	e000      	b.n	8007b90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007b8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2201      	movs	r2, #1
 8007b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3710      	adds	r7, #16
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}

08007baa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007baa:	b480      	push	{r7}
 8007bac:	b083      	sub	sp, #12
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007bb2:	bf00      	nop
 8007bb4:	370c      	adds	r7, #12
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr

08007bbe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007bbe:	b480      	push	{r7}
 8007bc0:	b083      	sub	sp, #12
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007bc6:	bf00      	nop
 8007bc8:	370c      	adds	r7, #12
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr

08007bd2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007bd2:	b480      	push	{r7}
 8007bd4:	b083      	sub	sp, #12
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007bda:	bf00      	nop
 8007bdc:	370c      	adds	r7, #12
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr

08007be6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007be6:	b480      	push	{r7}
 8007be8:	b083      	sub	sp, #12
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007bee:	bf00      	nop
 8007bf0:	370c      	adds	r7, #12
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr
	...

08007bfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b085      	sub	sp, #20
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	4a46      	ldr	r2, [pc, #280]	@ (8007d28 <TIM_Base_SetConfig+0x12c>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d013      	beq.n	8007c3c <TIM_Base_SetConfig+0x40>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c1a:	d00f      	beq.n	8007c3c <TIM_Base_SetConfig+0x40>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	4a43      	ldr	r2, [pc, #268]	@ (8007d2c <TIM_Base_SetConfig+0x130>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d00b      	beq.n	8007c3c <TIM_Base_SetConfig+0x40>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	4a42      	ldr	r2, [pc, #264]	@ (8007d30 <TIM_Base_SetConfig+0x134>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d007      	beq.n	8007c3c <TIM_Base_SetConfig+0x40>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	4a41      	ldr	r2, [pc, #260]	@ (8007d34 <TIM_Base_SetConfig+0x138>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d003      	beq.n	8007c3c <TIM_Base_SetConfig+0x40>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	4a40      	ldr	r2, [pc, #256]	@ (8007d38 <TIM_Base_SetConfig+0x13c>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d108      	bne.n	8007c4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	68fa      	ldr	r2, [r7, #12]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	4a35      	ldr	r2, [pc, #212]	@ (8007d28 <TIM_Base_SetConfig+0x12c>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d02b      	beq.n	8007cae <TIM_Base_SetConfig+0xb2>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c5c:	d027      	beq.n	8007cae <TIM_Base_SetConfig+0xb2>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4a32      	ldr	r2, [pc, #200]	@ (8007d2c <TIM_Base_SetConfig+0x130>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d023      	beq.n	8007cae <TIM_Base_SetConfig+0xb2>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	4a31      	ldr	r2, [pc, #196]	@ (8007d30 <TIM_Base_SetConfig+0x134>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d01f      	beq.n	8007cae <TIM_Base_SetConfig+0xb2>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	4a30      	ldr	r2, [pc, #192]	@ (8007d34 <TIM_Base_SetConfig+0x138>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d01b      	beq.n	8007cae <TIM_Base_SetConfig+0xb2>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	4a2f      	ldr	r2, [pc, #188]	@ (8007d38 <TIM_Base_SetConfig+0x13c>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d017      	beq.n	8007cae <TIM_Base_SetConfig+0xb2>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	4a2e      	ldr	r2, [pc, #184]	@ (8007d3c <TIM_Base_SetConfig+0x140>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d013      	beq.n	8007cae <TIM_Base_SetConfig+0xb2>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	4a2d      	ldr	r2, [pc, #180]	@ (8007d40 <TIM_Base_SetConfig+0x144>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d00f      	beq.n	8007cae <TIM_Base_SetConfig+0xb2>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4a2c      	ldr	r2, [pc, #176]	@ (8007d44 <TIM_Base_SetConfig+0x148>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d00b      	beq.n	8007cae <TIM_Base_SetConfig+0xb2>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	4a2b      	ldr	r2, [pc, #172]	@ (8007d48 <TIM_Base_SetConfig+0x14c>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d007      	beq.n	8007cae <TIM_Base_SetConfig+0xb2>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	4a2a      	ldr	r2, [pc, #168]	@ (8007d4c <TIM_Base_SetConfig+0x150>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d003      	beq.n	8007cae <TIM_Base_SetConfig+0xb2>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	4a29      	ldr	r2, [pc, #164]	@ (8007d50 <TIM_Base_SetConfig+0x154>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d108      	bne.n	8007cc0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007cb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	68db      	ldr	r3, [r3, #12]
 8007cba:	68fa      	ldr	r2, [r7, #12]
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	695b      	ldr	r3, [r3, #20]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	68fa      	ldr	r2, [r7, #12]
 8007cd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	689a      	ldr	r2, [r3, #8]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	681a      	ldr	r2, [r3, #0]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	4a10      	ldr	r2, [pc, #64]	@ (8007d28 <TIM_Base_SetConfig+0x12c>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d003      	beq.n	8007cf4 <TIM_Base_SetConfig+0xf8>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	4a12      	ldr	r2, [pc, #72]	@ (8007d38 <TIM_Base_SetConfig+0x13c>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d103      	bne.n	8007cfc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	691a      	ldr	r2, [r3, #16]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	691b      	ldr	r3, [r3, #16]
 8007d06:	f003 0301 	and.w	r3, r3, #1
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d105      	bne.n	8007d1a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	691b      	ldr	r3, [r3, #16]
 8007d12:	f023 0201 	bic.w	r2, r3, #1
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	611a      	str	r2, [r3, #16]
  }
}
 8007d1a:	bf00      	nop
 8007d1c:	3714      	adds	r7, #20
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr
 8007d26:	bf00      	nop
 8007d28:	40010000 	.word	0x40010000
 8007d2c:	40000400 	.word	0x40000400
 8007d30:	40000800 	.word	0x40000800
 8007d34:	40000c00 	.word	0x40000c00
 8007d38:	40010400 	.word	0x40010400
 8007d3c:	40014000 	.word	0x40014000
 8007d40:	40014400 	.word	0x40014400
 8007d44:	40014800 	.word	0x40014800
 8007d48:	40001800 	.word	0x40001800
 8007d4c:	40001c00 	.word	0x40001c00
 8007d50:	40002000 	.word	0x40002000

08007d54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b087      	sub	sp, #28
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6a1b      	ldr	r3, [r3, #32]
 8007d62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6a1b      	ldr	r3, [r3, #32]
 8007d68:	f023 0201 	bic.w	r2, r3, #1
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	699b      	ldr	r3, [r3, #24]
 8007d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f023 0303 	bic.w	r3, r3, #3
 8007d8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	68fa      	ldr	r2, [r7, #12]
 8007d92:	4313      	orrs	r3, r2
 8007d94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	f023 0302 	bic.w	r3, r3, #2
 8007d9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	689b      	ldr	r3, [r3, #8]
 8007da2:	697a      	ldr	r2, [r7, #20]
 8007da4:	4313      	orrs	r3, r2
 8007da6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	4a20      	ldr	r2, [pc, #128]	@ (8007e2c <TIM_OC1_SetConfig+0xd8>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d003      	beq.n	8007db8 <TIM_OC1_SetConfig+0x64>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	4a1f      	ldr	r2, [pc, #124]	@ (8007e30 <TIM_OC1_SetConfig+0xdc>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d10c      	bne.n	8007dd2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	f023 0308 	bic.w	r3, r3, #8
 8007dbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	68db      	ldr	r3, [r3, #12]
 8007dc4:	697a      	ldr	r2, [r7, #20]
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	f023 0304 	bic.w	r3, r3, #4
 8007dd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	4a15      	ldr	r2, [pc, #84]	@ (8007e2c <TIM_OC1_SetConfig+0xd8>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d003      	beq.n	8007de2 <TIM_OC1_SetConfig+0x8e>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4a14      	ldr	r2, [pc, #80]	@ (8007e30 <TIM_OC1_SetConfig+0xdc>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d111      	bne.n	8007e06 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007de8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007df0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	695b      	ldr	r3, [r3, #20]
 8007df6:	693a      	ldr	r2, [r7, #16]
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	699b      	ldr	r3, [r3, #24]
 8007e00:	693a      	ldr	r2, [r7, #16]
 8007e02:	4313      	orrs	r3, r2
 8007e04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	693a      	ldr	r2, [r7, #16]
 8007e0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	68fa      	ldr	r2, [r7, #12]
 8007e10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	685a      	ldr	r2, [r3, #4]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	697a      	ldr	r2, [r7, #20]
 8007e1e:	621a      	str	r2, [r3, #32]
}
 8007e20:	bf00      	nop
 8007e22:	371c      	adds	r7, #28
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr
 8007e2c:	40010000 	.word	0x40010000
 8007e30:	40010400 	.word	0x40010400

08007e34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b087      	sub	sp, #28
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6a1b      	ldr	r3, [r3, #32]
 8007e42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6a1b      	ldr	r3, [r3, #32]
 8007e48:	f023 0210 	bic.w	r2, r3, #16
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	699b      	ldr	r3, [r3, #24]
 8007e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	021b      	lsls	r3, r3, #8
 8007e72:	68fa      	ldr	r2, [r7, #12]
 8007e74:	4313      	orrs	r3, r2
 8007e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	f023 0320 	bic.w	r3, r3, #32
 8007e7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	011b      	lsls	r3, r3, #4
 8007e86:	697a      	ldr	r2, [r7, #20]
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	4a22      	ldr	r2, [pc, #136]	@ (8007f18 <TIM_OC2_SetConfig+0xe4>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d003      	beq.n	8007e9c <TIM_OC2_SetConfig+0x68>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	4a21      	ldr	r2, [pc, #132]	@ (8007f1c <TIM_OC2_SetConfig+0xe8>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d10d      	bne.n	8007eb8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ea2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	68db      	ldr	r3, [r3, #12]
 8007ea8:	011b      	lsls	r3, r3, #4
 8007eaa:	697a      	ldr	r2, [r7, #20]
 8007eac:	4313      	orrs	r3, r2
 8007eae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007eb6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	4a17      	ldr	r2, [pc, #92]	@ (8007f18 <TIM_OC2_SetConfig+0xe4>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d003      	beq.n	8007ec8 <TIM_OC2_SetConfig+0x94>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	4a16      	ldr	r2, [pc, #88]	@ (8007f1c <TIM_OC2_SetConfig+0xe8>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d113      	bne.n	8007ef0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007ece:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007ed6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	695b      	ldr	r3, [r3, #20]
 8007edc:	009b      	lsls	r3, r3, #2
 8007ede:	693a      	ldr	r2, [r7, #16]
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	699b      	ldr	r3, [r3, #24]
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	693a      	ldr	r2, [r7, #16]
 8007eec:	4313      	orrs	r3, r2
 8007eee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	693a      	ldr	r2, [r7, #16]
 8007ef4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	68fa      	ldr	r2, [r7, #12]
 8007efa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	685a      	ldr	r2, [r3, #4]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	697a      	ldr	r2, [r7, #20]
 8007f08:	621a      	str	r2, [r3, #32]
}
 8007f0a:	bf00      	nop
 8007f0c:	371c      	adds	r7, #28
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr
 8007f16:	bf00      	nop
 8007f18:	40010000 	.word	0x40010000
 8007f1c:	40010400 	.word	0x40010400

08007f20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b087      	sub	sp, #28
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6a1b      	ldr	r3, [r3, #32]
 8007f2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6a1b      	ldr	r3, [r3, #32]
 8007f34:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	69db      	ldr	r3, [r3, #28]
 8007f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f023 0303 	bic.w	r3, r3, #3
 8007f56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007f68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	021b      	lsls	r3, r3, #8
 8007f70:	697a      	ldr	r2, [r7, #20]
 8007f72:	4313      	orrs	r3, r2
 8007f74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4a21      	ldr	r2, [pc, #132]	@ (8008000 <TIM_OC3_SetConfig+0xe0>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d003      	beq.n	8007f86 <TIM_OC3_SetConfig+0x66>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	4a20      	ldr	r2, [pc, #128]	@ (8008004 <TIM_OC3_SetConfig+0xe4>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d10d      	bne.n	8007fa2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007f8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	021b      	lsls	r3, r3, #8
 8007f94:	697a      	ldr	r2, [r7, #20]
 8007f96:	4313      	orrs	r3, r2
 8007f98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007fa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	4a16      	ldr	r2, [pc, #88]	@ (8008000 <TIM_OC3_SetConfig+0xe0>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d003      	beq.n	8007fb2 <TIM_OC3_SetConfig+0x92>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	4a15      	ldr	r2, [pc, #84]	@ (8008004 <TIM_OC3_SetConfig+0xe4>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d113      	bne.n	8007fda <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007fb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007fc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	695b      	ldr	r3, [r3, #20]
 8007fc6:	011b      	lsls	r3, r3, #4
 8007fc8:	693a      	ldr	r2, [r7, #16]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	699b      	ldr	r3, [r3, #24]
 8007fd2:	011b      	lsls	r3, r3, #4
 8007fd4:	693a      	ldr	r2, [r7, #16]
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	693a      	ldr	r2, [r7, #16]
 8007fde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	68fa      	ldr	r2, [r7, #12]
 8007fe4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	685a      	ldr	r2, [r3, #4]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	697a      	ldr	r2, [r7, #20]
 8007ff2:	621a      	str	r2, [r3, #32]
}
 8007ff4:	bf00      	nop
 8007ff6:	371c      	adds	r7, #28
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr
 8008000:	40010000 	.word	0x40010000
 8008004:	40010400 	.word	0x40010400

08008008 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008008:	b480      	push	{r7}
 800800a:	b087      	sub	sp, #28
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6a1b      	ldr	r3, [r3, #32]
 8008016:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6a1b      	ldr	r3, [r3, #32]
 800801c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	69db      	ldr	r3, [r3, #28]
 800802e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800803e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	021b      	lsls	r3, r3, #8
 8008046:	68fa      	ldr	r2, [r7, #12]
 8008048:	4313      	orrs	r3, r2
 800804a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008052:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	031b      	lsls	r3, r3, #12
 800805a:	693a      	ldr	r2, [r7, #16]
 800805c:	4313      	orrs	r3, r2
 800805e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	4a12      	ldr	r2, [pc, #72]	@ (80080ac <TIM_OC4_SetConfig+0xa4>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d003      	beq.n	8008070 <TIM_OC4_SetConfig+0x68>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	4a11      	ldr	r2, [pc, #68]	@ (80080b0 <TIM_OC4_SetConfig+0xa8>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d109      	bne.n	8008084 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008076:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	695b      	ldr	r3, [r3, #20]
 800807c:	019b      	lsls	r3, r3, #6
 800807e:	697a      	ldr	r2, [r7, #20]
 8008080:	4313      	orrs	r3, r2
 8008082:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	697a      	ldr	r2, [r7, #20]
 8008088:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	68fa      	ldr	r2, [r7, #12]
 800808e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	685a      	ldr	r2, [r3, #4]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	693a      	ldr	r2, [r7, #16]
 800809c:	621a      	str	r2, [r3, #32]
}
 800809e:	bf00      	nop
 80080a0:	371c      	adds	r7, #28
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr
 80080aa:	bf00      	nop
 80080ac:	40010000 	.word	0x40010000
 80080b0:	40010400 	.word	0x40010400

080080b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b087      	sub	sp, #28
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	60f8      	str	r0, [r7, #12]
 80080bc:	60b9      	str	r1, [r7, #8]
 80080be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	6a1b      	ldr	r3, [r3, #32]
 80080c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	6a1b      	ldr	r3, [r3, #32]
 80080ca:	f023 0201 	bic.w	r2, r3, #1
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	699b      	ldr	r3, [r3, #24]
 80080d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80080de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	011b      	lsls	r3, r3, #4
 80080e4:	693a      	ldr	r2, [r7, #16]
 80080e6:	4313      	orrs	r3, r2
 80080e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	f023 030a 	bic.w	r3, r3, #10
 80080f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80080f2:	697a      	ldr	r2, [r7, #20]
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	693a      	ldr	r2, [r7, #16]
 80080fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	697a      	ldr	r2, [r7, #20]
 8008104:	621a      	str	r2, [r3, #32]
}
 8008106:	bf00      	nop
 8008108:	371c      	adds	r7, #28
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr

08008112 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008112:	b480      	push	{r7}
 8008114:	b087      	sub	sp, #28
 8008116:	af00      	add	r7, sp, #0
 8008118:	60f8      	str	r0, [r7, #12]
 800811a:	60b9      	str	r1, [r7, #8]
 800811c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	6a1b      	ldr	r3, [r3, #32]
 8008122:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6a1b      	ldr	r3, [r3, #32]
 8008128:	f023 0210 	bic.w	r2, r3, #16
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	699b      	ldr	r3, [r3, #24]
 8008134:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800813c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	031b      	lsls	r3, r3, #12
 8008142:	693a      	ldr	r2, [r7, #16]
 8008144:	4313      	orrs	r3, r2
 8008146:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800814e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	011b      	lsls	r3, r3, #4
 8008154:	697a      	ldr	r2, [r7, #20]
 8008156:	4313      	orrs	r3, r2
 8008158:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	693a      	ldr	r2, [r7, #16]
 800815e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	697a      	ldr	r2, [r7, #20]
 8008164:	621a      	str	r2, [r3, #32]
}
 8008166:	bf00      	nop
 8008168:	371c      	adds	r7, #28
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr

08008172 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008172:	b480      	push	{r7}
 8008174:	b085      	sub	sp, #20
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
 800817a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	689b      	ldr	r3, [r3, #8]
 8008180:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008188:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800818a:	683a      	ldr	r2, [r7, #0]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	4313      	orrs	r3, r2
 8008190:	f043 0307 	orr.w	r3, r3, #7
 8008194:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	68fa      	ldr	r2, [r7, #12]
 800819a:	609a      	str	r2, [r3, #8]
}
 800819c:	bf00      	nop
 800819e:	3714      	adds	r7, #20
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr

080081a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b087      	sub	sp, #28
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	60f8      	str	r0, [r7, #12]
 80081b0:	60b9      	str	r1, [r7, #8]
 80081b2:	607a      	str	r2, [r7, #4]
 80081b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80081c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	021a      	lsls	r2, r3, #8
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	431a      	orrs	r2, r3
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	4313      	orrs	r3, r2
 80081d0:	697a      	ldr	r2, [r7, #20]
 80081d2:	4313      	orrs	r3, r2
 80081d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	697a      	ldr	r2, [r7, #20]
 80081da:	609a      	str	r2, [r3, #8]
}
 80081dc:	bf00      	nop
 80081de:	371c      	adds	r7, #28
 80081e0:	46bd      	mov	sp, r7
 80081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e6:	4770      	bx	lr

080081e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b087      	sub	sp, #28
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	60f8      	str	r0, [r7, #12]
 80081f0:	60b9      	str	r1, [r7, #8]
 80081f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	f003 031f 	and.w	r3, r3, #31
 80081fa:	2201      	movs	r2, #1
 80081fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008200:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	6a1a      	ldr	r2, [r3, #32]
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	43db      	mvns	r3, r3
 800820a:	401a      	ands	r2, r3
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	6a1a      	ldr	r2, [r3, #32]
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	f003 031f 	and.w	r3, r3, #31
 800821a:	6879      	ldr	r1, [r7, #4]
 800821c:	fa01 f303 	lsl.w	r3, r1, r3
 8008220:	431a      	orrs	r2, r3
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	621a      	str	r2, [r3, #32]
}
 8008226:	bf00      	nop
 8008228:	371c      	adds	r7, #28
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr
	...

08008234 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008234:	b480      	push	{r7}
 8008236:	b085      	sub	sp, #20
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008244:	2b01      	cmp	r3, #1
 8008246:	d101      	bne.n	800824c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008248:	2302      	movs	r3, #2
 800824a:	e05a      	b.n	8008302 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2201      	movs	r2, #1
 8008250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2202      	movs	r2, #2
 8008258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	689b      	ldr	r3, [r3, #8]
 800826a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008272:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	68fa      	ldr	r2, [r7, #12]
 800827a:	4313      	orrs	r3, r2
 800827c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	68fa      	ldr	r2, [r7, #12]
 8008284:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a21      	ldr	r2, [pc, #132]	@ (8008310 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d022      	beq.n	80082d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008298:	d01d      	beq.n	80082d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a1d      	ldr	r2, [pc, #116]	@ (8008314 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d018      	beq.n	80082d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a1b      	ldr	r2, [pc, #108]	@ (8008318 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d013      	beq.n	80082d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a1a      	ldr	r2, [pc, #104]	@ (800831c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d00e      	beq.n	80082d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a18      	ldr	r2, [pc, #96]	@ (8008320 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d009      	beq.n	80082d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a17      	ldr	r2, [pc, #92]	@ (8008324 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d004      	beq.n	80082d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a15      	ldr	r2, [pc, #84]	@ (8008328 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d10c      	bne.n	80082f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80082dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	68ba      	ldr	r2, [r7, #8]
 80082e4:	4313      	orrs	r3, r2
 80082e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	68ba      	ldr	r2, [r7, #8]
 80082ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2201      	movs	r2, #1
 80082f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2200      	movs	r2, #0
 80082fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008300:	2300      	movs	r3, #0
}
 8008302:	4618      	mov	r0, r3
 8008304:	3714      	adds	r7, #20
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr
 800830e:	bf00      	nop
 8008310:	40010000 	.word	0x40010000
 8008314:	40000400 	.word	0x40000400
 8008318:	40000800 	.word	0x40000800
 800831c:	40000c00 	.word	0x40000c00
 8008320:	40010400 	.word	0x40010400
 8008324:	40014000 	.word	0x40014000
 8008328:	40001800 	.word	0x40001800

0800832c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800832c:	b480      	push	{r7}
 800832e:	b085      	sub	sp, #20
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008336:	2300      	movs	r3, #0
 8008338:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008340:	2b01      	cmp	r3, #1
 8008342:	d101      	bne.n	8008348 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008344:	2302      	movs	r3, #2
 8008346:	e03d      	b.n	80083c4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2201      	movs	r2, #1
 800834c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	68db      	ldr	r3, [r3, #12]
 800835a:	4313      	orrs	r3, r2
 800835c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	689b      	ldr	r3, [r3, #8]
 8008368:	4313      	orrs	r3, r2
 800836a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	4313      	orrs	r3, r2
 8008378:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4313      	orrs	r3, r2
 8008386:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	691b      	ldr	r3, [r3, #16]
 8008392:	4313      	orrs	r3, r2
 8008394:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	695b      	ldr	r3, [r3, #20]
 80083a0:	4313      	orrs	r3, r2
 80083a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	69db      	ldr	r3, [r3, #28]
 80083ae:	4313      	orrs	r3, r2
 80083b0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	68fa      	ldr	r2, [r7, #12]
 80083b8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2200      	movs	r2, #0
 80083be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80083c2:	2300      	movs	r3, #0
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3714      	adds	r7, #20
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr

080083d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b083      	sub	sp, #12
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80083d8:	bf00      	nop
 80083da:	370c      	adds	r7, #12
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr

080083e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b083      	sub	sp, #12
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80083ec:	bf00      	nop
 80083ee:	370c      	adds	r7, #12
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr

080083f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d101      	bne.n	800840a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008406:	2301      	movs	r3, #1
 8008408:	e042      	b.n	8008490 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008410:	b2db      	uxtb	r3, r3
 8008412:	2b00      	cmp	r3, #0
 8008414:	d106      	bne.n	8008424 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2200      	movs	r2, #0
 800841a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f7fb fa0c 	bl	800383c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2224      	movs	r2, #36	@ 0x24
 8008428:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	68da      	ldr	r2, [r3, #12]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800843a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 fdc1 	bl	8008fc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	691a      	ldr	r2, [r3, #16]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008450:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	695a      	ldr	r2, [r3, #20]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008460:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	68da      	ldr	r2, [r3, #12]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008470:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2200      	movs	r2, #0
 8008476:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2220      	movs	r2, #32
 800847c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2220      	movs	r2, #32
 8008484:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2200      	movs	r2, #0
 800848c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800848e:	2300      	movs	r3, #0
}
 8008490:	4618      	mov	r0, r3
 8008492:	3708      	adds	r7, #8
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b08c      	sub	sp, #48	@ 0x30
 800849c:	af00      	add	r7, sp, #0
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	4613      	mov	r3, r2
 80084a4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084ac:	b2db      	uxtb	r3, r3
 80084ae:	2b20      	cmp	r3, #32
 80084b0:	d156      	bne.n	8008560 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d002      	beq.n	80084be <HAL_UART_Transmit_DMA+0x26>
 80084b8:	88fb      	ldrh	r3, [r7, #6]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d101      	bne.n	80084c2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80084be:	2301      	movs	r3, #1
 80084c0:	e04f      	b.n	8008562 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80084c2:	68ba      	ldr	r2, [r7, #8]
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	88fa      	ldrh	r2, [r7, #6]
 80084cc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	88fa      	ldrh	r2, [r7, #6]
 80084d2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2200      	movs	r2, #0
 80084d8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2221      	movs	r2, #33	@ 0x21
 80084de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084e6:	4a21      	ldr	r2, [pc, #132]	@ (800856c <HAL_UART_Transmit_DMA+0xd4>)
 80084e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084ee:	4a20      	ldr	r2, [pc, #128]	@ (8008570 <HAL_UART_Transmit_DMA+0xd8>)
 80084f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084f6:	4a1f      	ldr	r2, [pc, #124]	@ (8008574 <HAL_UART_Transmit_DMA+0xdc>)
 80084f8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084fe:	2200      	movs	r2, #0
 8008500:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008502:	f107 0308 	add.w	r3, r7, #8
 8008506:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800850c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800850e:	6819      	ldr	r1, [r3, #0]
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	3304      	adds	r3, #4
 8008516:	461a      	mov	r2, r3
 8008518:	88fb      	ldrh	r3, [r7, #6]
 800851a:	f7fc fde5 	bl	80050e8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008526:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	3314      	adds	r3, #20
 800852e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008530:	69bb      	ldr	r3, [r7, #24]
 8008532:	e853 3f00 	ldrex	r3, [r3]
 8008536:	617b      	str	r3, [r7, #20]
   return(result);
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800853e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	3314      	adds	r3, #20
 8008546:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008548:	627a      	str	r2, [r7, #36]	@ 0x24
 800854a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800854c:	6a39      	ldr	r1, [r7, #32]
 800854e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008550:	e841 2300 	strex	r3, r2, [r1]
 8008554:	61fb      	str	r3, [r7, #28]
   return(result);
 8008556:	69fb      	ldr	r3, [r7, #28]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d1e5      	bne.n	8008528 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800855c:	2300      	movs	r3, #0
 800855e:	e000      	b.n	8008562 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8008560:	2302      	movs	r3, #2
  }
}
 8008562:	4618      	mov	r0, r3
 8008564:	3730      	adds	r7, #48	@ 0x30
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	08008af1 	.word	0x08008af1
 8008570:	08008b8b 	.word	0x08008b8b
 8008574:	08008ba7 	.word	0x08008ba7

08008578 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b0ba      	sub	sp, #232	@ 0xe8
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	68db      	ldr	r3, [r3, #12]
 8008590:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	695b      	ldr	r3, [r3, #20]
 800859a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800859e:	2300      	movs	r3, #0
 80085a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80085a4:	2300      	movs	r3, #0
 80085a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80085aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085ae:	f003 030f 	and.w	r3, r3, #15
 80085b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80085b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d10f      	bne.n	80085de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80085be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085c2:	f003 0320 	and.w	r3, r3, #32
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d009      	beq.n	80085de <HAL_UART_IRQHandler+0x66>
 80085ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085ce:	f003 0320 	and.w	r3, r3, #32
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d003      	beq.n	80085de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 fc36 	bl	8008e48 <UART_Receive_IT>
      return;
 80085dc:	e25b      	b.n	8008a96 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80085de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	f000 80de 	beq.w	80087a4 <HAL_UART_IRQHandler+0x22c>
 80085e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085ec:	f003 0301 	and.w	r3, r3, #1
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d106      	bne.n	8008602 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80085f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085f8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	f000 80d1 	beq.w	80087a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008606:	f003 0301 	and.w	r3, r3, #1
 800860a:	2b00      	cmp	r3, #0
 800860c:	d00b      	beq.n	8008626 <HAL_UART_IRQHandler+0xae>
 800860e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008612:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008616:	2b00      	cmp	r3, #0
 8008618:	d005      	beq.n	8008626 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800861e:	f043 0201 	orr.w	r2, r3, #1
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800862a:	f003 0304 	and.w	r3, r3, #4
 800862e:	2b00      	cmp	r3, #0
 8008630:	d00b      	beq.n	800864a <HAL_UART_IRQHandler+0xd2>
 8008632:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008636:	f003 0301 	and.w	r3, r3, #1
 800863a:	2b00      	cmp	r3, #0
 800863c:	d005      	beq.n	800864a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008642:	f043 0202 	orr.w	r2, r3, #2
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800864a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800864e:	f003 0302 	and.w	r3, r3, #2
 8008652:	2b00      	cmp	r3, #0
 8008654:	d00b      	beq.n	800866e <HAL_UART_IRQHandler+0xf6>
 8008656:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800865a:	f003 0301 	and.w	r3, r3, #1
 800865e:	2b00      	cmp	r3, #0
 8008660:	d005      	beq.n	800866e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008666:	f043 0204 	orr.w	r2, r3, #4
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800866e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008672:	f003 0308 	and.w	r3, r3, #8
 8008676:	2b00      	cmp	r3, #0
 8008678:	d011      	beq.n	800869e <HAL_UART_IRQHandler+0x126>
 800867a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800867e:	f003 0320 	and.w	r3, r3, #32
 8008682:	2b00      	cmp	r3, #0
 8008684:	d105      	bne.n	8008692 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008686:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800868a:	f003 0301 	and.w	r3, r3, #1
 800868e:	2b00      	cmp	r3, #0
 8008690:	d005      	beq.n	800869e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008696:	f043 0208 	orr.w	r2, r3, #8
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	f000 81f2 	beq.w	8008a8c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80086a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086ac:	f003 0320 	and.w	r3, r3, #32
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d008      	beq.n	80086c6 <HAL_UART_IRQHandler+0x14e>
 80086b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086b8:	f003 0320 	and.w	r3, r3, #32
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d002      	beq.n	80086c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 fbc1 	bl	8008e48 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	695b      	ldr	r3, [r3, #20]
 80086cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086d0:	2b40      	cmp	r3, #64	@ 0x40
 80086d2:	bf0c      	ite	eq
 80086d4:	2301      	moveq	r3, #1
 80086d6:	2300      	movne	r3, #0
 80086d8:	b2db      	uxtb	r3, r3
 80086da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086e2:	f003 0308 	and.w	r3, r3, #8
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d103      	bne.n	80086f2 <HAL_UART_IRQHandler+0x17a>
 80086ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d04f      	beq.n	8008792 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 fac9 	bl	8008c8a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	695b      	ldr	r3, [r3, #20]
 80086fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008702:	2b40      	cmp	r3, #64	@ 0x40
 8008704:	d141      	bne.n	800878a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	3314      	adds	r3, #20
 800870c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008710:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008714:	e853 3f00 	ldrex	r3, [r3]
 8008718:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800871c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008720:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008724:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	3314      	adds	r3, #20
 800872e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008732:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008736:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800873a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800873e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008742:	e841 2300 	strex	r3, r2, [r1]
 8008746:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800874a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800874e:	2b00      	cmp	r3, #0
 8008750:	d1d9      	bne.n	8008706 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008756:	2b00      	cmp	r3, #0
 8008758:	d013      	beq.n	8008782 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800875e:	4a7e      	ldr	r2, [pc, #504]	@ (8008958 <HAL_UART_IRQHandler+0x3e0>)
 8008760:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008766:	4618      	mov	r0, r3
 8008768:	f7fc fd86 	bl	8005278 <HAL_DMA_Abort_IT>
 800876c:	4603      	mov	r3, r0
 800876e:	2b00      	cmp	r3, #0
 8008770:	d016      	beq.n	80087a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008776:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800877c:	4610      	mov	r0, r2
 800877e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008780:	e00e      	b.n	80087a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 f99e 	bl	8008ac4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008788:	e00a      	b.n	80087a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 f99a 	bl	8008ac4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008790:	e006      	b.n	80087a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 f996 	bl	8008ac4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2200      	movs	r2, #0
 800879c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800879e:	e175      	b.n	8008a8c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087a0:	bf00      	nop
    return;
 80087a2:	e173      	b.n	8008a8c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	f040 814f 	bne.w	8008a4c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80087ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087b2:	f003 0310 	and.w	r3, r3, #16
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	f000 8148 	beq.w	8008a4c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80087bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087c0:	f003 0310 	and.w	r3, r3, #16
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	f000 8141 	beq.w	8008a4c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80087ca:	2300      	movs	r3, #0
 80087cc:	60bb      	str	r3, [r7, #8]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	60bb      	str	r3, [r7, #8]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	60bb      	str	r3, [r7, #8]
 80087de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	695b      	ldr	r3, [r3, #20]
 80087e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087ea:	2b40      	cmp	r3, #64	@ 0x40
 80087ec:	f040 80b6 	bne.w	800895c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80087fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008800:	2b00      	cmp	r3, #0
 8008802:	f000 8145 	beq.w	8008a90 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800880a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800880e:	429a      	cmp	r2, r3
 8008810:	f080 813e 	bcs.w	8008a90 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800881a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008820:	69db      	ldr	r3, [r3, #28]
 8008822:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008826:	f000 8088 	beq.w	800893a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	330c      	adds	r3, #12
 8008830:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008834:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008838:	e853 3f00 	ldrex	r3, [r3]
 800883c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008840:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008844:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008848:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	330c      	adds	r3, #12
 8008852:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008856:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800885a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800885e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008862:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008866:	e841 2300 	strex	r3, r2, [r1]
 800886a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800886e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008872:	2b00      	cmp	r3, #0
 8008874:	d1d9      	bne.n	800882a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	3314      	adds	r3, #20
 800887c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800887e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008880:	e853 3f00 	ldrex	r3, [r3]
 8008884:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008886:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008888:	f023 0301 	bic.w	r3, r3, #1
 800888c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	3314      	adds	r3, #20
 8008896:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800889a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800889e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80088a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80088a6:	e841 2300 	strex	r3, r2, [r1]
 80088aa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80088ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d1e1      	bne.n	8008876 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	3314      	adds	r3, #20
 80088b8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80088bc:	e853 3f00 	ldrex	r3, [r3]
 80088c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80088c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80088c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	3314      	adds	r3, #20
 80088d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80088d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80088d8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088da:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80088dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80088de:	e841 2300 	strex	r3, r2, [r1]
 80088e2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80088e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d1e3      	bne.n	80088b2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2220      	movs	r2, #32
 80088ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2200      	movs	r2, #0
 80088f6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	330c      	adds	r3, #12
 80088fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008900:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008902:	e853 3f00 	ldrex	r3, [r3]
 8008906:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008908:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800890a:	f023 0310 	bic.w	r3, r3, #16
 800890e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	330c      	adds	r3, #12
 8008918:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800891c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800891e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008920:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008922:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008924:	e841 2300 	strex	r3, r2, [r1]
 8008928:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800892a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800892c:	2b00      	cmp	r3, #0
 800892e:	d1e3      	bne.n	80088f8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008934:	4618      	mov	r0, r3
 8008936:	f7fc fc2f 	bl	8005198 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2202      	movs	r2, #2
 800893e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008948:	b29b      	uxth	r3, r3
 800894a:	1ad3      	subs	r3, r2, r3
 800894c:	b29b      	uxth	r3, r3
 800894e:	4619      	mov	r1, r3
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f000 f8c1 	bl	8008ad8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008956:	e09b      	b.n	8008a90 <HAL_UART_IRQHandler+0x518>
 8008958:	08008d51 	.word	0x08008d51
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008964:	b29b      	uxth	r3, r3
 8008966:	1ad3      	subs	r3, r2, r3
 8008968:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008970:	b29b      	uxth	r3, r3
 8008972:	2b00      	cmp	r3, #0
 8008974:	f000 808e 	beq.w	8008a94 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008978:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800897c:	2b00      	cmp	r3, #0
 800897e:	f000 8089 	beq.w	8008a94 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	330c      	adds	r3, #12
 8008988:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800898a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800898c:	e853 3f00 	ldrex	r3, [r3]
 8008990:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008992:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008994:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008998:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	330c      	adds	r3, #12
 80089a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80089a6:	647a      	str	r2, [r7, #68]	@ 0x44
 80089a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80089ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80089ae:	e841 2300 	strex	r3, r2, [r1]
 80089b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80089b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d1e3      	bne.n	8008982 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	3314      	adds	r3, #20
 80089c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089c4:	e853 3f00 	ldrex	r3, [r3]
 80089c8:	623b      	str	r3, [r7, #32]
   return(result);
 80089ca:	6a3b      	ldr	r3, [r7, #32]
 80089cc:	f023 0301 	bic.w	r3, r3, #1
 80089d0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	3314      	adds	r3, #20
 80089da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80089de:	633a      	str	r2, [r7, #48]	@ 0x30
 80089e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80089e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089e6:	e841 2300 	strex	r3, r2, [r1]
 80089ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80089ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d1e3      	bne.n	80089ba <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2220      	movs	r2, #32
 80089f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	330c      	adds	r3, #12
 8008a06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	e853 3f00 	ldrex	r3, [r3]
 8008a0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f023 0310 	bic.w	r3, r3, #16
 8008a16:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	330c      	adds	r3, #12
 8008a20:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008a24:	61fa      	str	r2, [r7, #28]
 8008a26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a28:	69b9      	ldr	r1, [r7, #24]
 8008a2a:	69fa      	ldr	r2, [r7, #28]
 8008a2c:	e841 2300 	strex	r3, r2, [r1]
 8008a30:	617b      	str	r3, [r7, #20]
   return(result);
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d1e3      	bne.n	8008a00 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2202      	movs	r2, #2
 8008a3c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008a3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008a42:	4619      	mov	r1, r3
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f000 f847 	bl	8008ad8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008a4a:	e023      	b.n	8008a94 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d009      	beq.n	8008a6c <HAL_UART_IRQHandler+0x4f4>
 8008a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d003      	beq.n	8008a6c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 f987 	bl	8008d78 <UART_Transmit_IT>
    return;
 8008a6a:	e014      	b.n	8008a96 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d00e      	beq.n	8008a96 <HAL_UART_IRQHandler+0x51e>
 8008a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d008      	beq.n	8008a96 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 f9c7 	bl	8008e18 <UART_EndTransmit_IT>
    return;
 8008a8a:	e004      	b.n	8008a96 <HAL_UART_IRQHandler+0x51e>
    return;
 8008a8c:	bf00      	nop
 8008a8e:	e002      	b.n	8008a96 <HAL_UART_IRQHandler+0x51e>
      return;
 8008a90:	bf00      	nop
 8008a92:	e000      	b.n	8008a96 <HAL_UART_IRQHandler+0x51e>
      return;
 8008a94:	bf00      	nop
  }
}
 8008a96:	37e8      	adds	r7, #232	@ 0xe8
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b083      	sub	sp, #12
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008aa4:	bf00      	nop
 8008aa6:	370c      	adds	r7, #12
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b083      	sub	sp, #12
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008ab8:	bf00      	nop
 8008aba:	370c      	adds	r7, #12
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr

08008ac4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b083      	sub	sp, #12
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008acc:	bf00      	nop
 8008ace:	370c      	adds	r7, #12
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr

08008ad8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b083      	sub	sp, #12
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008ae4:	bf00      	nop
 8008ae6:	370c      	adds	r7, #12
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr

08008af0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b090      	sub	sp, #64	@ 0x40
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d137      	bne.n	8008b7c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008b0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b0e:	2200      	movs	r2, #0
 8008b10:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008b12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	3314      	adds	r3, #20
 8008b18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b1c:	e853 3f00 	ldrex	r3, [r3]
 8008b20:	623b      	str	r3, [r7, #32]
   return(result);
 8008b22:	6a3b      	ldr	r3, [r7, #32]
 8008b24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b28:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008b2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	3314      	adds	r3, #20
 8008b30:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008b32:	633a      	str	r2, [r7, #48]	@ 0x30
 8008b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b3a:	e841 2300 	strex	r3, r2, [r1]
 8008b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d1e5      	bne.n	8008b12 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008b46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	330c      	adds	r3, #12
 8008b4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	e853 3f00 	ldrex	r3, [r3]
 8008b54:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	330c      	adds	r3, #12
 8008b64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008b66:	61fa      	str	r2, [r7, #28]
 8008b68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b6a:	69b9      	ldr	r1, [r7, #24]
 8008b6c:	69fa      	ldr	r2, [r7, #28]
 8008b6e:	e841 2300 	strex	r3, r2, [r1]
 8008b72:	617b      	str	r3, [r7, #20]
   return(result);
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d1e5      	bne.n	8008b46 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008b7a:	e002      	b.n	8008b82 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008b7c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008b7e:	f7fa fc35 	bl	80033ec <HAL_UART_TxCpltCallback>
}
 8008b82:	bf00      	nop
 8008b84:	3740      	adds	r7, #64	@ 0x40
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}

08008b8a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008b8a:	b580      	push	{r7, lr}
 8008b8c:	b084      	sub	sp, #16
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b96:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008b98:	68f8      	ldr	r0, [r7, #12]
 8008b9a:	f7ff ff7f 	bl	8008a9c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b9e:	bf00      	nop
 8008ba0:	3710      	adds	r7, #16
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}

08008ba6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008ba6:	b580      	push	{r7, lr}
 8008ba8:	b084      	sub	sp, #16
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bb6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	695b      	ldr	r3, [r3, #20]
 8008bbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bc2:	2b80      	cmp	r3, #128	@ 0x80
 8008bc4:	bf0c      	ite	eq
 8008bc6:	2301      	moveq	r3, #1
 8008bc8:	2300      	movne	r3, #0
 8008bca:	b2db      	uxtb	r3, r3
 8008bcc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008bd4:	b2db      	uxtb	r3, r3
 8008bd6:	2b21      	cmp	r3, #33	@ 0x21
 8008bd8:	d108      	bne.n	8008bec <UART_DMAError+0x46>
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d005      	beq.n	8008bec <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	2200      	movs	r2, #0
 8008be4:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8008be6:	68b8      	ldr	r0, [r7, #8]
 8008be8:	f000 f827 	bl	8008c3a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	695b      	ldr	r3, [r3, #20]
 8008bf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bf6:	2b40      	cmp	r3, #64	@ 0x40
 8008bf8:	bf0c      	ite	eq
 8008bfa:	2301      	moveq	r3, #1
 8008bfc:	2300      	movne	r3, #0
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008c08:	b2db      	uxtb	r3, r3
 8008c0a:	2b22      	cmp	r3, #34	@ 0x22
 8008c0c:	d108      	bne.n	8008c20 <UART_DMAError+0x7a>
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d005      	beq.n	8008c20 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	2200      	movs	r2, #0
 8008c18:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8008c1a:	68b8      	ldr	r0, [r7, #8]
 8008c1c:	f000 f835 	bl	8008c8a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c24:	f043 0210 	orr.w	r2, r3, #16
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c2c:	68b8      	ldr	r0, [r7, #8]
 8008c2e:	f7ff ff49 	bl	8008ac4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c32:	bf00      	nop
 8008c34:	3710      	adds	r7, #16
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}

08008c3a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008c3a:	b480      	push	{r7}
 8008c3c:	b089      	sub	sp, #36	@ 0x24
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	330c      	adds	r3, #12
 8008c48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	e853 3f00 	ldrex	r3, [r3]
 8008c50:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008c58:	61fb      	str	r3, [r7, #28]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	330c      	adds	r3, #12
 8008c60:	69fa      	ldr	r2, [r7, #28]
 8008c62:	61ba      	str	r2, [r7, #24]
 8008c64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c66:	6979      	ldr	r1, [r7, #20]
 8008c68:	69ba      	ldr	r2, [r7, #24]
 8008c6a:	e841 2300 	strex	r3, r2, [r1]
 8008c6e:	613b      	str	r3, [r7, #16]
   return(result);
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d1e5      	bne.n	8008c42 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2220      	movs	r2, #32
 8008c7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8008c7e:	bf00      	nop
 8008c80:	3724      	adds	r7, #36	@ 0x24
 8008c82:	46bd      	mov	sp, r7
 8008c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c88:	4770      	bx	lr

08008c8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c8a:	b480      	push	{r7}
 8008c8c:	b095      	sub	sp, #84	@ 0x54
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	330c      	adds	r3, #12
 8008c98:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c9c:	e853 3f00 	ldrex	r3, [r3]
 8008ca0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ca4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ca8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	330c      	adds	r3, #12
 8008cb0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008cb2:	643a      	str	r2, [r7, #64]	@ 0x40
 8008cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008cb8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008cba:	e841 2300 	strex	r3, r2, [r1]
 8008cbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d1e5      	bne.n	8008c92 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	3314      	adds	r3, #20
 8008ccc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cce:	6a3b      	ldr	r3, [r7, #32]
 8008cd0:	e853 3f00 	ldrex	r3, [r3]
 8008cd4:	61fb      	str	r3, [r7, #28]
   return(result);
 8008cd6:	69fb      	ldr	r3, [r7, #28]
 8008cd8:	f023 0301 	bic.w	r3, r3, #1
 8008cdc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	3314      	adds	r3, #20
 8008ce4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ce6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008cec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008cee:	e841 2300 	strex	r3, r2, [r1]
 8008cf2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d1e5      	bne.n	8008cc6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cfe:	2b01      	cmp	r3, #1
 8008d00:	d119      	bne.n	8008d36 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	330c      	adds	r3, #12
 8008d08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	e853 3f00 	ldrex	r3, [r3]
 8008d10:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	f023 0310 	bic.w	r3, r3, #16
 8008d18:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	330c      	adds	r3, #12
 8008d20:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d22:	61ba      	str	r2, [r7, #24]
 8008d24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d26:	6979      	ldr	r1, [r7, #20]
 8008d28:	69ba      	ldr	r2, [r7, #24]
 8008d2a:	e841 2300 	strex	r3, r2, [r1]
 8008d2e:	613b      	str	r3, [r7, #16]
   return(result);
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d1e5      	bne.n	8008d02 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2220      	movs	r2, #32
 8008d3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2200      	movs	r2, #0
 8008d42:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008d44:	bf00      	nop
 8008d46:	3754      	adds	r7, #84	@ 0x54
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr

08008d50 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d5c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2200      	movs	r2, #0
 8008d62:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2200      	movs	r2, #0
 8008d68:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d6a:	68f8      	ldr	r0, [r7, #12]
 8008d6c:	f7ff feaa 	bl	8008ac4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d70:	bf00      	nop
 8008d72:	3710      	adds	r7, #16
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b085      	sub	sp, #20
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	2b21      	cmp	r3, #33	@ 0x21
 8008d8a:	d13e      	bne.n	8008e0a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	689b      	ldr	r3, [r3, #8]
 8008d90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d94:	d114      	bne.n	8008dc0 <UART_Transmit_IT+0x48>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	691b      	ldr	r3, [r3, #16]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d110      	bne.n	8008dc0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6a1b      	ldr	r3, [r3, #32]
 8008da2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	881b      	ldrh	r3, [r3, #0]
 8008da8:	461a      	mov	r2, r3
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008db2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6a1b      	ldr	r3, [r3, #32]
 8008db8:	1c9a      	adds	r2, r3, #2
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	621a      	str	r2, [r3, #32]
 8008dbe:	e008      	b.n	8008dd2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6a1b      	ldr	r3, [r3, #32]
 8008dc4:	1c59      	adds	r1, r3, #1
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	6211      	str	r1, [r2, #32]
 8008dca:	781a      	ldrb	r2, [r3, #0]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	3b01      	subs	r3, #1
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	4619      	mov	r1, r3
 8008de0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d10f      	bne.n	8008e06 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	68da      	ldr	r2, [r3, #12]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008df4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	68da      	ldr	r2, [r3, #12]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e04:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008e06:	2300      	movs	r3, #0
 8008e08:	e000      	b.n	8008e0c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008e0a:	2302      	movs	r3, #2
  }
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3714      	adds	r7, #20
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr

08008e18 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	68da      	ldr	r2, [r3, #12]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008e2e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2220      	movs	r2, #32
 8008e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f7fa fad7 	bl	80033ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008e3e:	2300      	movs	r3, #0
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3708      	adds	r7, #8
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b08c      	sub	sp, #48	@ 0x30
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008e56:	b2db      	uxtb	r3, r3
 8008e58:	2b22      	cmp	r3, #34	@ 0x22
 8008e5a:	f040 80ae 	bne.w	8008fba <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	689b      	ldr	r3, [r3, #8]
 8008e62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e66:	d117      	bne.n	8008e98 <UART_Receive_IT+0x50>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	691b      	ldr	r3, [r3, #16]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d113      	bne.n	8008e98 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008e70:	2300      	movs	r3, #0
 8008e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e78:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e86:	b29a      	uxth	r2, r3
 8008e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e8a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e90:	1c9a      	adds	r2, r3, #2
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	629a      	str	r2, [r3, #40]	@ 0x28
 8008e96:	e026      	b.n	8008ee6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	689b      	ldr	r3, [r3, #8]
 8008ea6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008eaa:	d007      	beq.n	8008ebc <UART_Receive_IT+0x74>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	689b      	ldr	r3, [r3, #8]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d10a      	bne.n	8008eca <UART_Receive_IT+0x82>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	691b      	ldr	r3, [r3, #16]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d106      	bne.n	8008eca <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	685b      	ldr	r3, [r3, #4]
 8008ec2:	b2da      	uxtb	r2, r3
 8008ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ec6:	701a      	strb	r2, [r3, #0]
 8008ec8:	e008      	b.n	8008edc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	b2db      	uxtb	r3, r3
 8008ed2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ed6:	b2da      	uxtb	r2, r3
 8008ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eda:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ee0:	1c5a      	adds	r2, r3, #1
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	3b01      	subs	r3, #1
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	687a      	ldr	r2, [r7, #4]
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d15d      	bne.n	8008fb6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	68da      	ldr	r2, [r3, #12]
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f022 0220 	bic.w	r2, r2, #32
 8008f08:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	68da      	ldr	r2, [r3, #12]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008f18:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	695a      	ldr	r2, [r3, #20]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f022 0201 	bic.w	r2, r2, #1
 8008f28:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2220      	movs	r2, #32
 8008f2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2200      	movs	r2, #0
 8008f36:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	d135      	bne.n	8008fac <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	330c      	adds	r3, #12
 8008f4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	e853 3f00 	ldrex	r3, [r3]
 8008f54:	613b      	str	r3, [r7, #16]
   return(result);
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	f023 0310 	bic.w	r3, r3, #16
 8008f5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	330c      	adds	r3, #12
 8008f64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f66:	623a      	str	r2, [r7, #32]
 8008f68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f6a:	69f9      	ldr	r1, [r7, #28]
 8008f6c:	6a3a      	ldr	r2, [r7, #32]
 8008f6e:	e841 2300 	strex	r3, r2, [r1]
 8008f72:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f74:	69bb      	ldr	r3, [r7, #24]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d1e5      	bne.n	8008f46 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f003 0310 	and.w	r3, r3, #16
 8008f84:	2b10      	cmp	r3, #16
 8008f86:	d10a      	bne.n	8008f9e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008f88:	2300      	movs	r3, #0
 8008f8a:	60fb      	str	r3, [r7, #12]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	60fb      	str	r3, [r7, #12]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	60fb      	str	r3, [r7, #12]
 8008f9c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f7ff fd97 	bl	8008ad8 <HAL_UARTEx_RxEventCallback>
 8008faa:	e002      	b.n	8008fb2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f7ff fd7f 	bl	8008ab0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	e002      	b.n	8008fbc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	e000      	b.n	8008fbc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008fba:	2302      	movs	r3, #2
  }
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3730      	adds	r7, #48	@ 0x30
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008fc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008fc8:	b0c0      	sub	sp, #256	@ 0x100
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	691b      	ldr	r3, [r3, #16]
 8008fd8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fe0:	68d9      	ldr	r1, [r3, #12]
 8008fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fe6:	681a      	ldr	r2, [r3, #0]
 8008fe8:	ea40 0301 	orr.w	r3, r0, r1
 8008fec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ff2:	689a      	ldr	r2, [r3, #8]
 8008ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ff8:	691b      	ldr	r3, [r3, #16]
 8008ffa:	431a      	orrs	r2, r3
 8008ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009000:	695b      	ldr	r3, [r3, #20]
 8009002:	431a      	orrs	r2, r3
 8009004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009008:	69db      	ldr	r3, [r3, #28]
 800900a:	4313      	orrs	r3, r2
 800900c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	68db      	ldr	r3, [r3, #12]
 8009018:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800901c:	f021 010c 	bic.w	r1, r1, #12
 8009020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009024:	681a      	ldr	r2, [r3, #0]
 8009026:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800902a:	430b      	orrs	r3, r1
 800902c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800902e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	695b      	ldr	r3, [r3, #20]
 8009036:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800903a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800903e:	6999      	ldr	r1, [r3, #24]
 8009040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	ea40 0301 	orr.w	r3, r0, r1
 800904a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800904c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	4b8f      	ldr	r3, [pc, #572]	@ (8009290 <UART_SetConfig+0x2cc>)
 8009054:	429a      	cmp	r2, r3
 8009056:	d005      	beq.n	8009064 <UART_SetConfig+0xa0>
 8009058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800905c:	681a      	ldr	r2, [r3, #0]
 800905e:	4b8d      	ldr	r3, [pc, #564]	@ (8009294 <UART_SetConfig+0x2d0>)
 8009060:	429a      	cmp	r2, r3
 8009062:	d104      	bne.n	800906e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009064:	f7fc fe98 	bl	8005d98 <HAL_RCC_GetPCLK2Freq>
 8009068:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800906c:	e003      	b.n	8009076 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800906e:	f7fc fe7f 	bl	8005d70 <HAL_RCC_GetPCLK1Freq>
 8009072:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800907a:	69db      	ldr	r3, [r3, #28]
 800907c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009080:	f040 810c 	bne.w	800929c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009084:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009088:	2200      	movs	r2, #0
 800908a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800908e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009092:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009096:	4622      	mov	r2, r4
 8009098:	462b      	mov	r3, r5
 800909a:	1891      	adds	r1, r2, r2
 800909c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800909e:	415b      	adcs	r3, r3
 80090a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80090a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80090a6:	4621      	mov	r1, r4
 80090a8:	eb12 0801 	adds.w	r8, r2, r1
 80090ac:	4629      	mov	r1, r5
 80090ae:	eb43 0901 	adc.w	r9, r3, r1
 80090b2:	f04f 0200 	mov.w	r2, #0
 80090b6:	f04f 0300 	mov.w	r3, #0
 80090ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80090be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80090c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80090c6:	4690      	mov	r8, r2
 80090c8:	4699      	mov	r9, r3
 80090ca:	4623      	mov	r3, r4
 80090cc:	eb18 0303 	adds.w	r3, r8, r3
 80090d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80090d4:	462b      	mov	r3, r5
 80090d6:	eb49 0303 	adc.w	r3, r9, r3
 80090da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80090de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	2200      	movs	r2, #0
 80090e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80090ea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80090ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80090f2:	460b      	mov	r3, r1
 80090f4:	18db      	adds	r3, r3, r3
 80090f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80090f8:	4613      	mov	r3, r2
 80090fa:	eb42 0303 	adc.w	r3, r2, r3
 80090fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8009100:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009104:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009108:	f7f7 fdde 	bl	8000cc8 <__aeabi_uldivmod>
 800910c:	4602      	mov	r2, r0
 800910e:	460b      	mov	r3, r1
 8009110:	4b61      	ldr	r3, [pc, #388]	@ (8009298 <UART_SetConfig+0x2d4>)
 8009112:	fba3 2302 	umull	r2, r3, r3, r2
 8009116:	095b      	lsrs	r3, r3, #5
 8009118:	011c      	lsls	r4, r3, #4
 800911a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800911e:	2200      	movs	r2, #0
 8009120:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009124:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009128:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800912c:	4642      	mov	r2, r8
 800912e:	464b      	mov	r3, r9
 8009130:	1891      	adds	r1, r2, r2
 8009132:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009134:	415b      	adcs	r3, r3
 8009136:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009138:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800913c:	4641      	mov	r1, r8
 800913e:	eb12 0a01 	adds.w	sl, r2, r1
 8009142:	4649      	mov	r1, r9
 8009144:	eb43 0b01 	adc.w	fp, r3, r1
 8009148:	f04f 0200 	mov.w	r2, #0
 800914c:	f04f 0300 	mov.w	r3, #0
 8009150:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009154:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009158:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800915c:	4692      	mov	sl, r2
 800915e:	469b      	mov	fp, r3
 8009160:	4643      	mov	r3, r8
 8009162:	eb1a 0303 	adds.w	r3, sl, r3
 8009166:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800916a:	464b      	mov	r3, r9
 800916c:	eb4b 0303 	adc.w	r3, fp, r3
 8009170:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	2200      	movs	r2, #0
 800917c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009180:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009184:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009188:	460b      	mov	r3, r1
 800918a:	18db      	adds	r3, r3, r3
 800918c:	643b      	str	r3, [r7, #64]	@ 0x40
 800918e:	4613      	mov	r3, r2
 8009190:	eb42 0303 	adc.w	r3, r2, r3
 8009194:	647b      	str	r3, [r7, #68]	@ 0x44
 8009196:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800919a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800919e:	f7f7 fd93 	bl	8000cc8 <__aeabi_uldivmod>
 80091a2:	4602      	mov	r2, r0
 80091a4:	460b      	mov	r3, r1
 80091a6:	4611      	mov	r1, r2
 80091a8:	4b3b      	ldr	r3, [pc, #236]	@ (8009298 <UART_SetConfig+0x2d4>)
 80091aa:	fba3 2301 	umull	r2, r3, r3, r1
 80091ae:	095b      	lsrs	r3, r3, #5
 80091b0:	2264      	movs	r2, #100	@ 0x64
 80091b2:	fb02 f303 	mul.w	r3, r2, r3
 80091b6:	1acb      	subs	r3, r1, r3
 80091b8:	00db      	lsls	r3, r3, #3
 80091ba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80091be:	4b36      	ldr	r3, [pc, #216]	@ (8009298 <UART_SetConfig+0x2d4>)
 80091c0:	fba3 2302 	umull	r2, r3, r3, r2
 80091c4:	095b      	lsrs	r3, r3, #5
 80091c6:	005b      	lsls	r3, r3, #1
 80091c8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80091cc:	441c      	add	r4, r3
 80091ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80091d2:	2200      	movs	r2, #0
 80091d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80091d8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80091dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80091e0:	4642      	mov	r2, r8
 80091e2:	464b      	mov	r3, r9
 80091e4:	1891      	adds	r1, r2, r2
 80091e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80091e8:	415b      	adcs	r3, r3
 80091ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80091ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80091f0:	4641      	mov	r1, r8
 80091f2:	1851      	adds	r1, r2, r1
 80091f4:	6339      	str	r1, [r7, #48]	@ 0x30
 80091f6:	4649      	mov	r1, r9
 80091f8:	414b      	adcs	r3, r1
 80091fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80091fc:	f04f 0200 	mov.w	r2, #0
 8009200:	f04f 0300 	mov.w	r3, #0
 8009204:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009208:	4659      	mov	r1, fp
 800920a:	00cb      	lsls	r3, r1, #3
 800920c:	4651      	mov	r1, sl
 800920e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009212:	4651      	mov	r1, sl
 8009214:	00ca      	lsls	r2, r1, #3
 8009216:	4610      	mov	r0, r2
 8009218:	4619      	mov	r1, r3
 800921a:	4603      	mov	r3, r0
 800921c:	4642      	mov	r2, r8
 800921e:	189b      	adds	r3, r3, r2
 8009220:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009224:	464b      	mov	r3, r9
 8009226:	460a      	mov	r2, r1
 8009228:	eb42 0303 	adc.w	r3, r2, r3
 800922c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	2200      	movs	r2, #0
 8009238:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800923c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009240:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009244:	460b      	mov	r3, r1
 8009246:	18db      	adds	r3, r3, r3
 8009248:	62bb      	str	r3, [r7, #40]	@ 0x28
 800924a:	4613      	mov	r3, r2
 800924c:	eb42 0303 	adc.w	r3, r2, r3
 8009250:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009252:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009256:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800925a:	f7f7 fd35 	bl	8000cc8 <__aeabi_uldivmod>
 800925e:	4602      	mov	r2, r0
 8009260:	460b      	mov	r3, r1
 8009262:	4b0d      	ldr	r3, [pc, #52]	@ (8009298 <UART_SetConfig+0x2d4>)
 8009264:	fba3 1302 	umull	r1, r3, r3, r2
 8009268:	095b      	lsrs	r3, r3, #5
 800926a:	2164      	movs	r1, #100	@ 0x64
 800926c:	fb01 f303 	mul.w	r3, r1, r3
 8009270:	1ad3      	subs	r3, r2, r3
 8009272:	00db      	lsls	r3, r3, #3
 8009274:	3332      	adds	r3, #50	@ 0x32
 8009276:	4a08      	ldr	r2, [pc, #32]	@ (8009298 <UART_SetConfig+0x2d4>)
 8009278:	fba2 2303 	umull	r2, r3, r2, r3
 800927c:	095b      	lsrs	r3, r3, #5
 800927e:	f003 0207 	and.w	r2, r3, #7
 8009282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4422      	add	r2, r4
 800928a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800928c:	e106      	b.n	800949c <UART_SetConfig+0x4d8>
 800928e:	bf00      	nop
 8009290:	40011000 	.word	0x40011000
 8009294:	40011400 	.word	0x40011400
 8009298:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800929c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80092a0:	2200      	movs	r2, #0
 80092a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80092a6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80092aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80092ae:	4642      	mov	r2, r8
 80092b0:	464b      	mov	r3, r9
 80092b2:	1891      	adds	r1, r2, r2
 80092b4:	6239      	str	r1, [r7, #32]
 80092b6:	415b      	adcs	r3, r3
 80092b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80092ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80092be:	4641      	mov	r1, r8
 80092c0:	1854      	adds	r4, r2, r1
 80092c2:	4649      	mov	r1, r9
 80092c4:	eb43 0501 	adc.w	r5, r3, r1
 80092c8:	f04f 0200 	mov.w	r2, #0
 80092cc:	f04f 0300 	mov.w	r3, #0
 80092d0:	00eb      	lsls	r3, r5, #3
 80092d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80092d6:	00e2      	lsls	r2, r4, #3
 80092d8:	4614      	mov	r4, r2
 80092da:	461d      	mov	r5, r3
 80092dc:	4643      	mov	r3, r8
 80092de:	18e3      	adds	r3, r4, r3
 80092e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80092e4:	464b      	mov	r3, r9
 80092e6:	eb45 0303 	adc.w	r3, r5, r3
 80092ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80092ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	2200      	movs	r2, #0
 80092f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80092fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80092fe:	f04f 0200 	mov.w	r2, #0
 8009302:	f04f 0300 	mov.w	r3, #0
 8009306:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800930a:	4629      	mov	r1, r5
 800930c:	008b      	lsls	r3, r1, #2
 800930e:	4621      	mov	r1, r4
 8009310:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009314:	4621      	mov	r1, r4
 8009316:	008a      	lsls	r2, r1, #2
 8009318:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800931c:	f7f7 fcd4 	bl	8000cc8 <__aeabi_uldivmod>
 8009320:	4602      	mov	r2, r0
 8009322:	460b      	mov	r3, r1
 8009324:	4b60      	ldr	r3, [pc, #384]	@ (80094a8 <UART_SetConfig+0x4e4>)
 8009326:	fba3 2302 	umull	r2, r3, r3, r2
 800932a:	095b      	lsrs	r3, r3, #5
 800932c:	011c      	lsls	r4, r3, #4
 800932e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009332:	2200      	movs	r2, #0
 8009334:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009338:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800933c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009340:	4642      	mov	r2, r8
 8009342:	464b      	mov	r3, r9
 8009344:	1891      	adds	r1, r2, r2
 8009346:	61b9      	str	r1, [r7, #24]
 8009348:	415b      	adcs	r3, r3
 800934a:	61fb      	str	r3, [r7, #28]
 800934c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009350:	4641      	mov	r1, r8
 8009352:	1851      	adds	r1, r2, r1
 8009354:	6139      	str	r1, [r7, #16]
 8009356:	4649      	mov	r1, r9
 8009358:	414b      	adcs	r3, r1
 800935a:	617b      	str	r3, [r7, #20]
 800935c:	f04f 0200 	mov.w	r2, #0
 8009360:	f04f 0300 	mov.w	r3, #0
 8009364:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009368:	4659      	mov	r1, fp
 800936a:	00cb      	lsls	r3, r1, #3
 800936c:	4651      	mov	r1, sl
 800936e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009372:	4651      	mov	r1, sl
 8009374:	00ca      	lsls	r2, r1, #3
 8009376:	4610      	mov	r0, r2
 8009378:	4619      	mov	r1, r3
 800937a:	4603      	mov	r3, r0
 800937c:	4642      	mov	r2, r8
 800937e:	189b      	adds	r3, r3, r2
 8009380:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009384:	464b      	mov	r3, r9
 8009386:	460a      	mov	r2, r1
 8009388:	eb42 0303 	adc.w	r3, r2, r3
 800938c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	2200      	movs	r2, #0
 8009398:	67bb      	str	r3, [r7, #120]	@ 0x78
 800939a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800939c:	f04f 0200 	mov.w	r2, #0
 80093a0:	f04f 0300 	mov.w	r3, #0
 80093a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80093a8:	4649      	mov	r1, r9
 80093aa:	008b      	lsls	r3, r1, #2
 80093ac:	4641      	mov	r1, r8
 80093ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80093b2:	4641      	mov	r1, r8
 80093b4:	008a      	lsls	r2, r1, #2
 80093b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80093ba:	f7f7 fc85 	bl	8000cc8 <__aeabi_uldivmod>
 80093be:	4602      	mov	r2, r0
 80093c0:	460b      	mov	r3, r1
 80093c2:	4611      	mov	r1, r2
 80093c4:	4b38      	ldr	r3, [pc, #224]	@ (80094a8 <UART_SetConfig+0x4e4>)
 80093c6:	fba3 2301 	umull	r2, r3, r3, r1
 80093ca:	095b      	lsrs	r3, r3, #5
 80093cc:	2264      	movs	r2, #100	@ 0x64
 80093ce:	fb02 f303 	mul.w	r3, r2, r3
 80093d2:	1acb      	subs	r3, r1, r3
 80093d4:	011b      	lsls	r3, r3, #4
 80093d6:	3332      	adds	r3, #50	@ 0x32
 80093d8:	4a33      	ldr	r2, [pc, #204]	@ (80094a8 <UART_SetConfig+0x4e4>)
 80093da:	fba2 2303 	umull	r2, r3, r2, r3
 80093de:	095b      	lsrs	r3, r3, #5
 80093e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80093e4:	441c      	add	r4, r3
 80093e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80093ea:	2200      	movs	r2, #0
 80093ec:	673b      	str	r3, [r7, #112]	@ 0x70
 80093ee:	677a      	str	r2, [r7, #116]	@ 0x74
 80093f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80093f4:	4642      	mov	r2, r8
 80093f6:	464b      	mov	r3, r9
 80093f8:	1891      	adds	r1, r2, r2
 80093fa:	60b9      	str	r1, [r7, #8]
 80093fc:	415b      	adcs	r3, r3
 80093fe:	60fb      	str	r3, [r7, #12]
 8009400:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009404:	4641      	mov	r1, r8
 8009406:	1851      	adds	r1, r2, r1
 8009408:	6039      	str	r1, [r7, #0]
 800940a:	4649      	mov	r1, r9
 800940c:	414b      	adcs	r3, r1
 800940e:	607b      	str	r3, [r7, #4]
 8009410:	f04f 0200 	mov.w	r2, #0
 8009414:	f04f 0300 	mov.w	r3, #0
 8009418:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800941c:	4659      	mov	r1, fp
 800941e:	00cb      	lsls	r3, r1, #3
 8009420:	4651      	mov	r1, sl
 8009422:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009426:	4651      	mov	r1, sl
 8009428:	00ca      	lsls	r2, r1, #3
 800942a:	4610      	mov	r0, r2
 800942c:	4619      	mov	r1, r3
 800942e:	4603      	mov	r3, r0
 8009430:	4642      	mov	r2, r8
 8009432:	189b      	adds	r3, r3, r2
 8009434:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009436:	464b      	mov	r3, r9
 8009438:	460a      	mov	r2, r1
 800943a:	eb42 0303 	adc.w	r3, r2, r3
 800943e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009444:	685b      	ldr	r3, [r3, #4]
 8009446:	2200      	movs	r2, #0
 8009448:	663b      	str	r3, [r7, #96]	@ 0x60
 800944a:	667a      	str	r2, [r7, #100]	@ 0x64
 800944c:	f04f 0200 	mov.w	r2, #0
 8009450:	f04f 0300 	mov.w	r3, #0
 8009454:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009458:	4649      	mov	r1, r9
 800945a:	008b      	lsls	r3, r1, #2
 800945c:	4641      	mov	r1, r8
 800945e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009462:	4641      	mov	r1, r8
 8009464:	008a      	lsls	r2, r1, #2
 8009466:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800946a:	f7f7 fc2d 	bl	8000cc8 <__aeabi_uldivmod>
 800946e:	4602      	mov	r2, r0
 8009470:	460b      	mov	r3, r1
 8009472:	4b0d      	ldr	r3, [pc, #52]	@ (80094a8 <UART_SetConfig+0x4e4>)
 8009474:	fba3 1302 	umull	r1, r3, r3, r2
 8009478:	095b      	lsrs	r3, r3, #5
 800947a:	2164      	movs	r1, #100	@ 0x64
 800947c:	fb01 f303 	mul.w	r3, r1, r3
 8009480:	1ad3      	subs	r3, r2, r3
 8009482:	011b      	lsls	r3, r3, #4
 8009484:	3332      	adds	r3, #50	@ 0x32
 8009486:	4a08      	ldr	r2, [pc, #32]	@ (80094a8 <UART_SetConfig+0x4e4>)
 8009488:	fba2 2303 	umull	r2, r3, r2, r3
 800948c:	095b      	lsrs	r3, r3, #5
 800948e:	f003 020f 	and.w	r2, r3, #15
 8009492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4422      	add	r2, r4
 800949a:	609a      	str	r2, [r3, #8]
}
 800949c:	bf00      	nop
 800949e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80094a2:	46bd      	mov	sp, r7
 80094a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80094a8:	51eb851f 	.word	0x51eb851f

080094ac <__cvt>:
 80094ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094b0:	ec57 6b10 	vmov	r6, r7, d0
 80094b4:	2f00      	cmp	r7, #0
 80094b6:	460c      	mov	r4, r1
 80094b8:	4619      	mov	r1, r3
 80094ba:	463b      	mov	r3, r7
 80094bc:	bfbb      	ittet	lt
 80094be:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80094c2:	461f      	movlt	r7, r3
 80094c4:	2300      	movge	r3, #0
 80094c6:	232d      	movlt	r3, #45	@ 0x2d
 80094c8:	700b      	strb	r3, [r1, #0]
 80094ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80094cc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80094d0:	4691      	mov	r9, r2
 80094d2:	f023 0820 	bic.w	r8, r3, #32
 80094d6:	bfbc      	itt	lt
 80094d8:	4632      	movlt	r2, r6
 80094da:	4616      	movlt	r6, r2
 80094dc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80094e0:	d005      	beq.n	80094ee <__cvt+0x42>
 80094e2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80094e6:	d100      	bne.n	80094ea <__cvt+0x3e>
 80094e8:	3401      	adds	r4, #1
 80094ea:	2102      	movs	r1, #2
 80094ec:	e000      	b.n	80094f0 <__cvt+0x44>
 80094ee:	2103      	movs	r1, #3
 80094f0:	ab03      	add	r3, sp, #12
 80094f2:	9301      	str	r3, [sp, #4]
 80094f4:	ab02      	add	r3, sp, #8
 80094f6:	9300      	str	r3, [sp, #0]
 80094f8:	ec47 6b10 	vmov	d0, r6, r7
 80094fc:	4653      	mov	r3, sl
 80094fe:	4622      	mov	r2, r4
 8009500:	f000 fe5a 	bl	800a1b8 <_dtoa_r>
 8009504:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009508:	4605      	mov	r5, r0
 800950a:	d119      	bne.n	8009540 <__cvt+0x94>
 800950c:	f019 0f01 	tst.w	r9, #1
 8009510:	d00e      	beq.n	8009530 <__cvt+0x84>
 8009512:	eb00 0904 	add.w	r9, r0, r4
 8009516:	2200      	movs	r2, #0
 8009518:	2300      	movs	r3, #0
 800951a:	4630      	mov	r0, r6
 800951c:	4639      	mov	r1, r7
 800951e:	f7f7 faf3 	bl	8000b08 <__aeabi_dcmpeq>
 8009522:	b108      	cbz	r0, 8009528 <__cvt+0x7c>
 8009524:	f8cd 900c 	str.w	r9, [sp, #12]
 8009528:	2230      	movs	r2, #48	@ 0x30
 800952a:	9b03      	ldr	r3, [sp, #12]
 800952c:	454b      	cmp	r3, r9
 800952e:	d31e      	bcc.n	800956e <__cvt+0xc2>
 8009530:	9b03      	ldr	r3, [sp, #12]
 8009532:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009534:	1b5b      	subs	r3, r3, r5
 8009536:	4628      	mov	r0, r5
 8009538:	6013      	str	r3, [r2, #0]
 800953a:	b004      	add	sp, #16
 800953c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009540:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009544:	eb00 0904 	add.w	r9, r0, r4
 8009548:	d1e5      	bne.n	8009516 <__cvt+0x6a>
 800954a:	7803      	ldrb	r3, [r0, #0]
 800954c:	2b30      	cmp	r3, #48	@ 0x30
 800954e:	d10a      	bne.n	8009566 <__cvt+0xba>
 8009550:	2200      	movs	r2, #0
 8009552:	2300      	movs	r3, #0
 8009554:	4630      	mov	r0, r6
 8009556:	4639      	mov	r1, r7
 8009558:	f7f7 fad6 	bl	8000b08 <__aeabi_dcmpeq>
 800955c:	b918      	cbnz	r0, 8009566 <__cvt+0xba>
 800955e:	f1c4 0401 	rsb	r4, r4, #1
 8009562:	f8ca 4000 	str.w	r4, [sl]
 8009566:	f8da 3000 	ldr.w	r3, [sl]
 800956a:	4499      	add	r9, r3
 800956c:	e7d3      	b.n	8009516 <__cvt+0x6a>
 800956e:	1c59      	adds	r1, r3, #1
 8009570:	9103      	str	r1, [sp, #12]
 8009572:	701a      	strb	r2, [r3, #0]
 8009574:	e7d9      	b.n	800952a <__cvt+0x7e>

08009576 <__exponent>:
 8009576:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009578:	2900      	cmp	r1, #0
 800957a:	bfba      	itte	lt
 800957c:	4249      	neglt	r1, r1
 800957e:	232d      	movlt	r3, #45	@ 0x2d
 8009580:	232b      	movge	r3, #43	@ 0x2b
 8009582:	2909      	cmp	r1, #9
 8009584:	7002      	strb	r2, [r0, #0]
 8009586:	7043      	strb	r3, [r0, #1]
 8009588:	dd29      	ble.n	80095de <__exponent+0x68>
 800958a:	f10d 0307 	add.w	r3, sp, #7
 800958e:	461d      	mov	r5, r3
 8009590:	270a      	movs	r7, #10
 8009592:	461a      	mov	r2, r3
 8009594:	fbb1 f6f7 	udiv	r6, r1, r7
 8009598:	fb07 1416 	mls	r4, r7, r6, r1
 800959c:	3430      	adds	r4, #48	@ 0x30
 800959e:	f802 4c01 	strb.w	r4, [r2, #-1]
 80095a2:	460c      	mov	r4, r1
 80095a4:	2c63      	cmp	r4, #99	@ 0x63
 80095a6:	f103 33ff 	add.w	r3, r3, #4294967295
 80095aa:	4631      	mov	r1, r6
 80095ac:	dcf1      	bgt.n	8009592 <__exponent+0x1c>
 80095ae:	3130      	adds	r1, #48	@ 0x30
 80095b0:	1e94      	subs	r4, r2, #2
 80095b2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80095b6:	1c41      	adds	r1, r0, #1
 80095b8:	4623      	mov	r3, r4
 80095ba:	42ab      	cmp	r3, r5
 80095bc:	d30a      	bcc.n	80095d4 <__exponent+0x5e>
 80095be:	f10d 0309 	add.w	r3, sp, #9
 80095c2:	1a9b      	subs	r3, r3, r2
 80095c4:	42ac      	cmp	r4, r5
 80095c6:	bf88      	it	hi
 80095c8:	2300      	movhi	r3, #0
 80095ca:	3302      	adds	r3, #2
 80095cc:	4403      	add	r3, r0
 80095ce:	1a18      	subs	r0, r3, r0
 80095d0:	b003      	add	sp, #12
 80095d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095d4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80095d8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80095dc:	e7ed      	b.n	80095ba <__exponent+0x44>
 80095de:	2330      	movs	r3, #48	@ 0x30
 80095e0:	3130      	adds	r1, #48	@ 0x30
 80095e2:	7083      	strb	r3, [r0, #2]
 80095e4:	70c1      	strb	r1, [r0, #3]
 80095e6:	1d03      	adds	r3, r0, #4
 80095e8:	e7f1      	b.n	80095ce <__exponent+0x58>
	...

080095ec <_printf_float>:
 80095ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095f0:	b08d      	sub	sp, #52	@ 0x34
 80095f2:	460c      	mov	r4, r1
 80095f4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80095f8:	4616      	mov	r6, r2
 80095fa:	461f      	mov	r7, r3
 80095fc:	4605      	mov	r5, r0
 80095fe:	f000 fcdb 	bl	8009fb8 <_localeconv_r>
 8009602:	6803      	ldr	r3, [r0, #0]
 8009604:	9304      	str	r3, [sp, #16]
 8009606:	4618      	mov	r0, r3
 8009608:	f7f6 fe52 	bl	80002b0 <strlen>
 800960c:	2300      	movs	r3, #0
 800960e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009610:	f8d8 3000 	ldr.w	r3, [r8]
 8009614:	9005      	str	r0, [sp, #20]
 8009616:	3307      	adds	r3, #7
 8009618:	f023 0307 	bic.w	r3, r3, #7
 800961c:	f103 0208 	add.w	r2, r3, #8
 8009620:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009624:	f8d4 b000 	ldr.w	fp, [r4]
 8009628:	f8c8 2000 	str.w	r2, [r8]
 800962c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009630:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009634:	9307      	str	r3, [sp, #28]
 8009636:	f8cd 8018 	str.w	r8, [sp, #24]
 800963a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800963e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009642:	4b9c      	ldr	r3, [pc, #624]	@ (80098b4 <_printf_float+0x2c8>)
 8009644:	f04f 32ff 	mov.w	r2, #4294967295
 8009648:	f7f7 fa90 	bl	8000b6c <__aeabi_dcmpun>
 800964c:	bb70      	cbnz	r0, 80096ac <_printf_float+0xc0>
 800964e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009652:	4b98      	ldr	r3, [pc, #608]	@ (80098b4 <_printf_float+0x2c8>)
 8009654:	f04f 32ff 	mov.w	r2, #4294967295
 8009658:	f7f7 fa6a 	bl	8000b30 <__aeabi_dcmple>
 800965c:	bb30      	cbnz	r0, 80096ac <_printf_float+0xc0>
 800965e:	2200      	movs	r2, #0
 8009660:	2300      	movs	r3, #0
 8009662:	4640      	mov	r0, r8
 8009664:	4649      	mov	r1, r9
 8009666:	f7f7 fa59 	bl	8000b1c <__aeabi_dcmplt>
 800966a:	b110      	cbz	r0, 8009672 <_printf_float+0x86>
 800966c:	232d      	movs	r3, #45	@ 0x2d
 800966e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009672:	4a91      	ldr	r2, [pc, #580]	@ (80098b8 <_printf_float+0x2cc>)
 8009674:	4b91      	ldr	r3, [pc, #580]	@ (80098bc <_printf_float+0x2d0>)
 8009676:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800967a:	bf94      	ite	ls
 800967c:	4690      	movls	r8, r2
 800967e:	4698      	movhi	r8, r3
 8009680:	2303      	movs	r3, #3
 8009682:	6123      	str	r3, [r4, #16]
 8009684:	f02b 0304 	bic.w	r3, fp, #4
 8009688:	6023      	str	r3, [r4, #0]
 800968a:	f04f 0900 	mov.w	r9, #0
 800968e:	9700      	str	r7, [sp, #0]
 8009690:	4633      	mov	r3, r6
 8009692:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009694:	4621      	mov	r1, r4
 8009696:	4628      	mov	r0, r5
 8009698:	f000 f9d2 	bl	8009a40 <_printf_common>
 800969c:	3001      	adds	r0, #1
 800969e:	f040 808d 	bne.w	80097bc <_printf_float+0x1d0>
 80096a2:	f04f 30ff 	mov.w	r0, #4294967295
 80096a6:	b00d      	add	sp, #52	@ 0x34
 80096a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ac:	4642      	mov	r2, r8
 80096ae:	464b      	mov	r3, r9
 80096b0:	4640      	mov	r0, r8
 80096b2:	4649      	mov	r1, r9
 80096b4:	f7f7 fa5a 	bl	8000b6c <__aeabi_dcmpun>
 80096b8:	b140      	cbz	r0, 80096cc <_printf_float+0xe0>
 80096ba:	464b      	mov	r3, r9
 80096bc:	2b00      	cmp	r3, #0
 80096be:	bfbc      	itt	lt
 80096c0:	232d      	movlt	r3, #45	@ 0x2d
 80096c2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80096c6:	4a7e      	ldr	r2, [pc, #504]	@ (80098c0 <_printf_float+0x2d4>)
 80096c8:	4b7e      	ldr	r3, [pc, #504]	@ (80098c4 <_printf_float+0x2d8>)
 80096ca:	e7d4      	b.n	8009676 <_printf_float+0x8a>
 80096cc:	6863      	ldr	r3, [r4, #4]
 80096ce:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80096d2:	9206      	str	r2, [sp, #24]
 80096d4:	1c5a      	adds	r2, r3, #1
 80096d6:	d13b      	bne.n	8009750 <_printf_float+0x164>
 80096d8:	2306      	movs	r3, #6
 80096da:	6063      	str	r3, [r4, #4]
 80096dc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80096e0:	2300      	movs	r3, #0
 80096e2:	6022      	str	r2, [r4, #0]
 80096e4:	9303      	str	r3, [sp, #12]
 80096e6:	ab0a      	add	r3, sp, #40	@ 0x28
 80096e8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80096ec:	ab09      	add	r3, sp, #36	@ 0x24
 80096ee:	9300      	str	r3, [sp, #0]
 80096f0:	6861      	ldr	r1, [r4, #4]
 80096f2:	ec49 8b10 	vmov	d0, r8, r9
 80096f6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80096fa:	4628      	mov	r0, r5
 80096fc:	f7ff fed6 	bl	80094ac <__cvt>
 8009700:	9b06      	ldr	r3, [sp, #24]
 8009702:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009704:	2b47      	cmp	r3, #71	@ 0x47
 8009706:	4680      	mov	r8, r0
 8009708:	d129      	bne.n	800975e <_printf_float+0x172>
 800970a:	1cc8      	adds	r0, r1, #3
 800970c:	db02      	blt.n	8009714 <_printf_float+0x128>
 800970e:	6863      	ldr	r3, [r4, #4]
 8009710:	4299      	cmp	r1, r3
 8009712:	dd41      	ble.n	8009798 <_printf_float+0x1ac>
 8009714:	f1aa 0a02 	sub.w	sl, sl, #2
 8009718:	fa5f fa8a 	uxtb.w	sl, sl
 800971c:	3901      	subs	r1, #1
 800971e:	4652      	mov	r2, sl
 8009720:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009724:	9109      	str	r1, [sp, #36]	@ 0x24
 8009726:	f7ff ff26 	bl	8009576 <__exponent>
 800972a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800972c:	1813      	adds	r3, r2, r0
 800972e:	2a01      	cmp	r2, #1
 8009730:	4681      	mov	r9, r0
 8009732:	6123      	str	r3, [r4, #16]
 8009734:	dc02      	bgt.n	800973c <_printf_float+0x150>
 8009736:	6822      	ldr	r2, [r4, #0]
 8009738:	07d2      	lsls	r2, r2, #31
 800973a:	d501      	bpl.n	8009740 <_printf_float+0x154>
 800973c:	3301      	adds	r3, #1
 800973e:	6123      	str	r3, [r4, #16]
 8009740:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009744:	2b00      	cmp	r3, #0
 8009746:	d0a2      	beq.n	800968e <_printf_float+0xa2>
 8009748:	232d      	movs	r3, #45	@ 0x2d
 800974a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800974e:	e79e      	b.n	800968e <_printf_float+0xa2>
 8009750:	9a06      	ldr	r2, [sp, #24]
 8009752:	2a47      	cmp	r2, #71	@ 0x47
 8009754:	d1c2      	bne.n	80096dc <_printf_float+0xf0>
 8009756:	2b00      	cmp	r3, #0
 8009758:	d1c0      	bne.n	80096dc <_printf_float+0xf0>
 800975a:	2301      	movs	r3, #1
 800975c:	e7bd      	b.n	80096da <_printf_float+0xee>
 800975e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009762:	d9db      	bls.n	800971c <_printf_float+0x130>
 8009764:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009768:	d118      	bne.n	800979c <_printf_float+0x1b0>
 800976a:	2900      	cmp	r1, #0
 800976c:	6863      	ldr	r3, [r4, #4]
 800976e:	dd0b      	ble.n	8009788 <_printf_float+0x19c>
 8009770:	6121      	str	r1, [r4, #16]
 8009772:	b913      	cbnz	r3, 800977a <_printf_float+0x18e>
 8009774:	6822      	ldr	r2, [r4, #0]
 8009776:	07d0      	lsls	r0, r2, #31
 8009778:	d502      	bpl.n	8009780 <_printf_float+0x194>
 800977a:	3301      	adds	r3, #1
 800977c:	440b      	add	r3, r1
 800977e:	6123      	str	r3, [r4, #16]
 8009780:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009782:	f04f 0900 	mov.w	r9, #0
 8009786:	e7db      	b.n	8009740 <_printf_float+0x154>
 8009788:	b913      	cbnz	r3, 8009790 <_printf_float+0x1a4>
 800978a:	6822      	ldr	r2, [r4, #0]
 800978c:	07d2      	lsls	r2, r2, #31
 800978e:	d501      	bpl.n	8009794 <_printf_float+0x1a8>
 8009790:	3302      	adds	r3, #2
 8009792:	e7f4      	b.n	800977e <_printf_float+0x192>
 8009794:	2301      	movs	r3, #1
 8009796:	e7f2      	b.n	800977e <_printf_float+0x192>
 8009798:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800979c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800979e:	4299      	cmp	r1, r3
 80097a0:	db05      	blt.n	80097ae <_printf_float+0x1c2>
 80097a2:	6823      	ldr	r3, [r4, #0]
 80097a4:	6121      	str	r1, [r4, #16]
 80097a6:	07d8      	lsls	r0, r3, #31
 80097a8:	d5ea      	bpl.n	8009780 <_printf_float+0x194>
 80097aa:	1c4b      	adds	r3, r1, #1
 80097ac:	e7e7      	b.n	800977e <_printf_float+0x192>
 80097ae:	2900      	cmp	r1, #0
 80097b0:	bfd4      	ite	le
 80097b2:	f1c1 0202 	rsble	r2, r1, #2
 80097b6:	2201      	movgt	r2, #1
 80097b8:	4413      	add	r3, r2
 80097ba:	e7e0      	b.n	800977e <_printf_float+0x192>
 80097bc:	6823      	ldr	r3, [r4, #0]
 80097be:	055a      	lsls	r2, r3, #21
 80097c0:	d407      	bmi.n	80097d2 <_printf_float+0x1e6>
 80097c2:	6923      	ldr	r3, [r4, #16]
 80097c4:	4642      	mov	r2, r8
 80097c6:	4631      	mov	r1, r6
 80097c8:	4628      	mov	r0, r5
 80097ca:	47b8      	blx	r7
 80097cc:	3001      	adds	r0, #1
 80097ce:	d12b      	bne.n	8009828 <_printf_float+0x23c>
 80097d0:	e767      	b.n	80096a2 <_printf_float+0xb6>
 80097d2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80097d6:	f240 80dd 	bls.w	8009994 <_printf_float+0x3a8>
 80097da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80097de:	2200      	movs	r2, #0
 80097e0:	2300      	movs	r3, #0
 80097e2:	f7f7 f991 	bl	8000b08 <__aeabi_dcmpeq>
 80097e6:	2800      	cmp	r0, #0
 80097e8:	d033      	beq.n	8009852 <_printf_float+0x266>
 80097ea:	4a37      	ldr	r2, [pc, #220]	@ (80098c8 <_printf_float+0x2dc>)
 80097ec:	2301      	movs	r3, #1
 80097ee:	4631      	mov	r1, r6
 80097f0:	4628      	mov	r0, r5
 80097f2:	47b8      	blx	r7
 80097f4:	3001      	adds	r0, #1
 80097f6:	f43f af54 	beq.w	80096a2 <_printf_float+0xb6>
 80097fa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80097fe:	4543      	cmp	r3, r8
 8009800:	db02      	blt.n	8009808 <_printf_float+0x21c>
 8009802:	6823      	ldr	r3, [r4, #0]
 8009804:	07d8      	lsls	r0, r3, #31
 8009806:	d50f      	bpl.n	8009828 <_printf_float+0x23c>
 8009808:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800980c:	4631      	mov	r1, r6
 800980e:	4628      	mov	r0, r5
 8009810:	47b8      	blx	r7
 8009812:	3001      	adds	r0, #1
 8009814:	f43f af45 	beq.w	80096a2 <_printf_float+0xb6>
 8009818:	f04f 0900 	mov.w	r9, #0
 800981c:	f108 38ff 	add.w	r8, r8, #4294967295
 8009820:	f104 0a1a 	add.w	sl, r4, #26
 8009824:	45c8      	cmp	r8, r9
 8009826:	dc09      	bgt.n	800983c <_printf_float+0x250>
 8009828:	6823      	ldr	r3, [r4, #0]
 800982a:	079b      	lsls	r3, r3, #30
 800982c:	f100 8103 	bmi.w	8009a36 <_printf_float+0x44a>
 8009830:	68e0      	ldr	r0, [r4, #12]
 8009832:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009834:	4298      	cmp	r0, r3
 8009836:	bfb8      	it	lt
 8009838:	4618      	movlt	r0, r3
 800983a:	e734      	b.n	80096a6 <_printf_float+0xba>
 800983c:	2301      	movs	r3, #1
 800983e:	4652      	mov	r2, sl
 8009840:	4631      	mov	r1, r6
 8009842:	4628      	mov	r0, r5
 8009844:	47b8      	blx	r7
 8009846:	3001      	adds	r0, #1
 8009848:	f43f af2b 	beq.w	80096a2 <_printf_float+0xb6>
 800984c:	f109 0901 	add.w	r9, r9, #1
 8009850:	e7e8      	b.n	8009824 <_printf_float+0x238>
 8009852:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009854:	2b00      	cmp	r3, #0
 8009856:	dc39      	bgt.n	80098cc <_printf_float+0x2e0>
 8009858:	4a1b      	ldr	r2, [pc, #108]	@ (80098c8 <_printf_float+0x2dc>)
 800985a:	2301      	movs	r3, #1
 800985c:	4631      	mov	r1, r6
 800985e:	4628      	mov	r0, r5
 8009860:	47b8      	blx	r7
 8009862:	3001      	adds	r0, #1
 8009864:	f43f af1d 	beq.w	80096a2 <_printf_float+0xb6>
 8009868:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800986c:	ea59 0303 	orrs.w	r3, r9, r3
 8009870:	d102      	bne.n	8009878 <_printf_float+0x28c>
 8009872:	6823      	ldr	r3, [r4, #0]
 8009874:	07d9      	lsls	r1, r3, #31
 8009876:	d5d7      	bpl.n	8009828 <_printf_float+0x23c>
 8009878:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800987c:	4631      	mov	r1, r6
 800987e:	4628      	mov	r0, r5
 8009880:	47b8      	blx	r7
 8009882:	3001      	adds	r0, #1
 8009884:	f43f af0d 	beq.w	80096a2 <_printf_float+0xb6>
 8009888:	f04f 0a00 	mov.w	sl, #0
 800988c:	f104 0b1a 	add.w	fp, r4, #26
 8009890:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009892:	425b      	negs	r3, r3
 8009894:	4553      	cmp	r3, sl
 8009896:	dc01      	bgt.n	800989c <_printf_float+0x2b0>
 8009898:	464b      	mov	r3, r9
 800989a:	e793      	b.n	80097c4 <_printf_float+0x1d8>
 800989c:	2301      	movs	r3, #1
 800989e:	465a      	mov	r2, fp
 80098a0:	4631      	mov	r1, r6
 80098a2:	4628      	mov	r0, r5
 80098a4:	47b8      	blx	r7
 80098a6:	3001      	adds	r0, #1
 80098a8:	f43f aefb 	beq.w	80096a2 <_printf_float+0xb6>
 80098ac:	f10a 0a01 	add.w	sl, sl, #1
 80098b0:	e7ee      	b.n	8009890 <_printf_float+0x2a4>
 80098b2:	bf00      	nop
 80098b4:	7fefffff 	.word	0x7fefffff
 80098b8:	0800d53c 	.word	0x0800d53c
 80098bc:	0800d540 	.word	0x0800d540
 80098c0:	0800d544 	.word	0x0800d544
 80098c4:	0800d548 	.word	0x0800d548
 80098c8:	0800d54c 	.word	0x0800d54c
 80098cc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80098ce:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80098d2:	4553      	cmp	r3, sl
 80098d4:	bfa8      	it	ge
 80098d6:	4653      	movge	r3, sl
 80098d8:	2b00      	cmp	r3, #0
 80098da:	4699      	mov	r9, r3
 80098dc:	dc36      	bgt.n	800994c <_printf_float+0x360>
 80098de:	f04f 0b00 	mov.w	fp, #0
 80098e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80098e6:	f104 021a 	add.w	r2, r4, #26
 80098ea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80098ec:	9306      	str	r3, [sp, #24]
 80098ee:	eba3 0309 	sub.w	r3, r3, r9
 80098f2:	455b      	cmp	r3, fp
 80098f4:	dc31      	bgt.n	800995a <_printf_float+0x36e>
 80098f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098f8:	459a      	cmp	sl, r3
 80098fa:	dc3a      	bgt.n	8009972 <_printf_float+0x386>
 80098fc:	6823      	ldr	r3, [r4, #0]
 80098fe:	07da      	lsls	r2, r3, #31
 8009900:	d437      	bmi.n	8009972 <_printf_float+0x386>
 8009902:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009904:	ebaa 0903 	sub.w	r9, sl, r3
 8009908:	9b06      	ldr	r3, [sp, #24]
 800990a:	ebaa 0303 	sub.w	r3, sl, r3
 800990e:	4599      	cmp	r9, r3
 8009910:	bfa8      	it	ge
 8009912:	4699      	movge	r9, r3
 8009914:	f1b9 0f00 	cmp.w	r9, #0
 8009918:	dc33      	bgt.n	8009982 <_printf_float+0x396>
 800991a:	f04f 0800 	mov.w	r8, #0
 800991e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009922:	f104 0b1a 	add.w	fp, r4, #26
 8009926:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009928:	ebaa 0303 	sub.w	r3, sl, r3
 800992c:	eba3 0309 	sub.w	r3, r3, r9
 8009930:	4543      	cmp	r3, r8
 8009932:	f77f af79 	ble.w	8009828 <_printf_float+0x23c>
 8009936:	2301      	movs	r3, #1
 8009938:	465a      	mov	r2, fp
 800993a:	4631      	mov	r1, r6
 800993c:	4628      	mov	r0, r5
 800993e:	47b8      	blx	r7
 8009940:	3001      	adds	r0, #1
 8009942:	f43f aeae 	beq.w	80096a2 <_printf_float+0xb6>
 8009946:	f108 0801 	add.w	r8, r8, #1
 800994a:	e7ec      	b.n	8009926 <_printf_float+0x33a>
 800994c:	4642      	mov	r2, r8
 800994e:	4631      	mov	r1, r6
 8009950:	4628      	mov	r0, r5
 8009952:	47b8      	blx	r7
 8009954:	3001      	adds	r0, #1
 8009956:	d1c2      	bne.n	80098de <_printf_float+0x2f2>
 8009958:	e6a3      	b.n	80096a2 <_printf_float+0xb6>
 800995a:	2301      	movs	r3, #1
 800995c:	4631      	mov	r1, r6
 800995e:	4628      	mov	r0, r5
 8009960:	9206      	str	r2, [sp, #24]
 8009962:	47b8      	blx	r7
 8009964:	3001      	adds	r0, #1
 8009966:	f43f ae9c 	beq.w	80096a2 <_printf_float+0xb6>
 800996a:	9a06      	ldr	r2, [sp, #24]
 800996c:	f10b 0b01 	add.w	fp, fp, #1
 8009970:	e7bb      	b.n	80098ea <_printf_float+0x2fe>
 8009972:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009976:	4631      	mov	r1, r6
 8009978:	4628      	mov	r0, r5
 800997a:	47b8      	blx	r7
 800997c:	3001      	adds	r0, #1
 800997e:	d1c0      	bne.n	8009902 <_printf_float+0x316>
 8009980:	e68f      	b.n	80096a2 <_printf_float+0xb6>
 8009982:	9a06      	ldr	r2, [sp, #24]
 8009984:	464b      	mov	r3, r9
 8009986:	4442      	add	r2, r8
 8009988:	4631      	mov	r1, r6
 800998a:	4628      	mov	r0, r5
 800998c:	47b8      	blx	r7
 800998e:	3001      	adds	r0, #1
 8009990:	d1c3      	bne.n	800991a <_printf_float+0x32e>
 8009992:	e686      	b.n	80096a2 <_printf_float+0xb6>
 8009994:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009998:	f1ba 0f01 	cmp.w	sl, #1
 800999c:	dc01      	bgt.n	80099a2 <_printf_float+0x3b6>
 800999e:	07db      	lsls	r3, r3, #31
 80099a0:	d536      	bpl.n	8009a10 <_printf_float+0x424>
 80099a2:	2301      	movs	r3, #1
 80099a4:	4642      	mov	r2, r8
 80099a6:	4631      	mov	r1, r6
 80099a8:	4628      	mov	r0, r5
 80099aa:	47b8      	blx	r7
 80099ac:	3001      	adds	r0, #1
 80099ae:	f43f ae78 	beq.w	80096a2 <_printf_float+0xb6>
 80099b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80099b6:	4631      	mov	r1, r6
 80099b8:	4628      	mov	r0, r5
 80099ba:	47b8      	blx	r7
 80099bc:	3001      	adds	r0, #1
 80099be:	f43f ae70 	beq.w	80096a2 <_printf_float+0xb6>
 80099c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80099c6:	2200      	movs	r2, #0
 80099c8:	2300      	movs	r3, #0
 80099ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80099ce:	f7f7 f89b 	bl	8000b08 <__aeabi_dcmpeq>
 80099d2:	b9c0      	cbnz	r0, 8009a06 <_printf_float+0x41a>
 80099d4:	4653      	mov	r3, sl
 80099d6:	f108 0201 	add.w	r2, r8, #1
 80099da:	4631      	mov	r1, r6
 80099dc:	4628      	mov	r0, r5
 80099de:	47b8      	blx	r7
 80099e0:	3001      	adds	r0, #1
 80099e2:	d10c      	bne.n	80099fe <_printf_float+0x412>
 80099e4:	e65d      	b.n	80096a2 <_printf_float+0xb6>
 80099e6:	2301      	movs	r3, #1
 80099e8:	465a      	mov	r2, fp
 80099ea:	4631      	mov	r1, r6
 80099ec:	4628      	mov	r0, r5
 80099ee:	47b8      	blx	r7
 80099f0:	3001      	adds	r0, #1
 80099f2:	f43f ae56 	beq.w	80096a2 <_printf_float+0xb6>
 80099f6:	f108 0801 	add.w	r8, r8, #1
 80099fa:	45d0      	cmp	r8, sl
 80099fc:	dbf3      	blt.n	80099e6 <_printf_float+0x3fa>
 80099fe:	464b      	mov	r3, r9
 8009a00:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009a04:	e6df      	b.n	80097c6 <_printf_float+0x1da>
 8009a06:	f04f 0800 	mov.w	r8, #0
 8009a0a:	f104 0b1a 	add.w	fp, r4, #26
 8009a0e:	e7f4      	b.n	80099fa <_printf_float+0x40e>
 8009a10:	2301      	movs	r3, #1
 8009a12:	4642      	mov	r2, r8
 8009a14:	e7e1      	b.n	80099da <_printf_float+0x3ee>
 8009a16:	2301      	movs	r3, #1
 8009a18:	464a      	mov	r2, r9
 8009a1a:	4631      	mov	r1, r6
 8009a1c:	4628      	mov	r0, r5
 8009a1e:	47b8      	blx	r7
 8009a20:	3001      	adds	r0, #1
 8009a22:	f43f ae3e 	beq.w	80096a2 <_printf_float+0xb6>
 8009a26:	f108 0801 	add.w	r8, r8, #1
 8009a2a:	68e3      	ldr	r3, [r4, #12]
 8009a2c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009a2e:	1a5b      	subs	r3, r3, r1
 8009a30:	4543      	cmp	r3, r8
 8009a32:	dcf0      	bgt.n	8009a16 <_printf_float+0x42a>
 8009a34:	e6fc      	b.n	8009830 <_printf_float+0x244>
 8009a36:	f04f 0800 	mov.w	r8, #0
 8009a3a:	f104 0919 	add.w	r9, r4, #25
 8009a3e:	e7f4      	b.n	8009a2a <_printf_float+0x43e>

08009a40 <_printf_common>:
 8009a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a44:	4616      	mov	r6, r2
 8009a46:	4698      	mov	r8, r3
 8009a48:	688a      	ldr	r2, [r1, #8]
 8009a4a:	690b      	ldr	r3, [r1, #16]
 8009a4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009a50:	4293      	cmp	r3, r2
 8009a52:	bfb8      	it	lt
 8009a54:	4613      	movlt	r3, r2
 8009a56:	6033      	str	r3, [r6, #0]
 8009a58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009a5c:	4607      	mov	r7, r0
 8009a5e:	460c      	mov	r4, r1
 8009a60:	b10a      	cbz	r2, 8009a66 <_printf_common+0x26>
 8009a62:	3301      	adds	r3, #1
 8009a64:	6033      	str	r3, [r6, #0]
 8009a66:	6823      	ldr	r3, [r4, #0]
 8009a68:	0699      	lsls	r1, r3, #26
 8009a6a:	bf42      	ittt	mi
 8009a6c:	6833      	ldrmi	r3, [r6, #0]
 8009a6e:	3302      	addmi	r3, #2
 8009a70:	6033      	strmi	r3, [r6, #0]
 8009a72:	6825      	ldr	r5, [r4, #0]
 8009a74:	f015 0506 	ands.w	r5, r5, #6
 8009a78:	d106      	bne.n	8009a88 <_printf_common+0x48>
 8009a7a:	f104 0a19 	add.w	sl, r4, #25
 8009a7e:	68e3      	ldr	r3, [r4, #12]
 8009a80:	6832      	ldr	r2, [r6, #0]
 8009a82:	1a9b      	subs	r3, r3, r2
 8009a84:	42ab      	cmp	r3, r5
 8009a86:	dc26      	bgt.n	8009ad6 <_printf_common+0x96>
 8009a88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009a8c:	6822      	ldr	r2, [r4, #0]
 8009a8e:	3b00      	subs	r3, #0
 8009a90:	bf18      	it	ne
 8009a92:	2301      	movne	r3, #1
 8009a94:	0692      	lsls	r2, r2, #26
 8009a96:	d42b      	bmi.n	8009af0 <_printf_common+0xb0>
 8009a98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009a9c:	4641      	mov	r1, r8
 8009a9e:	4638      	mov	r0, r7
 8009aa0:	47c8      	blx	r9
 8009aa2:	3001      	adds	r0, #1
 8009aa4:	d01e      	beq.n	8009ae4 <_printf_common+0xa4>
 8009aa6:	6823      	ldr	r3, [r4, #0]
 8009aa8:	6922      	ldr	r2, [r4, #16]
 8009aaa:	f003 0306 	and.w	r3, r3, #6
 8009aae:	2b04      	cmp	r3, #4
 8009ab0:	bf02      	ittt	eq
 8009ab2:	68e5      	ldreq	r5, [r4, #12]
 8009ab4:	6833      	ldreq	r3, [r6, #0]
 8009ab6:	1aed      	subeq	r5, r5, r3
 8009ab8:	68a3      	ldr	r3, [r4, #8]
 8009aba:	bf0c      	ite	eq
 8009abc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ac0:	2500      	movne	r5, #0
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	bfc4      	itt	gt
 8009ac6:	1a9b      	subgt	r3, r3, r2
 8009ac8:	18ed      	addgt	r5, r5, r3
 8009aca:	2600      	movs	r6, #0
 8009acc:	341a      	adds	r4, #26
 8009ace:	42b5      	cmp	r5, r6
 8009ad0:	d11a      	bne.n	8009b08 <_printf_common+0xc8>
 8009ad2:	2000      	movs	r0, #0
 8009ad4:	e008      	b.n	8009ae8 <_printf_common+0xa8>
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	4652      	mov	r2, sl
 8009ada:	4641      	mov	r1, r8
 8009adc:	4638      	mov	r0, r7
 8009ade:	47c8      	blx	r9
 8009ae0:	3001      	adds	r0, #1
 8009ae2:	d103      	bne.n	8009aec <_printf_common+0xac>
 8009ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009aec:	3501      	adds	r5, #1
 8009aee:	e7c6      	b.n	8009a7e <_printf_common+0x3e>
 8009af0:	18e1      	adds	r1, r4, r3
 8009af2:	1c5a      	adds	r2, r3, #1
 8009af4:	2030      	movs	r0, #48	@ 0x30
 8009af6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009afa:	4422      	add	r2, r4
 8009afc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009b00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009b04:	3302      	adds	r3, #2
 8009b06:	e7c7      	b.n	8009a98 <_printf_common+0x58>
 8009b08:	2301      	movs	r3, #1
 8009b0a:	4622      	mov	r2, r4
 8009b0c:	4641      	mov	r1, r8
 8009b0e:	4638      	mov	r0, r7
 8009b10:	47c8      	blx	r9
 8009b12:	3001      	adds	r0, #1
 8009b14:	d0e6      	beq.n	8009ae4 <_printf_common+0xa4>
 8009b16:	3601      	adds	r6, #1
 8009b18:	e7d9      	b.n	8009ace <_printf_common+0x8e>
	...

08009b1c <_printf_i>:
 8009b1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b20:	7e0f      	ldrb	r7, [r1, #24]
 8009b22:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009b24:	2f78      	cmp	r7, #120	@ 0x78
 8009b26:	4691      	mov	r9, r2
 8009b28:	4680      	mov	r8, r0
 8009b2a:	460c      	mov	r4, r1
 8009b2c:	469a      	mov	sl, r3
 8009b2e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009b32:	d807      	bhi.n	8009b44 <_printf_i+0x28>
 8009b34:	2f62      	cmp	r7, #98	@ 0x62
 8009b36:	d80a      	bhi.n	8009b4e <_printf_i+0x32>
 8009b38:	2f00      	cmp	r7, #0
 8009b3a:	f000 80d2 	beq.w	8009ce2 <_printf_i+0x1c6>
 8009b3e:	2f58      	cmp	r7, #88	@ 0x58
 8009b40:	f000 80b9 	beq.w	8009cb6 <_printf_i+0x19a>
 8009b44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009b48:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009b4c:	e03a      	b.n	8009bc4 <_printf_i+0xa8>
 8009b4e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009b52:	2b15      	cmp	r3, #21
 8009b54:	d8f6      	bhi.n	8009b44 <_printf_i+0x28>
 8009b56:	a101      	add	r1, pc, #4	@ (adr r1, 8009b5c <_printf_i+0x40>)
 8009b58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b5c:	08009bb5 	.word	0x08009bb5
 8009b60:	08009bc9 	.word	0x08009bc9
 8009b64:	08009b45 	.word	0x08009b45
 8009b68:	08009b45 	.word	0x08009b45
 8009b6c:	08009b45 	.word	0x08009b45
 8009b70:	08009b45 	.word	0x08009b45
 8009b74:	08009bc9 	.word	0x08009bc9
 8009b78:	08009b45 	.word	0x08009b45
 8009b7c:	08009b45 	.word	0x08009b45
 8009b80:	08009b45 	.word	0x08009b45
 8009b84:	08009b45 	.word	0x08009b45
 8009b88:	08009cc9 	.word	0x08009cc9
 8009b8c:	08009bf3 	.word	0x08009bf3
 8009b90:	08009c83 	.word	0x08009c83
 8009b94:	08009b45 	.word	0x08009b45
 8009b98:	08009b45 	.word	0x08009b45
 8009b9c:	08009ceb 	.word	0x08009ceb
 8009ba0:	08009b45 	.word	0x08009b45
 8009ba4:	08009bf3 	.word	0x08009bf3
 8009ba8:	08009b45 	.word	0x08009b45
 8009bac:	08009b45 	.word	0x08009b45
 8009bb0:	08009c8b 	.word	0x08009c8b
 8009bb4:	6833      	ldr	r3, [r6, #0]
 8009bb6:	1d1a      	adds	r2, r3, #4
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	6032      	str	r2, [r6, #0]
 8009bbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009bc0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	e09d      	b.n	8009d04 <_printf_i+0x1e8>
 8009bc8:	6833      	ldr	r3, [r6, #0]
 8009bca:	6820      	ldr	r0, [r4, #0]
 8009bcc:	1d19      	adds	r1, r3, #4
 8009bce:	6031      	str	r1, [r6, #0]
 8009bd0:	0606      	lsls	r6, r0, #24
 8009bd2:	d501      	bpl.n	8009bd8 <_printf_i+0xbc>
 8009bd4:	681d      	ldr	r5, [r3, #0]
 8009bd6:	e003      	b.n	8009be0 <_printf_i+0xc4>
 8009bd8:	0645      	lsls	r5, r0, #25
 8009bda:	d5fb      	bpl.n	8009bd4 <_printf_i+0xb8>
 8009bdc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009be0:	2d00      	cmp	r5, #0
 8009be2:	da03      	bge.n	8009bec <_printf_i+0xd0>
 8009be4:	232d      	movs	r3, #45	@ 0x2d
 8009be6:	426d      	negs	r5, r5
 8009be8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009bec:	4859      	ldr	r0, [pc, #356]	@ (8009d54 <_printf_i+0x238>)
 8009bee:	230a      	movs	r3, #10
 8009bf0:	e011      	b.n	8009c16 <_printf_i+0xfa>
 8009bf2:	6821      	ldr	r1, [r4, #0]
 8009bf4:	6833      	ldr	r3, [r6, #0]
 8009bf6:	0608      	lsls	r0, r1, #24
 8009bf8:	f853 5b04 	ldr.w	r5, [r3], #4
 8009bfc:	d402      	bmi.n	8009c04 <_printf_i+0xe8>
 8009bfe:	0649      	lsls	r1, r1, #25
 8009c00:	bf48      	it	mi
 8009c02:	b2ad      	uxthmi	r5, r5
 8009c04:	2f6f      	cmp	r7, #111	@ 0x6f
 8009c06:	4853      	ldr	r0, [pc, #332]	@ (8009d54 <_printf_i+0x238>)
 8009c08:	6033      	str	r3, [r6, #0]
 8009c0a:	bf14      	ite	ne
 8009c0c:	230a      	movne	r3, #10
 8009c0e:	2308      	moveq	r3, #8
 8009c10:	2100      	movs	r1, #0
 8009c12:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009c16:	6866      	ldr	r6, [r4, #4]
 8009c18:	60a6      	str	r6, [r4, #8]
 8009c1a:	2e00      	cmp	r6, #0
 8009c1c:	bfa2      	ittt	ge
 8009c1e:	6821      	ldrge	r1, [r4, #0]
 8009c20:	f021 0104 	bicge.w	r1, r1, #4
 8009c24:	6021      	strge	r1, [r4, #0]
 8009c26:	b90d      	cbnz	r5, 8009c2c <_printf_i+0x110>
 8009c28:	2e00      	cmp	r6, #0
 8009c2a:	d04b      	beq.n	8009cc4 <_printf_i+0x1a8>
 8009c2c:	4616      	mov	r6, r2
 8009c2e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009c32:	fb03 5711 	mls	r7, r3, r1, r5
 8009c36:	5dc7      	ldrb	r7, [r0, r7]
 8009c38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009c3c:	462f      	mov	r7, r5
 8009c3e:	42bb      	cmp	r3, r7
 8009c40:	460d      	mov	r5, r1
 8009c42:	d9f4      	bls.n	8009c2e <_printf_i+0x112>
 8009c44:	2b08      	cmp	r3, #8
 8009c46:	d10b      	bne.n	8009c60 <_printf_i+0x144>
 8009c48:	6823      	ldr	r3, [r4, #0]
 8009c4a:	07df      	lsls	r7, r3, #31
 8009c4c:	d508      	bpl.n	8009c60 <_printf_i+0x144>
 8009c4e:	6923      	ldr	r3, [r4, #16]
 8009c50:	6861      	ldr	r1, [r4, #4]
 8009c52:	4299      	cmp	r1, r3
 8009c54:	bfde      	ittt	le
 8009c56:	2330      	movle	r3, #48	@ 0x30
 8009c58:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009c5c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009c60:	1b92      	subs	r2, r2, r6
 8009c62:	6122      	str	r2, [r4, #16]
 8009c64:	f8cd a000 	str.w	sl, [sp]
 8009c68:	464b      	mov	r3, r9
 8009c6a:	aa03      	add	r2, sp, #12
 8009c6c:	4621      	mov	r1, r4
 8009c6e:	4640      	mov	r0, r8
 8009c70:	f7ff fee6 	bl	8009a40 <_printf_common>
 8009c74:	3001      	adds	r0, #1
 8009c76:	d14a      	bne.n	8009d0e <_printf_i+0x1f2>
 8009c78:	f04f 30ff 	mov.w	r0, #4294967295
 8009c7c:	b004      	add	sp, #16
 8009c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c82:	6823      	ldr	r3, [r4, #0]
 8009c84:	f043 0320 	orr.w	r3, r3, #32
 8009c88:	6023      	str	r3, [r4, #0]
 8009c8a:	4833      	ldr	r0, [pc, #204]	@ (8009d58 <_printf_i+0x23c>)
 8009c8c:	2778      	movs	r7, #120	@ 0x78
 8009c8e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009c92:	6823      	ldr	r3, [r4, #0]
 8009c94:	6831      	ldr	r1, [r6, #0]
 8009c96:	061f      	lsls	r7, r3, #24
 8009c98:	f851 5b04 	ldr.w	r5, [r1], #4
 8009c9c:	d402      	bmi.n	8009ca4 <_printf_i+0x188>
 8009c9e:	065f      	lsls	r7, r3, #25
 8009ca0:	bf48      	it	mi
 8009ca2:	b2ad      	uxthmi	r5, r5
 8009ca4:	6031      	str	r1, [r6, #0]
 8009ca6:	07d9      	lsls	r1, r3, #31
 8009ca8:	bf44      	itt	mi
 8009caa:	f043 0320 	orrmi.w	r3, r3, #32
 8009cae:	6023      	strmi	r3, [r4, #0]
 8009cb0:	b11d      	cbz	r5, 8009cba <_printf_i+0x19e>
 8009cb2:	2310      	movs	r3, #16
 8009cb4:	e7ac      	b.n	8009c10 <_printf_i+0xf4>
 8009cb6:	4827      	ldr	r0, [pc, #156]	@ (8009d54 <_printf_i+0x238>)
 8009cb8:	e7e9      	b.n	8009c8e <_printf_i+0x172>
 8009cba:	6823      	ldr	r3, [r4, #0]
 8009cbc:	f023 0320 	bic.w	r3, r3, #32
 8009cc0:	6023      	str	r3, [r4, #0]
 8009cc2:	e7f6      	b.n	8009cb2 <_printf_i+0x196>
 8009cc4:	4616      	mov	r6, r2
 8009cc6:	e7bd      	b.n	8009c44 <_printf_i+0x128>
 8009cc8:	6833      	ldr	r3, [r6, #0]
 8009cca:	6825      	ldr	r5, [r4, #0]
 8009ccc:	6961      	ldr	r1, [r4, #20]
 8009cce:	1d18      	adds	r0, r3, #4
 8009cd0:	6030      	str	r0, [r6, #0]
 8009cd2:	062e      	lsls	r6, r5, #24
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	d501      	bpl.n	8009cdc <_printf_i+0x1c0>
 8009cd8:	6019      	str	r1, [r3, #0]
 8009cda:	e002      	b.n	8009ce2 <_printf_i+0x1c6>
 8009cdc:	0668      	lsls	r0, r5, #25
 8009cde:	d5fb      	bpl.n	8009cd8 <_printf_i+0x1bc>
 8009ce0:	8019      	strh	r1, [r3, #0]
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	6123      	str	r3, [r4, #16]
 8009ce6:	4616      	mov	r6, r2
 8009ce8:	e7bc      	b.n	8009c64 <_printf_i+0x148>
 8009cea:	6833      	ldr	r3, [r6, #0]
 8009cec:	1d1a      	adds	r2, r3, #4
 8009cee:	6032      	str	r2, [r6, #0]
 8009cf0:	681e      	ldr	r6, [r3, #0]
 8009cf2:	6862      	ldr	r2, [r4, #4]
 8009cf4:	2100      	movs	r1, #0
 8009cf6:	4630      	mov	r0, r6
 8009cf8:	f7f6 fa8a 	bl	8000210 <memchr>
 8009cfc:	b108      	cbz	r0, 8009d02 <_printf_i+0x1e6>
 8009cfe:	1b80      	subs	r0, r0, r6
 8009d00:	6060      	str	r0, [r4, #4]
 8009d02:	6863      	ldr	r3, [r4, #4]
 8009d04:	6123      	str	r3, [r4, #16]
 8009d06:	2300      	movs	r3, #0
 8009d08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009d0c:	e7aa      	b.n	8009c64 <_printf_i+0x148>
 8009d0e:	6923      	ldr	r3, [r4, #16]
 8009d10:	4632      	mov	r2, r6
 8009d12:	4649      	mov	r1, r9
 8009d14:	4640      	mov	r0, r8
 8009d16:	47d0      	blx	sl
 8009d18:	3001      	adds	r0, #1
 8009d1a:	d0ad      	beq.n	8009c78 <_printf_i+0x15c>
 8009d1c:	6823      	ldr	r3, [r4, #0]
 8009d1e:	079b      	lsls	r3, r3, #30
 8009d20:	d413      	bmi.n	8009d4a <_printf_i+0x22e>
 8009d22:	68e0      	ldr	r0, [r4, #12]
 8009d24:	9b03      	ldr	r3, [sp, #12]
 8009d26:	4298      	cmp	r0, r3
 8009d28:	bfb8      	it	lt
 8009d2a:	4618      	movlt	r0, r3
 8009d2c:	e7a6      	b.n	8009c7c <_printf_i+0x160>
 8009d2e:	2301      	movs	r3, #1
 8009d30:	4632      	mov	r2, r6
 8009d32:	4649      	mov	r1, r9
 8009d34:	4640      	mov	r0, r8
 8009d36:	47d0      	blx	sl
 8009d38:	3001      	adds	r0, #1
 8009d3a:	d09d      	beq.n	8009c78 <_printf_i+0x15c>
 8009d3c:	3501      	adds	r5, #1
 8009d3e:	68e3      	ldr	r3, [r4, #12]
 8009d40:	9903      	ldr	r1, [sp, #12]
 8009d42:	1a5b      	subs	r3, r3, r1
 8009d44:	42ab      	cmp	r3, r5
 8009d46:	dcf2      	bgt.n	8009d2e <_printf_i+0x212>
 8009d48:	e7eb      	b.n	8009d22 <_printf_i+0x206>
 8009d4a:	2500      	movs	r5, #0
 8009d4c:	f104 0619 	add.w	r6, r4, #25
 8009d50:	e7f5      	b.n	8009d3e <_printf_i+0x222>
 8009d52:	bf00      	nop
 8009d54:	0800d54e 	.word	0x0800d54e
 8009d58:	0800d55f 	.word	0x0800d55f

08009d5c <std>:
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	b510      	push	{r4, lr}
 8009d60:	4604      	mov	r4, r0
 8009d62:	e9c0 3300 	strd	r3, r3, [r0]
 8009d66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009d6a:	6083      	str	r3, [r0, #8]
 8009d6c:	8181      	strh	r1, [r0, #12]
 8009d6e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009d70:	81c2      	strh	r2, [r0, #14]
 8009d72:	6183      	str	r3, [r0, #24]
 8009d74:	4619      	mov	r1, r3
 8009d76:	2208      	movs	r2, #8
 8009d78:	305c      	adds	r0, #92	@ 0x5c
 8009d7a:	f000 f914 	bl	8009fa6 <memset>
 8009d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8009db4 <std+0x58>)
 8009d80:	6263      	str	r3, [r4, #36]	@ 0x24
 8009d82:	4b0d      	ldr	r3, [pc, #52]	@ (8009db8 <std+0x5c>)
 8009d84:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009d86:	4b0d      	ldr	r3, [pc, #52]	@ (8009dbc <std+0x60>)
 8009d88:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8009dc0 <std+0x64>)
 8009d8c:	6323      	str	r3, [r4, #48]	@ 0x30
 8009d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8009dc4 <std+0x68>)
 8009d90:	6224      	str	r4, [r4, #32]
 8009d92:	429c      	cmp	r4, r3
 8009d94:	d006      	beq.n	8009da4 <std+0x48>
 8009d96:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009d9a:	4294      	cmp	r4, r2
 8009d9c:	d002      	beq.n	8009da4 <std+0x48>
 8009d9e:	33d0      	adds	r3, #208	@ 0xd0
 8009da0:	429c      	cmp	r4, r3
 8009da2:	d105      	bne.n	8009db0 <std+0x54>
 8009da4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009dac:	f000 b978 	b.w	800a0a0 <__retarget_lock_init_recursive>
 8009db0:	bd10      	pop	{r4, pc}
 8009db2:	bf00      	nop
 8009db4:	08009f21 	.word	0x08009f21
 8009db8:	08009f43 	.word	0x08009f43
 8009dbc:	08009f7b 	.word	0x08009f7b
 8009dc0:	08009f9f 	.word	0x08009f9f
 8009dc4:	200006c0 	.word	0x200006c0

08009dc8 <stdio_exit_handler>:
 8009dc8:	4a02      	ldr	r2, [pc, #8]	@ (8009dd4 <stdio_exit_handler+0xc>)
 8009dca:	4903      	ldr	r1, [pc, #12]	@ (8009dd8 <stdio_exit_handler+0x10>)
 8009dcc:	4803      	ldr	r0, [pc, #12]	@ (8009ddc <stdio_exit_handler+0x14>)
 8009dce:	f000 b869 	b.w	8009ea4 <_fwalk_sglue>
 8009dd2:	bf00      	nop
 8009dd4:	20000040 	.word	0x20000040
 8009dd8:	0800b9fd 	.word	0x0800b9fd
 8009ddc:	20000050 	.word	0x20000050

08009de0 <cleanup_stdio>:
 8009de0:	6841      	ldr	r1, [r0, #4]
 8009de2:	4b0c      	ldr	r3, [pc, #48]	@ (8009e14 <cleanup_stdio+0x34>)
 8009de4:	4299      	cmp	r1, r3
 8009de6:	b510      	push	{r4, lr}
 8009de8:	4604      	mov	r4, r0
 8009dea:	d001      	beq.n	8009df0 <cleanup_stdio+0x10>
 8009dec:	f001 fe06 	bl	800b9fc <_fflush_r>
 8009df0:	68a1      	ldr	r1, [r4, #8]
 8009df2:	4b09      	ldr	r3, [pc, #36]	@ (8009e18 <cleanup_stdio+0x38>)
 8009df4:	4299      	cmp	r1, r3
 8009df6:	d002      	beq.n	8009dfe <cleanup_stdio+0x1e>
 8009df8:	4620      	mov	r0, r4
 8009dfa:	f001 fdff 	bl	800b9fc <_fflush_r>
 8009dfe:	68e1      	ldr	r1, [r4, #12]
 8009e00:	4b06      	ldr	r3, [pc, #24]	@ (8009e1c <cleanup_stdio+0x3c>)
 8009e02:	4299      	cmp	r1, r3
 8009e04:	d004      	beq.n	8009e10 <cleanup_stdio+0x30>
 8009e06:	4620      	mov	r0, r4
 8009e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e0c:	f001 bdf6 	b.w	800b9fc <_fflush_r>
 8009e10:	bd10      	pop	{r4, pc}
 8009e12:	bf00      	nop
 8009e14:	200006c0 	.word	0x200006c0
 8009e18:	20000728 	.word	0x20000728
 8009e1c:	20000790 	.word	0x20000790

08009e20 <global_stdio_init.part.0>:
 8009e20:	b510      	push	{r4, lr}
 8009e22:	4b0b      	ldr	r3, [pc, #44]	@ (8009e50 <global_stdio_init.part.0+0x30>)
 8009e24:	4c0b      	ldr	r4, [pc, #44]	@ (8009e54 <global_stdio_init.part.0+0x34>)
 8009e26:	4a0c      	ldr	r2, [pc, #48]	@ (8009e58 <global_stdio_init.part.0+0x38>)
 8009e28:	601a      	str	r2, [r3, #0]
 8009e2a:	4620      	mov	r0, r4
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	2104      	movs	r1, #4
 8009e30:	f7ff ff94 	bl	8009d5c <std>
 8009e34:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009e38:	2201      	movs	r2, #1
 8009e3a:	2109      	movs	r1, #9
 8009e3c:	f7ff ff8e 	bl	8009d5c <std>
 8009e40:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009e44:	2202      	movs	r2, #2
 8009e46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e4a:	2112      	movs	r1, #18
 8009e4c:	f7ff bf86 	b.w	8009d5c <std>
 8009e50:	200007f8 	.word	0x200007f8
 8009e54:	200006c0 	.word	0x200006c0
 8009e58:	08009dc9 	.word	0x08009dc9

08009e5c <__sfp_lock_acquire>:
 8009e5c:	4801      	ldr	r0, [pc, #4]	@ (8009e64 <__sfp_lock_acquire+0x8>)
 8009e5e:	f000 b920 	b.w	800a0a2 <__retarget_lock_acquire_recursive>
 8009e62:	bf00      	nop
 8009e64:	20000801 	.word	0x20000801

08009e68 <__sfp_lock_release>:
 8009e68:	4801      	ldr	r0, [pc, #4]	@ (8009e70 <__sfp_lock_release+0x8>)
 8009e6a:	f000 b91b 	b.w	800a0a4 <__retarget_lock_release_recursive>
 8009e6e:	bf00      	nop
 8009e70:	20000801 	.word	0x20000801

08009e74 <__sinit>:
 8009e74:	b510      	push	{r4, lr}
 8009e76:	4604      	mov	r4, r0
 8009e78:	f7ff fff0 	bl	8009e5c <__sfp_lock_acquire>
 8009e7c:	6a23      	ldr	r3, [r4, #32]
 8009e7e:	b11b      	cbz	r3, 8009e88 <__sinit+0x14>
 8009e80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e84:	f7ff bff0 	b.w	8009e68 <__sfp_lock_release>
 8009e88:	4b04      	ldr	r3, [pc, #16]	@ (8009e9c <__sinit+0x28>)
 8009e8a:	6223      	str	r3, [r4, #32]
 8009e8c:	4b04      	ldr	r3, [pc, #16]	@ (8009ea0 <__sinit+0x2c>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d1f5      	bne.n	8009e80 <__sinit+0xc>
 8009e94:	f7ff ffc4 	bl	8009e20 <global_stdio_init.part.0>
 8009e98:	e7f2      	b.n	8009e80 <__sinit+0xc>
 8009e9a:	bf00      	nop
 8009e9c:	08009de1 	.word	0x08009de1
 8009ea0:	200007f8 	.word	0x200007f8

08009ea4 <_fwalk_sglue>:
 8009ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ea8:	4607      	mov	r7, r0
 8009eaa:	4688      	mov	r8, r1
 8009eac:	4614      	mov	r4, r2
 8009eae:	2600      	movs	r6, #0
 8009eb0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009eb4:	f1b9 0901 	subs.w	r9, r9, #1
 8009eb8:	d505      	bpl.n	8009ec6 <_fwalk_sglue+0x22>
 8009eba:	6824      	ldr	r4, [r4, #0]
 8009ebc:	2c00      	cmp	r4, #0
 8009ebe:	d1f7      	bne.n	8009eb0 <_fwalk_sglue+0xc>
 8009ec0:	4630      	mov	r0, r6
 8009ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ec6:	89ab      	ldrh	r3, [r5, #12]
 8009ec8:	2b01      	cmp	r3, #1
 8009eca:	d907      	bls.n	8009edc <_fwalk_sglue+0x38>
 8009ecc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009ed0:	3301      	adds	r3, #1
 8009ed2:	d003      	beq.n	8009edc <_fwalk_sglue+0x38>
 8009ed4:	4629      	mov	r1, r5
 8009ed6:	4638      	mov	r0, r7
 8009ed8:	47c0      	blx	r8
 8009eda:	4306      	orrs	r6, r0
 8009edc:	3568      	adds	r5, #104	@ 0x68
 8009ede:	e7e9      	b.n	8009eb4 <_fwalk_sglue+0x10>

08009ee0 <siprintf>:
 8009ee0:	b40e      	push	{r1, r2, r3}
 8009ee2:	b500      	push	{lr}
 8009ee4:	b09c      	sub	sp, #112	@ 0x70
 8009ee6:	ab1d      	add	r3, sp, #116	@ 0x74
 8009ee8:	9002      	str	r0, [sp, #8]
 8009eea:	9006      	str	r0, [sp, #24]
 8009eec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009ef0:	4809      	ldr	r0, [pc, #36]	@ (8009f18 <siprintf+0x38>)
 8009ef2:	9107      	str	r1, [sp, #28]
 8009ef4:	9104      	str	r1, [sp, #16]
 8009ef6:	4909      	ldr	r1, [pc, #36]	@ (8009f1c <siprintf+0x3c>)
 8009ef8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009efc:	9105      	str	r1, [sp, #20]
 8009efe:	6800      	ldr	r0, [r0, #0]
 8009f00:	9301      	str	r3, [sp, #4]
 8009f02:	a902      	add	r1, sp, #8
 8009f04:	f001 fbfa 	bl	800b6fc <_svfiprintf_r>
 8009f08:	9b02      	ldr	r3, [sp, #8]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	701a      	strb	r2, [r3, #0]
 8009f0e:	b01c      	add	sp, #112	@ 0x70
 8009f10:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f14:	b003      	add	sp, #12
 8009f16:	4770      	bx	lr
 8009f18:	2000004c 	.word	0x2000004c
 8009f1c:	ffff0208 	.word	0xffff0208

08009f20 <__sread>:
 8009f20:	b510      	push	{r4, lr}
 8009f22:	460c      	mov	r4, r1
 8009f24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f28:	f000 f86c 	bl	800a004 <_read_r>
 8009f2c:	2800      	cmp	r0, #0
 8009f2e:	bfab      	itete	ge
 8009f30:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009f32:	89a3      	ldrhlt	r3, [r4, #12]
 8009f34:	181b      	addge	r3, r3, r0
 8009f36:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009f3a:	bfac      	ite	ge
 8009f3c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009f3e:	81a3      	strhlt	r3, [r4, #12]
 8009f40:	bd10      	pop	{r4, pc}

08009f42 <__swrite>:
 8009f42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f46:	461f      	mov	r7, r3
 8009f48:	898b      	ldrh	r3, [r1, #12]
 8009f4a:	05db      	lsls	r3, r3, #23
 8009f4c:	4605      	mov	r5, r0
 8009f4e:	460c      	mov	r4, r1
 8009f50:	4616      	mov	r6, r2
 8009f52:	d505      	bpl.n	8009f60 <__swrite+0x1e>
 8009f54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f58:	2302      	movs	r3, #2
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	f000 f840 	bl	8009fe0 <_lseek_r>
 8009f60:	89a3      	ldrh	r3, [r4, #12]
 8009f62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009f6a:	81a3      	strh	r3, [r4, #12]
 8009f6c:	4632      	mov	r2, r6
 8009f6e:	463b      	mov	r3, r7
 8009f70:	4628      	mov	r0, r5
 8009f72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f76:	f000 b857 	b.w	800a028 <_write_r>

08009f7a <__sseek>:
 8009f7a:	b510      	push	{r4, lr}
 8009f7c:	460c      	mov	r4, r1
 8009f7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f82:	f000 f82d 	bl	8009fe0 <_lseek_r>
 8009f86:	1c43      	adds	r3, r0, #1
 8009f88:	89a3      	ldrh	r3, [r4, #12]
 8009f8a:	bf15      	itete	ne
 8009f8c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009f8e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009f92:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009f96:	81a3      	strheq	r3, [r4, #12]
 8009f98:	bf18      	it	ne
 8009f9a:	81a3      	strhne	r3, [r4, #12]
 8009f9c:	bd10      	pop	{r4, pc}

08009f9e <__sclose>:
 8009f9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fa2:	f000 b80d 	b.w	8009fc0 <_close_r>

08009fa6 <memset>:
 8009fa6:	4402      	add	r2, r0
 8009fa8:	4603      	mov	r3, r0
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d100      	bne.n	8009fb0 <memset+0xa>
 8009fae:	4770      	bx	lr
 8009fb0:	f803 1b01 	strb.w	r1, [r3], #1
 8009fb4:	e7f9      	b.n	8009faa <memset+0x4>
	...

08009fb8 <_localeconv_r>:
 8009fb8:	4800      	ldr	r0, [pc, #0]	@ (8009fbc <_localeconv_r+0x4>)
 8009fba:	4770      	bx	lr
 8009fbc:	2000018c 	.word	0x2000018c

08009fc0 <_close_r>:
 8009fc0:	b538      	push	{r3, r4, r5, lr}
 8009fc2:	4d06      	ldr	r5, [pc, #24]	@ (8009fdc <_close_r+0x1c>)
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	4604      	mov	r4, r0
 8009fc8:	4608      	mov	r0, r1
 8009fca:	602b      	str	r3, [r5, #0]
 8009fcc:	f7f9 fdba 	bl	8003b44 <_close>
 8009fd0:	1c43      	adds	r3, r0, #1
 8009fd2:	d102      	bne.n	8009fda <_close_r+0x1a>
 8009fd4:	682b      	ldr	r3, [r5, #0]
 8009fd6:	b103      	cbz	r3, 8009fda <_close_r+0x1a>
 8009fd8:	6023      	str	r3, [r4, #0]
 8009fda:	bd38      	pop	{r3, r4, r5, pc}
 8009fdc:	200007fc 	.word	0x200007fc

08009fe0 <_lseek_r>:
 8009fe0:	b538      	push	{r3, r4, r5, lr}
 8009fe2:	4d07      	ldr	r5, [pc, #28]	@ (800a000 <_lseek_r+0x20>)
 8009fe4:	4604      	mov	r4, r0
 8009fe6:	4608      	mov	r0, r1
 8009fe8:	4611      	mov	r1, r2
 8009fea:	2200      	movs	r2, #0
 8009fec:	602a      	str	r2, [r5, #0]
 8009fee:	461a      	mov	r2, r3
 8009ff0:	f7f9 fdcf 	bl	8003b92 <_lseek>
 8009ff4:	1c43      	adds	r3, r0, #1
 8009ff6:	d102      	bne.n	8009ffe <_lseek_r+0x1e>
 8009ff8:	682b      	ldr	r3, [r5, #0]
 8009ffa:	b103      	cbz	r3, 8009ffe <_lseek_r+0x1e>
 8009ffc:	6023      	str	r3, [r4, #0]
 8009ffe:	bd38      	pop	{r3, r4, r5, pc}
 800a000:	200007fc 	.word	0x200007fc

0800a004 <_read_r>:
 800a004:	b538      	push	{r3, r4, r5, lr}
 800a006:	4d07      	ldr	r5, [pc, #28]	@ (800a024 <_read_r+0x20>)
 800a008:	4604      	mov	r4, r0
 800a00a:	4608      	mov	r0, r1
 800a00c:	4611      	mov	r1, r2
 800a00e:	2200      	movs	r2, #0
 800a010:	602a      	str	r2, [r5, #0]
 800a012:	461a      	mov	r2, r3
 800a014:	f7f9 fd5d 	bl	8003ad2 <_read>
 800a018:	1c43      	adds	r3, r0, #1
 800a01a:	d102      	bne.n	800a022 <_read_r+0x1e>
 800a01c:	682b      	ldr	r3, [r5, #0]
 800a01e:	b103      	cbz	r3, 800a022 <_read_r+0x1e>
 800a020:	6023      	str	r3, [r4, #0]
 800a022:	bd38      	pop	{r3, r4, r5, pc}
 800a024:	200007fc 	.word	0x200007fc

0800a028 <_write_r>:
 800a028:	b538      	push	{r3, r4, r5, lr}
 800a02a:	4d07      	ldr	r5, [pc, #28]	@ (800a048 <_write_r+0x20>)
 800a02c:	4604      	mov	r4, r0
 800a02e:	4608      	mov	r0, r1
 800a030:	4611      	mov	r1, r2
 800a032:	2200      	movs	r2, #0
 800a034:	602a      	str	r2, [r5, #0]
 800a036:	461a      	mov	r2, r3
 800a038:	f7f9 fd68 	bl	8003b0c <_write>
 800a03c:	1c43      	adds	r3, r0, #1
 800a03e:	d102      	bne.n	800a046 <_write_r+0x1e>
 800a040:	682b      	ldr	r3, [r5, #0]
 800a042:	b103      	cbz	r3, 800a046 <_write_r+0x1e>
 800a044:	6023      	str	r3, [r4, #0]
 800a046:	bd38      	pop	{r3, r4, r5, pc}
 800a048:	200007fc 	.word	0x200007fc

0800a04c <__errno>:
 800a04c:	4b01      	ldr	r3, [pc, #4]	@ (800a054 <__errno+0x8>)
 800a04e:	6818      	ldr	r0, [r3, #0]
 800a050:	4770      	bx	lr
 800a052:	bf00      	nop
 800a054:	2000004c 	.word	0x2000004c

0800a058 <__libc_init_array>:
 800a058:	b570      	push	{r4, r5, r6, lr}
 800a05a:	4d0d      	ldr	r5, [pc, #52]	@ (800a090 <__libc_init_array+0x38>)
 800a05c:	4c0d      	ldr	r4, [pc, #52]	@ (800a094 <__libc_init_array+0x3c>)
 800a05e:	1b64      	subs	r4, r4, r5
 800a060:	10a4      	asrs	r4, r4, #2
 800a062:	2600      	movs	r6, #0
 800a064:	42a6      	cmp	r6, r4
 800a066:	d109      	bne.n	800a07c <__libc_init_array+0x24>
 800a068:	4d0b      	ldr	r5, [pc, #44]	@ (800a098 <__libc_init_array+0x40>)
 800a06a:	4c0c      	ldr	r4, [pc, #48]	@ (800a09c <__libc_init_array+0x44>)
 800a06c:	f003 fa44 	bl	800d4f8 <_init>
 800a070:	1b64      	subs	r4, r4, r5
 800a072:	10a4      	asrs	r4, r4, #2
 800a074:	2600      	movs	r6, #0
 800a076:	42a6      	cmp	r6, r4
 800a078:	d105      	bne.n	800a086 <__libc_init_array+0x2e>
 800a07a:	bd70      	pop	{r4, r5, r6, pc}
 800a07c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a080:	4798      	blx	r3
 800a082:	3601      	adds	r6, #1
 800a084:	e7ee      	b.n	800a064 <__libc_init_array+0xc>
 800a086:	f855 3b04 	ldr.w	r3, [r5], #4
 800a08a:	4798      	blx	r3
 800a08c:	3601      	adds	r6, #1
 800a08e:	e7f2      	b.n	800a076 <__libc_init_array+0x1e>
 800a090:	0800da90 	.word	0x0800da90
 800a094:	0800da90 	.word	0x0800da90
 800a098:	0800da90 	.word	0x0800da90
 800a09c:	0800da94 	.word	0x0800da94

0800a0a0 <__retarget_lock_init_recursive>:
 800a0a0:	4770      	bx	lr

0800a0a2 <__retarget_lock_acquire_recursive>:
 800a0a2:	4770      	bx	lr

0800a0a4 <__retarget_lock_release_recursive>:
 800a0a4:	4770      	bx	lr

0800a0a6 <quorem>:
 800a0a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0aa:	6903      	ldr	r3, [r0, #16]
 800a0ac:	690c      	ldr	r4, [r1, #16]
 800a0ae:	42a3      	cmp	r3, r4
 800a0b0:	4607      	mov	r7, r0
 800a0b2:	db7e      	blt.n	800a1b2 <quorem+0x10c>
 800a0b4:	3c01      	subs	r4, #1
 800a0b6:	f101 0814 	add.w	r8, r1, #20
 800a0ba:	00a3      	lsls	r3, r4, #2
 800a0bc:	f100 0514 	add.w	r5, r0, #20
 800a0c0:	9300      	str	r3, [sp, #0]
 800a0c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a0c6:	9301      	str	r3, [sp, #4]
 800a0c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a0cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a0d0:	3301      	adds	r3, #1
 800a0d2:	429a      	cmp	r2, r3
 800a0d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a0d8:	fbb2 f6f3 	udiv	r6, r2, r3
 800a0dc:	d32e      	bcc.n	800a13c <quorem+0x96>
 800a0de:	f04f 0a00 	mov.w	sl, #0
 800a0e2:	46c4      	mov	ip, r8
 800a0e4:	46ae      	mov	lr, r5
 800a0e6:	46d3      	mov	fp, sl
 800a0e8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a0ec:	b298      	uxth	r0, r3
 800a0ee:	fb06 a000 	mla	r0, r6, r0, sl
 800a0f2:	0c02      	lsrs	r2, r0, #16
 800a0f4:	0c1b      	lsrs	r3, r3, #16
 800a0f6:	fb06 2303 	mla	r3, r6, r3, r2
 800a0fa:	f8de 2000 	ldr.w	r2, [lr]
 800a0fe:	b280      	uxth	r0, r0
 800a100:	b292      	uxth	r2, r2
 800a102:	1a12      	subs	r2, r2, r0
 800a104:	445a      	add	r2, fp
 800a106:	f8de 0000 	ldr.w	r0, [lr]
 800a10a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a10e:	b29b      	uxth	r3, r3
 800a110:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a114:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a118:	b292      	uxth	r2, r2
 800a11a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a11e:	45e1      	cmp	r9, ip
 800a120:	f84e 2b04 	str.w	r2, [lr], #4
 800a124:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a128:	d2de      	bcs.n	800a0e8 <quorem+0x42>
 800a12a:	9b00      	ldr	r3, [sp, #0]
 800a12c:	58eb      	ldr	r3, [r5, r3]
 800a12e:	b92b      	cbnz	r3, 800a13c <quorem+0x96>
 800a130:	9b01      	ldr	r3, [sp, #4]
 800a132:	3b04      	subs	r3, #4
 800a134:	429d      	cmp	r5, r3
 800a136:	461a      	mov	r2, r3
 800a138:	d32f      	bcc.n	800a19a <quorem+0xf4>
 800a13a:	613c      	str	r4, [r7, #16]
 800a13c:	4638      	mov	r0, r7
 800a13e:	f001 f979 	bl	800b434 <__mcmp>
 800a142:	2800      	cmp	r0, #0
 800a144:	db25      	blt.n	800a192 <quorem+0xec>
 800a146:	4629      	mov	r1, r5
 800a148:	2000      	movs	r0, #0
 800a14a:	f858 2b04 	ldr.w	r2, [r8], #4
 800a14e:	f8d1 c000 	ldr.w	ip, [r1]
 800a152:	fa1f fe82 	uxth.w	lr, r2
 800a156:	fa1f f38c 	uxth.w	r3, ip
 800a15a:	eba3 030e 	sub.w	r3, r3, lr
 800a15e:	4403      	add	r3, r0
 800a160:	0c12      	lsrs	r2, r2, #16
 800a162:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a166:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a16a:	b29b      	uxth	r3, r3
 800a16c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a170:	45c1      	cmp	r9, r8
 800a172:	f841 3b04 	str.w	r3, [r1], #4
 800a176:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a17a:	d2e6      	bcs.n	800a14a <quorem+0xa4>
 800a17c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a180:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a184:	b922      	cbnz	r2, 800a190 <quorem+0xea>
 800a186:	3b04      	subs	r3, #4
 800a188:	429d      	cmp	r5, r3
 800a18a:	461a      	mov	r2, r3
 800a18c:	d30b      	bcc.n	800a1a6 <quorem+0x100>
 800a18e:	613c      	str	r4, [r7, #16]
 800a190:	3601      	adds	r6, #1
 800a192:	4630      	mov	r0, r6
 800a194:	b003      	add	sp, #12
 800a196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a19a:	6812      	ldr	r2, [r2, #0]
 800a19c:	3b04      	subs	r3, #4
 800a19e:	2a00      	cmp	r2, #0
 800a1a0:	d1cb      	bne.n	800a13a <quorem+0x94>
 800a1a2:	3c01      	subs	r4, #1
 800a1a4:	e7c6      	b.n	800a134 <quorem+0x8e>
 800a1a6:	6812      	ldr	r2, [r2, #0]
 800a1a8:	3b04      	subs	r3, #4
 800a1aa:	2a00      	cmp	r2, #0
 800a1ac:	d1ef      	bne.n	800a18e <quorem+0xe8>
 800a1ae:	3c01      	subs	r4, #1
 800a1b0:	e7ea      	b.n	800a188 <quorem+0xe2>
 800a1b2:	2000      	movs	r0, #0
 800a1b4:	e7ee      	b.n	800a194 <quorem+0xee>
	...

0800a1b8 <_dtoa_r>:
 800a1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1bc:	69c7      	ldr	r7, [r0, #28]
 800a1be:	b099      	sub	sp, #100	@ 0x64
 800a1c0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a1c4:	ec55 4b10 	vmov	r4, r5, d0
 800a1c8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a1ca:	9109      	str	r1, [sp, #36]	@ 0x24
 800a1cc:	4683      	mov	fp, r0
 800a1ce:	920e      	str	r2, [sp, #56]	@ 0x38
 800a1d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a1d2:	b97f      	cbnz	r7, 800a1f4 <_dtoa_r+0x3c>
 800a1d4:	2010      	movs	r0, #16
 800a1d6:	f000 fdfd 	bl	800add4 <malloc>
 800a1da:	4602      	mov	r2, r0
 800a1dc:	f8cb 001c 	str.w	r0, [fp, #28]
 800a1e0:	b920      	cbnz	r0, 800a1ec <_dtoa_r+0x34>
 800a1e2:	4ba7      	ldr	r3, [pc, #668]	@ (800a480 <_dtoa_r+0x2c8>)
 800a1e4:	21ef      	movs	r1, #239	@ 0xef
 800a1e6:	48a7      	ldr	r0, [pc, #668]	@ (800a484 <_dtoa_r+0x2cc>)
 800a1e8:	f001 fc68 	bl	800babc <__assert_func>
 800a1ec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a1f0:	6007      	str	r7, [r0, #0]
 800a1f2:	60c7      	str	r7, [r0, #12]
 800a1f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a1f8:	6819      	ldr	r1, [r3, #0]
 800a1fa:	b159      	cbz	r1, 800a214 <_dtoa_r+0x5c>
 800a1fc:	685a      	ldr	r2, [r3, #4]
 800a1fe:	604a      	str	r2, [r1, #4]
 800a200:	2301      	movs	r3, #1
 800a202:	4093      	lsls	r3, r2
 800a204:	608b      	str	r3, [r1, #8]
 800a206:	4658      	mov	r0, fp
 800a208:	f000 feda 	bl	800afc0 <_Bfree>
 800a20c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a210:	2200      	movs	r2, #0
 800a212:	601a      	str	r2, [r3, #0]
 800a214:	1e2b      	subs	r3, r5, #0
 800a216:	bfb9      	ittee	lt
 800a218:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a21c:	9303      	strlt	r3, [sp, #12]
 800a21e:	2300      	movge	r3, #0
 800a220:	6033      	strge	r3, [r6, #0]
 800a222:	9f03      	ldr	r7, [sp, #12]
 800a224:	4b98      	ldr	r3, [pc, #608]	@ (800a488 <_dtoa_r+0x2d0>)
 800a226:	bfbc      	itt	lt
 800a228:	2201      	movlt	r2, #1
 800a22a:	6032      	strlt	r2, [r6, #0]
 800a22c:	43bb      	bics	r3, r7
 800a22e:	d112      	bne.n	800a256 <_dtoa_r+0x9e>
 800a230:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a232:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a236:	6013      	str	r3, [r2, #0]
 800a238:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a23c:	4323      	orrs	r3, r4
 800a23e:	f000 854d 	beq.w	800acdc <_dtoa_r+0xb24>
 800a242:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a244:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a49c <_dtoa_r+0x2e4>
 800a248:	2b00      	cmp	r3, #0
 800a24a:	f000 854f 	beq.w	800acec <_dtoa_r+0xb34>
 800a24e:	f10a 0303 	add.w	r3, sl, #3
 800a252:	f000 bd49 	b.w	800ace8 <_dtoa_r+0xb30>
 800a256:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a25a:	2200      	movs	r2, #0
 800a25c:	ec51 0b17 	vmov	r0, r1, d7
 800a260:	2300      	movs	r3, #0
 800a262:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a266:	f7f6 fc4f 	bl	8000b08 <__aeabi_dcmpeq>
 800a26a:	4680      	mov	r8, r0
 800a26c:	b158      	cbz	r0, 800a286 <_dtoa_r+0xce>
 800a26e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a270:	2301      	movs	r3, #1
 800a272:	6013      	str	r3, [r2, #0]
 800a274:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a276:	b113      	cbz	r3, 800a27e <_dtoa_r+0xc6>
 800a278:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a27a:	4b84      	ldr	r3, [pc, #528]	@ (800a48c <_dtoa_r+0x2d4>)
 800a27c:	6013      	str	r3, [r2, #0]
 800a27e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a4a0 <_dtoa_r+0x2e8>
 800a282:	f000 bd33 	b.w	800acec <_dtoa_r+0xb34>
 800a286:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a28a:	aa16      	add	r2, sp, #88	@ 0x58
 800a28c:	a917      	add	r1, sp, #92	@ 0x5c
 800a28e:	4658      	mov	r0, fp
 800a290:	f001 f980 	bl	800b594 <__d2b>
 800a294:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a298:	4681      	mov	r9, r0
 800a29a:	2e00      	cmp	r6, #0
 800a29c:	d077      	beq.n	800a38e <_dtoa_r+0x1d6>
 800a29e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a2a0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a2a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a2a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a2ac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a2b0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a2b4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a2b8:	4619      	mov	r1, r3
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	4b74      	ldr	r3, [pc, #464]	@ (800a490 <_dtoa_r+0x2d8>)
 800a2be:	f7f6 f803 	bl	80002c8 <__aeabi_dsub>
 800a2c2:	a369      	add	r3, pc, #420	@ (adr r3, 800a468 <_dtoa_r+0x2b0>)
 800a2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c8:	f7f6 f9b6 	bl	8000638 <__aeabi_dmul>
 800a2cc:	a368      	add	r3, pc, #416	@ (adr r3, 800a470 <_dtoa_r+0x2b8>)
 800a2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d2:	f7f5 fffb 	bl	80002cc <__adddf3>
 800a2d6:	4604      	mov	r4, r0
 800a2d8:	4630      	mov	r0, r6
 800a2da:	460d      	mov	r5, r1
 800a2dc:	f7f6 f942 	bl	8000564 <__aeabi_i2d>
 800a2e0:	a365      	add	r3, pc, #404	@ (adr r3, 800a478 <_dtoa_r+0x2c0>)
 800a2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e6:	f7f6 f9a7 	bl	8000638 <__aeabi_dmul>
 800a2ea:	4602      	mov	r2, r0
 800a2ec:	460b      	mov	r3, r1
 800a2ee:	4620      	mov	r0, r4
 800a2f0:	4629      	mov	r1, r5
 800a2f2:	f7f5 ffeb 	bl	80002cc <__adddf3>
 800a2f6:	4604      	mov	r4, r0
 800a2f8:	460d      	mov	r5, r1
 800a2fa:	f7f6 fc4d 	bl	8000b98 <__aeabi_d2iz>
 800a2fe:	2200      	movs	r2, #0
 800a300:	4607      	mov	r7, r0
 800a302:	2300      	movs	r3, #0
 800a304:	4620      	mov	r0, r4
 800a306:	4629      	mov	r1, r5
 800a308:	f7f6 fc08 	bl	8000b1c <__aeabi_dcmplt>
 800a30c:	b140      	cbz	r0, 800a320 <_dtoa_r+0x168>
 800a30e:	4638      	mov	r0, r7
 800a310:	f7f6 f928 	bl	8000564 <__aeabi_i2d>
 800a314:	4622      	mov	r2, r4
 800a316:	462b      	mov	r3, r5
 800a318:	f7f6 fbf6 	bl	8000b08 <__aeabi_dcmpeq>
 800a31c:	b900      	cbnz	r0, 800a320 <_dtoa_r+0x168>
 800a31e:	3f01      	subs	r7, #1
 800a320:	2f16      	cmp	r7, #22
 800a322:	d851      	bhi.n	800a3c8 <_dtoa_r+0x210>
 800a324:	4b5b      	ldr	r3, [pc, #364]	@ (800a494 <_dtoa_r+0x2dc>)
 800a326:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a32e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a332:	f7f6 fbf3 	bl	8000b1c <__aeabi_dcmplt>
 800a336:	2800      	cmp	r0, #0
 800a338:	d048      	beq.n	800a3cc <_dtoa_r+0x214>
 800a33a:	3f01      	subs	r7, #1
 800a33c:	2300      	movs	r3, #0
 800a33e:	9312      	str	r3, [sp, #72]	@ 0x48
 800a340:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a342:	1b9b      	subs	r3, r3, r6
 800a344:	1e5a      	subs	r2, r3, #1
 800a346:	bf44      	itt	mi
 800a348:	f1c3 0801 	rsbmi	r8, r3, #1
 800a34c:	2300      	movmi	r3, #0
 800a34e:	9208      	str	r2, [sp, #32]
 800a350:	bf54      	ite	pl
 800a352:	f04f 0800 	movpl.w	r8, #0
 800a356:	9308      	strmi	r3, [sp, #32]
 800a358:	2f00      	cmp	r7, #0
 800a35a:	db39      	blt.n	800a3d0 <_dtoa_r+0x218>
 800a35c:	9b08      	ldr	r3, [sp, #32]
 800a35e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a360:	443b      	add	r3, r7
 800a362:	9308      	str	r3, [sp, #32]
 800a364:	2300      	movs	r3, #0
 800a366:	930a      	str	r3, [sp, #40]	@ 0x28
 800a368:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a36a:	2b09      	cmp	r3, #9
 800a36c:	d864      	bhi.n	800a438 <_dtoa_r+0x280>
 800a36e:	2b05      	cmp	r3, #5
 800a370:	bfc4      	itt	gt
 800a372:	3b04      	subgt	r3, #4
 800a374:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a376:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a378:	f1a3 0302 	sub.w	r3, r3, #2
 800a37c:	bfcc      	ite	gt
 800a37e:	2400      	movgt	r4, #0
 800a380:	2401      	movle	r4, #1
 800a382:	2b03      	cmp	r3, #3
 800a384:	d863      	bhi.n	800a44e <_dtoa_r+0x296>
 800a386:	e8df f003 	tbb	[pc, r3]
 800a38a:	372a      	.short	0x372a
 800a38c:	5535      	.short	0x5535
 800a38e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a392:	441e      	add	r6, r3
 800a394:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a398:	2b20      	cmp	r3, #32
 800a39a:	bfc1      	itttt	gt
 800a39c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a3a0:	409f      	lslgt	r7, r3
 800a3a2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a3a6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a3aa:	bfd6      	itet	le
 800a3ac:	f1c3 0320 	rsble	r3, r3, #32
 800a3b0:	ea47 0003 	orrgt.w	r0, r7, r3
 800a3b4:	fa04 f003 	lslle.w	r0, r4, r3
 800a3b8:	f7f6 f8c4 	bl	8000544 <__aeabi_ui2d>
 800a3bc:	2201      	movs	r2, #1
 800a3be:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a3c2:	3e01      	subs	r6, #1
 800a3c4:	9214      	str	r2, [sp, #80]	@ 0x50
 800a3c6:	e777      	b.n	800a2b8 <_dtoa_r+0x100>
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	e7b8      	b.n	800a33e <_dtoa_r+0x186>
 800a3cc:	9012      	str	r0, [sp, #72]	@ 0x48
 800a3ce:	e7b7      	b.n	800a340 <_dtoa_r+0x188>
 800a3d0:	427b      	negs	r3, r7
 800a3d2:	930a      	str	r3, [sp, #40]	@ 0x28
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	eba8 0807 	sub.w	r8, r8, r7
 800a3da:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a3dc:	e7c4      	b.n	800a368 <_dtoa_r+0x1b0>
 800a3de:	2300      	movs	r3, #0
 800a3e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a3e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	dc35      	bgt.n	800a454 <_dtoa_r+0x29c>
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	9300      	str	r3, [sp, #0]
 800a3ec:	9307      	str	r3, [sp, #28]
 800a3ee:	461a      	mov	r2, r3
 800a3f0:	920e      	str	r2, [sp, #56]	@ 0x38
 800a3f2:	e00b      	b.n	800a40c <_dtoa_r+0x254>
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	e7f3      	b.n	800a3e0 <_dtoa_r+0x228>
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a3fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3fe:	18fb      	adds	r3, r7, r3
 800a400:	9300      	str	r3, [sp, #0]
 800a402:	3301      	adds	r3, #1
 800a404:	2b01      	cmp	r3, #1
 800a406:	9307      	str	r3, [sp, #28]
 800a408:	bfb8      	it	lt
 800a40a:	2301      	movlt	r3, #1
 800a40c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a410:	2100      	movs	r1, #0
 800a412:	2204      	movs	r2, #4
 800a414:	f102 0514 	add.w	r5, r2, #20
 800a418:	429d      	cmp	r5, r3
 800a41a:	d91f      	bls.n	800a45c <_dtoa_r+0x2a4>
 800a41c:	6041      	str	r1, [r0, #4]
 800a41e:	4658      	mov	r0, fp
 800a420:	f000 fd8e 	bl	800af40 <_Balloc>
 800a424:	4682      	mov	sl, r0
 800a426:	2800      	cmp	r0, #0
 800a428:	d13c      	bne.n	800a4a4 <_dtoa_r+0x2ec>
 800a42a:	4b1b      	ldr	r3, [pc, #108]	@ (800a498 <_dtoa_r+0x2e0>)
 800a42c:	4602      	mov	r2, r0
 800a42e:	f240 11af 	movw	r1, #431	@ 0x1af
 800a432:	e6d8      	b.n	800a1e6 <_dtoa_r+0x2e>
 800a434:	2301      	movs	r3, #1
 800a436:	e7e0      	b.n	800a3fa <_dtoa_r+0x242>
 800a438:	2401      	movs	r4, #1
 800a43a:	2300      	movs	r3, #0
 800a43c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a43e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a440:	f04f 33ff 	mov.w	r3, #4294967295
 800a444:	9300      	str	r3, [sp, #0]
 800a446:	9307      	str	r3, [sp, #28]
 800a448:	2200      	movs	r2, #0
 800a44a:	2312      	movs	r3, #18
 800a44c:	e7d0      	b.n	800a3f0 <_dtoa_r+0x238>
 800a44e:	2301      	movs	r3, #1
 800a450:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a452:	e7f5      	b.n	800a440 <_dtoa_r+0x288>
 800a454:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a456:	9300      	str	r3, [sp, #0]
 800a458:	9307      	str	r3, [sp, #28]
 800a45a:	e7d7      	b.n	800a40c <_dtoa_r+0x254>
 800a45c:	3101      	adds	r1, #1
 800a45e:	0052      	lsls	r2, r2, #1
 800a460:	e7d8      	b.n	800a414 <_dtoa_r+0x25c>
 800a462:	bf00      	nop
 800a464:	f3af 8000 	nop.w
 800a468:	636f4361 	.word	0x636f4361
 800a46c:	3fd287a7 	.word	0x3fd287a7
 800a470:	8b60c8b3 	.word	0x8b60c8b3
 800a474:	3fc68a28 	.word	0x3fc68a28
 800a478:	509f79fb 	.word	0x509f79fb
 800a47c:	3fd34413 	.word	0x3fd34413
 800a480:	0800d57d 	.word	0x0800d57d
 800a484:	0800d594 	.word	0x0800d594
 800a488:	7ff00000 	.word	0x7ff00000
 800a48c:	0800d54d 	.word	0x0800d54d
 800a490:	3ff80000 	.word	0x3ff80000
 800a494:	0800d690 	.word	0x0800d690
 800a498:	0800d5ec 	.word	0x0800d5ec
 800a49c:	0800d579 	.word	0x0800d579
 800a4a0:	0800d54c 	.word	0x0800d54c
 800a4a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a4a8:	6018      	str	r0, [r3, #0]
 800a4aa:	9b07      	ldr	r3, [sp, #28]
 800a4ac:	2b0e      	cmp	r3, #14
 800a4ae:	f200 80a4 	bhi.w	800a5fa <_dtoa_r+0x442>
 800a4b2:	2c00      	cmp	r4, #0
 800a4b4:	f000 80a1 	beq.w	800a5fa <_dtoa_r+0x442>
 800a4b8:	2f00      	cmp	r7, #0
 800a4ba:	dd33      	ble.n	800a524 <_dtoa_r+0x36c>
 800a4bc:	4bad      	ldr	r3, [pc, #692]	@ (800a774 <_dtoa_r+0x5bc>)
 800a4be:	f007 020f 	and.w	r2, r7, #15
 800a4c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4c6:	ed93 7b00 	vldr	d7, [r3]
 800a4ca:	05f8      	lsls	r0, r7, #23
 800a4cc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a4d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a4d4:	d516      	bpl.n	800a504 <_dtoa_r+0x34c>
 800a4d6:	4ba8      	ldr	r3, [pc, #672]	@ (800a778 <_dtoa_r+0x5c0>)
 800a4d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a4dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a4e0:	f7f6 f9d4 	bl	800088c <__aeabi_ddiv>
 800a4e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4e8:	f004 040f 	and.w	r4, r4, #15
 800a4ec:	2603      	movs	r6, #3
 800a4ee:	4da2      	ldr	r5, [pc, #648]	@ (800a778 <_dtoa_r+0x5c0>)
 800a4f0:	b954      	cbnz	r4, 800a508 <_dtoa_r+0x350>
 800a4f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4fa:	f7f6 f9c7 	bl	800088c <__aeabi_ddiv>
 800a4fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a502:	e028      	b.n	800a556 <_dtoa_r+0x39e>
 800a504:	2602      	movs	r6, #2
 800a506:	e7f2      	b.n	800a4ee <_dtoa_r+0x336>
 800a508:	07e1      	lsls	r1, r4, #31
 800a50a:	d508      	bpl.n	800a51e <_dtoa_r+0x366>
 800a50c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a510:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a514:	f7f6 f890 	bl	8000638 <__aeabi_dmul>
 800a518:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a51c:	3601      	adds	r6, #1
 800a51e:	1064      	asrs	r4, r4, #1
 800a520:	3508      	adds	r5, #8
 800a522:	e7e5      	b.n	800a4f0 <_dtoa_r+0x338>
 800a524:	f000 80d2 	beq.w	800a6cc <_dtoa_r+0x514>
 800a528:	427c      	negs	r4, r7
 800a52a:	4b92      	ldr	r3, [pc, #584]	@ (800a774 <_dtoa_r+0x5bc>)
 800a52c:	4d92      	ldr	r5, [pc, #584]	@ (800a778 <_dtoa_r+0x5c0>)
 800a52e:	f004 020f 	and.w	r2, r4, #15
 800a532:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a53a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a53e:	f7f6 f87b 	bl	8000638 <__aeabi_dmul>
 800a542:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a546:	1124      	asrs	r4, r4, #4
 800a548:	2300      	movs	r3, #0
 800a54a:	2602      	movs	r6, #2
 800a54c:	2c00      	cmp	r4, #0
 800a54e:	f040 80b2 	bne.w	800a6b6 <_dtoa_r+0x4fe>
 800a552:	2b00      	cmp	r3, #0
 800a554:	d1d3      	bne.n	800a4fe <_dtoa_r+0x346>
 800a556:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a558:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	f000 80b7 	beq.w	800a6d0 <_dtoa_r+0x518>
 800a562:	4b86      	ldr	r3, [pc, #536]	@ (800a77c <_dtoa_r+0x5c4>)
 800a564:	2200      	movs	r2, #0
 800a566:	4620      	mov	r0, r4
 800a568:	4629      	mov	r1, r5
 800a56a:	f7f6 fad7 	bl	8000b1c <__aeabi_dcmplt>
 800a56e:	2800      	cmp	r0, #0
 800a570:	f000 80ae 	beq.w	800a6d0 <_dtoa_r+0x518>
 800a574:	9b07      	ldr	r3, [sp, #28]
 800a576:	2b00      	cmp	r3, #0
 800a578:	f000 80aa 	beq.w	800a6d0 <_dtoa_r+0x518>
 800a57c:	9b00      	ldr	r3, [sp, #0]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	dd37      	ble.n	800a5f2 <_dtoa_r+0x43a>
 800a582:	1e7b      	subs	r3, r7, #1
 800a584:	9304      	str	r3, [sp, #16]
 800a586:	4620      	mov	r0, r4
 800a588:	4b7d      	ldr	r3, [pc, #500]	@ (800a780 <_dtoa_r+0x5c8>)
 800a58a:	2200      	movs	r2, #0
 800a58c:	4629      	mov	r1, r5
 800a58e:	f7f6 f853 	bl	8000638 <__aeabi_dmul>
 800a592:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a596:	9c00      	ldr	r4, [sp, #0]
 800a598:	3601      	adds	r6, #1
 800a59a:	4630      	mov	r0, r6
 800a59c:	f7f5 ffe2 	bl	8000564 <__aeabi_i2d>
 800a5a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a5a4:	f7f6 f848 	bl	8000638 <__aeabi_dmul>
 800a5a8:	4b76      	ldr	r3, [pc, #472]	@ (800a784 <_dtoa_r+0x5cc>)
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	f7f5 fe8e 	bl	80002cc <__adddf3>
 800a5b0:	4605      	mov	r5, r0
 800a5b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a5b6:	2c00      	cmp	r4, #0
 800a5b8:	f040 808d 	bne.w	800a6d6 <_dtoa_r+0x51e>
 800a5bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5c0:	4b71      	ldr	r3, [pc, #452]	@ (800a788 <_dtoa_r+0x5d0>)
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	f7f5 fe80 	bl	80002c8 <__aeabi_dsub>
 800a5c8:	4602      	mov	r2, r0
 800a5ca:	460b      	mov	r3, r1
 800a5cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a5d0:	462a      	mov	r2, r5
 800a5d2:	4633      	mov	r3, r6
 800a5d4:	f7f6 fac0 	bl	8000b58 <__aeabi_dcmpgt>
 800a5d8:	2800      	cmp	r0, #0
 800a5da:	f040 828b 	bne.w	800aaf4 <_dtoa_r+0x93c>
 800a5de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5e2:	462a      	mov	r2, r5
 800a5e4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a5e8:	f7f6 fa98 	bl	8000b1c <__aeabi_dcmplt>
 800a5ec:	2800      	cmp	r0, #0
 800a5ee:	f040 8128 	bne.w	800a842 <_dtoa_r+0x68a>
 800a5f2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a5f6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a5fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	f2c0 815a 	blt.w	800a8b6 <_dtoa_r+0x6fe>
 800a602:	2f0e      	cmp	r7, #14
 800a604:	f300 8157 	bgt.w	800a8b6 <_dtoa_r+0x6fe>
 800a608:	4b5a      	ldr	r3, [pc, #360]	@ (800a774 <_dtoa_r+0x5bc>)
 800a60a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a60e:	ed93 7b00 	vldr	d7, [r3]
 800a612:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a614:	2b00      	cmp	r3, #0
 800a616:	ed8d 7b00 	vstr	d7, [sp]
 800a61a:	da03      	bge.n	800a624 <_dtoa_r+0x46c>
 800a61c:	9b07      	ldr	r3, [sp, #28]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	f340 8101 	ble.w	800a826 <_dtoa_r+0x66e>
 800a624:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a628:	4656      	mov	r6, sl
 800a62a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a62e:	4620      	mov	r0, r4
 800a630:	4629      	mov	r1, r5
 800a632:	f7f6 f92b 	bl	800088c <__aeabi_ddiv>
 800a636:	f7f6 faaf 	bl	8000b98 <__aeabi_d2iz>
 800a63a:	4680      	mov	r8, r0
 800a63c:	f7f5 ff92 	bl	8000564 <__aeabi_i2d>
 800a640:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a644:	f7f5 fff8 	bl	8000638 <__aeabi_dmul>
 800a648:	4602      	mov	r2, r0
 800a64a:	460b      	mov	r3, r1
 800a64c:	4620      	mov	r0, r4
 800a64e:	4629      	mov	r1, r5
 800a650:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a654:	f7f5 fe38 	bl	80002c8 <__aeabi_dsub>
 800a658:	f806 4b01 	strb.w	r4, [r6], #1
 800a65c:	9d07      	ldr	r5, [sp, #28]
 800a65e:	eba6 040a 	sub.w	r4, r6, sl
 800a662:	42a5      	cmp	r5, r4
 800a664:	4602      	mov	r2, r0
 800a666:	460b      	mov	r3, r1
 800a668:	f040 8117 	bne.w	800a89a <_dtoa_r+0x6e2>
 800a66c:	f7f5 fe2e 	bl	80002cc <__adddf3>
 800a670:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a674:	4604      	mov	r4, r0
 800a676:	460d      	mov	r5, r1
 800a678:	f7f6 fa6e 	bl	8000b58 <__aeabi_dcmpgt>
 800a67c:	2800      	cmp	r0, #0
 800a67e:	f040 80f9 	bne.w	800a874 <_dtoa_r+0x6bc>
 800a682:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a686:	4620      	mov	r0, r4
 800a688:	4629      	mov	r1, r5
 800a68a:	f7f6 fa3d 	bl	8000b08 <__aeabi_dcmpeq>
 800a68e:	b118      	cbz	r0, 800a698 <_dtoa_r+0x4e0>
 800a690:	f018 0f01 	tst.w	r8, #1
 800a694:	f040 80ee 	bne.w	800a874 <_dtoa_r+0x6bc>
 800a698:	4649      	mov	r1, r9
 800a69a:	4658      	mov	r0, fp
 800a69c:	f000 fc90 	bl	800afc0 <_Bfree>
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	7033      	strb	r3, [r6, #0]
 800a6a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a6a6:	3701      	adds	r7, #1
 800a6a8:	601f      	str	r7, [r3, #0]
 800a6aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	f000 831d 	beq.w	800acec <_dtoa_r+0xb34>
 800a6b2:	601e      	str	r6, [r3, #0]
 800a6b4:	e31a      	b.n	800acec <_dtoa_r+0xb34>
 800a6b6:	07e2      	lsls	r2, r4, #31
 800a6b8:	d505      	bpl.n	800a6c6 <_dtoa_r+0x50e>
 800a6ba:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a6be:	f7f5 ffbb 	bl	8000638 <__aeabi_dmul>
 800a6c2:	3601      	adds	r6, #1
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	1064      	asrs	r4, r4, #1
 800a6c8:	3508      	adds	r5, #8
 800a6ca:	e73f      	b.n	800a54c <_dtoa_r+0x394>
 800a6cc:	2602      	movs	r6, #2
 800a6ce:	e742      	b.n	800a556 <_dtoa_r+0x39e>
 800a6d0:	9c07      	ldr	r4, [sp, #28]
 800a6d2:	9704      	str	r7, [sp, #16]
 800a6d4:	e761      	b.n	800a59a <_dtoa_r+0x3e2>
 800a6d6:	4b27      	ldr	r3, [pc, #156]	@ (800a774 <_dtoa_r+0x5bc>)
 800a6d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a6da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a6de:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a6e2:	4454      	add	r4, sl
 800a6e4:	2900      	cmp	r1, #0
 800a6e6:	d053      	beq.n	800a790 <_dtoa_r+0x5d8>
 800a6e8:	4928      	ldr	r1, [pc, #160]	@ (800a78c <_dtoa_r+0x5d4>)
 800a6ea:	2000      	movs	r0, #0
 800a6ec:	f7f6 f8ce 	bl	800088c <__aeabi_ddiv>
 800a6f0:	4633      	mov	r3, r6
 800a6f2:	462a      	mov	r2, r5
 800a6f4:	f7f5 fde8 	bl	80002c8 <__aeabi_dsub>
 800a6f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a6fc:	4656      	mov	r6, sl
 800a6fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a702:	f7f6 fa49 	bl	8000b98 <__aeabi_d2iz>
 800a706:	4605      	mov	r5, r0
 800a708:	f7f5 ff2c 	bl	8000564 <__aeabi_i2d>
 800a70c:	4602      	mov	r2, r0
 800a70e:	460b      	mov	r3, r1
 800a710:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a714:	f7f5 fdd8 	bl	80002c8 <__aeabi_dsub>
 800a718:	3530      	adds	r5, #48	@ 0x30
 800a71a:	4602      	mov	r2, r0
 800a71c:	460b      	mov	r3, r1
 800a71e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a722:	f806 5b01 	strb.w	r5, [r6], #1
 800a726:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a72a:	f7f6 f9f7 	bl	8000b1c <__aeabi_dcmplt>
 800a72e:	2800      	cmp	r0, #0
 800a730:	d171      	bne.n	800a816 <_dtoa_r+0x65e>
 800a732:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a736:	4911      	ldr	r1, [pc, #68]	@ (800a77c <_dtoa_r+0x5c4>)
 800a738:	2000      	movs	r0, #0
 800a73a:	f7f5 fdc5 	bl	80002c8 <__aeabi_dsub>
 800a73e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a742:	f7f6 f9eb 	bl	8000b1c <__aeabi_dcmplt>
 800a746:	2800      	cmp	r0, #0
 800a748:	f040 8095 	bne.w	800a876 <_dtoa_r+0x6be>
 800a74c:	42a6      	cmp	r6, r4
 800a74e:	f43f af50 	beq.w	800a5f2 <_dtoa_r+0x43a>
 800a752:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a756:	4b0a      	ldr	r3, [pc, #40]	@ (800a780 <_dtoa_r+0x5c8>)
 800a758:	2200      	movs	r2, #0
 800a75a:	f7f5 ff6d 	bl	8000638 <__aeabi_dmul>
 800a75e:	4b08      	ldr	r3, [pc, #32]	@ (800a780 <_dtoa_r+0x5c8>)
 800a760:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a764:	2200      	movs	r2, #0
 800a766:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a76a:	f7f5 ff65 	bl	8000638 <__aeabi_dmul>
 800a76e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a772:	e7c4      	b.n	800a6fe <_dtoa_r+0x546>
 800a774:	0800d690 	.word	0x0800d690
 800a778:	0800d668 	.word	0x0800d668
 800a77c:	3ff00000 	.word	0x3ff00000
 800a780:	40240000 	.word	0x40240000
 800a784:	401c0000 	.word	0x401c0000
 800a788:	40140000 	.word	0x40140000
 800a78c:	3fe00000 	.word	0x3fe00000
 800a790:	4631      	mov	r1, r6
 800a792:	4628      	mov	r0, r5
 800a794:	f7f5 ff50 	bl	8000638 <__aeabi_dmul>
 800a798:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a79c:	9415      	str	r4, [sp, #84]	@ 0x54
 800a79e:	4656      	mov	r6, sl
 800a7a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7a4:	f7f6 f9f8 	bl	8000b98 <__aeabi_d2iz>
 800a7a8:	4605      	mov	r5, r0
 800a7aa:	f7f5 fedb 	bl	8000564 <__aeabi_i2d>
 800a7ae:	4602      	mov	r2, r0
 800a7b0:	460b      	mov	r3, r1
 800a7b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7b6:	f7f5 fd87 	bl	80002c8 <__aeabi_dsub>
 800a7ba:	3530      	adds	r5, #48	@ 0x30
 800a7bc:	f806 5b01 	strb.w	r5, [r6], #1
 800a7c0:	4602      	mov	r2, r0
 800a7c2:	460b      	mov	r3, r1
 800a7c4:	42a6      	cmp	r6, r4
 800a7c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a7ca:	f04f 0200 	mov.w	r2, #0
 800a7ce:	d124      	bne.n	800a81a <_dtoa_r+0x662>
 800a7d0:	4bac      	ldr	r3, [pc, #688]	@ (800aa84 <_dtoa_r+0x8cc>)
 800a7d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a7d6:	f7f5 fd79 	bl	80002cc <__adddf3>
 800a7da:	4602      	mov	r2, r0
 800a7dc:	460b      	mov	r3, r1
 800a7de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7e2:	f7f6 f9b9 	bl	8000b58 <__aeabi_dcmpgt>
 800a7e6:	2800      	cmp	r0, #0
 800a7e8:	d145      	bne.n	800a876 <_dtoa_r+0x6be>
 800a7ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a7ee:	49a5      	ldr	r1, [pc, #660]	@ (800aa84 <_dtoa_r+0x8cc>)
 800a7f0:	2000      	movs	r0, #0
 800a7f2:	f7f5 fd69 	bl	80002c8 <__aeabi_dsub>
 800a7f6:	4602      	mov	r2, r0
 800a7f8:	460b      	mov	r3, r1
 800a7fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7fe:	f7f6 f98d 	bl	8000b1c <__aeabi_dcmplt>
 800a802:	2800      	cmp	r0, #0
 800a804:	f43f aef5 	beq.w	800a5f2 <_dtoa_r+0x43a>
 800a808:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a80a:	1e73      	subs	r3, r6, #1
 800a80c:	9315      	str	r3, [sp, #84]	@ 0x54
 800a80e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a812:	2b30      	cmp	r3, #48	@ 0x30
 800a814:	d0f8      	beq.n	800a808 <_dtoa_r+0x650>
 800a816:	9f04      	ldr	r7, [sp, #16]
 800a818:	e73e      	b.n	800a698 <_dtoa_r+0x4e0>
 800a81a:	4b9b      	ldr	r3, [pc, #620]	@ (800aa88 <_dtoa_r+0x8d0>)
 800a81c:	f7f5 ff0c 	bl	8000638 <__aeabi_dmul>
 800a820:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a824:	e7bc      	b.n	800a7a0 <_dtoa_r+0x5e8>
 800a826:	d10c      	bne.n	800a842 <_dtoa_r+0x68a>
 800a828:	4b98      	ldr	r3, [pc, #608]	@ (800aa8c <_dtoa_r+0x8d4>)
 800a82a:	2200      	movs	r2, #0
 800a82c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a830:	f7f5 ff02 	bl	8000638 <__aeabi_dmul>
 800a834:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a838:	f7f6 f984 	bl	8000b44 <__aeabi_dcmpge>
 800a83c:	2800      	cmp	r0, #0
 800a83e:	f000 8157 	beq.w	800aaf0 <_dtoa_r+0x938>
 800a842:	2400      	movs	r4, #0
 800a844:	4625      	mov	r5, r4
 800a846:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a848:	43db      	mvns	r3, r3
 800a84a:	9304      	str	r3, [sp, #16]
 800a84c:	4656      	mov	r6, sl
 800a84e:	2700      	movs	r7, #0
 800a850:	4621      	mov	r1, r4
 800a852:	4658      	mov	r0, fp
 800a854:	f000 fbb4 	bl	800afc0 <_Bfree>
 800a858:	2d00      	cmp	r5, #0
 800a85a:	d0dc      	beq.n	800a816 <_dtoa_r+0x65e>
 800a85c:	b12f      	cbz	r7, 800a86a <_dtoa_r+0x6b2>
 800a85e:	42af      	cmp	r7, r5
 800a860:	d003      	beq.n	800a86a <_dtoa_r+0x6b2>
 800a862:	4639      	mov	r1, r7
 800a864:	4658      	mov	r0, fp
 800a866:	f000 fbab 	bl	800afc0 <_Bfree>
 800a86a:	4629      	mov	r1, r5
 800a86c:	4658      	mov	r0, fp
 800a86e:	f000 fba7 	bl	800afc0 <_Bfree>
 800a872:	e7d0      	b.n	800a816 <_dtoa_r+0x65e>
 800a874:	9704      	str	r7, [sp, #16]
 800a876:	4633      	mov	r3, r6
 800a878:	461e      	mov	r6, r3
 800a87a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a87e:	2a39      	cmp	r2, #57	@ 0x39
 800a880:	d107      	bne.n	800a892 <_dtoa_r+0x6da>
 800a882:	459a      	cmp	sl, r3
 800a884:	d1f8      	bne.n	800a878 <_dtoa_r+0x6c0>
 800a886:	9a04      	ldr	r2, [sp, #16]
 800a888:	3201      	adds	r2, #1
 800a88a:	9204      	str	r2, [sp, #16]
 800a88c:	2230      	movs	r2, #48	@ 0x30
 800a88e:	f88a 2000 	strb.w	r2, [sl]
 800a892:	781a      	ldrb	r2, [r3, #0]
 800a894:	3201      	adds	r2, #1
 800a896:	701a      	strb	r2, [r3, #0]
 800a898:	e7bd      	b.n	800a816 <_dtoa_r+0x65e>
 800a89a:	4b7b      	ldr	r3, [pc, #492]	@ (800aa88 <_dtoa_r+0x8d0>)
 800a89c:	2200      	movs	r2, #0
 800a89e:	f7f5 fecb 	bl	8000638 <__aeabi_dmul>
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	4604      	mov	r4, r0
 800a8a8:	460d      	mov	r5, r1
 800a8aa:	f7f6 f92d 	bl	8000b08 <__aeabi_dcmpeq>
 800a8ae:	2800      	cmp	r0, #0
 800a8b0:	f43f aebb 	beq.w	800a62a <_dtoa_r+0x472>
 800a8b4:	e6f0      	b.n	800a698 <_dtoa_r+0x4e0>
 800a8b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a8b8:	2a00      	cmp	r2, #0
 800a8ba:	f000 80db 	beq.w	800aa74 <_dtoa_r+0x8bc>
 800a8be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a8c0:	2a01      	cmp	r2, #1
 800a8c2:	f300 80bf 	bgt.w	800aa44 <_dtoa_r+0x88c>
 800a8c6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a8c8:	2a00      	cmp	r2, #0
 800a8ca:	f000 80b7 	beq.w	800aa3c <_dtoa_r+0x884>
 800a8ce:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a8d2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a8d4:	4646      	mov	r6, r8
 800a8d6:	9a08      	ldr	r2, [sp, #32]
 800a8d8:	2101      	movs	r1, #1
 800a8da:	441a      	add	r2, r3
 800a8dc:	4658      	mov	r0, fp
 800a8de:	4498      	add	r8, r3
 800a8e0:	9208      	str	r2, [sp, #32]
 800a8e2:	f000 fc21 	bl	800b128 <__i2b>
 800a8e6:	4605      	mov	r5, r0
 800a8e8:	b15e      	cbz	r6, 800a902 <_dtoa_r+0x74a>
 800a8ea:	9b08      	ldr	r3, [sp, #32]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	dd08      	ble.n	800a902 <_dtoa_r+0x74a>
 800a8f0:	42b3      	cmp	r3, r6
 800a8f2:	9a08      	ldr	r2, [sp, #32]
 800a8f4:	bfa8      	it	ge
 800a8f6:	4633      	movge	r3, r6
 800a8f8:	eba8 0803 	sub.w	r8, r8, r3
 800a8fc:	1af6      	subs	r6, r6, r3
 800a8fe:	1ad3      	subs	r3, r2, r3
 800a900:	9308      	str	r3, [sp, #32]
 800a902:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a904:	b1f3      	cbz	r3, 800a944 <_dtoa_r+0x78c>
 800a906:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a908:	2b00      	cmp	r3, #0
 800a90a:	f000 80b7 	beq.w	800aa7c <_dtoa_r+0x8c4>
 800a90e:	b18c      	cbz	r4, 800a934 <_dtoa_r+0x77c>
 800a910:	4629      	mov	r1, r5
 800a912:	4622      	mov	r2, r4
 800a914:	4658      	mov	r0, fp
 800a916:	f000 fcc7 	bl	800b2a8 <__pow5mult>
 800a91a:	464a      	mov	r2, r9
 800a91c:	4601      	mov	r1, r0
 800a91e:	4605      	mov	r5, r0
 800a920:	4658      	mov	r0, fp
 800a922:	f000 fc17 	bl	800b154 <__multiply>
 800a926:	4649      	mov	r1, r9
 800a928:	9004      	str	r0, [sp, #16]
 800a92a:	4658      	mov	r0, fp
 800a92c:	f000 fb48 	bl	800afc0 <_Bfree>
 800a930:	9b04      	ldr	r3, [sp, #16]
 800a932:	4699      	mov	r9, r3
 800a934:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a936:	1b1a      	subs	r2, r3, r4
 800a938:	d004      	beq.n	800a944 <_dtoa_r+0x78c>
 800a93a:	4649      	mov	r1, r9
 800a93c:	4658      	mov	r0, fp
 800a93e:	f000 fcb3 	bl	800b2a8 <__pow5mult>
 800a942:	4681      	mov	r9, r0
 800a944:	2101      	movs	r1, #1
 800a946:	4658      	mov	r0, fp
 800a948:	f000 fbee 	bl	800b128 <__i2b>
 800a94c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a94e:	4604      	mov	r4, r0
 800a950:	2b00      	cmp	r3, #0
 800a952:	f000 81cf 	beq.w	800acf4 <_dtoa_r+0xb3c>
 800a956:	461a      	mov	r2, r3
 800a958:	4601      	mov	r1, r0
 800a95a:	4658      	mov	r0, fp
 800a95c:	f000 fca4 	bl	800b2a8 <__pow5mult>
 800a960:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a962:	2b01      	cmp	r3, #1
 800a964:	4604      	mov	r4, r0
 800a966:	f300 8095 	bgt.w	800aa94 <_dtoa_r+0x8dc>
 800a96a:	9b02      	ldr	r3, [sp, #8]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	f040 8087 	bne.w	800aa80 <_dtoa_r+0x8c8>
 800a972:	9b03      	ldr	r3, [sp, #12]
 800a974:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a978:	2b00      	cmp	r3, #0
 800a97a:	f040 8089 	bne.w	800aa90 <_dtoa_r+0x8d8>
 800a97e:	9b03      	ldr	r3, [sp, #12]
 800a980:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a984:	0d1b      	lsrs	r3, r3, #20
 800a986:	051b      	lsls	r3, r3, #20
 800a988:	b12b      	cbz	r3, 800a996 <_dtoa_r+0x7de>
 800a98a:	9b08      	ldr	r3, [sp, #32]
 800a98c:	3301      	adds	r3, #1
 800a98e:	9308      	str	r3, [sp, #32]
 800a990:	f108 0801 	add.w	r8, r8, #1
 800a994:	2301      	movs	r3, #1
 800a996:	930a      	str	r3, [sp, #40]	@ 0x28
 800a998:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	f000 81b0 	beq.w	800ad00 <_dtoa_r+0xb48>
 800a9a0:	6923      	ldr	r3, [r4, #16]
 800a9a2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a9a6:	6918      	ldr	r0, [r3, #16]
 800a9a8:	f000 fb72 	bl	800b090 <__hi0bits>
 800a9ac:	f1c0 0020 	rsb	r0, r0, #32
 800a9b0:	9b08      	ldr	r3, [sp, #32]
 800a9b2:	4418      	add	r0, r3
 800a9b4:	f010 001f 	ands.w	r0, r0, #31
 800a9b8:	d077      	beq.n	800aaaa <_dtoa_r+0x8f2>
 800a9ba:	f1c0 0320 	rsb	r3, r0, #32
 800a9be:	2b04      	cmp	r3, #4
 800a9c0:	dd6b      	ble.n	800aa9a <_dtoa_r+0x8e2>
 800a9c2:	9b08      	ldr	r3, [sp, #32]
 800a9c4:	f1c0 001c 	rsb	r0, r0, #28
 800a9c8:	4403      	add	r3, r0
 800a9ca:	4480      	add	r8, r0
 800a9cc:	4406      	add	r6, r0
 800a9ce:	9308      	str	r3, [sp, #32]
 800a9d0:	f1b8 0f00 	cmp.w	r8, #0
 800a9d4:	dd05      	ble.n	800a9e2 <_dtoa_r+0x82a>
 800a9d6:	4649      	mov	r1, r9
 800a9d8:	4642      	mov	r2, r8
 800a9da:	4658      	mov	r0, fp
 800a9dc:	f000 fcbe 	bl	800b35c <__lshift>
 800a9e0:	4681      	mov	r9, r0
 800a9e2:	9b08      	ldr	r3, [sp, #32]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	dd05      	ble.n	800a9f4 <_dtoa_r+0x83c>
 800a9e8:	4621      	mov	r1, r4
 800a9ea:	461a      	mov	r2, r3
 800a9ec:	4658      	mov	r0, fp
 800a9ee:	f000 fcb5 	bl	800b35c <__lshift>
 800a9f2:	4604      	mov	r4, r0
 800a9f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d059      	beq.n	800aaae <_dtoa_r+0x8f6>
 800a9fa:	4621      	mov	r1, r4
 800a9fc:	4648      	mov	r0, r9
 800a9fe:	f000 fd19 	bl	800b434 <__mcmp>
 800aa02:	2800      	cmp	r0, #0
 800aa04:	da53      	bge.n	800aaae <_dtoa_r+0x8f6>
 800aa06:	1e7b      	subs	r3, r7, #1
 800aa08:	9304      	str	r3, [sp, #16]
 800aa0a:	4649      	mov	r1, r9
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	220a      	movs	r2, #10
 800aa10:	4658      	mov	r0, fp
 800aa12:	f000 faf7 	bl	800b004 <__multadd>
 800aa16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa18:	4681      	mov	r9, r0
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	f000 8172 	beq.w	800ad04 <_dtoa_r+0xb4c>
 800aa20:	2300      	movs	r3, #0
 800aa22:	4629      	mov	r1, r5
 800aa24:	220a      	movs	r2, #10
 800aa26:	4658      	mov	r0, fp
 800aa28:	f000 faec 	bl	800b004 <__multadd>
 800aa2c:	9b00      	ldr	r3, [sp, #0]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	4605      	mov	r5, r0
 800aa32:	dc67      	bgt.n	800ab04 <_dtoa_r+0x94c>
 800aa34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa36:	2b02      	cmp	r3, #2
 800aa38:	dc41      	bgt.n	800aabe <_dtoa_r+0x906>
 800aa3a:	e063      	b.n	800ab04 <_dtoa_r+0x94c>
 800aa3c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800aa3e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800aa42:	e746      	b.n	800a8d2 <_dtoa_r+0x71a>
 800aa44:	9b07      	ldr	r3, [sp, #28]
 800aa46:	1e5c      	subs	r4, r3, #1
 800aa48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa4a:	42a3      	cmp	r3, r4
 800aa4c:	bfbf      	itttt	lt
 800aa4e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800aa50:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800aa52:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800aa54:	1ae3      	sublt	r3, r4, r3
 800aa56:	bfb4      	ite	lt
 800aa58:	18d2      	addlt	r2, r2, r3
 800aa5a:	1b1c      	subge	r4, r3, r4
 800aa5c:	9b07      	ldr	r3, [sp, #28]
 800aa5e:	bfbc      	itt	lt
 800aa60:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800aa62:	2400      	movlt	r4, #0
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	bfb5      	itete	lt
 800aa68:	eba8 0603 	sublt.w	r6, r8, r3
 800aa6c:	9b07      	ldrge	r3, [sp, #28]
 800aa6e:	2300      	movlt	r3, #0
 800aa70:	4646      	movge	r6, r8
 800aa72:	e730      	b.n	800a8d6 <_dtoa_r+0x71e>
 800aa74:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800aa76:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800aa78:	4646      	mov	r6, r8
 800aa7a:	e735      	b.n	800a8e8 <_dtoa_r+0x730>
 800aa7c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aa7e:	e75c      	b.n	800a93a <_dtoa_r+0x782>
 800aa80:	2300      	movs	r3, #0
 800aa82:	e788      	b.n	800a996 <_dtoa_r+0x7de>
 800aa84:	3fe00000 	.word	0x3fe00000
 800aa88:	40240000 	.word	0x40240000
 800aa8c:	40140000 	.word	0x40140000
 800aa90:	9b02      	ldr	r3, [sp, #8]
 800aa92:	e780      	b.n	800a996 <_dtoa_r+0x7de>
 800aa94:	2300      	movs	r3, #0
 800aa96:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa98:	e782      	b.n	800a9a0 <_dtoa_r+0x7e8>
 800aa9a:	d099      	beq.n	800a9d0 <_dtoa_r+0x818>
 800aa9c:	9a08      	ldr	r2, [sp, #32]
 800aa9e:	331c      	adds	r3, #28
 800aaa0:	441a      	add	r2, r3
 800aaa2:	4498      	add	r8, r3
 800aaa4:	441e      	add	r6, r3
 800aaa6:	9208      	str	r2, [sp, #32]
 800aaa8:	e792      	b.n	800a9d0 <_dtoa_r+0x818>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	e7f6      	b.n	800aa9c <_dtoa_r+0x8e4>
 800aaae:	9b07      	ldr	r3, [sp, #28]
 800aab0:	9704      	str	r7, [sp, #16]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	dc20      	bgt.n	800aaf8 <_dtoa_r+0x940>
 800aab6:	9300      	str	r3, [sp, #0]
 800aab8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aaba:	2b02      	cmp	r3, #2
 800aabc:	dd1e      	ble.n	800aafc <_dtoa_r+0x944>
 800aabe:	9b00      	ldr	r3, [sp, #0]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	f47f aec0 	bne.w	800a846 <_dtoa_r+0x68e>
 800aac6:	4621      	mov	r1, r4
 800aac8:	2205      	movs	r2, #5
 800aaca:	4658      	mov	r0, fp
 800aacc:	f000 fa9a 	bl	800b004 <__multadd>
 800aad0:	4601      	mov	r1, r0
 800aad2:	4604      	mov	r4, r0
 800aad4:	4648      	mov	r0, r9
 800aad6:	f000 fcad 	bl	800b434 <__mcmp>
 800aada:	2800      	cmp	r0, #0
 800aadc:	f77f aeb3 	ble.w	800a846 <_dtoa_r+0x68e>
 800aae0:	4656      	mov	r6, sl
 800aae2:	2331      	movs	r3, #49	@ 0x31
 800aae4:	f806 3b01 	strb.w	r3, [r6], #1
 800aae8:	9b04      	ldr	r3, [sp, #16]
 800aaea:	3301      	adds	r3, #1
 800aaec:	9304      	str	r3, [sp, #16]
 800aaee:	e6ae      	b.n	800a84e <_dtoa_r+0x696>
 800aaf0:	9c07      	ldr	r4, [sp, #28]
 800aaf2:	9704      	str	r7, [sp, #16]
 800aaf4:	4625      	mov	r5, r4
 800aaf6:	e7f3      	b.n	800aae0 <_dtoa_r+0x928>
 800aaf8:	9b07      	ldr	r3, [sp, #28]
 800aafa:	9300      	str	r3, [sp, #0]
 800aafc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	f000 8104 	beq.w	800ad0c <_dtoa_r+0xb54>
 800ab04:	2e00      	cmp	r6, #0
 800ab06:	dd05      	ble.n	800ab14 <_dtoa_r+0x95c>
 800ab08:	4629      	mov	r1, r5
 800ab0a:	4632      	mov	r2, r6
 800ab0c:	4658      	mov	r0, fp
 800ab0e:	f000 fc25 	bl	800b35c <__lshift>
 800ab12:	4605      	mov	r5, r0
 800ab14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d05a      	beq.n	800abd0 <_dtoa_r+0xa18>
 800ab1a:	6869      	ldr	r1, [r5, #4]
 800ab1c:	4658      	mov	r0, fp
 800ab1e:	f000 fa0f 	bl	800af40 <_Balloc>
 800ab22:	4606      	mov	r6, r0
 800ab24:	b928      	cbnz	r0, 800ab32 <_dtoa_r+0x97a>
 800ab26:	4b84      	ldr	r3, [pc, #528]	@ (800ad38 <_dtoa_r+0xb80>)
 800ab28:	4602      	mov	r2, r0
 800ab2a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ab2e:	f7ff bb5a 	b.w	800a1e6 <_dtoa_r+0x2e>
 800ab32:	692a      	ldr	r2, [r5, #16]
 800ab34:	3202      	adds	r2, #2
 800ab36:	0092      	lsls	r2, r2, #2
 800ab38:	f105 010c 	add.w	r1, r5, #12
 800ab3c:	300c      	adds	r0, #12
 800ab3e:	f000 ffaf 	bl	800baa0 <memcpy>
 800ab42:	2201      	movs	r2, #1
 800ab44:	4631      	mov	r1, r6
 800ab46:	4658      	mov	r0, fp
 800ab48:	f000 fc08 	bl	800b35c <__lshift>
 800ab4c:	f10a 0301 	add.w	r3, sl, #1
 800ab50:	9307      	str	r3, [sp, #28]
 800ab52:	9b00      	ldr	r3, [sp, #0]
 800ab54:	4453      	add	r3, sl
 800ab56:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab58:	9b02      	ldr	r3, [sp, #8]
 800ab5a:	f003 0301 	and.w	r3, r3, #1
 800ab5e:	462f      	mov	r7, r5
 800ab60:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab62:	4605      	mov	r5, r0
 800ab64:	9b07      	ldr	r3, [sp, #28]
 800ab66:	4621      	mov	r1, r4
 800ab68:	3b01      	subs	r3, #1
 800ab6a:	4648      	mov	r0, r9
 800ab6c:	9300      	str	r3, [sp, #0]
 800ab6e:	f7ff fa9a 	bl	800a0a6 <quorem>
 800ab72:	4639      	mov	r1, r7
 800ab74:	9002      	str	r0, [sp, #8]
 800ab76:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ab7a:	4648      	mov	r0, r9
 800ab7c:	f000 fc5a 	bl	800b434 <__mcmp>
 800ab80:	462a      	mov	r2, r5
 800ab82:	9008      	str	r0, [sp, #32]
 800ab84:	4621      	mov	r1, r4
 800ab86:	4658      	mov	r0, fp
 800ab88:	f000 fc70 	bl	800b46c <__mdiff>
 800ab8c:	68c2      	ldr	r2, [r0, #12]
 800ab8e:	4606      	mov	r6, r0
 800ab90:	bb02      	cbnz	r2, 800abd4 <_dtoa_r+0xa1c>
 800ab92:	4601      	mov	r1, r0
 800ab94:	4648      	mov	r0, r9
 800ab96:	f000 fc4d 	bl	800b434 <__mcmp>
 800ab9a:	4602      	mov	r2, r0
 800ab9c:	4631      	mov	r1, r6
 800ab9e:	4658      	mov	r0, fp
 800aba0:	920e      	str	r2, [sp, #56]	@ 0x38
 800aba2:	f000 fa0d 	bl	800afc0 <_Bfree>
 800aba6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aba8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800abaa:	9e07      	ldr	r6, [sp, #28]
 800abac:	ea43 0102 	orr.w	r1, r3, r2
 800abb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800abb2:	4319      	orrs	r1, r3
 800abb4:	d110      	bne.n	800abd8 <_dtoa_r+0xa20>
 800abb6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800abba:	d029      	beq.n	800ac10 <_dtoa_r+0xa58>
 800abbc:	9b08      	ldr	r3, [sp, #32]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	dd02      	ble.n	800abc8 <_dtoa_r+0xa10>
 800abc2:	9b02      	ldr	r3, [sp, #8]
 800abc4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800abc8:	9b00      	ldr	r3, [sp, #0]
 800abca:	f883 8000 	strb.w	r8, [r3]
 800abce:	e63f      	b.n	800a850 <_dtoa_r+0x698>
 800abd0:	4628      	mov	r0, r5
 800abd2:	e7bb      	b.n	800ab4c <_dtoa_r+0x994>
 800abd4:	2201      	movs	r2, #1
 800abd6:	e7e1      	b.n	800ab9c <_dtoa_r+0x9e4>
 800abd8:	9b08      	ldr	r3, [sp, #32]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	db04      	blt.n	800abe8 <_dtoa_r+0xa30>
 800abde:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800abe0:	430b      	orrs	r3, r1
 800abe2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800abe4:	430b      	orrs	r3, r1
 800abe6:	d120      	bne.n	800ac2a <_dtoa_r+0xa72>
 800abe8:	2a00      	cmp	r2, #0
 800abea:	dded      	ble.n	800abc8 <_dtoa_r+0xa10>
 800abec:	4649      	mov	r1, r9
 800abee:	2201      	movs	r2, #1
 800abf0:	4658      	mov	r0, fp
 800abf2:	f000 fbb3 	bl	800b35c <__lshift>
 800abf6:	4621      	mov	r1, r4
 800abf8:	4681      	mov	r9, r0
 800abfa:	f000 fc1b 	bl	800b434 <__mcmp>
 800abfe:	2800      	cmp	r0, #0
 800ac00:	dc03      	bgt.n	800ac0a <_dtoa_r+0xa52>
 800ac02:	d1e1      	bne.n	800abc8 <_dtoa_r+0xa10>
 800ac04:	f018 0f01 	tst.w	r8, #1
 800ac08:	d0de      	beq.n	800abc8 <_dtoa_r+0xa10>
 800ac0a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ac0e:	d1d8      	bne.n	800abc2 <_dtoa_r+0xa0a>
 800ac10:	9a00      	ldr	r2, [sp, #0]
 800ac12:	2339      	movs	r3, #57	@ 0x39
 800ac14:	7013      	strb	r3, [r2, #0]
 800ac16:	4633      	mov	r3, r6
 800ac18:	461e      	mov	r6, r3
 800ac1a:	3b01      	subs	r3, #1
 800ac1c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ac20:	2a39      	cmp	r2, #57	@ 0x39
 800ac22:	d052      	beq.n	800acca <_dtoa_r+0xb12>
 800ac24:	3201      	adds	r2, #1
 800ac26:	701a      	strb	r2, [r3, #0]
 800ac28:	e612      	b.n	800a850 <_dtoa_r+0x698>
 800ac2a:	2a00      	cmp	r2, #0
 800ac2c:	dd07      	ble.n	800ac3e <_dtoa_r+0xa86>
 800ac2e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ac32:	d0ed      	beq.n	800ac10 <_dtoa_r+0xa58>
 800ac34:	9a00      	ldr	r2, [sp, #0]
 800ac36:	f108 0301 	add.w	r3, r8, #1
 800ac3a:	7013      	strb	r3, [r2, #0]
 800ac3c:	e608      	b.n	800a850 <_dtoa_r+0x698>
 800ac3e:	9b07      	ldr	r3, [sp, #28]
 800ac40:	9a07      	ldr	r2, [sp, #28]
 800ac42:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ac46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	d028      	beq.n	800ac9e <_dtoa_r+0xae6>
 800ac4c:	4649      	mov	r1, r9
 800ac4e:	2300      	movs	r3, #0
 800ac50:	220a      	movs	r2, #10
 800ac52:	4658      	mov	r0, fp
 800ac54:	f000 f9d6 	bl	800b004 <__multadd>
 800ac58:	42af      	cmp	r7, r5
 800ac5a:	4681      	mov	r9, r0
 800ac5c:	f04f 0300 	mov.w	r3, #0
 800ac60:	f04f 020a 	mov.w	r2, #10
 800ac64:	4639      	mov	r1, r7
 800ac66:	4658      	mov	r0, fp
 800ac68:	d107      	bne.n	800ac7a <_dtoa_r+0xac2>
 800ac6a:	f000 f9cb 	bl	800b004 <__multadd>
 800ac6e:	4607      	mov	r7, r0
 800ac70:	4605      	mov	r5, r0
 800ac72:	9b07      	ldr	r3, [sp, #28]
 800ac74:	3301      	adds	r3, #1
 800ac76:	9307      	str	r3, [sp, #28]
 800ac78:	e774      	b.n	800ab64 <_dtoa_r+0x9ac>
 800ac7a:	f000 f9c3 	bl	800b004 <__multadd>
 800ac7e:	4629      	mov	r1, r5
 800ac80:	4607      	mov	r7, r0
 800ac82:	2300      	movs	r3, #0
 800ac84:	220a      	movs	r2, #10
 800ac86:	4658      	mov	r0, fp
 800ac88:	f000 f9bc 	bl	800b004 <__multadd>
 800ac8c:	4605      	mov	r5, r0
 800ac8e:	e7f0      	b.n	800ac72 <_dtoa_r+0xaba>
 800ac90:	9b00      	ldr	r3, [sp, #0]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	bfcc      	ite	gt
 800ac96:	461e      	movgt	r6, r3
 800ac98:	2601      	movle	r6, #1
 800ac9a:	4456      	add	r6, sl
 800ac9c:	2700      	movs	r7, #0
 800ac9e:	4649      	mov	r1, r9
 800aca0:	2201      	movs	r2, #1
 800aca2:	4658      	mov	r0, fp
 800aca4:	f000 fb5a 	bl	800b35c <__lshift>
 800aca8:	4621      	mov	r1, r4
 800acaa:	4681      	mov	r9, r0
 800acac:	f000 fbc2 	bl	800b434 <__mcmp>
 800acb0:	2800      	cmp	r0, #0
 800acb2:	dcb0      	bgt.n	800ac16 <_dtoa_r+0xa5e>
 800acb4:	d102      	bne.n	800acbc <_dtoa_r+0xb04>
 800acb6:	f018 0f01 	tst.w	r8, #1
 800acba:	d1ac      	bne.n	800ac16 <_dtoa_r+0xa5e>
 800acbc:	4633      	mov	r3, r6
 800acbe:	461e      	mov	r6, r3
 800acc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800acc4:	2a30      	cmp	r2, #48	@ 0x30
 800acc6:	d0fa      	beq.n	800acbe <_dtoa_r+0xb06>
 800acc8:	e5c2      	b.n	800a850 <_dtoa_r+0x698>
 800acca:	459a      	cmp	sl, r3
 800accc:	d1a4      	bne.n	800ac18 <_dtoa_r+0xa60>
 800acce:	9b04      	ldr	r3, [sp, #16]
 800acd0:	3301      	adds	r3, #1
 800acd2:	9304      	str	r3, [sp, #16]
 800acd4:	2331      	movs	r3, #49	@ 0x31
 800acd6:	f88a 3000 	strb.w	r3, [sl]
 800acda:	e5b9      	b.n	800a850 <_dtoa_r+0x698>
 800acdc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800acde:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ad3c <_dtoa_r+0xb84>
 800ace2:	b11b      	cbz	r3, 800acec <_dtoa_r+0xb34>
 800ace4:	f10a 0308 	add.w	r3, sl, #8
 800ace8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800acea:	6013      	str	r3, [r2, #0]
 800acec:	4650      	mov	r0, sl
 800acee:	b019      	add	sp, #100	@ 0x64
 800acf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acf6:	2b01      	cmp	r3, #1
 800acf8:	f77f ae37 	ble.w	800a96a <_dtoa_r+0x7b2>
 800acfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800acfe:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad00:	2001      	movs	r0, #1
 800ad02:	e655      	b.n	800a9b0 <_dtoa_r+0x7f8>
 800ad04:	9b00      	ldr	r3, [sp, #0]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	f77f aed6 	ble.w	800aab8 <_dtoa_r+0x900>
 800ad0c:	4656      	mov	r6, sl
 800ad0e:	4621      	mov	r1, r4
 800ad10:	4648      	mov	r0, r9
 800ad12:	f7ff f9c8 	bl	800a0a6 <quorem>
 800ad16:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ad1a:	f806 8b01 	strb.w	r8, [r6], #1
 800ad1e:	9b00      	ldr	r3, [sp, #0]
 800ad20:	eba6 020a 	sub.w	r2, r6, sl
 800ad24:	4293      	cmp	r3, r2
 800ad26:	ddb3      	ble.n	800ac90 <_dtoa_r+0xad8>
 800ad28:	4649      	mov	r1, r9
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	220a      	movs	r2, #10
 800ad2e:	4658      	mov	r0, fp
 800ad30:	f000 f968 	bl	800b004 <__multadd>
 800ad34:	4681      	mov	r9, r0
 800ad36:	e7ea      	b.n	800ad0e <_dtoa_r+0xb56>
 800ad38:	0800d5ec 	.word	0x0800d5ec
 800ad3c:	0800d570 	.word	0x0800d570

0800ad40 <_free_r>:
 800ad40:	b538      	push	{r3, r4, r5, lr}
 800ad42:	4605      	mov	r5, r0
 800ad44:	2900      	cmp	r1, #0
 800ad46:	d041      	beq.n	800adcc <_free_r+0x8c>
 800ad48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad4c:	1f0c      	subs	r4, r1, #4
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	bfb8      	it	lt
 800ad52:	18e4      	addlt	r4, r4, r3
 800ad54:	f000 f8e8 	bl	800af28 <__malloc_lock>
 800ad58:	4a1d      	ldr	r2, [pc, #116]	@ (800add0 <_free_r+0x90>)
 800ad5a:	6813      	ldr	r3, [r2, #0]
 800ad5c:	b933      	cbnz	r3, 800ad6c <_free_r+0x2c>
 800ad5e:	6063      	str	r3, [r4, #4]
 800ad60:	6014      	str	r4, [r2, #0]
 800ad62:	4628      	mov	r0, r5
 800ad64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad68:	f000 b8e4 	b.w	800af34 <__malloc_unlock>
 800ad6c:	42a3      	cmp	r3, r4
 800ad6e:	d908      	bls.n	800ad82 <_free_r+0x42>
 800ad70:	6820      	ldr	r0, [r4, #0]
 800ad72:	1821      	adds	r1, r4, r0
 800ad74:	428b      	cmp	r3, r1
 800ad76:	bf01      	itttt	eq
 800ad78:	6819      	ldreq	r1, [r3, #0]
 800ad7a:	685b      	ldreq	r3, [r3, #4]
 800ad7c:	1809      	addeq	r1, r1, r0
 800ad7e:	6021      	streq	r1, [r4, #0]
 800ad80:	e7ed      	b.n	800ad5e <_free_r+0x1e>
 800ad82:	461a      	mov	r2, r3
 800ad84:	685b      	ldr	r3, [r3, #4]
 800ad86:	b10b      	cbz	r3, 800ad8c <_free_r+0x4c>
 800ad88:	42a3      	cmp	r3, r4
 800ad8a:	d9fa      	bls.n	800ad82 <_free_r+0x42>
 800ad8c:	6811      	ldr	r1, [r2, #0]
 800ad8e:	1850      	adds	r0, r2, r1
 800ad90:	42a0      	cmp	r0, r4
 800ad92:	d10b      	bne.n	800adac <_free_r+0x6c>
 800ad94:	6820      	ldr	r0, [r4, #0]
 800ad96:	4401      	add	r1, r0
 800ad98:	1850      	adds	r0, r2, r1
 800ad9a:	4283      	cmp	r3, r0
 800ad9c:	6011      	str	r1, [r2, #0]
 800ad9e:	d1e0      	bne.n	800ad62 <_free_r+0x22>
 800ada0:	6818      	ldr	r0, [r3, #0]
 800ada2:	685b      	ldr	r3, [r3, #4]
 800ada4:	6053      	str	r3, [r2, #4]
 800ada6:	4408      	add	r0, r1
 800ada8:	6010      	str	r0, [r2, #0]
 800adaa:	e7da      	b.n	800ad62 <_free_r+0x22>
 800adac:	d902      	bls.n	800adb4 <_free_r+0x74>
 800adae:	230c      	movs	r3, #12
 800adb0:	602b      	str	r3, [r5, #0]
 800adb2:	e7d6      	b.n	800ad62 <_free_r+0x22>
 800adb4:	6820      	ldr	r0, [r4, #0]
 800adb6:	1821      	adds	r1, r4, r0
 800adb8:	428b      	cmp	r3, r1
 800adba:	bf04      	itt	eq
 800adbc:	6819      	ldreq	r1, [r3, #0]
 800adbe:	685b      	ldreq	r3, [r3, #4]
 800adc0:	6063      	str	r3, [r4, #4]
 800adc2:	bf04      	itt	eq
 800adc4:	1809      	addeq	r1, r1, r0
 800adc6:	6021      	streq	r1, [r4, #0]
 800adc8:	6054      	str	r4, [r2, #4]
 800adca:	e7ca      	b.n	800ad62 <_free_r+0x22>
 800adcc:	bd38      	pop	{r3, r4, r5, pc}
 800adce:	bf00      	nop
 800add0:	20000808 	.word	0x20000808

0800add4 <malloc>:
 800add4:	4b02      	ldr	r3, [pc, #8]	@ (800ade0 <malloc+0xc>)
 800add6:	4601      	mov	r1, r0
 800add8:	6818      	ldr	r0, [r3, #0]
 800adda:	f000 b825 	b.w	800ae28 <_malloc_r>
 800adde:	bf00      	nop
 800ade0:	2000004c 	.word	0x2000004c

0800ade4 <sbrk_aligned>:
 800ade4:	b570      	push	{r4, r5, r6, lr}
 800ade6:	4e0f      	ldr	r6, [pc, #60]	@ (800ae24 <sbrk_aligned+0x40>)
 800ade8:	460c      	mov	r4, r1
 800adea:	6831      	ldr	r1, [r6, #0]
 800adec:	4605      	mov	r5, r0
 800adee:	b911      	cbnz	r1, 800adf6 <sbrk_aligned+0x12>
 800adf0:	f000 fe46 	bl	800ba80 <_sbrk_r>
 800adf4:	6030      	str	r0, [r6, #0]
 800adf6:	4621      	mov	r1, r4
 800adf8:	4628      	mov	r0, r5
 800adfa:	f000 fe41 	bl	800ba80 <_sbrk_r>
 800adfe:	1c43      	adds	r3, r0, #1
 800ae00:	d103      	bne.n	800ae0a <sbrk_aligned+0x26>
 800ae02:	f04f 34ff 	mov.w	r4, #4294967295
 800ae06:	4620      	mov	r0, r4
 800ae08:	bd70      	pop	{r4, r5, r6, pc}
 800ae0a:	1cc4      	adds	r4, r0, #3
 800ae0c:	f024 0403 	bic.w	r4, r4, #3
 800ae10:	42a0      	cmp	r0, r4
 800ae12:	d0f8      	beq.n	800ae06 <sbrk_aligned+0x22>
 800ae14:	1a21      	subs	r1, r4, r0
 800ae16:	4628      	mov	r0, r5
 800ae18:	f000 fe32 	bl	800ba80 <_sbrk_r>
 800ae1c:	3001      	adds	r0, #1
 800ae1e:	d1f2      	bne.n	800ae06 <sbrk_aligned+0x22>
 800ae20:	e7ef      	b.n	800ae02 <sbrk_aligned+0x1e>
 800ae22:	bf00      	nop
 800ae24:	20000804 	.word	0x20000804

0800ae28 <_malloc_r>:
 800ae28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae2c:	1ccd      	adds	r5, r1, #3
 800ae2e:	f025 0503 	bic.w	r5, r5, #3
 800ae32:	3508      	adds	r5, #8
 800ae34:	2d0c      	cmp	r5, #12
 800ae36:	bf38      	it	cc
 800ae38:	250c      	movcc	r5, #12
 800ae3a:	2d00      	cmp	r5, #0
 800ae3c:	4606      	mov	r6, r0
 800ae3e:	db01      	blt.n	800ae44 <_malloc_r+0x1c>
 800ae40:	42a9      	cmp	r1, r5
 800ae42:	d904      	bls.n	800ae4e <_malloc_r+0x26>
 800ae44:	230c      	movs	r3, #12
 800ae46:	6033      	str	r3, [r6, #0]
 800ae48:	2000      	movs	r0, #0
 800ae4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800af24 <_malloc_r+0xfc>
 800ae52:	f000 f869 	bl	800af28 <__malloc_lock>
 800ae56:	f8d8 3000 	ldr.w	r3, [r8]
 800ae5a:	461c      	mov	r4, r3
 800ae5c:	bb44      	cbnz	r4, 800aeb0 <_malloc_r+0x88>
 800ae5e:	4629      	mov	r1, r5
 800ae60:	4630      	mov	r0, r6
 800ae62:	f7ff ffbf 	bl	800ade4 <sbrk_aligned>
 800ae66:	1c43      	adds	r3, r0, #1
 800ae68:	4604      	mov	r4, r0
 800ae6a:	d158      	bne.n	800af1e <_malloc_r+0xf6>
 800ae6c:	f8d8 4000 	ldr.w	r4, [r8]
 800ae70:	4627      	mov	r7, r4
 800ae72:	2f00      	cmp	r7, #0
 800ae74:	d143      	bne.n	800aefe <_malloc_r+0xd6>
 800ae76:	2c00      	cmp	r4, #0
 800ae78:	d04b      	beq.n	800af12 <_malloc_r+0xea>
 800ae7a:	6823      	ldr	r3, [r4, #0]
 800ae7c:	4639      	mov	r1, r7
 800ae7e:	4630      	mov	r0, r6
 800ae80:	eb04 0903 	add.w	r9, r4, r3
 800ae84:	f000 fdfc 	bl	800ba80 <_sbrk_r>
 800ae88:	4581      	cmp	r9, r0
 800ae8a:	d142      	bne.n	800af12 <_malloc_r+0xea>
 800ae8c:	6821      	ldr	r1, [r4, #0]
 800ae8e:	1a6d      	subs	r5, r5, r1
 800ae90:	4629      	mov	r1, r5
 800ae92:	4630      	mov	r0, r6
 800ae94:	f7ff ffa6 	bl	800ade4 <sbrk_aligned>
 800ae98:	3001      	adds	r0, #1
 800ae9a:	d03a      	beq.n	800af12 <_malloc_r+0xea>
 800ae9c:	6823      	ldr	r3, [r4, #0]
 800ae9e:	442b      	add	r3, r5
 800aea0:	6023      	str	r3, [r4, #0]
 800aea2:	f8d8 3000 	ldr.w	r3, [r8]
 800aea6:	685a      	ldr	r2, [r3, #4]
 800aea8:	bb62      	cbnz	r2, 800af04 <_malloc_r+0xdc>
 800aeaa:	f8c8 7000 	str.w	r7, [r8]
 800aeae:	e00f      	b.n	800aed0 <_malloc_r+0xa8>
 800aeb0:	6822      	ldr	r2, [r4, #0]
 800aeb2:	1b52      	subs	r2, r2, r5
 800aeb4:	d420      	bmi.n	800aef8 <_malloc_r+0xd0>
 800aeb6:	2a0b      	cmp	r2, #11
 800aeb8:	d917      	bls.n	800aeea <_malloc_r+0xc2>
 800aeba:	1961      	adds	r1, r4, r5
 800aebc:	42a3      	cmp	r3, r4
 800aebe:	6025      	str	r5, [r4, #0]
 800aec0:	bf18      	it	ne
 800aec2:	6059      	strne	r1, [r3, #4]
 800aec4:	6863      	ldr	r3, [r4, #4]
 800aec6:	bf08      	it	eq
 800aec8:	f8c8 1000 	streq.w	r1, [r8]
 800aecc:	5162      	str	r2, [r4, r5]
 800aece:	604b      	str	r3, [r1, #4]
 800aed0:	4630      	mov	r0, r6
 800aed2:	f000 f82f 	bl	800af34 <__malloc_unlock>
 800aed6:	f104 000b 	add.w	r0, r4, #11
 800aeda:	1d23      	adds	r3, r4, #4
 800aedc:	f020 0007 	bic.w	r0, r0, #7
 800aee0:	1ac2      	subs	r2, r0, r3
 800aee2:	bf1c      	itt	ne
 800aee4:	1a1b      	subne	r3, r3, r0
 800aee6:	50a3      	strne	r3, [r4, r2]
 800aee8:	e7af      	b.n	800ae4a <_malloc_r+0x22>
 800aeea:	6862      	ldr	r2, [r4, #4]
 800aeec:	42a3      	cmp	r3, r4
 800aeee:	bf0c      	ite	eq
 800aef0:	f8c8 2000 	streq.w	r2, [r8]
 800aef4:	605a      	strne	r2, [r3, #4]
 800aef6:	e7eb      	b.n	800aed0 <_malloc_r+0xa8>
 800aef8:	4623      	mov	r3, r4
 800aefa:	6864      	ldr	r4, [r4, #4]
 800aefc:	e7ae      	b.n	800ae5c <_malloc_r+0x34>
 800aefe:	463c      	mov	r4, r7
 800af00:	687f      	ldr	r7, [r7, #4]
 800af02:	e7b6      	b.n	800ae72 <_malloc_r+0x4a>
 800af04:	461a      	mov	r2, r3
 800af06:	685b      	ldr	r3, [r3, #4]
 800af08:	42a3      	cmp	r3, r4
 800af0a:	d1fb      	bne.n	800af04 <_malloc_r+0xdc>
 800af0c:	2300      	movs	r3, #0
 800af0e:	6053      	str	r3, [r2, #4]
 800af10:	e7de      	b.n	800aed0 <_malloc_r+0xa8>
 800af12:	230c      	movs	r3, #12
 800af14:	6033      	str	r3, [r6, #0]
 800af16:	4630      	mov	r0, r6
 800af18:	f000 f80c 	bl	800af34 <__malloc_unlock>
 800af1c:	e794      	b.n	800ae48 <_malloc_r+0x20>
 800af1e:	6005      	str	r5, [r0, #0]
 800af20:	e7d6      	b.n	800aed0 <_malloc_r+0xa8>
 800af22:	bf00      	nop
 800af24:	20000808 	.word	0x20000808

0800af28 <__malloc_lock>:
 800af28:	4801      	ldr	r0, [pc, #4]	@ (800af30 <__malloc_lock+0x8>)
 800af2a:	f7ff b8ba 	b.w	800a0a2 <__retarget_lock_acquire_recursive>
 800af2e:	bf00      	nop
 800af30:	20000800 	.word	0x20000800

0800af34 <__malloc_unlock>:
 800af34:	4801      	ldr	r0, [pc, #4]	@ (800af3c <__malloc_unlock+0x8>)
 800af36:	f7ff b8b5 	b.w	800a0a4 <__retarget_lock_release_recursive>
 800af3a:	bf00      	nop
 800af3c:	20000800 	.word	0x20000800

0800af40 <_Balloc>:
 800af40:	b570      	push	{r4, r5, r6, lr}
 800af42:	69c6      	ldr	r6, [r0, #28]
 800af44:	4604      	mov	r4, r0
 800af46:	460d      	mov	r5, r1
 800af48:	b976      	cbnz	r6, 800af68 <_Balloc+0x28>
 800af4a:	2010      	movs	r0, #16
 800af4c:	f7ff ff42 	bl	800add4 <malloc>
 800af50:	4602      	mov	r2, r0
 800af52:	61e0      	str	r0, [r4, #28]
 800af54:	b920      	cbnz	r0, 800af60 <_Balloc+0x20>
 800af56:	4b18      	ldr	r3, [pc, #96]	@ (800afb8 <_Balloc+0x78>)
 800af58:	4818      	ldr	r0, [pc, #96]	@ (800afbc <_Balloc+0x7c>)
 800af5a:	216b      	movs	r1, #107	@ 0x6b
 800af5c:	f000 fdae 	bl	800babc <__assert_func>
 800af60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af64:	6006      	str	r6, [r0, #0]
 800af66:	60c6      	str	r6, [r0, #12]
 800af68:	69e6      	ldr	r6, [r4, #28]
 800af6a:	68f3      	ldr	r3, [r6, #12]
 800af6c:	b183      	cbz	r3, 800af90 <_Balloc+0x50>
 800af6e:	69e3      	ldr	r3, [r4, #28]
 800af70:	68db      	ldr	r3, [r3, #12]
 800af72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800af76:	b9b8      	cbnz	r0, 800afa8 <_Balloc+0x68>
 800af78:	2101      	movs	r1, #1
 800af7a:	fa01 f605 	lsl.w	r6, r1, r5
 800af7e:	1d72      	adds	r2, r6, #5
 800af80:	0092      	lsls	r2, r2, #2
 800af82:	4620      	mov	r0, r4
 800af84:	f000 fdb8 	bl	800baf8 <_calloc_r>
 800af88:	b160      	cbz	r0, 800afa4 <_Balloc+0x64>
 800af8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800af8e:	e00e      	b.n	800afae <_Balloc+0x6e>
 800af90:	2221      	movs	r2, #33	@ 0x21
 800af92:	2104      	movs	r1, #4
 800af94:	4620      	mov	r0, r4
 800af96:	f000 fdaf 	bl	800baf8 <_calloc_r>
 800af9a:	69e3      	ldr	r3, [r4, #28]
 800af9c:	60f0      	str	r0, [r6, #12]
 800af9e:	68db      	ldr	r3, [r3, #12]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d1e4      	bne.n	800af6e <_Balloc+0x2e>
 800afa4:	2000      	movs	r0, #0
 800afa6:	bd70      	pop	{r4, r5, r6, pc}
 800afa8:	6802      	ldr	r2, [r0, #0]
 800afaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800afae:	2300      	movs	r3, #0
 800afb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800afb4:	e7f7      	b.n	800afa6 <_Balloc+0x66>
 800afb6:	bf00      	nop
 800afb8:	0800d57d 	.word	0x0800d57d
 800afbc:	0800d5fd 	.word	0x0800d5fd

0800afc0 <_Bfree>:
 800afc0:	b570      	push	{r4, r5, r6, lr}
 800afc2:	69c6      	ldr	r6, [r0, #28]
 800afc4:	4605      	mov	r5, r0
 800afc6:	460c      	mov	r4, r1
 800afc8:	b976      	cbnz	r6, 800afe8 <_Bfree+0x28>
 800afca:	2010      	movs	r0, #16
 800afcc:	f7ff ff02 	bl	800add4 <malloc>
 800afd0:	4602      	mov	r2, r0
 800afd2:	61e8      	str	r0, [r5, #28]
 800afd4:	b920      	cbnz	r0, 800afe0 <_Bfree+0x20>
 800afd6:	4b09      	ldr	r3, [pc, #36]	@ (800affc <_Bfree+0x3c>)
 800afd8:	4809      	ldr	r0, [pc, #36]	@ (800b000 <_Bfree+0x40>)
 800afda:	218f      	movs	r1, #143	@ 0x8f
 800afdc:	f000 fd6e 	bl	800babc <__assert_func>
 800afe0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800afe4:	6006      	str	r6, [r0, #0]
 800afe6:	60c6      	str	r6, [r0, #12]
 800afe8:	b13c      	cbz	r4, 800affa <_Bfree+0x3a>
 800afea:	69eb      	ldr	r3, [r5, #28]
 800afec:	6862      	ldr	r2, [r4, #4]
 800afee:	68db      	ldr	r3, [r3, #12]
 800aff0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aff4:	6021      	str	r1, [r4, #0]
 800aff6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800affa:	bd70      	pop	{r4, r5, r6, pc}
 800affc:	0800d57d 	.word	0x0800d57d
 800b000:	0800d5fd 	.word	0x0800d5fd

0800b004 <__multadd>:
 800b004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b008:	690d      	ldr	r5, [r1, #16]
 800b00a:	4607      	mov	r7, r0
 800b00c:	460c      	mov	r4, r1
 800b00e:	461e      	mov	r6, r3
 800b010:	f101 0c14 	add.w	ip, r1, #20
 800b014:	2000      	movs	r0, #0
 800b016:	f8dc 3000 	ldr.w	r3, [ip]
 800b01a:	b299      	uxth	r1, r3
 800b01c:	fb02 6101 	mla	r1, r2, r1, r6
 800b020:	0c1e      	lsrs	r6, r3, #16
 800b022:	0c0b      	lsrs	r3, r1, #16
 800b024:	fb02 3306 	mla	r3, r2, r6, r3
 800b028:	b289      	uxth	r1, r1
 800b02a:	3001      	adds	r0, #1
 800b02c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b030:	4285      	cmp	r5, r0
 800b032:	f84c 1b04 	str.w	r1, [ip], #4
 800b036:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b03a:	dcec      	bgt.n	800b016 <__multadd+0x12>
 800b03c:	b30e      	cbz	r6, 800b082 <__multadd+0x7e>
 800b03e:	68a3      	ldr	r3, [r4, #8]
 800b040:	42ab      	cmp	r3, r5
 800b042:	dc19      	bgt.n	800b078 <__multadd+0x74>
 800b044:	6861      	ldr	r1, [r4, #4]
 800b046:	4638      	mov	r0, r7
 800b048:	3101      	adds	r1, #1
 800b04a:	f7ff ff79 	bl	800af40 <_Balloc>
 800b04e:	4680      	mov	r8, r0
 800b050:	b928      	cbnz	r0, 800b05e <__multadd+0x5a>
 800b052:	4602      	mov	r2, r0
 800b054:	4b0c      	ldr	r3, [pc, #48]	@ (800b088 <__multadd+0x84>)
 800b056:	480d      	ldr	r0, [pc, #52]	@ (800b08c <__multadd+0x88>)
 800b058:	21ba      	movs	r1, #186	@ 0xba
 800b05a:	f000 fd2f 	bl	800babc <__assert_func>
 800b05e:	6922      	ldr	r2, [r4, #16]
 800b060:	3202      	adds	r2, #2
 800b062:	f104 010c 	add.w	r1, r4, #12
 800b066:	0092      	lsls	r2, r2, #2
 800b068:	300c      	adds	r0, #12
 800b06a:	f000 fd19 	bl	800baa0 <memcpy>
 800b06e:	4621      	mov	r1, r4
 800b070:	4638      	mov	r0, r7
 800b072:	f7ff ffa5 	bl	800afc0 <_Bfree>
 800b076:	4644      	mov	r4, r8
 800b078:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b07c:	3501      	adds	r5, #1
 800b07e:	615e      	str	r6, [r3, #20]
 800b080:	6125      	str	r5, [r4, #16]
 800b082:	4620      	mov	r0, r4
 800b084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b088:	0800d5ec 	.word	0x0800d5ec
 800b08c:	0800d5fd 	.word	0x0800d5fd

0800b090 <__hi0bits>:
 800b090:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b094:	4603      	mov	r3, r0
 800b096:	bf36      	itet	cc
 800b098:	0403      	lslcc	r3, r0, #16
 800b09a:	2000      	movcs	r0, #0
 800b09c:	2010      	movcc	r0, #16
 800b09e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b0a2:	bf3c      	itt	cc
 800b0a4:	021b      	lslcc	r3, r3, #8
 800b0a6:	3008      	addcc	r0, #8
 800b0a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b0ac:	bf3c      	itt	cc
 800b0ae:	011b      	lslcc	r3, r3, #4
 800b0b0:	3004      	addcc	r0, #4
 800b0b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b0b6:	bf3c      	itt	cc
 800b0b8:	009b      	lslcc	r3, r3, #2
 800b0ba:	3002      	addcc	r0, #2
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	db05      	blt.n	800b0cc <__hi0bits+0x3c>
 800b0c0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b0c4:	f100 0001 	add.w	r0, r0, #1
 800b0c8:	bf08      	it	eq
 800b0ca:	2020      	moveq	r0, #32
 800b0cc:	4770      	bx	lr

0800b0ce <__lo0bits>:
 800b0ce:	6803      	ldr	r3, [r0, #0]
 800b0d0:	4602      	mov	r2, r0
 800b0d2:	f013 0007 	ands.w	r0, r3, #7
 800b0d6:	d00b      	beq.n	800b0f0 <__lo0bits+0x22>
 800b0d8:	07d9      	lsls	r1, r3, #31
 800b0da:	d421      	bmi.n	800b120 <__lo0bits+0x52>
 800b0dc:	0798      	lsls	r0, r3, #30
 800b0de:	bf49      	itett	mi
 800b0e0:	085b      	lsrmi	r3, r3, #1
 800b0e2:	089b      	lsrpl	r3, r3, #2
 800b0e4:	2001      	movmi	r0, #1
 800b0e6:	6013      	strmi	r3, [r2, #0]
 800b0e8:	bf5c      	itt	pl
 800b0ea:	6013      	strpl	r3, [r2, #0]
 800b0ec:	2002      	movpl	r0, #2
 800b0ee:	4770      	bx	lr
 800b0f0:	b299      	uxth	r1, r3
 800b0f2:	b909      	cbnz	r1, 800b0f8 <__lo0bits+0x2a>
 800b0f4:	0c1b      	lsrs	r3, r3, #16
 800b0f6:	2010      	movs	r0, #16
 800b0f8:	b2d9      	uxtb	r1, r3
 800b0fa:	b909      	cbnz	r1, 800b100 <__lo0bits+0x32>
 800b0fc:	3008      	adds	r0, #8
 800b0fe:	0a1b      	lsrs	r3, r3, #8
 800b100:	0719      	lsls	r1, r3, #28
 800b102:	bf04      	itt	eq
 800b104:	091b      	lsreq	r3, r3, #4
 800b106:	3004      	addeq	r0, #4
 800b108:	0799      	lsls	r1, r3, #30
 800b10a:	bf04      	itt	eq
 800b10c:	089b      	lsreq	r3, r3, #2
 800b10e:	3002      	addeq	r0, #2
 800b110:	07d9      	lsls	r1, r3, #31
 800b112:	d403      	bmi.n	800b11c <__lo0bits+0x4e>
 800b114:	085b      	lsrs	r3, r3, #1
 800b116:	f100 0001 	add.w	r0, r0, #1
 800b11a:	d003      	beq.n	800b124 <__lo0bits+0x56>
 800b11c:	6013      	str	r3, [r2, #0]
 800b11e:	4770      	bx	lr
 800b120:	2000      	movs	r0, #0
 800b122:	4770      	bx	lr
 800b124:	2020      	movs	r0, #32
 800b126:	4770      	bx	lr

0800b128 <__i2b>:
 800b128:	b510      	push	{r4, lr}
 800b12a:	460c      	mov	r4, r1
 800b12c:	2101      	movs	r1, #1
 800b12e:	f7ff ff07 	bl	800af40 <_Balloc>
 800b132:	4602      	mov	r2, r0
 800b134:	b928      	cbnz	r0, 800b142 <__i2b+0x1a>
 800b136:	4b05      	ldr	r3, [pc, #20]	@ (800b14c <__i2b+0x24>)
 800b138:	4805      	ldr	r0, [pc, #20]	@ (800b150 <__i2b+0x28>)
 800b13a:	f240 1145 	movw	r1, #325	@ 0x145
 800b13e:	f000 fcbd 	bl	800babc <__assert_func>
 800b142:	2301      	movs	r3, #1
 800b144:	6144      	str	r4, [r0, #20]
 800b146:	6103      	str	r3, [r0, #16]
 800b148:	bd10      	pop	{r4, pc}
 800b14a:	bf00      	nop
 800b14c:	0800d5ec 	.word	0x0800d5ec
 800b150:	0800d5fd 	.word	0x0800d5fd

0800b154 <__multiply>:
 800b154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b158:	4614      	mov	r4, r2
 800b15a:	690a      	ldr	r2, [r1, #16]
 800b15c:	6923      	ldr	r3, [r4, #16]
 800b15e:	429a      	cmp	r2, r3
 800b160:	bfa8      	it	ge
 800b162:	4623      	movge	r3, r4
 800b164:	460f      	mov	r7, r1
 800b166:	bfa4      	itt	ge
 800b168:	460c      	movge	r4, r1
 800b16a:	461f      	movge	r7, r3
 800b16c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b170:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b174:	68a3      	ldr	r3, [r4, #8]
 800b176:	6861      	ldr	r1, [r4, #4]
 800b178:	eb0a 0609 	add.w	r6, sl, r9
 800b17c:	42b3      	cmp	r3, r6
 800b17e:	b085      	sub	sp, #20
 800b180:	bfb8      	it	lt
 800b182:	3101      	addlt	r1, #1
 800b184:	f7ff fedc 	bl	800af40 <_Balloc>
 800b188:	b930      	cbnz	r0, 800b198 <__multiply+0x44>
 800b18a:	4602      	mov	r2, r0
 800b18c:	4b44      	ldr	r3, [pc, #272]	@ (800b2a0 <__multiply+0x14c>)
 800b18e:	4845      	ldr	r0, [pc, #276]	@ (800b2a4 <__multiply+0x150>)
 800b190:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b194:	f000 fc92 	bl	800babc <__assert_func>
 800b198:	f100 0514 	add.w	r5, r0, #20
 800b19c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b1a0:	462b      	mov	r3, r5
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	4543      	cmp	r3, r8
 800b1a6:	d321      	bcc.n	800b1ec <__multiply+0x98>
 800b1a8:	f107 0114 	add.w	r1, r7, #20
 800b1ac:	f104 0214 	add.w	r2, r4, #20
 800b1b0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b1b4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b1b8:	9302      	str	r3, [sp, #8]
 800b1ba:	1b13      	subs	r3, r2, r4
 800b1bc:	3b15      	subs	r3, #21
 800b1be:	f023 0303 	bic.w	r3, r3, #3
 800b1c2:	3304      	adds	r3, #4
 800b1c4:	f104 0715 	add.w	r7, r4, #21
 800b1c8:	42ba      	cmp	r2, r7
 800b1ca:	bf38      	it	cc
 800b1cc:	2304      	movcc	r3, #4
 800b1ce:	9301      	str	r3, [sp, #4]
 800b1d0:	9b02      	ldr	r3, [sp, #8]
 800b1d2:	9103      	str	r1, [sp, #12]
 800b1d4:	428b      	cmp	r3, r1
 800b1d6:	d80c      	bhi.n	800b1f2 <__multiply+0x9e>
 800b1d8:	2e00      	cmp	r6, #0
 800b1da:	dd03      	ble.n	800b1e4 <__multiply+0x90>
 800b1dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d05b      	beq.n	800b29c <__multiply+0x148>
 800b1e4:	6106      	str	r6, [r0, #16]
 800b1e6:	b005      	add	sp, #20
 800b1e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ec:	f843 2b04 	str.w	r2, [r3], #4
 800b1f0:	e7d8      	b.n	800b1a4 <__multiply+0x50>
 800b1f2:	f8b1 a000 	ldrh.w	sl, [r1]
 800b1f6:	f1ba 0f00 	cmp.w	sl, #0
 800b1fa:	d024      	beq.n	800b246 <__multiply+0xf2>
 800b1fc:	f104 0e14 	add.w	lr, r4, #20
 800b200:	46a9      	mov	r9, r5
 800b202:	f04f 0c00 	mov.w	ip, #0
 800b206:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b20a:	f8d9 3000 	ldr.w	r3, [r9]
 800b20e:	fa1f fb87 	uxth.w	fp, r7
 800b212:	b29b      	uxth	r3, r3
 800b214:	fb0a 330b 	mla	r3, sl, fp, r3
 800b218:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b21c:	f8d9 7000 	ldr.w	r7, [r9]
 800b220:	4463      	add	r3, ip
 800b222:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b226:	fb0a c70b 	mla	r7, sl, fp, ip
 800b22a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b22e:	b29b      	uxth	r3, r3
 800b230:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b234:	4572      	cmp	r2, lr
 800b236:	f849 3b04 	str.w	r3, [r9], #4
 800b23a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b23e:	d8e2      	bhi.n	800b206 <__multiply+0xb2>
 800b240:	9b01      	ldr	r3, [sp, #4]
 800b242:	f845 c003 	str.w	ip, [r5, r3]
 800b246:	9b03      	ldr	r3, [sp, #12]
 800b248:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b24c:	3104      	adds	r1, #4
 800b24e:	f1b9 0f00 	cmp.w	r9, #0
 800b252:	d021      	beq.n	800b298 <__multiply+0x144>
 800b254:	682b      	ldr	r3, [r5, #0]
 800b256:	f104 0c14 	add.w	ip, r4, #20
 800b25a:	46ae      	mov	lr, r5
 800b25c:	f04f 0a00 	mov.w	sl, #0
 800b260:	f8bc b000 	ldrh.w	fp, [ip]
 800b264:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b268:	fb09 770b 	mla	r7, r9, fp, r7
 800b26c:	4457      	add	r7, sl
 800b26e:	b29b      	uxth	r3, r3
 800b270:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b274:	f84e 3b04 	str.w	r3, [lr], #4
 800b278:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b27c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b280:	f8be 3000 	ldrh.w	r3, [lr]
 800b284:	fb09 330a 	mla	r3, r9, sl, r3
 800b288:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b28c:	4562      	cmp	r2, ip
 800b28e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b292:	d8e5      	bhi.n	800b260 <__multiply+0x10c>
 800b294:	9f01      	ldr	r7, [sp, #4]
 800b296:	51eb      	str	r3, [r5, r7]
 800b298:	3504      	adds	r5, #4
 800b29a:	e799      	b.n	800b1d0 <__multiply+0x7c>
 800b29c:	3e01      	subs	r6, #1
 800b29e:	e79b      	b.n	800b1d8 <__multiply+0x84>
 800b2a0:	0800d5ec 	.word	0x0800d5ec
 800b2a4:	0800d5fd 	.word	0x0800d5fd

0800b2a8 <__pow5mult>:
 800b2a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2ac:	4615      	mov	r5, r2
 800b2ae:	f012 0203 	ands.w	r2, r2, #3
 800b2b2:	4607      	mov	r7, r0
 800b2b4:	460e      	mov	r6, r1
 800b2b6:	d007      	beq.n	800b2c8 <__pow5mult+0x20>
 800b2b8:	4c25      	ldr	r4, [pc, #148]	@ (800b350 <__pow5mult+0xa8>)
 800b2ba:	3a01      	subs	r2, #1
 800b2bc:	2300      	movs	r3, #0
 800b2be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b2c2:	f7ff fe9f 	bl	800b004 <__multadd>
 800b2c6:	4606      	mov	r6, r0
 800b2c8:	10ad      	asrs	r5, r5, #2
 800b2ca:	d03d      	beq.n	800b348 <__pow5mult+0xa0>
 800b2cc:	69fc      	ldr	r4, [r7, #28]
 800b2ce:	b97c      	cbnz	r4, 800b2f0 <__pow5mult+0x48>
 800b2d0:	2010      	movs	r0, #16
 800b2d2:	f7ff fd7f 	bl	800add4 <malloc>
 800b2d6:	4602      	mov	r2, r0
 800b2d8:	61f8      	str	r0, [r7, #28]
 800b2da:	b928      	cbnz	r0, 800b2e8 <__pow5mult+0x40>
 800b2dc:	4b1d      	ldr	r3, [pc, #116]	@ (800b354 <__pow5mult+0xac>)
 800b2de:	481e      	ldr	r0, [pc, #120]	@ (800b358 <__pow5mult+0xb0>)
 800b2e0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b2e4:	f000 fbea 	bl	800babc <__assert_func>
 800b2e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b2ec:	6004      	str	r4, [r0, #0]
 800b2ee:	60c4      	str	r4, [r0, #12]
 800b2f0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b2f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b2f8:	b94c      	cbnz	r4, 800b30e <__pow5mult+0x66>
 800b2fa:	f240 2171 	movw	r1, #625	@ 0x271
 800b2fe:	4638      	mov	r0, r7
 800b300:	f7ff ff12 	bl	800b128 <__i2b>
 800b304:	2300      	movs	r3, #0
 800b306:	f8c8 0008 	str.w	r0, [r8, #8]
 800b30a:	4604      	mov	r4, r0
 800b30c:	6003      	str	r3, [r0, #0]
 800b30e:	f04f 0900 	mov.w	r9, #0
 800b312:	07eb      	lsls	r3, r5, #31
 800b314:	d50a      	bpl.n	800b32c <__pow5mult+0x84>
 800b316:	4631      	mov	r1, r6
 800b318:	4622      	mov	r2, r4
 800b31a:	4638      	mov	r0, r7
 800b31c:	f7ff ff1a 	bl	800b154 <__multiply>
 800b320:	4631      	mov	r1, r6
 800b322:	4680      	mov	r8, r0
 800b324:	4638      	mov	r0, r7
 800b326:	f7ff fe4b 	bl	800afc0 <_Bfree>
 800b32a:	4646      	mov	r6, r8
 800b32c:	106d      	asrs	r5, r5, #1
 800b32e:	d00b      	beq.n	800b348 <__pow5mult+0xa0>
 800b330:	6820      	ldr	r0, [r4, #0]
 800b332:	b938      	cbnz	r0, 800b344 <__pow5mult+0x9c>
 800b334:	4622      	mov	r2, r4
 800b336:	4621      	mov	r1, r4
 800b338:	4638      	mov	r0, r7
 800b33a:	f7ff ff0b 	bl	800b154 <__multiply>
 800b33e:	6020      	str	r0, [r4, #0]
 800b340:	f8c0 9000 	str.w	r9, [r0]
 800b344:	4604      	mov	r4, r0
 800b346:	e7e4      	b.n	800b312 <__pow5mult+0x6a>
 800b348:	4630      	mov	r0, r6
 800b34a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b34e:	bf00      	nop
 800b350:	0800d658 	.word	0x0800d658
 800b354:	0800d57d 	.word	0x0800d57d
 800b358:	0800d5fd 	.word	0x0800d5fd

0800b35c <__lshift>:
 800b35c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b360:	460c      	mov	r4, r1
 800b362:	6849      	ldr	r1, [r1, #4]
 800b364:	6923      	ldr	r3, [r4, #16]
 800b366:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b36a:	68a3      	ldr	r3, [r4, #8]
 800b36c:	4607      	mov	r7, r0
 800b36e:	4691      	mov	r9, r2
 800b370:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b374:	f108 0601 	add.w	r6, r8, #1
 800b378:	42b3      	cmp	r3, r6
 800b37a:	db0b      	blt.n	800b394 <__lshift+0x38>
 800b37c:	4638      	mov	r0, r7
 800b37e:	f7ff fddf 	bl	800af40 <_Balloc>
 800b382:	4605      	mov	r5, r0
 800b384:	b948      	cbnz	r0, 800b39a <__lshift+0x3e>
 800b386:	4602      	mov	r2, r0
 800b388:	4b28      	ldr	r3, [pc, #160]	@ (800b42c <__lshift+0xd0>)
 800b38a:	4829      	ldr	r0, [pc, #164]	@ (800b430 <__lshift+0xd4>)
 800b38c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b390:	f000 fb94 	bl	800babc <__assert_func>
 800b394:	3101      	adds	r1, #1
 800b396:	005b      	lsls	r3, r3, #1
 800b398:	e7ee      	b.n	800b378 <__lshift+0x1c>
 800b39a:	2300      	movs	r3, #0
 800b39c:	f100 0114 	add.w	r1, r0, #20
 800b3a0:	f100 0210 	add.w	r2, r0, #16
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	4553      	cmp	r3, sl
 800b3a8:	db33      	blt.n	800b412 <__lshift+0xb6>
 800b3aa:	6920      	ldr	r0, [r4, #16]
 800b3ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b3b0:	f104 0314 	add.w	r3, r4, #20
 800b3b4:	f019 091f 	ands.w	r9, r9, #31
 800b3b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b3bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b3c0:	d02b      	beq.n	800b41a <__lshift+0xbe>
 800b3c2:	f1c9 0e20 	rsb	lr, r9, #32
 800b3c6:	468a      	mov	sl, r1
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	6818      	ldr	r0, [r3, #0]
 800b3cc:	fa00 f009 	lsl.w	r0, r0, r9
 800b3d0:	4310      	orrs	r0, r2
 800b3d2:	f84a 0b04 	str.w	r0, [sl], #4
 800b3d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3da:	459c      	cmp	ip, r3
 800b3dc:	fa22 f20e 	lsr.w	r2, r2, lr
 800b3e0:	d8f3      	bhi.n	800b3ca <__lshift+0x6e>
 800b3e2:	ebac 0304 	sub.w	r3, ip, r4
 800b3e6:	3b15      	subs	r3, #21
 800b3e8:	f023 0303 	bic.w	r3, r3, #3
 800b3ec:	3304      	adds	r3, #4
 800b3ee:	f104 0015 	add.w	r0, r4, #21
 800b3f2:	4584      	cmp	ip, r0
 800b3f4:	bf38      	it	cc
 800b3f6:	2304      	movcc	r3, #4
 800b3f8:	50ca      	str	r2, [r1, r3]
 800b3fa:	b10a      	cbz	r2, 800b400 <__lshift+0xa4>
 800b3fc:	f108 0602 	add.w	r6, r8, #2
 800b400:	3e01      	subs	r6, #1
 800b402:	4638      	mov	r0, r7
 800b404:	612e      	str	r6, [r5, #16]
 800b406:	4621      	mov	r1, r4
 800b408:	f7ff fdda 	bl	800afc0 <_Bfree>
 800b40c:	4628      	mov	r0, r5
 800b40e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b412:	f842 0f04 	str.w	r0, [r2, #4]!
 800b416:	3301      	adds	r3, #1
 800b418:	e7c5      	b.n	800b3a6 <__lshift+0x4a>
 800b41a:	3904      	subs	r1, #4
 800b41c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b420:	f841 2f04 	str.w	r2, [r1, #4]!
 800b424:	459c      	cmp	ip, r3
 800b426:	d8f9      	bhi.n	800b41c <__lshift+0xc0>
 800b428:	e7ea      	b.n	800b400 <__lshift+0xa4>
 800b42a:	bf00      	nop
 800b42c:	0800d5ec 	.word	0x0800d5ec
 800b430:	0800d5fd 	.word	0x0800d5fd

0800b434 <__mcmp>:
 800b434:	690a      	ldr	r2, [r1, #16]
 800b436:	4603      	mov	r3, r0
 800b438:	6900      	ldr	r0, [r0, #16]
 800b43a:	1a80      	subs	r0, r0, r2
 800b43c:	b530      	push	{r4, r5, lr}
 800b43e:	d10e      	bne.n	800b45e <__mcmp+0x2a>
 800b440:	3314      	adds	r3, #20
 800b442:	3114      	adds	r1, #20
 800b444:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b448:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b44c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b450:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b454:	4295      	cmp	r5, r2
 800b456:	d003      	beq.n	800b460 <__mcmp+0x2c>
 800b458:	d205      	bcs.n	800b466 <__mcmp+0x32>
 800b45a:	f04f 30ff 	mov.w	r0, #4294967295
 800b45e:	bd30      	pop	{r4, r5, pc}
 800b460:	42a3      	cmp	r3, r4
 800b462:	d3f3      	bcc.n	800b44c <__mcmp+0x18>
 800b464:	e7fb      	b.n	800b45e <__mcmp+0x2a>
 800b466:	2001      	movs	r0, #1
 800b468:	e7f9      	b.n	800b45e <__mcmp+0x2a>
	...

0800b46c <__mdiff>:
 800b46c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b470:	4689      	mov	r9, r1
 800b472:	4606      	mov	r6, r0
 800b474:	4611      	mov	r1, r2
 800b476:	4648      	mov	r0, r9
 800b478:	4614      	mov	r4, r2
 800b47a:	f7ff ffdb 	bl	800b434 <__mcmp>
 800b47e:	1e05      	subs	r5, r0, #0
 800b480:	d112      	bne.n	800b4a8 <__mdiff+0x3c>
 800b482:	4629      	mov	r1, r5
 800b484:	4630      	mov	r0, r6
 800b486:	f7ff fd5b 	bl	800af40 <_Balloc>
 800b48a:	4602      	mov	r2, r0
 800b48c:	b928      	cbnz	r0, 800b49a <__mdiff+0x2e>
 800b48e:	4b3f      	ldr	r3, [pc, #252]	@ (800b58c <__mdiff+0x120>)
 800b490:	f240 2137 	movw	r1, #567	@ 0x237
 800b494:	483e      	ldr	r0, [pc, #248]	@ (800b590 <__mdiff+0x124>)
 800b496:	f000 fb11 	bl	800babc <__assert_func>
 800b49a:	2301      	movs	r3, #1
 800b49c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b4a0:	4610      	mov	r0, r2
 800b4a2:	b003      	add	sp, #12
 800b4a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4a8:	bfbc      	itt	lt
 800b4aa:	464b      	movlt	r3, r9
 800b4ac:	46a1      	movlt	r9, r4
 800b4ae:	4630      	mov	r0, r6
 800b4b0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b4b4:	bfba      	itte	lt
 800b4b6:	461c      	movlt	r4, r3
 800b4b8:	2501      	movlt	r5, #1
 800b4ba:	2500      	movge	r5, #0
 800b4bc:	f7ff fd40 	bl	800af40 <_Balloc>
 800b4c0:	4602      	mov	r2, r0
 800b4c2:	b918      	cbnz	r0, 800b4cc <__mdiff+0x60>
 800b4c4:	4b31      	ldr	r3, [pc, #196]	@ (800b58c <__mdiff+0x120>)
 800b4c6:	f240 2145 	movw	r1, #581	@ 0x245
 800b4ca:	e7e3      	b.n	800b494 <__mdiff+0x28>
 800b4cc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b4d0:	6926      	ldr	r6, [r4, #16]
 800b4d2:	60c5      	str	r5, [r0, #12]
 800b4d4:	f109 0310 	add.w	r3, r9, #16
 800b4d8:	f109 0514 	add.w	r5, r9, #20
 800b4dc:	f104 0e14 	add.w	lr, r4, #20
 800b4e0:	f100 0b14 	add.w	fp, r0, #20
 800b4e4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b4e8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b4ec:	9301      	str	r3, [sp, #4]
 800b4ee:	46d9      	mov	r9, fp
 800b4f0:	f04f 0c00 	mov.w	ip, #0
 800b4f4:	9b01      	ldr	r3, [sp, #4]
 800b4f6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b4fa:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b4fe:	9301      	str	r3, [sp, #4]
 800b500:	fa1f f38a 	uxth.w	r3, sl
 800b504:	4619      	mov	r1, r3
 800b506:	b283      	uxth	r3, r0
 800b508:	1acb      	subs	r3, r1, r3
 800b50a:	0c00      	lsrs	r0, r0, #16
 800b50c:	4463      	add	r3, ip
 800b50e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b512:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b516:	b29b      	uxth	r3, r3
 800b518:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b51c:	4576      	cmp	r6, lr
 800b51e:	f849 3b04 	str.w	r3, [r9], #4
 800b522:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b526:	d8e5      	bhi.n	800b4f4 <__mdiff+0x88>
 800b528:	1b33      	subs	r3, r6, r4
 800b52a:	3b15      	subs	r3, #21
 800b52c:	f023 0303 	bic.w	r3, r3, #3
 800b530:	3415      	adds	r4, #21
 800b532:	3304      	adds	r3, #4
 800b534:	42a6      	cmp	r6, r4
 800b536:	bf38      	it	cc
 800b538:	2304      	movcc	r3, #4
 800b53a:	441d      	add	r5, r3
 800b53c:	445b      	add	r3, fp
 800b53e:	461e      	mov	r6, r3
 800b540:	462c      	mov	r4, r5
 800b542:	4544      	cmp	r4, r8
 800b544:	d30e      	bcc.n	800b564 <__mdiff+0xf8>
 800b546:	f108 0103 	add.w	r1, r8, #3
 800b54a:	1b49      	subs	r1, r1, r5
 800b54c:	f021 0103 	bic.w	r1, r1, #3
 800b550:	3d03      	subs	r5, #3
 800b552:	45a8      	cmp	r8, r5
 800b554:	bf38      	it	cc
 800b556:	2100      	movcc	r1, #0
 800b558:	440b      	add	r3, r1
 800b55a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b55e:	b191      	cbz	r1, 800b586 <__mdiff+0x11a>
 800b560:	6117      	str	r7, [r2, #16]
 800b562:	e79d      	b.n	800b4a0 <__mdiff+0x34>
 800b564:	f854 1b04 	ldr.w	r1, [r4], #4
 800b568:	46e6      	mov	lr, ip
 800b56a:	0c08      	lsrs	r0, r1, #16
 800b56c:	fa1c fc81 	uxtah	ip, ip, r1
 800b570:	4471      	add	r1, lr
 800b572:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b576:	b289      	uxth	r1, r1
 800b578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b57c:	f846 1b04 	str.w	r1, [r6], #4
 800b580:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b584:	e7dd      	b.n	800b542 <__mdiff+0xd6>
 800b586:	3f01      	subs	r7, #1
 800b588:	e7e7      	b.n	800b55a <__mdiff+0xee>
 800b58a:	bf00      	nop
 800b58c:	0800d5ec 	.word	0x0800d5ec
 800b590:	0800d5fd 	.word	0x0800d5fd

0800b594 <__d2b>:
 800b594:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b598:	460f      	mov	r7, r1
 800b59a:	2101      	movs	r1, #1
 800b59c:	ec59 8b10 	vmov	r8, r9, d0
 800b5a0:	4616      	mov	r6, r2
 800b5a2:	f7ff fccd 	bl	800af40 <_Balloc>
 800b5a6:	4604      	mov	r4, r0
 800b5a8:	b930      	cbnz	r0, 800b5b8 <__d2b+0x24>
 800b5aa:	4602      	mov	r2, r0
 800b5ac:	4b23      	ldr	r3, [pc, #140]	@ (800b63c <__d2b+0xa8>)
 800b5ae:	4824      	ldr	r0, [pc, #144]	@ (800b640 <__d2b+0xac>)
 800b5b0:	f240 310f 	movw	r1, #783	@ 0x30f
 800b5b4:	f000 fa82 	bl	800babc <__assert_func>
 800b5b8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b5bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b5c0:	b10d      	cbz	r5, 800b5c6 <__d2b+0x32>
 800b5c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b5c6:	9301      	str	r3, [sp, #4]
 800b5c8:	f1b8 0300 	subs.w	r3, r8, #0
 800b5cc:	d023      	beq.n	800b616 <__d2b+0x82>
 800b5ce:	4668      	mov	r0, sp
 800b5d0:	9300      	str	r3, [sp, #0]
 800b5d2:	f7ff fd7c 	bl	800b0ce <__lo0bits>
 800b5d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b5da:	b1d0      	cbz	r0, 800b612 <__d2b+0x7e>
 800b5dc:	f1c0 0320 	rsb	r3, r0, #32
 800b5e0:	fa02 f303 	lsl.w	r3, r2, r3
 800b5e4:	430b      	orrs	r3, r1
 800b5e6:	40c2      	lsrs	r2, r0
 800b5e8:	6163      	str	r3, [r4, #20]
 800b5ea:	9201      	str	r2, [sp, #4]
 800b5ec:	9b01      	ldr	r3, [sp, #4]
 800b5ee:	61a3      	str	r3, [r4, #24]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	bf0c      	ite	eq
 800b5f4:	2201      	moveq	r2, #1
 800b5f6:	2202      	movne	r2, #2
 800b5f8:	6122      	str	r2, [r4, #16]
 800b5fa:	b1a5      	cbz	r5, 800b626 <__d2b+0x92>
 800b5fc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b600:	4405      	add	r5, r0
 800b602:	603d      	str	r5, [r7, #0]
 800b604:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b608:	6030      	str	r0, [r6, #0]
 800b60a:	4620      	mov	r0, r4
 800b60c:	b003      	add	sp, #12
 800b60e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b612:	6161      	str	r1, [r4, #20]
 800b614:	e7ea      	b.n	800b5ec <__d2b+0x58>
 800b616:	a801      	add	r0, sp, #4
 800b618:	f7ff fd59 	bl	800b0ce <__lo0bits>
 800b61c:	9b01      	ldr	r3, [sp, #4]
 800b61e:	6163      	str	r3, [r4, #20]
 800b620:	3020      	adds	r0, #32
 800b622:	2201      	movs	r2, #1
 800b624:	e7e8      	b.n	800b5f8 <__d2b+0x64>
 800b626:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b62a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b62e:	6038      	str	r0, [r7, #0]
 800b630:	6918      	ldr	r0, [r3, #16]
 800b632:	f7ff fd2d 	bl	800b090 <__hi0bits>
 800b636:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b63a:	e7e5      	b.n	800b608 <__d2b+0x74>
 800b63c:	0800d5ec 	.word	0x0800d5ec
 800b640:	0800d5fd 	.word	0x0800d5fd

0800b644 <__ssputs_r>:
 800b644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b648:	688e      	ldr	r6, [r1, #8]
 800b64a:	461f      	mov	r7, r3
 800b64c:	42be      	cmp	r6, r7
 800b64e:	680b      	ldr	r3, [r1, #0]
 800b650:	4682      	mov	sl, r0
 800b652:	460c      	mov	r4, r1
 800b654:	4690      	mov	r8, r2
 800b656:	d82d      	bhi.n	800b6b4 <__ssputs_r+0x70>
 800b658:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b65c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b660:	d026      	beq.n	800b6b0 <__ssputs_r+0x6c>
 800b662:	6965      	ldr	r5, [r4, #20]
 800b664:	6909      	ldr	r1, [r1, #16]
 800b666:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b66a:	eba3 0901 	sub.w	r9, r3, r1
 800b66e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b672:	1c7b      	adds	r3, r7, #1
 800b674:	444b      	add	r3, r9
 800b676:	106d      	asrs	r5, r5, #1
 800b678:	429d      	cmp	r5, r3
 800b67a:	bf38      	it	cc
 800b67c:	461d      	movcc	r5, r3
 800b67e:	0553      	lsls	r3, r2, #21
 800b680:	d527      	bpl.n	800b6d2 <__ssputs_r+0x8e>
 800b682:	4629      	mov	r1, r5
 800b684:	f7ff fbd0 	bl	800ae28 <_malloc_r>
 800b688:	4606      	mov	r6, r0
 800b68a:	b360      	cbz	r0, 800b6e6 <__ssputs_r+0xa2>
 800b68c:	6921      	ldr	r1, [r4, #16]
 800b68e:	464a      	mov	r2, r9
 800b690:	f000 fa06 	bl	800baa0 <memcpy>
 800b694:	89a3      	ldrh	r3, [r4, #12]
 800b696:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b69a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b69e:	81a3      	strh	r3, [r4, #12]
 800b6a0:	6126      	str	r6, [r4, #16]
 800b6a2:	6165      	str	r5, [r4, #20]
 800b6a4:	444e      	add	r6, r9
 800b6a6:	eba5 0509 	sub.w	r5, r5, r9
 800b6aa:	6026      	str	r6, [r4, #0]
 800b6ac:	60a5      	str	r5, [r4, #8]
 800b6ae:	463e      	mov	r6, r7
 800b6b0:	42be      	cmp	r6, r7
 800b6b2:	d900      	bls.n	800b6b6 <__ssputs_r+0x72>
 800b6b4:	463e      	mov	r6, r7
 800b6b6:	6820      	ldr	r0, [r4, #0]
 800b6b8:	4632      	mov	r2, r6
 800b6ba:	4641      	mov	r1, r8
 800b6bc:	f000 f9c6 	bl	800ba4c <memmove>
 800b6c0:	68a3      	ldr	r3, [r4, #8]
 800b6c2:	1b9b      	subs	r3, r3, r6
 800b6c4:	60a3      	str	r3, [r4, #8]
 800b6c6:	6823      	ldr	r3, [r4, #0]
 800b6c8:	4433      	add	r3, r6
 800b6ca:	6023      	str	r3, [r4, #0]
 800b6cc:	2000      	movs	r0, #0
 800b6ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6d2:	462a      	mov	r2, r5
 800b6d4:	f000 fa36 	bl	800bb44 <_realloc_r>
 800b6d8:	4606      	mov	r6, r0
 800b6da:	2800      	cmp	r0, #0
 800b6dc:	d1e0      	bne.n	800b6a0 <__ssputs_r+0x5c>
 800b6de:	6921      	ldr	r1, [r4, #16]
 800b6e0:	4650      	mov	r0, sl
 800b6e2:	f7ff fb2d 	bl	800ad40 <_free_r>
 800b6e6:	230c      	movs	r3, #12
 800b6e8:	f8ca 3000 	str.w	r3, [sl]
 800b6ec:	89a3      	ldrh	r3, [r4, #12]
 800b6ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6f2:	81a3      	strh	r3, [r4, #12]
 800b6f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b6f8:	e7e9      	b.n	800b6ce <__ssputs_r+0x8a>
	...

0800b6fc <_svfiprintf_r>:
 800b6fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b700:	4698      	mov	r8, r3
 800b702:	898b      	ldrh	r3, [r1, #12]
 800b704:	061b      	lsls	r3, r3, #24
 800b706:	b09d      	sub	sp, #116	@ 0x74
 800b708:	4607      	mov	r7, r0
 800b70a:	460d      	mov	r5, r1
 800b70c:	4614      	mov	r4, r2
 800b70e:	d510      	bpl.n	800b732 <_svfiprintf_r+0x36>
 800b710:	690b      	ldr	r3, [r1, #16]
 800b712:	b973      	cbnz	r3, 800b732 <_svfiprintf_r+0x36>
 800b714:	2140      	movs	r1, #64	@ 0x40
 800b716:	f7ff fb87 	bl	800ae28 <_malloc_r>
 800b71a:	6028      	str	r0, [r5, #0]
 800b71c:	6128      	str	r0, [r5, #16]
 800b71e:	b930      	cbnz	r0, 800b72e <_svfiprintf_r+0x32>
 800b720:	230c      	movs	r3, #12
 800b722:	603b      	str	r3, [r7, #0]
 800b724:	f04f 30ff 	mov.w	r0, #4294967295
 800b728:	b01d      	add	sp, #116	@ 0x74
 800b72a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b72e:	2340      	movs	r3, #64	@ 0x40
 800b730:	616b      	str	r3, [r5, #20]
 800b732:	2300      	movs	r3, #0
 800b734:	9309      	str	r3, [sp, #36]	@ 0x24
 800b736:	2320      	movs	r3, #32
 800b738:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b73c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b740:	2330      	movs	r3, #48	@ 0x30
 800b742:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b8e0 <_svfiprintf_r+0x1e4>
 800b746:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b74a:	f04f 0901 	mov.w	r9, #1
 800b74e:	4623      	mov	r3, r4
 800b750:	469a      	mov	sl, r3
 800b752:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b756:	b10a      	cbz	r2, 800b75c <_svfiprintf_r+0x60>
 800b758:	2a25      	cmp	r2, #37	@ 0x25
 800b75a:	d1f9      	bne.n	800b750 <_svfiprintf_r+0x54>
 800b75c:	ebba 0b04 	subs.w	fp, sl, r4
 800b760:	d00b      	beq.n	800b77a <_svfiprintf_r+0x7e>
 800b762:	465b      	mov	r3, fp
 800b764:	4622      	mov	r2, r4
 800b766:	4629      	mov	r1, r5
 800b768:	4638      	mov	r0, r7
 800b76a:	f7ff ff6b 	bl	800b644 <__ssputs_r>
 800b76e:	3001      	adds	r0, #1
 800b770:	f000 80a7 	beq.w	800b8c2 <_svfiprintf_r+0x1c6>
 800b774:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b776:	445a      	add	r2, fp
 800b778:	9209      	str	r2, [sp, #36]	@ 0x24
 800b77a:	f89a 3000 	ldrb.w	r3, [sl]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	f000 809f 	beq.w	800b8c2 <_svfiprintf_r+0x1c6>
 800b784:	2300      	movs	r3, #0
 800b786:	f04f 32ff 	mov.w	r2, #4294967295
 800b78a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b78e:	f10a 0a01 	add.w	sl, sl, #1
 800b792:	9304      	str	r3, [sp, #16]
 800b794:	9307      	str	r3, [sp, #28]
 800b796:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b79a:	931a      	str	r3, [sp, #104]	@ 0x68
 800b79c:	4654      	mov	r4, sl
 800b79e:	2205      	movs	r2, #5
 800b7a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7a4:	484e      	ldr	r0, [pc, #312]	@ (800b8e0 <_svfiprintf_r+0x1e4>)
 800b7a6:	f7f4 fd33 	bl	8000210 <memchr>
 800b7aa:	9a04      	ldr	r2, [sp, #16]
 800b7ac:	b9d8      	cbnz	r0, 800b7e6 <_svfiprintf_r+0xea>
 800b7ae:	06d0      	lsls	r0, r2, #27
 800b7b0:	bf44      	itt	mi
 800b7b2:	2320      	movmi	r3, #32
 800b7b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b7b8:	0711      	lsls	r1, r2, #28
 800b7ba:	bf44      	itt	mi
 800b7bc:	232b      	movmi	r3, #43	@ 0x2b
 800b7be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b7c2:	f89a 3000 	ldrb.w	r3, [sl]
 800b7c6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b7c8:	d015      	beq.n	800b7f6 <_svfiprintf_r+0xfa>
 800b7ca:	9a07      	ldr	r2, [sp, #28]
 800b7cc:	4654      	mov	r4, sl
 800b7ce:	2000      	movs	r0, #0
 800b7d0:	f04f 0c0a 	mov.w	ip, #10
 800b7d4:	4621      	mov	r1, r4
 800b7d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7da:	3b30      	subs	r3, #48	@ 0x30
 800b7dc:	2b09      	cmp	r3, #9
 800b7de:	d94b      	bls.n	800b878 <_svfiprintf_r+0x17c>
 800b7e0:	b1b0      	cbz	r0, 800b810 <_svfiprintf_r+0x114>
 800b7e2:	9207      	str	r2, [sp, #28]
 800b7e4:	e014      	b.n	800b810 <_svfiprintf_r+0x114>
 800b7e6:	eba0 0308 	sub.w	r3, r0, r8
 800b7ea:	fa09 f303 	lsl.w	r3, r9, r3
 800b7ee:	4313      	orrs	r3, r2
 800b7f0:	9304      	str	r3, [sp, #16]
 800b7f2:	46a2      	mov	sl, r4
 800b7f4:	e7d2      	b.n	800b79c <_svfiprintf_r+0xa0>
 800b7f6:	9b03      	ldr	r3, [sp, #12]
 800b7f8:	1d19      	adds	r1, r3, #4
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	9103      	str	r1, [sp, #12]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	bfbb      	ittet	lt
 800b802:	425b      	neglt	r3, r3
 800b804:	f042 0202 	orrlt.w	r2, r2, #2
 800b808:	9307      	strge	r3, [sp, #28]
 800b80a:	9307      	strlt	r3, [sp, #28]
 800b80c:	bfb8      	it	lt
 800b80e:	9204      	strlt	r2, [sp, #16]
 800b810:	7823      	ldrb	r3, [r4, #0]
 800b812:	2b2e      	cmp	r3, #46	@ 0x2e
 800b814:	d10a      	bne.n	800b82c <_svfiprintf_r+0x130>
 800b816:	7863      	ldrb	r3, [r4, #1]
 800b818:	2b2a      	cmp	r3, #42	@ 0x2a
 800b81a:	d132      	bne.n	800b882 <_svfiprintf_r+0x186>
 800b81c:	9b03      	ldr	r3, [sp, #12]
 800b81e:	1d1a      	adds	r2, r3, #4
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	9203      	str	r2, [sp, #12]
 800b824:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b828:	3402      	adds	r4, #2
 800b82a:	9305      	str	r3, [sp, #20]
 800b82c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b8f0 <_svfiprintf_r+0x1f4>
 800b830:	7821      	ldrb	r1, [r4, #0]
 800b832:	2203      	movs	r2, #3
 800b834:	4650      	mov	r0, sl
 800b836:	f7f4 fceb 	bl	8000210 <memchr>
 800b83a:	b138      	cbz	r0, 800b84c <_svfiprintf_r+0x150>
 800b83c:	9b04      	ldr	r3, [sp, #16]
 800b83e:	eba0 000a 	sub.w	r0, r0, sl
 800b842:	2240      	movs	r2, #64	@ 0x40
 800b844:	4082      	lsls	r2, r0
 800b846:	4313      	orrs	r3, r2
 800b848:	3401      	adds	r4, #1
 800b84a:	9304      	str	r3, [sp, #16]
 800b84c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b850:	4824      	ldr	r0, [pc, #144]	@ (800b8e4 <_svfiprintf_r+0x1e8>)
 800b852:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b856:	2206      	movs	r2, #6
 800b858:	f7f4 fcda 	bl	8000210 <memchr>
 800b85c:	2800      	cmp	r0, #0
 800b85e:	d036      	beq.n	800b8ce <_svfiprintf_r+0x1d2>
 800b860:	4b21      	ldr	r3, [pc, #132]	@ (800b8e8 <_svfiprintf_r+0x1ec>)
 800b862:	bb1b      	cbnz	r3, 800b8ac <_svfiprintf_r+0x1b0>
 800b864:	9b03      	ldr	r3, [sp, #12]
 800b866:	3307      	adds	r3, #7
 800b868:	f023 0307 	bic.w	r3, r3, #7
 800b86c:	3308      	adds	r3, #8
 800b86e:	9303      	str	r3, [sp, #12]
 800b870:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b872:	4433      	add	r3, r6
 800b874:	9309      	str	r3, [sp, #36]	@ 0x24
 800b876:	e76a      	b.n	800b74e <_svfiprintf_r+0x52>
 800b878:	fb0c 3202 	mla	r2, ip, r2, r3
 800b87c:	460c      	mov	r4, r1
 800b87e:	2001      	movs	r0, #1
 800b880:	e7a8      	b.n	800b7d4 <_svfiprintf_r+0xd8>
 800b882:	2300      	movs	r3, #0
 800b884:	3401      	adds	r4, #1
 800b886:	9305      	str	r3, [sp, #20]
 800b888:	4619      	mov	r1, r3
 800b88a:	f04f 0c0a 	mov.w	ip, #10
 800b88e:	4620      	mov	r0, r4
 800b890:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b894:	3a30      	subs	r2, #48	@ 0x30
 800b896:	2a09      	cmp	r2, #9
 800b898:	d903      	bls.n	800b8a2 <_svfiprintf_r+0x1a6>
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d0c6      	beq.n	800b82c <_svfiprintf_r+0x130>
 800b89e:	9105      	str	r1, [sp, #20]
 800b8a0:	e7c4      	b.n	800b82c <_svfiprintf_r+0x130>
 800b8a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8a6:	4604      	mov	r4, r0
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	e7f0      	b.n	800b88e <_svfiprintf_r+0x192>
 800b8ac:	ab03      	add	r3, sp, #12
 800b8ae:	9300      	str	r3, [sp, #0]
 800b8b0:	462a      	mov	r2, r5
 800b8b2:	4b0e      	ldr	r3, [pc, #56]	@ (800b8ec <_svfiprintf_r+0x1f0>)
 800b8b4:	a904      	add	r1, sp, #16
 800b8b6:	4638      	mov	r0, r7
 800b8b8:	f7fd fe98 	bl	80095ec <_printf_float>
 800b8bc:	1c42      	adds	r2, r0, #1
 800b8be:	4606      	mov	r6, r0
 800b8c0:	d1d6      	bne.n	800b870 <_svfiprintf_r+0x174>
 800b8c2:	89ab      	ldrh	r3, [r5, #12]
 800b8c4:	065b      	lsls	r3, r3, #25
 800b8c6:	f53f af2d 	bmi.w	800b724 <_svfiprintf_r+0x28>
 800b8ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b8cc:	e72c      	b.n	800b728 <_svfiprintf_r+0x2c>
 800b8ce:	ab03      	add	r3, sp, #12
 800b8d0:	9300      	str	r3, [sp, #0]
 800b8d2:	462a      	mov	r2, r5
 800b8d4:	4b05      	ldr	r3, [pc, #20]	@ (800b8ec <_svfiprintf_r+0x1f0>)
 800b8d6:	a904      	add	r1, sp, #16
 800b8d8:	4638      	mov	r0, r7
 800b8da:	f7fe f91f 	bl	8009b1c <_printf_i>
 800b8de:	e7ed      	b.n	800b8bc <_svfiprintf_r+0x1c0>
 800b8e0:	0800d758 	.word	0x0800d758
 800b8e4:	0800d762 	.word	0x0800d762
 800b8e8:	080095ed 	.word	0x080095ed
 800b8ec:	0800b645 	.word	0x0800b645
 800b8f0:	0800d75e 	.word	0x0800d75e

0800b8f4 <__sflush_r>:
 800b8f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b8f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8fc:	0716      	lsls	r6, r2, #28
 800b8fe:	4605      	mov	r5, r0
 800b900:	460c      	mov	r4, r1
 800b902:	d454      	bmi.n	800b9ae <__sflush_r+0xba>
 800b904:	684b      	ldr	r3, [r1, #4]
 800b906:	2b00      	cmp	r3, #0
 800b908:	dc02      	bgt.n	800b910 <__sflush_r+0x1c>
 800b90a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	dd48      	ble.n	800b9a2 <__sflush_r+0xae>
 800b910:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b912:	2e00      	cmp	r6, #0
 800b914:	d045      	beq.n	800b9a2 <__sflush_r+0xae>
 800b916:	2300      	movs	r3, #0
 800b918:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b91c:	682f      	ldr	r7, [r5, #0]
 800b91e:	6a21      	ldr	r1, [r4, #32]
 800b920:	602b      	str	r3, [r5, #0]
 800b922:	d030      	beq.n	800b986 <__sflush_r+0x92>
 800b924:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b926:	89a3      	ldrh	r3, [r4, #12]
 800b928:	0759      	lsls	r1, r3, #29
 800b92a:	d505      	bpl.n	800b938 <__sflush_r+0x44>
 800b92c:	6863      	ldr	r3, [r4, #4]
 800b92e:	1ad2      	subs	r2, r2, r3
 800b930:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b932:	b10b      	cbz	r3, 800b938 <__sflush_r+0x44>
 800b934:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b936:	1ad2      	subs	r2, r2, r3
 800b938:	2300      	movs	r3, #0
 800b93a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b93c:	6a21      	ldr	r1, [r4, #32]
 800b93e:	4628      	mov	r0, r5
 800b940:	47b0      	blx	r6
 800b942:	1c43      	adds	r3, r0, #1
 800b944:	89a3      	ldrh	r3, [r4, #12]
 800b946:	d106      	bne.n	800b956 <__sflush_r+0x62>
 800b948:	6829      	ldr	r1, [r5, #0]
 800b94a:	291d      	cmp	r1, #29
 800b94c:	d82b      	bhi.n	800b9a6 <__sflush_r+0xb2>
 800b94e:	4a2a      	ldr	r2, [pc, #168]	@ (800b9f8 <__sflush_r+0x104>)
 800b950:	410a      	asrs	r2, r1
 800b952:	07d6      	lsls	r6, r2, #31
 800b954:	d427      	bmi.n	800b9a6 <__sflush_r+0xb2>
 800b956:	2200      	movs	r2, #0
 800b958:	6062      	str	r2, [r4, #4]
 800b95a:	04d9      	lsls	r1, r3, #19
 800b95c:	6922      	ldr	r2, [r4, #16]
 800b95e:	6022      	str	r2, [r4, #0]
 800b960:	d504      	bpl.n	800b96c <__sflush_r+0x78>
 800b962:	1c42      	adds	r2, r0, #1
 800b964:	d101      	bne.n	800b96a <__sflush_r+0x76>
 800b966:	682b      	ldr	r3, [r5, #0]
 800b968:	b903      	cbnz	r3, 800b96c <__sflush_r+0x78>
 800b96a:	6560      	str	r0, [r4, #84]	@ 0x54
 800b96c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b96e:	602f      	str	r7, [r5, #0]
 800b970:	b1b9      	cbz	r1, 800b9a2 <__sflush_r+0xae>
 800b972:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b976:	4299      	cmp	r1, r3
 800b978:	d002      	beq.n	800b980 <__sflush_r+0x8c>
 800b97a:	4628      	mov	r0, r5
 800b97c:	f7ff f9e0 	bl	800ad40 <_free_r>
 800b980:	2300      	movs	r3, #0
 800b982:	6363      	str	r3, [r4, #52]	@ 0x34
 800b984:	e00d      	b.n	800b9a2 <__sflush_r+0xae>
 800b986:	2301      	movs	r3, #1
 800b988:	4628      	mov	r0, r5
 800b98a:	47b0      	blx	r6
 800b98c:	4602      	mov	r2, r0
 800b98e:	1c50      	adds	r0, r2, #1
 800b990:	d1c9      	bne.n	800b926 <__sflush_r+0x32>
 800b992:	682b      	ldr	r3, [r5, #0]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d0c6      	beq.n	800b926 <__sflush_r+0x32>
 800b998:	2b1d      	cmp	r3, #29
 800b99a:	d001      	beq.n	800b9a0 <__sflush_r+0xac>
 800b99c:	2b16      	cmp	r3, #22
 800b99e:	d11e      	bne.n	800b9de <__sflush_r+0xea>
 800b9a0:	602f      	str	r7, [r5, #0]
 800b9a2:	2000      	movs	r0, #0
 800b9a4:	e022      	b.n	800b9ec <__sflush_r+0xf8>
 800b9a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b9aa:	b21b      	sxth	r3, r3
 800b9ac:	e01b      	b.n	800b9e6 <__sflush_r+0xf2>
 800b9ae:	690f      	ldr	r7, [r1, #16]
 800b9b0:	2f00      	cmp	r7, #0
 800b9b2:	d0f6      	beq.n	800b9a2 <__sflush_r+0xae>
 800b9b4:	0793      	lsls	r3, r2, #30
 800b9b6:	680e      	ldr	r6, [r1, #0]
 800b9b8:	bf08      	it	eq
 800b9ba:	694b      	ldreq	r3, [r1, #20]
 800b9bc:	600f      	str	r7, [r1, #0]
 800b9be:	bf18      	it	ne
 800b9c0:	2300      	movne	r3, #0
 800b9c2:	eba6 0807 	sub.w	r8, r6, r7
 800b9c6:	608b      	str	r3, [r1, #8]
 800b9c8:	f1b8 0f00 	cmp.w	r8, #0
 800b9cc:	dde9      	ble.n	800b9a2 <__sflush_r+0xae>
 800b9ce:	6a21      	ldr	r1, [r4, #32]
 800b9d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b9d2:	4643      	mov	r3, r8
 800b9d4:	463a      	mov	r2, r7
 800b9d6:	4628      	mov	r0, r5
 800b9d8:	47b0      	blx	r6
 800b9da:	2800      	cmp	r0, #0
 800b9dc:	dc08      	bgt.n	800b9f0 <__sflush_r+0xfc>
 800b9de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b9e6:	81a3      	strh	r3, [r4, #12]
 800b9e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b9ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9f0:	4407      	add	r7, r0
 800b9f2:	eba8 0800 	sub.w	r8, r8, r0
 800b9f6:	e7e7      	b.n	800b9c8 <__sflush_r+0xd4>
 800b9f8:	dfbffffe 	.word	0xdfbffffe

0800b9fc <_fflush_r>:
 800b9fc:	b538      	push	{r3, r4, r5, lr}
 800b9fe:	690b      	ldr	r3, [r1, #16]
 800ba00:	4605      	mov	r5, r0
 800ba02:	460c      	mov	r4, r1
 800ba04:	b913      	cbnz	r3, 800ba0c <_fflush_r+0x10>
 800ba06:	2500      	movs	r5, #0
 800ba08:	4628      	mov	r0, r5
 800ba0a:	bd38      	pop	{r3, r4, r5, pc}
 800ba0c:	b118      	cbz	r0, 800ba16 <_fflush_r+0x1a>
 800ba0e:	6a03      	ldr	r3, [r0, #32]
 800ba10:	b90b      	cbnz	r3, 800ba16 <_fflush_r+0x1a>
 800ba12:	f7fe fa2f 	bl	8009e74 <__sinit>
 800ba16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d0f3      	beq.n	800ba06 <_fflush_r+0xa>
 800ba1e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ba20:	07d0      	lsls	r0, r2, #31
 800ba22:	d404      	bmi.n	800ba2e <_fflush_r+0x32>
 800ba24:	0599      	lsls	r1, r3, #22
 800ba26:	d402      	bmi.n	800ba2e <_fflush_r+0x32>
 800ba28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ba2a:	f7fe fb3a 	bl	800a0a2 <__retarget_lock_acquire_recursive>
 800ba2e:	4628      	mov	r0, r5
 800ba30:	4621      	mov	r1, r4
 800ba32:	f7ff ff5f 	bl	800b8f4 <__sflush_r>
 800ba36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ba38:	07da      	lsls	r2, r3, #31
 800ba3a:	4605      	mov	r5, r0
 800ba3c:	d4e4      	bmi.n	800ba08 <_fflush_r+0xc>
 800ba3e:	89a3      	ldrh	r3, [r4, #12]
 800ba40:	059b      	lsls	r3, r3, #22
 800ba42:	d4e1      	bmi.n	800ba08 <_fflush_r+0xc>
 800ba44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ba46:	f7fe fb2d 	bl	800a0a4 <__retarget_lock_release_recursive>
 800ba4a:	e7dd      	b.n	800ba08 <_fflush_r+0xc>

0800ba4c <memmove>:
 800ba4c:	4288      	cmp	r0, r1
 800ba4e:	b510      	push	{r4, lr}
 800ba50:	eb01 0402 	add.w	r4, r1, r2
 800ba54:	d902      	bls.n	800ba5c <memmove+0x10>
 800ba56:	4284      	cmp	r4, r0
 800ba58:	4623      	mov	r3, r4
 800ba5a:	d807      	bhi.n	800ba6c <memmove+0x20>
 800ba5c:	1e43      	subs	r3, r0, #1
 800ba5e:	42a1      	cmp	r1, r4
 800ba60:	d008      	beq.n	800ba74 <memmove+0x28>
 800ba62:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba66:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ba6a:	e7f8      	b.n	800ba5e <memmove+0x12>
 800ba6c:	4402      	add	r2, r0
 800ba6e:	4601      	mov	r1, r0
 800ba70:	428a      	cmp	r2, r1
 800ba72:	d100      	bne.n	800ba76 <memmove+0x2a>
 800ba74:	bd10      	pop	{r4, pc}
 800ba76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ba7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ba7e:	e7f7      	b.n	800ba70 <memmove+0x24>

0800ba80 <_sbrk_r>:
 800ba80:	b538      	push	{r3, r4, r5, lr}
 800ba82:	4d06      	ldr	r5, [pc, #24]	@ (800ba9c <_sbrk_r+0x1c>)
 800ba84:	2300      	movs	r3, #0
 800ba86:	4604      	mov	r4, r0
 800ba88:	4608      	mov	r0, r1
 800ba8a:	602b      	str	r3, [r5, #0]
 800ba8c:	f7f8 f88e 	bl	8003bac <_sbrk>
 800ba90:	1c43      	adds	r3, r0, #1
 800ba92:	d102      	bne.n	800ba9a <_sbrk_r+0x1a>
 800ba94:	682b      	ldr	r3, [r5, #0]
 800ba96:	b103      	cbz	r3, 800ba9a <_sbrk_r+0x1a>
 800ba98:	6023      	str	r3, [r4, #0]
 800ba9a:	bd38      	pop	{r3, r4, r5, pc}
 800ba9c:	200007fc 	.word	0x200007fc

0800baa0 <memcpy>:
 800baa0:	440a      	add	r2, r1
 800baa2:	4291      	cmp	r1, r2
 800baa4:	f100 33ff 	add.w	r3, r0, #4294967295
 800baa8:	d100      	bne.n	800baac <memcpy+0xc>
 800baaa:	4770      	bx	lr
 800baac:	b510      	push	{r4, lr}
 800baae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bab2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bab6:	4291      	cmp	r1, r2
 800bab8:	d1f9      	bne.n	800baae <memcpy+0xe>
 800baba:	bd10      	pop	{r4, pc}

0800babc <__assert_func>:
 800babc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800babe:	4614      	mov	r4, r2
 800bac0:	461a      	mov	r2, r3
 800bac2:	4b09      	ldr	r3, [pc, #36]	@ (800bae8 <__assert_func+0x2c>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	4605      	mov	r5, r0
 800bac8:	68d8      	ldr	r0, [r3, #12]
 800baca:	b954      	cbnz	r4, 800bae2 <__assert_func+0x26>
 800bacc:	4b07      	ldr	r3, [pc, #28]	@ (800baec <__assert_func+0x30>)
 800bace:	461c      	mov	r4, r3
 800bad0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bad4:	9100      	str	r1, [sp, #0]
 800bad6:	462b      	mov	r3, r5
 800bad8:	4905      	ldr	r1, [pc, #20]	@ (800baf0 <__assert_func+0x34>)
 800bada:	f000 f86f 	bl	800bbbc <fiprintf>
 800bade:	f000 f87f 	bl	800bbe0 <abort>
 800bae2:	4b04      	ldr	r3, [pc, #16]	@ (800baf4 <__assert_func+0x38>)
 800bae4:	e7f4      	b.n	800bad0 <__assert_func+0x14>
 800bae6:	bf00      	nop
 800bae8:	2000004c 	.word	0x2000004c
 800baec:	0800d7ae 	.word	0x0800d7ae
 800baf0:	0800d780 	.word	0x0800d780
 800baf4:	0800d773 	.word	0x0800d773

0800baf8 <_calloc_r>:
 800baf8:	b570      	push	{r4, r5, r6, lr}
 800bafa:	fba1 5402 	umull	r5, r4, r1, r2
 800bafe:	b93c      	cbnz	r4, 800bb10 <_calloc_r+0x18>
 800bb00:	4629      	mov	r1, r5
 800bb02:	f7ff f991 	bl	800ae28 <_malloc_r>
 800bb06:	4606      	mov	r6, r0
 800bb08:	b928      	cbnz	r0, 800bb16 <_calloc_r+0x1e>
 800bb0a:	2600      	movs	r6, #0
 800bb0c:	4630      	mov	r0, r6
 800bb0e:	bd70      	pop	{r4, r5, r6, pc}
 800bb10:	220c      	movs	r2, #12
 800bb12:	6002      	str	r2, [r0, #0]
 800bb14:	e7f9      	b.n	800bb0a <_calloc_r+0x12>
 800bb16:	462a      	mov	r2, r5
 800bb18:	4621      	mov	r1, r4
 800bb1a:	f7fe fa44 	bl	8009fa6 <memset>
 800bb1e:	e7f5      	b.n	800bb0c <_calloc_r+0x14>

0800bb20 <__ascii_mbtowc>:
 800bb20:	b082      	sub	sp, #8
 800bb22:	b901      	cbnz	r1, 800bb26 <__ascii_mbtowc+0x6>
 800bb24:	a901      	add	r1, sp, #4
 800bb26:	b142      	cbz	r2, 800bb3a <__ascii_mbtowc+0x1a>
 800bb28:	b14b      	cbz	r3, 800bb3e <__ascii_mbtowc+0x1e>
 800bb2a:	7813      	ldrb	r3, [r2, #0]
 800bb2c:	600b      	str	r3, [r1, #0]
 800bb2e:	7812      	ldrb	r2, [r2, #0]
 800bb30:	1e10      	subs	r0, r2, #0
 800bb32:	bf18      	it	ne
 800bb34:	2001      	movne	r0, #1
 800bb36:	b002      	add	sp, #8
 800bb38:	4770      	bx	lr
 800bb3a:	4610      	mov	r0, r2
 800bb3c:	e7fb      	b.n	800bb36 <__ascii_mbtowc+0x16>
 800bb3e:	f06f 0001 	mvn.w	r0, #1
 800bb42:	e7f8      	b.n	800bb36 <__ascii_mbtowc+0x16>

0800bb44 <_realloc_r>:
 800bb44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb48:	4680      	mov	r8, r0
 800bb4a:	4615      	mov	r5, r2
 800bb4c:	460c      	mov	r4, r1
 800bb4e:	b921      	cbnz	r1, 800bb5a <_realloc_r+0x16>
 800bb50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb54:	4611      	mov	r1, r2
 800bb56:	f7ff b967 	b.w	800ae28 <_malloc_r>
 800bb5a:	b92a      	cbnz	r2, 800bb68 <_realloc_r+0x24>
 800bb5c:	f7ff f8f0 	bl	800ad40 <_free_r>
 800bb60:	2400      	movs	r4, #0
 800bb62:	4620      	mov	r0, r4
 800bb64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb68:	f000 f841 	bl	800bbee <_malloc_usable_size_r>
 800bb6c:	4285      	cmp	r5, r0
 800bb6e:	4606      	mov	r6, r0
 800bb70:	d802      	bhi.n	800bb78 <_realloc_r+0x34>
 800bb72:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bb76:	d8f4      	bhi.n	800bb62 <_realloc_r+0x1e>
 800bb78:	4629      	mov	r1, r5
 800bb7a:	4640      	mov	r0, r8
 800bb7c:	f7ff f954 	bl	800ae28 <_malloc_r>
 800bb80:	4607      	mov	r7, r0
 800bb82:	2800      	cmp	r0, #0
 800bb84:	d0ec      	beq.n	800bb60 <_realloc_r+0x1c>
 800bb86:	42b5      	cmp	r5, r6
 800bb88:	462a      	mov	r2, r5
 800bb8a:	4621      	mov	r1, r4
 800bb8c:	bf28      	it	cs
 800bb8e:	4632      	movcs	r2, r6
 800bb90:	f7ff ff86 	bl	800baa0 <memcpy>
 800bb94:	4621      	mov	r1, r4
 800bb96:	4640      	mov	r0, r8
 800bb98:	f7ff f8d2 	bl	800ad40 <_free_r>
 800bb9c:	463c      	mov	r4, r7
 800bb9e:	e7e0      	b.n	800bb62 <_realloc_r+0x1e>

0800bba0 <__ascii_wctomb>:
 800bba0:	4603      	mov	r3, r0
 800bba2:	4608      	mov	r0, r1
 800bba4:	b141      	cbz	r1, 800bbb8 <__ascii_wctomb+0x18>
 800bba6:	2aff      	cmp	r2, #255	@ 0xff
 800bba8:	d904      	bls.n	800bbb4 <__ascii_wctomb+0x14>
 800bbaa:	228a      	movs	r2, #138	@ 0x8a
 800bbac:	601a      	str	r2, [r3, #0]
 800bbae:	f04f 30ff 	mov.w	r0, #4294967295
 800bbb2:	4770      	bx	lr
 800bbb4:	700a      	strb	r2, [r1, #0]
 800bbb6:	2001      	movs	r0, #1
 800bbb8:	4770      	bx	lr
	...

0800bbbc <fiprintf>:
 800bbbc:	b40e      	push	{r1, r2, r3}
 800bbbe:	b503      	push	{r0, r1, lr}
 800bbc0:	4601      	mov	r1, r0
 800bbc2:	ab03      	add	r3, sp, #12
 800bbc4:	4805      	ldr	r0, [pc, #20]	@ (800bbdc <fiprintf+0x20>)
 800bbc6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbca:	6800      	ldr	r0, [r0, #0]
 800bbcc:	9301      	str	r3, [sp, #4]
 800bbce:	f000 f83f 	bl	800bc50 <_vfiprintf_r>
 800bbd2:	b002      	add	sp, #8
 800bbd4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bbd8:	b003      	add	sp, #12
 800bbda:	4770      	bx	lr
 800bbdc:	2000004c 	.word	0x2000004c

0800bbe0 <abort>:
 800bbe0:	b508      	push	{r3, lr}
 800bbe2:	2006      	movs	r0, #6
 800bbe4:	f000 fa08 	bl	800bff8 <raise>
 800bbe8:	2001      	movs	r0, #1
 800bbea:	f7f7 ff67 	bl	8003abc <_exit>

0800bbee <_malloc_usable_size_r>:
 800bbee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbf2:	1f18      	subs	r0, r3, #4
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	bfbc      	itt	lt
 800bbf8:	580b      	ldrlt	r3, [r1, r0]
 800bbfa:	18c0      	addlt	r0, r0, r3
 800bbfc:	4770      	bx	lr

0800bbfe <__sfputc_r>:
 800bbfe:	6893      	ldr	r3, [r2, #8]
 800bc00:	3b01      	subs	r3, #1
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	b410      	push	{r4}
 800bc06:	6093      	str	r3, [r2, #8]
 800bc08:	da08      	bge.n	800bc1c <__sfputc_r+0x1e>
 800bc0a:	6994      	ldr	r4, [r2, #24]
 800bc0c:	42a3      	cmp	r3, r4
 800bc0e:	db01      	blt.n	800bc14 <__sfputc_r+0x16>
 800bc10:	290a      	cmp	r1, #10
 800bc12:	d103      	bne.n	800bc1c <__sfputc_r+0x1e>
 800bc14:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc18:	f000 b932 	b.w	800be80 <__swbuf_r>
 800bc1c:	6813      	ldr	r3, [r2, #0]
 800bc1e:	1c58      	adds	r0, r3, #1
 800bc20:	6010      	str	r0, [r2, #0]
 800bc22:	7019      	strb	r1, [r3, #0]
 800bc24:	4608      	mov	r0, r1
 800bc26:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc2a:	4770      	bx	lr

0800bc2c <__sfputs_r>:
 800bc2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc2e:	4606      	mov	r6, r0
 800bc30:	460f      	mov	r7, r1
 800bc32:	4614      	mov	r4, r2
 800bc34:	18d5      	adds	r5, r2, r3
 800bc36:	42ac      	cmp	r4, r5
 800bc38:	d101      	bne.n	800bc3e <__sfputs_r+0x12>
 800bc3a:	2000      	movs	r0, #0
 800bc3c:	e007      	b.n	800bc4e <__sfputs_r+0x22>
 800bc3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc42:	463a      	mov	r2, r7
 800bc44:	4630      	mov	r0, r6
 800bc46:	f7ff ffda 	bl	800bbfe <__sfputc_r>
 800bc4a:	1c43      	adds	r3, r0, #1
 800bc4c:	d1f3      	bne.n	800bc36 <__sfputs_r+0xa>
 800bc4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bc50 <_vfiprintf_r>:
 800bc50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc54:	460d      	mov	r5, r1
 800bc56:	b09d      	sub	sp, #116	@ 0x74
 800bc58:	4614      	mov	r4, r2
 800bc5a:	4698      	mov	r8, r3
 800bc5c:	4606      	mov	r6, r0
 800bc5e:	b118      	cbz	r0, 800bc68 <_vfiprintf_r+0x18>
 800bc60:	6a03      	ldr	r3, [r0, #32]
 800bc62:	b90b      	cbnz	r3, 800bc68 <_vfiprintf_r+0x18>
 800bc64:	f7fe f906 	bl	8009e74 <__sinit>
 800bc68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc6a:	07d9      	lsls	r1, r3, #31
 800bc6c:	d405      	bmi.n	800bc7a <_vfiprintf_r+0x2a>
 800bc6e:	89ab      	ldrh	r3, [r5, #12]
 800bc70:	059a      	lsls	r2, r3, #22
 800bc72:	d402      	bmi.n	800bc7a <_vfiprintf_r+0x2a>
 800bc74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc76:	f7fe fa14 	bl	800a0a2 <__retarget_lock_acquire_recursive>
 800bc7a:	89ab      	ldrh	r3, [r5, #12]
 800bc7c:	071b      	lsls	r3, r3, #28
 800bc7e:	d501      	bpl.n	800bc84 <_vfiprintf_r+0x34>
 800bc80:	692b      	ldr	r3, [r5, #16]
 800bc82:	b99b      	cbnz	r3, 800bcac <_vfiprintf_r+0x5c>
 800bc84:	4629      	mov	r1, r5
 800bc86:	4630      	mov	r0, r6
 800bc88:	f000 f938 	bl	800befc <__swsetup_r>
 800bc8c:	b170      	cbz	r0, 800bcac <_vfiprintf_r+0x5c>
 800bc8e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc90:	07dc      	lsls	r4, r3, #31
 800bc92:	d504      	bpl.n	800bc9e <_vfiprintf_r+0x4e>
 800bc94:	f04f 30ff 	mov.w	r0, #4294967295
 800bc98:	b01d      	add	sp, #116	@ 0x74
 800bc9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc9e:	89ab      	ldrh	r3, [r5, #12]
 800bca0:	0598      	lsls	r0, r3, #22
 800bca2:	d4f7      	bmi.n	800bc94 <_vfiprintf_r+0x44>
 800bca4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bca6:	f7fe f9fd 	bl	800a0a4 <__retarget_lock_release_recursive>
 800bcaa:	e7f3      	b.n	800bc94 <_vfiprintf_r+0x44>
 800bcac:	2300      	movs	r3, #0
 800bcae:	9309      	str	r3, [sp, #36]	@ 0x24
 800bcb0:	2320      	movs	r3, #32
 800bcb2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bcb6:	f8cd 800c 	str.w	r8, [sp, #12]
 800bcba:	2330      	movs	r3, #48	@ 0x30
 800bcbc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800be6c <_vfiprintf_r+0x21c>
 800bcc0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bcc4:	f04f 0901 	mov.w	r9, #1
 800bcc8:	4623      	mov	r3, r4
 800bcca:	469a      	mov	sl, r3
 800bccc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bcd0:	b10a      	cbz	r2, 800bcd6 <_vfiprintf_r+0x86>
 800bcd2:	2a25      	cmp	r2, #37	@ 0x25
 800bcd4:	d1f9      	bne.n	800bcca <_vfiprintf_r+0x7a>
 800bcd6:	ebba 0b04 	subs.w	fp, sl, r4
 800bcda:	d00b      	beq.n	800bcf4 <_vfiprintf_r+0xa4>
 800bcdc:	465b      	mov	r3, fp
 800bcde:	4622      	mov	r2, r4
 800bce0:	4629      	mov	r1, r5
 800bce2:	4630      	mov	r0, r6
 800bce4:	f7ff ffa2 	bl	800bc2c <__sfputs_r>
 800bce8:	3001      	adds	r0, #1
 800bcea:	f000 80a7 	beq.w	800be3c <_vfiprintf_r+0x1ec>
 800bcee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bcf0:	445a      	add	r2, fp
 800bcf2:	9209      	str	r2, [sp, #36]	@ 0x24
 800bcf4:	f89a 3000 	ldrb.w	r3, [sl]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	f000 809f 	beq.w	800be3c <_vfiprintf_r+0x1ec>
 800bcfe:	2300      	movs	r3, #0
 800bd00:	f04f 32ff 	mov.w	r2, #4294967295
 800bd04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd08:	f10a 0a01 	add.w	sl, sl, #1
 800bd0c:	9304      	str	r3, [sp, #16]
 800bd0e:	9307      	str	r3, [sp, #28]
 800bd10:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bd14:	931a      	str	r3, [sp, #104]	@ 0x68
 800bd16:	4654      	mov	r4, sl
 800bd18:	2205      	movs	r2, #5
 800bd1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd1e:	4853      	ldr	r0, [pc, #332]	@ (800be6c <_vfiprintf_r+0x21c>)
 800bd20:	f7f4 fa76 	bl	8000210 <memchr>
 800bd24:	9a04      	ldr	r2, [sp, #16]
 800bd26:	b9d8      	cbnz	r0, 800bd60 <_vfiprintf_r+0x110>
 800bd28:	06d1      	lsls	r1, r2, #27
 800bd2a:	bf44      	itt	mi
 800bd2c:	2320      	movmi	r3, #32
 800bd2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bd32:	0713      	lsls	r3, r2, #28
 800bd34:	bf44      	itt	mi
 800bd36:	232b      	movmi	r3, #43	@ 0x2b
 800bd38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bd3c:	f89a 3000 	ldrb.w	r3, [sl]
 800bd40:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd42:	d015      	beq.n	800bd70 <_vfiprintf_r+0x120>
 800bd44:	9a07      	ldr	r2, [sp, #28]
 800bd46:	4654      	mov	r4, sl
 800bd48:	2000      	movs	r0, #0
 800bd4a:	f04f 0c0a 	mov.w	ip, #10
 800bd4e:	4621      	mov	r1, r4
 800bd50:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd54:	3b30      	subs	r3, #48	@ 0x30
 800bd56:	2b09      	cmp	r3, #9
 800bd58:	d94b      	bls.n	800bdf2 <_vfiprintf_r+0x1a2>
 800bd5a:	b1b0      	cbz	r0, 800bd8a <_vfiprintf_r+0x13a>
 800bd5c:	9207      	str	r2, [sp, #28]
 800bd5e:	e014      	b.n	800bd8a <_vfiprintf_r+0x13a>
 800bd60:	eba0 0308 	sub.w	r3, r0, r8
 800bd64:	fa09 f303 	lsl.w	r3, r9, r3
 800bd68:	4313      	orrs	r3, r2
 800bd6a:	9304      	str	r3, [sp, #16]
 800bd6c:	46a2      	mov	sl, r4
 800bd6e:	e7d2      	b.n	800bd16 <_vfiprintf_r+0xc6>
 800bd70:	9b03      	ldr	r3, [sp, #12]
 800bd72:	1d19      	adds	r1, r3, #4
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	9103      	str	r1, [sp, #12]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	bfbb      	ittet	lt
 800bd7c:	425b      	neglt	r3, r3
 800bd7e:	f042 0202 	orrlt.w	r2, r2, #2
 800bd82:	9307      	strge	r3, [sp, #28]
 800bd84:	9307      	strlt	r3, [sp, #28]
 800bd86:	bfb8      	it	lt
 800bd88:	9204      	strlt	r2, [sp, #16]
 800bd8a:	7823      	ldrb	r3, [r4, #0]
 800bd8c:	2b2e      	cmp	r3, #46	@ 0x2e
 800bd8e:	d10a      	bne.n	800bda6 <_vfiprintf_r+0x156>
 800bd90:	7863      	ldrb	r3, [r4, #1]
 800bd92:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd94:	d132      	bne.n	800bdfc <_vfiprintf_r+0x1ac>
 800bd96:	9b03      	ldr	r3, [sp, #12]
 800bd98:	1d1a      	adds	r2, r3, #4
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	9203      	str	r2, [sp, #12]
 800bd9e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bda2:	3402      	adds	r4, #2
 800bda4:	9305      	str	r3, [sp, #20]
 800bda6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800be7c <_vfiprintf_r+0x22c>
 800bdaa:	7821      	ldrb	r1, [r4, #0]
 800bdac:	2203      	movs	r2, #3
 800bdae:	4650      	mov	r0, sl
 800bdb0:	f7f4 fa2e 	bl	8000210 <memchr>
 800bdb4:	b138      	cbz	r0, 800bdc6 <_vfiprintf_r+0x176>
 800bdb6:	9b04      	ldr	r3, [sp, #16]
 800bdb8:	eba0 000a 	sub.w	r0, r0, sl
 800bdbc:	2240      	movs	r2, #64	@ 0x40
 800bdbe:	4082      	lsls	r2, r0
 800bdc0:	4313      	orrs	r3, r2
 800bdc2:	3401      	adds	r4, #1
 800bdc4:	9304      	str	r3, [sp, #16]
 800bdc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdca:	4829      	ldr	r0, [pc, #164]	@ (800be70 <_vfiprintf_r+0x220>)
 800bdcc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bdd0:	2206      	movs	r2, #6
 800bdd2:	f7f4 fa1d 	bl	8000210 <memchr>
 800bdd6:	2800      	cmp	r0, #0
 800bdd8:	d03f      	beq.n	800be5a <_vfiprintf_r+0x20a>
 800bdda:	4b26      	ldr	r3, [pc, #152]	@ (800be74 <_vfiprintf_r+0x224>)
 800bddc:	bb1b      	cbnz	r3, 800be26 <_vfiprintf_r+0x1d6>
 800bdde:	9b03      	ldr	r3, [sp, #12]
 800bde0:	3307      	adds	r3, #7
 800bde2:	f023 0307 	bic.w	r3, r3, #7
 800bde6:	3308      	adds	r3, #8
 800bde8:	9303      	str	r3, [sp, #12]
 800bdea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdec:	443b      	add	r3, r7
 800bdee:	9309      	str	r3, [sp, #36]	@ 0x24
 800bdf0:	e76a      	b.n	800bcc8 <_vfiprintf_r+0x78>
 800bdf2:	fb0c 3202 	mla	r2, ip, r2, r3
 800bdf6:	460c      	mov	r4, r1
 800bdf8:	2001      	movs	r0, #1
 800bdfa:	e7a8      	b.n	800bd4e <_vfiprintf_r+0xfe>
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	3401      	adds	r4, #1
 800be00:	9305      	str	r3, [sp, #20]
 800be02:	4619      	mov	r1, r3
 800be04:	f04f 0c0a 	mov.w	ip, #10
 800be08:	4620      	mov	r0, r4
 800be0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be0e:	3a30      	subs	r2, #48	@ 0x30
 800be10:	2a09      	cmp	r2, #9
 800be12:	d903      	bls.n	800be1c <_vfiprintf_r+0x1cc>
 800be14:	2b00      	cmp	r3, #0
 800be16:	d0c6      	beq.n	800bda6 <_vfiprintf_r+0x156>
 800be18:	9105      	str	r1, [sp, #20]
 800be1a:	e7c4      	b.n	800bda6 <_vfiprintf_r+0x156>
 800be1c:	fb0c 2101 	mla	r1, ip, r1, r2
 800be20:	4604      	mov	r4, r0
 800be22:	2301      	movs	r3, #1
 800be24:	e7f0      	b.n	800be08 <_vfiprintf_r+0x1b8>
 800be26:	ab03      	add	r3, sp, #12
 800be28:	9300      	str	r3, [sp, #0]
 800be2a:	462a      	mov	r2, r5
 800be2c:	4b12      	ldr	r3, [pc, #72]	@ (800be78 <_vfiprintf_r+0x228>)
 800be2e:	a904      	add	r1, sp, #16
 800be30:	4630      	mov	r0, r6
 800be32:	f7fd fbdb 	bl	80095ec <_printf_float>
 800be36:	4607      	mov	r7, r0
 800be38:	1c78      	adds	r0, r7, #1
 800be3a:	d1d6      	bne.n	800bdea <_vfiprintf_r+0x19a>
 800be3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800be3e:	07d9      	lsls	r1, r3, #31
 800be40:	d405      	bmi.n	800be4e <_vfiprintf_r+0x1fe>
 800be42:	89ab      	ldrh	r3, [r5, #12]
 800be44:	059a      	lsls	r2, r3, #22
 800be46:	d402      	bmi.n	800be4e <_vfiprintf_r+0x1fe>
 800be48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800be4a:	f7fe f92b 	bl	800a0a4 <__retarget_lock_release_recursive>
 800be4e:	89ab      	ldrh	r3, [r5, #12]
 800be50:	065b      	lsls	r3, r3, #25
 800be52:	f53f af1f 	bmi.w	800bc94 <_vfiprintf_r+0x44>
 800be56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800be58:	e71e      	b.n	800bc98 <_vfiprintf_r+0x48>
 800be5a:	ab03      	add	r3, sp, #12
 800be5c:	9300      	str	r3, [sp, #0]
 800be5e:	462a      	mov	r2, r5
 800be60:	4b05      	ldr	r3, [pc, #20]	@ (800be78 <_vfiprintf_r+0x228>)
 800be62:	a904      	add	r1, sp, #16
 800be64:	4630      	mov	r0, r6
 800be66:	f7fd fe59 	bl	8009b1c <_printf_i>
 800be6a:	e7e4      	b.n	800be36 <_vfiprintf_r+0x1e6>
 800be6c:	0800d758 	.word	0x0800d758
 800be70:	0800d762 	.word	0x0800d762
 800be74:	080095ed 	.word	0x080095ed
 800be78:	0800bc2d 	.word	0x0800bc2d
 800be7c:	0800d75e 	.word	0x0800d75e

0800be80 <__swbuf_r>:
 800be80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be82:	460e      	mov	r6, r1
 800be84:	4614      	mov	r4, r2
 800be86:	4605      	mov	r5, r0
 800be88:	b118      	cbz	r0, 800be92 <__swbuf_r+0x12>
 800be8a:	6a03      	ldr	r3, [r0, #32]
 800be8c:	b90b      	cbnz	r3, 800be92 <__swbuf_r+0x12>
 800be8e:	f7fd fff1 	bl	8009e74 <__sinit>
 800be92:	69a3      	ldr	r3, [r4, #24]
 800be94:	60a3      	str	r3, [r4, #8]
 800be96:	89a3      	ldrh	r3, [r4, #12]
 800be98:	071a      	lsls	r2, r3, #28
 800be9a:	d501      	bpl.n	800bea0 <__swbuf_r+0x20>
 800be9c:	6923      	ldr	r3, [r4, #16]
 800be9e:	b943      	cbnz	r3, 800beb2 <__swbuf_r+0x32>
 800bea0:	4621      	mov	r1, r4
 800bea2:	4628      	mov	r0, r5
 800bea4:	f000 f82a 	bl	800befc <__swsetup_r>
 800bea8:	b118      	cbz	r0, 800beb2 <__swbuf_r+0x32>
 800beaa:	f04f 37ff 	mov.w	r7, #4294967295
 800beae:	4638      	mov	r0, r7
 800beb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800beb2:	6823      	ldr	r3, [r4, #0]
 800beb4:	6922      	ldr	r2, [r4, #16]
 800beb6:	1a98      	subs	r0, r3, r2
 800beb8:	6963      	ldr	r3, [r4, #20]
 800beba:	b2f6      	uxtb	r6, r6
 800bebc:	4283      	cmp	r3, r0
 800bebe:	4637      	mov	r7, r6
 800bec0:	dc05      	bgt.n	800bece <__swbuf_r+0x4e>
 800bec2:	4621      	mov	r1, r4
 800bec4:	4628      	mov	r0, r5
 800bec6:	f7ff fd99 	bl	800b9fc <_fflush_r>
 800beca:	2800      	cmp	r0, #0
 800becc:	d1ed      	bne.n	800beaa <__swbuf_r+0x2a>
 800bece:	68a3      	ldr	r3, [r4, #8]
 800bed0:	3b01      	subs	r3, #1
 800bed2:	60a3      	str	r3, [r4, #8]
 800bed4:	6823      	ldr	r3, [r4, #0]
 800bed6:	1c5a      	adds	r2, r3, #1
 800bed8:	6022      	str	r2, [r4, #0]
 800beda:	701e      	strb	r6, [r3, #0]
 800bedc:	6962      	ldr	r2, [r4, #20]
 800bede:	1c43      	adds	r3, r0, #1
 800bee0:	429a      	cmp	r2, r3
 800bee2:	d004      	beq.n	800beee <__swbuf_r+0x6e>
 800bee4:	89a3      	ldrh	r3, [r4, #12]
 800bee6:	07db      	lsls	r3, r3, #31
 800bee8:	d5e1      	bpl.n	800beae <__swbuf_r+0x2e>
 800beea:	2e0a      	cmp	r6, #10
 800beec:	d1df      	bne.n	800beae <__swbuf_r+0x2e>
 800beee:	4621      	mov	r1, r4
 800bef0:	4628      	mov	r0, r5
 800bef2:	f7ff fd83 	bl	800b9fc <_fflush_r>
 800bef6:	2800      	cmp	r0, #0
 800bef8:	d0d9      	beq.n	800beae <__swbuf_r+0x2e>
 800befa:	e7d6      	b.n	800beaa <__swbuf_r+0x2a>

0800befc <__swsetup_r>:
 800befc:	b538      	push	{r3, r4, r5, lr}
 800befe:	4b29      	ldr	r3, [pc, #164]	@ (800bfa4 <__swsetup_r+0xa8>)
 800bf00:	4605      	mov	r5, r0
 800bf02:	6818      	ldr	r0, [r3, #0]
 800bf04:	460c      	mov	r4, r1
 800bf06:	b118      	cbz	r0, 800bf10 <__swsetup_r+0x14>
 800bf08:	6a03      	ldr	r3, [r0, #32]
 800bf0a:	b90b      	cbnz	r3, 800bf10 <__swsetup_r+0x14>
 800bf0c:	f7fd ffb2 	bl	8009e74 <__sinit>
 800bf10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf14:	0719      	lsls	r1, r3, #28
 800bf16:	d422      	bmi.n	800bf5e <__swsetup_r+0x62>
 800bf18:	06da      	lsls	r2, r3, #27
 800bf1a:	d407      	bmi.n	800bf2c <__swsetup_r+0x30>
 800bf1c:	2209      	movs	r2, #9
 800bf1e:	602a      	str	r2, [r5, #0]
 800bf20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf24:	81a3      	strh	r3, [r4, #12]
 800bf26:	f04f 30ff 	mov.w	r0, #4294967295
 800bf2a:	e033      	b.n	800bf94 <__swsetup_r+0x98>
 800bf2c:	0758      	lsls	r0, r3, #29
 800bf2e:	d512      	bpl.n	800bf56 <__swsetup_r+0x5a>
 800bf30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bf32:	b141      	cbz	r1, 800bf46 <__swsetup_r+0x4a>
 800bf34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bf38:	4299      	cmp	r1, r3
 800bf3a:	d002      	beq.n	800bf42 <__swsetup_r+0x46>
 800bf3c:	4628      	mov	r0, r5
 800bf3e:	f7fe feff 	bl	800ad40 <_free_r>
 800bf42:	2300      	movs	r3, #0
 800bf44:	6363      	str	r3, [r4, #52]	@ 0x34
 800bf46:	89a3      	ldrh	r3, [r4, #12]
 800bf48:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bf4c:	81a3      	strh	r3, [r4, #12]
 800bf4e:	2300      	movs	r3, #0
 800bf50:	6063      	str	r3, [r4, #4]
 800bf52:	6923      	ldr	r3, [r4, #16]
 800bf54:	6023      	str	r3, [r4, #0]
 800bf56:	89a3      	ldrh	r3, [r4, #12]
 800bf58:	f043 0308 	orr.w	r3, r3, #8
 800bf5c:	81a3      	strh	r3, [r4, #12]
 800bf5e:	6923      	ldr	r3, [r4, #16]
 800bf60:	b94b      	cbnz	r3, 800bf76 <__swsetup_r+0x7a>
 800bf62:	89a3      	ldrh	r3, [r4, #12]
 800bf64:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bf68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bf6c:	d003      	beq.n	800bf76 <__swsetup_r+0x7a>
 800bf6e:	4621      	mov	r1, r4
 800bf70:	4628      	mov	r0, r5
 800bf72:	f000 f883 	bl	800c07c <__smakebuf_r>
 800bf76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf7a:	f013 0201 	ands.w	r2, r3, #1
 800bf7e:	d00a      	beq.n	800bf96 <__swsetup_r+0x9a>
 800bf80:	2200      	movs	r2, #0
 800bf82:	60a2      	str	r2, [r4, #8]
 800bf84:	6962      	ldr	r2, [r4, #20]
 800bf86:	4252      	negs	r2, r2
 800bf88:	61a2      	str	r2, [r4, #24]
 800bf8a:	6922      	ldr	r2, [r4, #16]
 800bf8c:	b942      	cbnz	r2, 800bfa0 <__swsetup_r+0xa4>
 800bf8e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bf92:	d1c5      	bne.n	800bf20 <__swsetup_r+0x24>
 800bf94:	bd38      	pop	{r3, r4, r5, pc}
 800bf96:	0799      	lsls	r1, r3, #30
 800bf98:	bf58      	it	pl
 800bf9a:	6962      	ldrpl	r2, [r4, #20]
 800bf9c:	60a2      	str	r2, [r4, #8]
 800bf9e:	e7f4      	b.n	800bf8a <__swsetup_r+0x8e>
 800bfa0:	2000      	movs	r0, #0
 800bfa2:	e7f7      	b.n	800bf94 <__swsetup_r+0x98>
 800bfa4:	2000004c 	.word	0x2000004c

0800bfa8 <_raise_r>:
 800bfa8:	291f      	cmp	r1, #31
 800bfaa:	b538      	push	{r3, r4, r5, lr}
 800bfac:	4605      	mov	r5, r0
 800bfae:	460c      	mov	r4, r1
 800bfb0:	d904      	bls.n	800bfbc <_raise_r+0x14>
 800bfb2:	2316      	movs	r3, #22
 800bfb4:	6003      	str	r3, [r0, #0]
 800bfb6:	f04f 30ff 	mov.w	r0, #4294967295
 800bfba:	bd38      	pop	{r3, r4, r5, pc}
 800bfbc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bfbe:	b112      	cbz	r2, 800bfc6 <_raise_r+0x1e>
 800bfc0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bfc4:	b94b      	cbnz	r3, 800bfda <_raise_r+0x32>
 800bfc6:	4628      	mov	r0, r5
 800bfc8:	f000 f830 	bl	800c02c <_getpid_r>
 800bfcc:	4622      	mov	r2, r4
 800bfce:	4601      	mov	r1, r0
 800bfd0:	4628      	mov	r0, r5
 800bfd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bfd6:	f000 b817 	b.w	800c008 <_kill_r>
 800bfda:	2b01      	cmp	r3, #1
 800bfdc:	d00a      	beq.n	800bff4 <_raise_r+0x4c>
 800bfde:	1c59      	adds	r1, r3, #1
 800bfe0:	d103      	bne.n	800bfea <_raise_r+0x42>
 800bfe2:	2316      	movs	r3, #22
 800bfe4:	6003      	str	r3, [r0, #0]
 800bfe6:	2001      	movs	r0, #1
 800bfe8:	e7e7      	b.n	800bfba <_raise_r+0x12>
 800bfea:	2100      	movs	r1, #0
 800bfec:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bff0:	4620      	mov	r0, r4
 800bff2:	4798      	blx	r3
 800bff4:	2000      	movs	r0, #0
 800bff6:	e7e0      	b.n	800bfba <_raise_r+0x12>

0800bff8 <raise>:
 800bff8:	4b02      	ldr	r3, [pc, #8]	@ (800c004 <raise+0xc>)
 800bffa:	4601      	mov	r1, r0
 800bffc:	6818      	ldr	r0, [r3, #0]
 800bffe:	f7ff bfd3 	b.w	800bfa8 <_raise_r>
 800c002:	bf00      	nop
 800c004:	2000004c 	.word	0x2000004c

0800c008 <_kill_r>:
 800c008:	b538      	push	{r3, r4, r5, lr}
 800c00a:	4d07      	ldr	r5, [pc, #28]	@ (800c028 <_kill_r+0x20>)
 800c00c:	2300      	movs	r3, #0
 800c00e:	4604      	mov	r4, r0
 800c010:	4608      	mov	r0, r1
 800c012:	4611      	mov	r1, r2
 800c014:	602b      	str	r3, [r5, #0]
 800c016:	f7f7 fd41 	bl	8003a9c <_kill>
 800c01a:	1c43      	adds	r3, r0, #1
 800c01c:	d102      	bne.n	800c024 <_kill_r+0x1c>
 800c01e:	682b      	ldr	r3, [r5, #0]
 800c020:	b103      	cbz	r3, 800c024 <_kill_r+0x1c>
 800c022:	6023      	str	r3, [r4, #0]
 800c024:	bd38      	pop	{r3, r4, r5, pc}
 800c026:	bf00      	nop
 800c028:	200007fc 	.word	0x200007fc

0800c02c <_getpid_r>:
 800c02c:	f7f7 bd2e 	b.w	8003a8c <_getpid>

0800c030 <__swhatbuf_r>:
 800c030:	b570      	push	{r4, r5, r6, lr}
 800c032:	460c      	mov	r4, r1
 800c034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c038:	2900      	cmp	r1, #0
 800c03a:	b096      	sub	sp, #88	@ 0x58
 800c03c:	4615      	mov	r5, r2
 800c03e:	461e      	mov	r6, r3
 800c040:	da0d      	bge.n	800c05e <__swhatbuf_r+0x2e>
 800c042:	89a3      	ldrh	r3, [r4, #12]
 800c044:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c048:	f04f 0100 	mov.w	r1, #0
 800c04c:	bf14      	ite	ne
 800c04e:	2340      	movne	r3, #64	@ 0x40
 800c050:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c054:	2000      	movs	r0, #0
 800c056:	6031      	str	r1, [r6, #0]
 800c058:	602b      	str	r3, [r5, #0]
 800c05a:	b016      	add	sp, #88	@ 0x58
 800c05c:	bd70      	pop	{r4, r5, r6, pc}
 800c05e:	466a      	mov	r2, sp
 800c060:	f000 f848 	bl	800c0f4 <_fstat_r>
 800c064:	2800      	cmp	r0, #0
 800c066:	dbec      	blt.n	800c042 <__swhatbuf_r+0x12>
 800c068:	9901      	ldr	r1, [sp, #4]
 800c06a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c06e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c072:	4259      	negs	r1, r3
 800c074:	4159      	adcs	r1, r3
 800c076:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c07a:	e7eb      	b.n	800c054 <__swhatbuf_r+0x24>

0800c07c <__smakebuf_r>:
 800c07c:	898b      	ldrh	r3, [r1, #12]
 800c07e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c080:	079d      	lsls	r5, r3, #30
 800c082:	4606      	mov	r6, r0
 800c084:	460c      	mov	r4, r1
 800c086:	d507      	bpl.n	800c098 <__smakebuf_r+0x1c>
 800c088:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c08c:	6023      	str	r3, [r4, #0]
 800c08e:	6123      	str	r3, [r4, #16]
 800c090:	2301      	movs	r3, #1
 800c092:	6163      	str	r3, [r4, #20]
 800c094:	b003      	add	sp, #12
 800c096:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c098:	ab01      	add	r3, sp, #4
 800c09a:	466a      	mov	r2, sp
 800c09c:	f7ff ffc8 	bl	800c030 <__swhatbuf_r>
 800c0a0:	9f00      	ldr	r7, [sp, #0]
 800c0a2:	4605      	mov	r5, r0
 800c0a4:	4639      	mov	r1, r7
 800c0a6:	4630      	mov	r0, r6
 800c0a8:	f7fe febe 	bl	800ae28 <_malloc_r>
 800c0ac:	b948      	cbnz	r0, 800c0c2 <__smakebuf_r+0x46>
 800c0ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0b2:	059a      	lsls	r2, r3, #22
 800c0b4:	d4ee      	bmi.n	800c094 <__smakebuf_r+0x18>
 800c0b6:	f023 0303 	bic.w	r3, r3, #3
 800c0ba:	f043 0302 	orr.w	r3, r3, #2
 800c0be:	81a3      	strh	r3, [r4, #12]
 800c0c0:	e7e2      	b.n	800c088 <__smakebuf_r+0xc>
 800c0c2:	89a3      	ldrh	r3, [r4, #12]
 800c0c4:	6020      	str	r0, [r4, #0]
 800c0c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c0ca:	81a3      	strh	r3, [r4, #12]
 800c0cc:	9b01      	ldr	r3, [sp, #4]
 800c0ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c0d2:	b15b      	cbz	r3, 800c0ec <__smakebuf_r+0x70>
 800c0d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c0d8:	4630      	mov	r0, r6
 800c0da:	f000 f81d 	bl	800c118 <_isatty_r>
 800c0de:	b128      	cbz	r0, 800c0ec <__smakebuf_r+0x70>
 800c0e0:	89a3      	ldrh	r3, [r4, #12]
 800c0e2:	f023 0303 	bic.w	r3, r3, #3
 800c0e6:	f043 0301 	orr.w	r3, r3, #1
 800c0ea:	81a3      	strh	r3, [r4, #12]
 800c0ec:	89a3      	ldrh	r3, [r4, #12]
 800c0ee:	431d      	orrs	r5, r3
 800c0f0:	81a5      	strh	r5, [r4, #12]
 800c0f2:	e7cf      	b.n	800c094 <__smakebuf_r+0x18>

0800c0f4 <_fstat_r>:
 800c0f4:	b538      	push	{r3, r4, r5, lr}
 800c0f6:	4d07      	ldr	r5, [pc, #28]	@ (800c114 <_fstat_r+0x20>)
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	4604      	mov	r4, r0
 800c0fc:	4608      	mov	r0, r1
 800c0fe:	4611      	mov	r1, r2
 800c100:	602b      	str	r3, [r5, #0]
 800c102:	f7f7 fd2b 	bl	8003b5c <_fstat>
 800c106:	1c43      	adds	r3, r0, #1
 800c108:	d102      	bne.n	800c110 <_fstat_r+0x1c>
 800c10a:	682b      	ldr	r3, [r5, #0]
 800c10c:	b103      	cbz	r3, 800c110 <_fstat_r+0x1c>
 800c10e:	6023      	str	r3, [r4, #0]
 800c110:	bd38      	pop	{r3, r4, r5, pc}
 800c112:	bf00      	nop
 800c114:	200007fc 	.word	0x200007fc

0800c118 <_isatty_r>:
 800c118:	b538      	push	{r3, r4, r5, lr}
 800c11a:	4d06      	ldr	r5, [pc, #24]	@ (800c134 <_isatty_r+0x1c>)
 800c11c:	2300      	movs	r3, #0
 800c11e:	4604      	mov	r4, r0
 800c120:	4608      	mov	r0, r1
 800c122:	602b      	str	r3, [r5, #0]
 800c124:	f7f7 fd2a 	bl	8003b7c <_isatty>
 800c128:	1c43      	adds	r3, r0, #1
 800c12a:	d102      	bne.n	800c132 <_isatty_r+0x1a>
 800c12c:	682b      	ldr	r3, [r5, #0]
 800c12e:	b103      	cbz	r3, 800c132 <_isatty_r+0x1a>
 800c130:	6023      	str	r3, [r4, #0]
 800c132:	bd38      	pop	{r3, r4, r5, pc}
 800c134:	200007fc 	.word	0x200007fc

0800c138 <sqrt>:
 800c138:	b538      	push	{r3, r4, r5, lr}
 800c13a:	ed2d 8b02 	vpush	{d8}
 800c13e:	ec55 4b10 	vmov	r4, r5, d0
 800c142:	f000 f923 	bl	800c38c <__ieee754_sqrt>
 800c146:	4622      	mov	r2, r4
 800c148:	462b      	mov	r3, r5
 800c14a:	4620      	mov	r0, r4
 800c14c:	4629      	mov	r1, r5
 800c14e:	eeb0 8a40 	vmov.f32	s16, s0
 800c152:	eef0 8a60 	vmov.f32	s17, s1
 800c156:	f7f4 fd09 	bl	8000b6c <__aeabi_dcmpun>
 800c15a:	b990      	cbnz	r0, 800c182 <sqrt+0x4a>
 800c15c:	2200      	movs	r2, #0
 800c15e:	2300      	movs	r3, #0
 800c160:	4620      	mov	r0, r4
 800c162:	4629      	mov	r1, r5
 800c164:	f7f4 fcda 	bl	8000b1c <__aeabi_dcmplt>
 800c168:	b158      	cbz	r0, 800c182 <sqrt+0x4a>
 800c16a:	f7fd ff6f 	bl	800a04c <__errno>
 800c16e:	2321      	movs	r3, #33	@ 0x21
 800c170:	6003      	str	r3, [r0, #0]
 800c172:	2200      	movs	r2, #0
 800c174:	2300      	movs	r3, #0
 800c176:	4610      	mov	r0, r2
 800c178:	4619      	mov	r1, r3
 800c17a:	f7f4 fb87 	bl	800088c <__aeabi_ddiv>
 800c17e:	ec41 0b18 	vmov	d8, r0, r1
 800c182:	eeb0 0a48 	vmov.f32	s0, s16
 800c186:	eef0 0a68 	vmov.f32	s1, s17
 800c18a:	ecbd 8b02 	vpop	{d8}
 800c18e:	bd38      	pop	{r3, r4, r5, pc}

0800c190 <cos>:
 800c190:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c192:	ec53 2b10 	vmov	r2, r3, d0
 800c196:	4826      	ldr	r0, [pc, #152]	@ (800c230 <cos+0xa0>)
 800c198:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c19c:	4281      	cmp	r1, r0
 800c19e:	d806      	bhi.n	800c1ae <cos+0x1e>
 800c1a0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800c228 <cos+0x98>
 800c1a4:	b005      	add	sp, #20
 800c1a6:	f85d eb04 	ldr.w	lr, [sp], #4
 800c1aa:	f000 b9c9 	b.w	800c540 <__kernel_cos>
 800c1ae:	4821      	ldr	r0, [pc, #132]	@ (800c234 <cos+0xa4>)
 800c1b0:	4281      	cmp	r1, r0
 800c1b2:	d908      	bls.n	800c1c6 <cos+0x36>
 800c1b4:	4610      	mov	r0, r2
 800c1b6:	4619      	mov	r1, r3
 800c1b8:	f7f4 f886 	bl	80002c8 <__aeabi_dsub>
 800c1bc:	ec41 0b10 	vmov	d0, r0, r1
 800c1c0:	b005      	add	sp, #20
 800c1c2:	f85d fb04 	ldr.w	pc, [sp], #4
 800c1c6:	4668      	mov	r0, sp
 800c1c8:	f000 fb3e 	bl	800c848 <__ieee754_rem_pio2>
 800c1cc:	f000 0003 	and.w	r0, r0, #3
 800c1d0:	2801      	cmp	r0, #1
 800c1d2:	d00b      	beq.n	800c1ec <cos+0x5c>
 800c1d4:	2802      	cmp	r0, #2
 800c1d6:	d015      	beq.n	800c204 <cos+0x74>
 800c1d8:	b9d8      	cbnz	r0, 800c212 <cos+0x82>
 800c1da:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c1de:	ed9d 0b00 	vldr	d0, [sp]
 800c1e2:	f000 f9ad 	bl	800c540 <__kernel_cos>
 800c1e6:	ec51 0b10 	vmov	r0, r1, d0
 800c1ea:	e7e7      	b.n	800c1bc <cos+0x2c>
 800c1ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c1f0:	ed9d 0b00 	vldr	d0, [sp]
 800c1f4:	f000 fa6c 	bl	800c6d0 <__kernel_sin>
 800c1f8:	ec53 2b10 	vmov	r2, r3, d0
 800c1fc:	4610      	mov	r0, r2
 800c1fe:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800c202:	e7db      	b.n	800c1bc <cos+0x2c>
 800c204:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c208:	ed9d 0b00 	vldr	d0, [sp]
 800c20c:	f000 f998 	bl	800c540 <__kernel_cos>
 800c210:	e7f2      	b.n	800c1f8 <cos+0x68>
 800c212:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c216:	ed9d 0b00 	vldr	d0, [sp]
 800c21a:	2001      	movs	r0, #1
 800c21c:	f000 fa58 	bl	800c6d0 <__kernel_sin>
 800c220:	e7e1      	b.n	800c1e6 <cos+0x56>
 800c222:	bf00      	nop
 800c224:	f3af 8000 	nop.w
	...
 800c230:	3fe921fb 	.word	0x3fe921fb
 800c234:	7fefffff 	.word	0x7fefffff

0800c238 <sin>:
 800c238:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c23a:	ec53 2b10 	vmov	r2, r3, d0
 800c23e:	4826      	ldr	r0, [pc, #152]	@ (800c2d8 <sin+0xa0>)
 800c240:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c244:	4281      	cmp	r1, r0
 800c246:	d807      	bhi.n	800c258 <sin+0x20>
 800c248:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800c2d0 <sin+0x98>
 800c24c:	2000      	movs	r0, #0
 800c24e:	b005      	add	sp, #20
 800c250:	f85d eb04 	ldr.w	lr, [sp], #4
 800c254:	f000 ba3c 	b.w	800c6d0 <__kernel_sin>
 800c258:	4820      	ldr	r0, [pc, #128]	@ (800c2dc <sin+0xa4>)
 800c25a:	4281      	cmp	r1, r0
 800c25c:	d908      	bls.n	800c270 <sin+0x38>
 800c25e:	4610      	mov	r0, r2
 800c260:	4619      	mov	r1, r3
 800c262:	f7f4 f831 	bl	80002c8 <__aeabi_dsub>
 800c266:	ec41 0b10 	vmov	d0, r0, r1
 800c26a:	b005      	add	sp, #20
 800c26c:	f85d fb04 	ldr.w	pc, [sp], #4
 800c270:	4668      	mov	r0, sp
 800c272:	f000 fae9 	bl	800c848 <__ieee754_rem_pio2>
 800c276:	f000 0003 	and.w	r0, r0, #3
 800c27a:	2801      	cmp	r0, #1
 800c27c:	d00c      	beq.n	800c298 <sin+0x60>
 800c27e:	2802      	cmp	r0, #2
 800c280:	d011      	beq.n	800c2a6 <sin+0x6e>
 800c282:	b9e8      	cbnz	r0, 800c2c0 <sin+0x88>
 800c284:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c288:	ed9d 0b00 	vldr	d0, [sp]
 800c28c:	2001      	movs	r0, #1
 800c28e:	f000 fa1f 	bl	800c6d0 <__kernel_sin>
 800c292:	ec51 0b10 	vmov	r0, r1, d0
 800c296:	e7e6      	b.n	800c266 <sin+0x2e>
 800c298:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c29c:	ed9d 0b00 	vldr	d0, [sp]
 800c2a0:	f000 f94e 	bl	800c540 <__kernel_cos>
 800c2a4:	e7f5      	b.n	800c292 <sin+0x5a>
 800c2a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c2aa:	ed9d 0b00 	vldr	d0, [sp]
 800c2ae:	2001      	movs	r0, #1
 800c2b0:	f000 fa0e 	bl	800c6d0 <__kernel_sin>
 800c2b4:	ec53 2b10 	vmov	r2, r3, d0
 800c2b8:	4610      	mov	r0, r2
 800c2ba:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800c2be:	e7d2      	b.n	800c266 <sin+0x2e>
 800c2c0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c2c4:	ed9d 0b00 	vldr	d0, [sp]
 800c2c8:	f000 f93a 	bl	800c540 <__kernel_cos>
 800c2cc:	e7f2      	b.n	800c2b4 <sin+0x7c>
 800c2ce:	bf00      	nop
	...
 800c2d8:	3fe921fb 	.word	0x3fe921fb
 800c2dc:	7fefffff 	.word	0x7fefffff

0800c2e0 <fmaxf>:
 800c2e0:	b508      	push	{r3, lr}
 800c2e2:	ed2d 8b02 	vpush	{d8}
 800c2e6:	eeb0 8a40 	vmov.f32	s16, s0
 800c2ea:	eef0 8a60 	vmov.f32	s17, s1
 800c2ee:	f000 f831 	bl	800c354 <__fpclassifyf>
 800c2f2:	b930      	cbnz	r0, 800c302 <fmaxf+0x22>
 800c2f4:	eeb0 8a68 	vmov.f32	s16, s17
 800c2f8:	eeb0 0a48 	vmov.f32	s0, s16
 800c2fc:	ecbd 8b02 	vpop	{d8}
 800c300:	bd08      	pop	{r3, pc}
 800c302:	eeb0 0a68 	vmov.f32	s0, s17
 800c306:	f000 f825 	bl	800c354 <__fpclassifyf>
 800c30a:	2800      	cmp	r0, #0
 800c30c:	d0f4      	beq.n	800c2f8 <fmaxf+0x18>
 800c30e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c316:	dded      	ble.n	800c2f4 <fmaxf+0x14>
 800c318:	e7ee      	b.n	800c2f8 <fmaxf+0x18>

0800c31a <fminf>:
 800c31a:	b508      	push	{r3, lr}
 800c31c:	ed2d 8b02 	vpush	{d8}
 800c320:	eeb0 8a40 	vmov.f32	s16, s0
 800c324:	eef0 8a60 	vmov.f32	s17, s1
 800c328:	f000 f814 	bl	800c354 <__fpclassifyf>
 800c32c:	b930      	cbnz	r0, 800c33c <fminf+0x22>
 800c32e:	eeb0 8a68 	vmov.f32	s16, s17
 800c332:	eeb0 0a48 	vmov.f32	s0, s16
 800c336:	ecbd 8b02 	vpop	{d8}
 800c33a:	bd08      	pop	{r3, pc}
 800c33c:	eeb0 0a68 	vmov.f32	s0, s17
 800c340:	f000 f808 	bl	800c354 <__fpclassifyf>
 800c344:	2800      	cmp	r0, #0
 800c346:	d0f4      	beq.n	800c332 <fminf+0x18>
 800c348:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c34c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c350:	d5ed      	bpl.n	800c32e <fminf+0x14>
 800c352:	e7ee      	b.n	800c332 <fminf+0x18>

0800c354 <__fpclassifyf>:
 800c354:	ee10 3a10 	vmov	r3, s0
 800c358:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800c35c:	d00d      	beq.n	800c37a <__fpclassifyf+0x26>
 800c35e:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800c362:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800c366:	d30a      	bcc.n	800c37e <__fpclassifyf+0x2a>
 800c368:	4b07      	ldr	r3, [pc, #28]	@ (800c388 <__fpclassifyf+0x34>)
 800c36a:	1e42      	subs	r2, r0, #1
 800c36c:	429a      	cmp	r2, r3
 800c36e:	d908      	bls.n	800c382 <__fpclassifyf+0x2e>
 800c370:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800c374:	4258      	negs	r0, r3
 800c376:	4158      	adcs	r0, r3
 800c378:	4770      	bx	lr
 800c37a:	2002      	movs	r0, #2
 800c37c:	4770      	bx	lr
 800c37e:	2004      	movs	r0, #4
 800c380:	4770      	bx	lr
 800c382:	2003      	movs	r0, #3
 800c384:	4770      	bx	lr
 800c386:	bf00      	nop
 800c388:	007ffffe 	.word	0x007ffffe

0800c38c <__ieee754_sqrt>:
 800c38c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c390:	4a68      	ldr	r2, [pc, #416]	@ (800c534 <__ieee754_sqrt+0x1a8>)
 800c392:	ec55 4b10 	vmov	r4, r5, d0
 800c396:	43aa      	bics	r2, r5
 800c398:	462b      	mov	r3, r5
 800c39a:	4621      	mov	r1, r4
 800c39c:	d110      	bne.n	800c3c0 <__ieee754_sqrt+0x34>
 800c39e:	4622      	mov	r2, r4
 800c3a0:	4620      	mov	r0, r4
 800c3a2:	4629      	mov	r1, r5
 800c3a4:	f7f4 f948 	bl	8000638 <__aeabi_dmul>
 800c3a8:	4602      	mov	r2, r0
 800c3aa:	460b      	mov	r3, r1
 800c3ac:	4620      	mov	r0, r4
 800c3ae:	4629      	mov	r1, r5
 800c3b0:	f7f3 ff8c 	bl	80002cc <__adddf3>
 800c3b4:	4604      	mov	r4, r0
 800c3b6:	460d      	mov	r5, r1
 800c3b8:	ec45 4b10 	vmov	d0, r4, r5
 800c3bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3c0:	2d00      	cmp	r5, #0
 800c3c2:	dc0e      	bgt.n	800c3e2 <__ieee754_sqrt+0x56>
 800c3c4:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800c3c8:	4322      	orrs	r2, r4
 800c3ca:	d0f5      	beq.n	800c3b8 <__ieee754_sqrt+0x2c>
 800c3cc:	b19d      	cbz	r5, 800c3f6 <__ieee754_sqrt+0x6a>
 800c3ce:	4622      	mov	r2, r4
 800c3d0:	4620      	mov	r0, r4
 800c3d2:	4629      	mov	r1, r5
 800c3d4:	f7f3 ff78 	bl	80002c8 <__aeabi_dsub>
 800c3d8:	4602      	mov	r2, r0
 800c3da:	460b      	mov	r3, r1
 800c3dc:	f7f4 fa56 	bl	800088c <__aeabi_ddiv>
 800c3e0:	e7e8      	b.n	800c3b4 <__ieee754_sqrt+0x28>
 800c3e2:	152a      	asrs	r2, r5, #20
 800c3e4:	d115      	bne.n	800c412 <__ieee754_sqrt+0x86>
 800c3e6:	2000      	movs	r0, #0
 800c3e8:	e009      	b.n	800c3fe <__ieee754_sqrt+0x72>
 800c3ea:	0acb      	lsrs	r3, r1, #11
 800c3ec:	3a15      	subs	r2, #21
 800c3ee:	0549      	lsls	r1, r1, #21
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d0fa      	beq.n	800c3ea <__ieee754_sqrt+0x5e>
 800c3f4:	e7f7      	b.n	800c3e6 <__ieee754_sqrt+0x5a>
 800c3f6:	462a      	mov	r2, r5
 800c3f8:	e7fa      	b.n	800c3f0 <__ieee754_sqrt+0x64>
 800c3fa:	005b      	lsls	r3, r3, #1
 800c3fc:	3001      	adds	r0, #1
 800c3fe:	02dc      	lsls	r4, r3, #11
 800c400:	d5fb      	bpl.n	800c3fa <__ieee754_sqrt+0x6e>
 800c402:	1e44      	subs	r4, r0, #1
 800c404:	1b12      	subs	r2, r2, r4
 800c406:	f1c0 0420 	rsb	r4, r0, #32
 800c40a:	fa21 f404 	lsr.w	r4, r1, r4
 800c40e:	4323      	orrs	r3, r4
 800c410:	4081      	lsls	r1, r0
 800c412:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c416:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800c41a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c41e:	07d2      	lsls	r2, r2, #31
 800c420:	bf5c      	itt	pl
 800c422:	005b      	lslpl	r3, r3, #1
 800c424:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800c428:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c42c:	bf58      	it	pl
 800c42e:	0049      	lslpl	r1, r1, #1
 800c430:	2600      	movs	r6, #0
 800c432:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800c436:	106d      	asrs	r5, r5, #1
 800c438:	0049      	lsls	r1, r1, #1
 800c43a:	2016      	movs	r0, #22
 800c43c:	4632      	mov	r2, r6
 800c43e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800c442:	1917      	adds	r7, r2, r4
 800c444:	429f      	cmp	r7, r3
 800c446:	bfde      	ittt	le
 800c448:	193a      	addle	r2, r7, r4
 800c44a:	1bdb      	suble	r3, r3, r7
 800c44c:	1936      	addle	r6, r6, r4
 800c44e:	0fcf      	lsrs	r7, r1, #31
 800c450:	3801      	subs	r0, #1
 800c452:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800c456:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c45a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800c45e:	d1f0      	bne.n	800c442 <__ieee754_sqrt+0xb6>
 800c460:	4604      	mov	r4, r0
 800c462:	2720      	movs	r7, #32
 800c464:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800c468:	429a      	cmp	r2, r3
 800c46a:	eb00 0e0c 	add.w	lr, r0, ip
 800c46e:	db02      	blt.n	800c476 <__ieee754_sqrt+0xea>
 800c470:	d113      	bne.n	800c49a <__ieee754_sqrt+0x10e>
 800c472:	458e      	cmp	lr, r1
 800c474:	d811      	bhi.n	800c49a <__ieee754_sqrt+0x10e>
 800c476:	f1be 0f00 	cmp.w	lr, #0
 800c47a:	eb0e 000c 	add.w	r0, lr, ip
 800c47e:	da42      	bge.n	800c506 <__ieee754_sqrt+0x17a>
 800c480:	2800      	cmp	r0, #0
 800c482:	db40      	blt.n	800c506 <__ieee754_sqrt+0x17a>
 800c484:	f102 0801 	add.w	r8, r2, #1
 800c488:	1a9b      	subs	r3, r3, r2
 800c48a:	458e      	cmp	lr, r1
 800c48c:	bf88      	it	hi
 800c48e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c492:	eba1 010e 	sub.w	r1, r1, lr
 800c496:	4464      	add	r4, ip
 800c498:	4642      	mov	r2, r8
 800c49a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800c49e:	3f01      	subs	r7, #1
 800c4a0:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800c4a4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c4a8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800c4ac:	d1dc      	bne.n	800c468 <__ieee754_sqrt+0xdc>
 800c4ae:	4319      	orrs	r1, r3
 800c4b0:	d01b      	beq.n	800c4ea <__ieee754_sqrt+0x15e>
 800c4b2:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800c538 <__ieee754_sqrt+0x1ac>
 800c4b6:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800c53c <__ieee754_sqrt+0x1b0>
 800c4ba:	e9da 0100 	ldrd	r0, r1, [sl]
 800c4be:	e9db 2300 	ldrd	r2, r3, [fp]
 800c4c2:	f7f3 ff01 	bl	80002c8 <__aeabi_dsub>
 800c4c6:	e9da 8900 	ldrd	r8, r9, [sl]
 800c4ca:	4602      	mov	r2, r0
 800c4cc:	460b      	mov	r3, r1
 800c4ce:	4640      	mov	r0, r8
 800c4d0:	4649      	mov	r1, r9
 800c4d2:	f7f4 fb2d 	bl	8000b30 <__aeabi_dcmple>
 800c4d6:	b140      	cbz	r0, 800c4ea <__ieee754_sqrt+0x15e>
 800c4d8:	f1b4 3fff 	cmp.w	r4, #4294967295
 800c4dc:	e9da 0100 	ldrd	r0, r1, [sl]
 800c4e0:	e9db 2300 	ldrd	r2, r3, [fp]
 800c4e4:	d111      	bne.n	800c50a <__ieee754_sqrt+0x17e>
 800c4e6:	3601      	adds	r6, #1
 800c4e8:	463c      	mov	r4, r7
 800c4ea:	1072      	asrs	r2, r6, #1
 800c4ec:	0863      	lsrs	r3, r4, #1
 800c4ee:	07f1      	lsls	r1, r6, #31
 800c4f0:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800c4f4:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800c4f8:	bf48      	it	mi
 800c4fa:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800c4fe:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800c502:	4618      	mov	r0, r3
 800c504:	e756      	b.n	800c3b4 <__ieee754_sqrt+0x28>
 800c506:	4690      	mov	r8, r2
 800c508:	e7be      	b.n	800c488 <__ieee754_sqrt+0xfc>
 800c50a:	f7f3 fedf 	bl	80002cc <__adddf3>
 800c50e:	e9da 8900 	ldrd	r8, r9, [sl]
 800c512:	4602      	mov	r2, r0
 800c514:	460b      	mov	r3, r1
 800c516:	4640      	mov	r0, r8
 800c518:	4649      	mov	r1, r9
 800c51a:	f7f4 faff 	bl	8000b1c <__aeabi_dcmplt>
 800c51e:	b120      	cbz	r0, 800c52a <__ieee754_sqrt+0x19e>
 800c520:	1ca0      	adds	r0, r4, #2
 800c522:	bf08      	it	eq
 800c524:	3601      	addeq	r6, #1
 800c526:	3402      	adds	r4, #2
 800c528:	e7df      	b.n	800c4ea <__ieee754_sqrt+0x15e>
 800c52a:	1c63      	adds	r3, r4, #1
 800c52c:	f023 0401 	bic.w	r4, r3, #1
 800c530:	e7db      	b.n	800c4ea <__ieee754_sqrt+0x15e>
 800c532:	bf00      	nop
 800c534:	7ff00000 	.word	0x7ff00000
 800c538:	20000210 	.word	0x20000210
 800c53c:	20000208 	.word	0x20000208

0800c540 <__kernel_cos>:
 800c540:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c544:	ec57 6b10 	vmov	r6, r7, d0
 800c548:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800c54c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800c550:	ed8d 1b00 	vstr	d1, [sp]
 800c554:	d206      	bcs.n	800c564 <__kernel_cos+0x24>
 800c556:	4630      	mov	r0, r6
 800c558:	4639      	mov	r1, r7
 800c55a:	f7f4 fb1d 	bl	8000b98 <__aeabi_d2iz>
 800c55e:	2800      	cmp	r0, #0
 800c560:	f000 8088 	beq.w	800c674 <__kernel_cos+0x134>
 800c564:	4632      	mov	r2, r6
 800c566:	463b      	mov	r3, r7
 800c568:	4630      	mov	r0, r6
 800c56a:	4639      	mov	r1, r7
 800c56c:	f7f4 f864 	bl	8000638 <__aeabi_dmul>
 800c570:	4b51      	ldr	r3, [pc, #324]	@ (800c6b8 <__kernel_cos+0x178>)
 800c572:	2200      	movs	r2, #0
 800c574:	4604      	mov	r4, r0
 800c576:	460d      	mov	r5, r1
 800c578:	f7f4 f85e 	bl	8000638 <__aeabi_dmul>
 800c57c:	a340      	add	r3, pc, #256	@ (adr r3, 800c680 <__kernel_cos+0x140>)
 800c57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c582:	4682      	mov	sl, r0
 800c584:	468b      	mov	fp, r1
 800c586:	4620      	mov	r0, r4
 800c588:	4629      	mov	r1, r5
 800c58a:	f7f4 f855 	bl	8000638 <__aeabi_dmul>
 800c58e:	a33e      	add	r3, pc, #248	@ (adr r3, 800c688 <__kernel_cos+0x148>)
 800c590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c594:	f7f3 fe9a 	bl	80002cc <__adddf3>
 800c598:	4622      	mov	r2, r4
 800c59a:	462b      	mov	r3, r5
 800c59c:	f7f4 f84c 	bl	8000638 <__aeabi_dmul>
 800c5a0:	a33b      	add	r3, pc, #236	@ (adr r3, 800c690 <__kernel_cos+0x150>)
 800c5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a6:	f7f3 fe8f 	bl	80002c8 <__aeabi_dsub>
 800c5aa:	4622      	mov	r2, r4
 800c5ac:	462b      	mov	r3, r5
 800c5ae:	f7f4 f843 	bl	8000638 <__aeabi_dmul>
 800c5b2:	a339      	add	r3, pc, #228	@ (adr r3, 800c698 <__kernel_cos+0x158>)
 800c5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5b8:	f7f3 fe88 	bl	80002cc <__adddf3>
 800c5bc:	4622      	mov	r2, r4
 800c5be:	462b      	mov	r3, r5
 800c5c0:	f7f4 f83a 	bl	8000638 <__aeabi_dmul>
 800c5c4:	a336      	add	r3, pc, #216	@ (adr r3, 800c6a0 <__kernel_cos+0x160>)
 800c5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ca:	f7f3 fe7d 	bl	80002c8 <__aeabi_dsub>
 800c5ce:	4622      	mov	r2, r4
 800c5d0:	462b      	mov	r3, r5
 800c5d2:	f7f4 f831 	bl	8000638 <__aeabi_dmul>
 800c5d6:	a334      	add	r3, pc, #208	@ (adr r3, 800c6a8 <__kernel_cos+0x168>)
 800c5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5dc:	f7f3 fe76 	bl	80002cc <__adddf3>
 800c5e0:	4622      	mov	r2, r4
 800c5e2:	462b      	mov	r3, r5
 800c5e4:	f7f4 f828 	bl	8000638 <__aeabi_dmul>
 800c5e8:	4622      	mov	r2, r4
 800c5ea:	462b      	mov	r3, r5
 800c5ec:	f7f4 f824 	bl	8000638 <__aeabi_dmul>
 800c5f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c5f4:	4604      	mov	r4, r0
 800c5f6:	460d      	mov	r5, r1
 800c5f8:	4630      	mov	r0, r6
 800c5fa:	4639      	mov	r1, r7
 800c5fc:	f7f4 f81c 	bl	8000638 <__aeabi_dmul>
 800c600:	460b      	mov	r3, r1
 800c602:	4602      	mov	r2, r0
 800c604:	4629      	mov	r1, r5
 800c606:	4620      	mov	r0, r4
 800c608:	f7f3 fe5e 	bl	80002c8 <__aeabi_dsub>
 800c60c:	4b2b      	ldr	r3, [pc, #172]	@ (800c6bc <__kernel_cos+0x17c>)
 800c60e:	4598      	cmp	r8, r3
 800c610:	4606      	mov	r6, r0
 800c612:	460f      	mov	r7, r1
 800c614:	d810      	bhi.n	800c638 <__kernel_cos+0xf8>
 800c616:	4602      	mov	r2, r0
 800c618:	460b      	mov	r3, r1
 800c61a:	4650      	mov	r0, sl
 800c61c:	4659      	mov	r1, fp
 800c61e:	f7f3 fe53 	bl	80002c8 <__aeabi_dsub>
 800c622:	460b      	mov	r3, r1
 800c624:	4926      	ldr	r1, [pc, #152]	@ (800c6c0 <__kernel_cos+0x180>)
 800c626:	4602      	mov	r2, r0
 800c628:	2000      	movs	r0, #0
 800c62a:	f7f3 fe4d 	bl	80002c8 <__aeabi_dsub>
 800c62e:	ec41 0b10 	vmov	d0, r0, r1
 800c632:	b003      	add	sp, #12
 800c634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c638:	4b22      	ldr	r3, [pc, #136]	@ (800c6c4 <__kernel_cos+0x184>)
 800c63a:	4921      	ldr	r1, [pc, #132]	@ (800c6c0 <__kernel_cos+0x180>)
 800c63c:	4598      	cmp	r8, r3
 800c63e:	bf8c      	ite	hi
 800c640:	4d21      	ldrhi	r5, [pc, #132]	@ (800c6c8 <__kernel_cos+0x188>)
 800c642:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800c646:	2400      	movs	r4, #0
 800c648:	4622      	mov	r2, r4
 800c64a:	462b      	mov	r3, r5
 800c64c:	2000      	movs	r0, #0
 800c64e:	f7f3 fe3b 	bl	80002c8 <__aeabi_dsub>
 800c652:	4622      	mov	r2, r4
 800c654:	4680      	mov	r8, r0
 800c656:	4689      	mov	r9, r1
 800c658:	462b      	mov	r3, r5
 800c65a:	4650      	mov	r0, sl
 800c65c:	4659      	mov	r1, fp
 800c65e:	f7f3 fe33 	bl	80002c8 <__aeabi_dsub>
 800c662:	4632      	mov	r2, r6
 800c664:	463b      	mov	r3, r7
 800c666:	f7f3 fe2f 	bl	80002c8 <__aeabi_dsub>
 800c66a:	4602      	mov	r2, r0
 800c66c:	460b      	mov	r3, r1
 800c66e:	4640      	mov	r0, r8
 800c670:	4649      	mov	r1, r9
 800c672:	e7da      	b.n	800c62a <__kernel_cos+0xea>
 800c674:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800c6b0 <__kernel_cos+0x170>
 800c678:	e7db      	b.n	800c632 <__kernel_cos+0xf2>
 800c67a:	bf00      	nop
 800c67c:	f3af 8000 	nop.w
 800c680:	be8838d4 	.word	0xbe8838d4
 800c684:	bda8fae9 	.word	0xbda8fae9
 800c688:	bdb4b1c4 	.word	0xbdb4b1c4
 800c68c:	3e21ee9e 	.word	0x3e21ee9e
 800c690:	809c52ad 	.word	0x809c52ad
 800c694:	3e927e4f 	.word	0x3e927e4f
 800c698:	19cb1590 	.word	0x19cb1590
 800c69c:	3efa01a0 	.word	0x3efa01a0
 800c6a0:	16c15177 	.word	0x16c15177
 800c6a4:	3f56c16c 	.word	0x3f56c16c
 800c6a8:	5555554c 	.word	0x5555554c
 800c6ac:	3fa55555 	.word	0x3fa55555
 800c6b0:	00000000 	.word	0x00000000
 800c6b4:	3ff00000 	.word	0x3ff00000
 800c6b8:	3fe00000 	.word	0x3fe00000
 800c6bc:	3fd33332 	.word	0x3fd33332
 800c6c0:	3ff00000 	.word	0x3ff00000
 800c6c4:	3fe90000 	.word	0x3fe90000
 800c6c8:	3fd20000 	.word	0x3fd20000
 800c6cc:	00000000 	.word	0x00000000

0800c6d0 <__kernel_sin>:
 800c6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6d4:	ec55 4b10 	vmov	r4, r5, d0
 800c6d8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800c6dc:	b085      	sub	sp, #20
 800c6de:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800c6e2:	ed8d 1b02 	vstr	d1, [sp, #8]
 800c6e6:	4680      	mov	r8, r0
 800c6e8:	d205      	bcs.n	800c6f6 <__kernel_sin+0x26>
 800c6ea:	4620      	mov	r0, r4
 800c6ec:	4629      	mov	r1, r5
 800c6ee:	f7f4 fa53 	bl	8000b98 <__aeabi_d2iz>
 800c6f2:	2800      	cmp	r0, #0
 800c6f4:	d052      	beq.n	800c79c <__kernel_sin+0xcc>
 800c6f6:	4622      	mov	r2, r4
 800c6f8:	462b      	mov	r3, r5
 800c6fa:	4620      	mov	r0, r4
 800c6fc:	4629      	mov	r1, r5
 800c6fe:	f7f3 ff9b 	bl	8000638 <__aeabi_dmul>
 800c702:	4682      	mov	sl, r0
 800c704:	468b      	mov	fp, r1
 800c706:	4602      	mov	r2, r0
 800c708:	460b      	mov	r3, r1
 800c70a:	4620      	mov	r0, r4
 800c70c:	4629      	mov	r1, r5
 800c70e:	f7f3 ff93 	bl	8000638 <__aeabi_dmul>
 800c712:	a342      	add	r3, pc, #264	@ (adr r3, 800c81c <__kernel_sin+0x14c>)
 800c714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c718:	e9cd 0100 	strd	r0, r1, [sp]
 800c71c:	4650      	mov	r0, sl
 800c71e:	4659      	mov	r1, fp
 800c720:	f7f3 ff8a 	bl	8000638 <__aeabi_dmul>
 800c724:	a33f      	add	r3, pc, #252	@ (adr r3, 800c824 <__kernel_sin+0x154>)
 800c726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c72a:	f7f3 fdcd 	bl	80002c8 <__aeabi_dsub>
 800c72e:	4652      	mov	r2, sl
 800c730:	465b      	mov	r3, fp
 800c732:	f7f3 ff81 	bl	8000638 <__aeabi_dmul>
 800c736:	a33d      	add	r3, pc, #244	@ (adr r3, 800c82c <__kernel_sin+0x15c>)
 800c738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c73c:	f7f3 fdc6 	bl	80002cc <__adddf3>
 800c740:	4652      	mov	r2, sl
 800c742:	465b      	mov	r3, fp
 800c744:	f7f3 ff78 	bl	8000638 <__aeabi_dmul>
 800c748:	a33a      	add	r3, pc, #232	@ (adr r3, 800c834 <__kernel_sin+0x164>)
 800c74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c74e:	f7f3 fdbb 	bl	80002c8 <__aeabi_dsub>
 800c752:	4652      	mov	r2, sl
 800c754:	465b      	mov	r3, fp
 800c756:	f7f3 ff6f 	bl	8000638 <__aeabi_dmul>
 800c75a:	a338      	add	r3, pc, #224	@ (adr r3, 800c83c <__kernel_sin+0x16c>)
 800c75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c760:	f7f3 fdb4 	bl	80002cc <__adddf3>
 800c764:	4606      	mov	r6, r0
 800c766:	460f      	mov	r7, r1
 800c768:	f1b8 0f00 	cmp.w	r8, #0
 800c76c:	d11b      	bne.n	800c7a6 <__kernel_sin+0xd6>
 800c76e:	4602      	mov	r2, r0
 800c770:	460b      	mov	r3, r1
 800c772:	4650      	mov	r0, sl
 800c774:	4659      	mov	r1, fp
 800c776:	f7f3 ff5f 	bl	8000638 <__aeabi_dmul>
 800c77a:	a325      	add	r3, pc, #148	@ (adr r3, 800c810 <__kernel_sin+0x140>)
 800c77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c780:	f7f3 fda2 	bl	80002c8 <__aeabi_dsub>
 800c784:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c788:	f7f3 ff56 	bl	8000638 <__aeabi_dmul>
 800c78c:	4602      	mov	r2, r0
 800c78e:	460b      	mov	r3, r1
 800c790:	4620      	mov	r0, r4
 800c792:	4629      	mov	r1, r5
 800c794:	f7f3 fd9a 	bl	80002cc <__adddf3>
 800c798:	4604      	mov	r4, r0
 800c79a:	460d      	mov	r5, r1
 800c79c:	ec45 4b10 	vmov	d0, r4, r5
 800c7a0:	b005      	add	sp, #20
 800c7a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c7aa:	4b1b      	ldr	r3, [pc, #108]	@ (800c818 <__kernel_sin+0x148>)
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	f7f3 ff43 	bl	8000638 <__aeabi_dmul>
 800c7b2:	4632      	mov	r2, r6
 800c7b4:	4680      	mov	r8, r0
 800c7b6:	4689      	mov	r9, r1
 800c7b8:	463b      	mov	r3, r7
 800c7ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c7be:	f7f3 ff3b 	bl	8000638 <__aeabi_dmul>
 800c7c2:	4602      	mov	r2, r0
 800c7c4:	460b      	mov	r3, r1
 800c7c6:	4640      	mov	r0, r8
 800c7c8:	4649      	mov	r1, r9
 800c7ca:	f7f3 fd7d 	bl	80002c8 <__aeabi_dsub>
 800c7ce:	4652      	mov	r2, sl
 800c7d0:	465b      	mov	r3, fp
 800c7d2:	f7f3 ff31 	bl	8000638 <__aeabi_dmul>
 800c7d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c7da:	f7f3 fd75 	bl	80002c8 <__aeabi_dsub>
 800c7de:	a30c      	add	r3, pc, #48	@ (adr r3, 800c810 <__kernel_sin+0x140>)
 800c7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7e4:	4606      	mov	r6, r0
 800c7e6:	460f      	mov	r7, r1
 800c7e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c7ec:	f7f3 ff24 	bl	8000638 <__aeabi_dmul>
 800c7f0:	4602      	mov	r2, r0
 800c7f2:	460b      	mov	r3, r1
 800c7f4:	4630      	mov	r0, r6
 800c7f6:	4639      	mov	r1, r7
 800c7f8:	f7f3 fd68 	bl	80002cc <__adddf3>
 800c7fc:	4602      	mov	r2, r0
 800c7fe:	460b      	mov	r3, r1
 800c800:	4620      	mov	r0, r4
 800c802:	4629      	mov	r1, r5
 800c804:	f7f3 fd60 	bl	80002c8 <__aeabi_dsub>
 800c808:	e7c6      	b.n	800c798 <__kernel_sin+0xc8>
 800c80a:	bf00      	nop
 800c80c:	f3af 8000 	nop.w
 800c810:	55555549 	.word	0x55555549
 800c814:	3fc55555 	.word	0x3fc55555
 800c818:	3fe00000 	.word	0x3fe00000
 800c81c:	5acfd57c 	.word	0x5acfd57c
 800c820:	3de5d93a 	.word	0x3de5d93a
 800c824:	8a2b9ceb 	.word	0x8a2b9ceb
 800c828:	3e5ae5e6 	.word	0x3e5ae5e6
 800c82c:	57b1fe7d 	.word	0x57b1fe7d
 800c830:	3ec71de3 	.word	0x3ec71de3
 800c834:	19c161d5 	.word	0x19c161d5
 800c838:	3f2a01a0 	.word	0x3f2a01a0
 800c83c:	1110f8a6 	.word	0x1110f8a6
 800c840:	3f811111 	.word	0x3f811111
 800c844:	00000000 	.word	0x00000000

0800c848 <__ieee754_rem_pio2>:
 800c848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c84c:	ec57 6b10 	vmov	r6, r7, d0
 800c850:	4bc5      	ldr	r3, [pc, #788]	@ (800cb68 <__ieee754_rem_pio2+0x320>)
 800c852:	b08d      	sub	sp, #52	@ 0x34
 800c854:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800c858:	4598      	cmp	r8, r3
 800c85a:	4604      	mov	r4, r0
 800c85c:	9704      	str	r7, [sp, #16]
 800c85e:	d807      	bhi.n	800c870 <__ieee754_rem_pio2+0x28>
 800c860:	2200      	movs	r2, #0
 800c862:	2300      	movs	r3, #0
 800c864:	ed80 0b00 	vstr	d0, [r0]
 800c868:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c86c:	2500      	movs	r5, #0
 800c86e:	e028      	b.n	800c8c2 <__ieee754_rem_pio2+0x7a>
 800c870:	4bbe      	ldr	r3, [pc, #760]	@ (800cb6c <__ieee754_rem_pio2+0x324>)
 800c872:	4598      	cmp	r8, r3
 800c874:	d878      	bhi.n	800c968 <__ieee754_rem_pio2+0x120>
 800c876:	9b04      	ldr	r3, [sp, #16]
 800c878:	4dbd      	ldr	r5, [pc, #756]	@ (800cb70 <__ieee754_rem_pio2+0x328>)
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	4630      	mov	r0, r6
 800c87e:	a3ac      	add	r3, pc, #688	@ (adr r3, 800cb30 <__ieee754_rem_pio2+0x2e8>)
 800c880:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c884:	4639      	mov	r1, r7
 800c886:	dd38      	ble.n	800c8fa <__ieee754_rem_pio2+0xb2>
 800c888:	f7f3 fd1e 	bl	80002c8 <__aeabi_dsub>
 800c88c:	45a8      	cmp	r8, r5
 800c88e:	4606      	mov	r6, r0
 800c890:	460f      	mov	r7, r1
 800c892:	d01a      	beq.n	800c8ca <__ieee754_rem_pio2+0x82>
 800c894:	a3a8      	add	r3, pc, #672	@ (adr r3, 800cb38 <__ieee754_rem_pio2+0x2f0>)
 800c896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c89a:	f7f3 fd15 	bl	80002c8 <__aeabi_dsub>
 800c89e:	4602      	mov	r2, r0
 800c8a0:	460b      	mov	r3, r1
 800c8a2:	4680      	mov	r8, r0
 800c8a4:	4689      	mov	r9, r1
 800c8a6:	4630      	mov	r0, r6
 800c8a8:	4639      	mov	r1, r7
 800c8aa:	f7f3 fd0d 	bl	80002c8 <__aeabi_dsub>
 800c8ae:	a3a2      	add	r3, pc, #648	@ (adr r3, 800cb38 <__ieee754_rem_pio2+0x2f0>)
 800c8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8b4:	f7f3 fd08 	bl	80002c8 <__aeabi_dsub>
 800c8b8:	e9c4 8900 	strd	r8, r9, [r4]
 800c8bc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c8c0:	2501      	movs	r5, #1
 800c8c2:	4628      	mov	r0, r5
 800c8c4:	b00d      	add	sp, #52	@ 0x34
 800c8c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8ca:	a39d      	add	r3, pc, #628	@ (adr r3, 800cb40 <__ieee754_rem_pio2+0x2f8>)
 800c8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8d0:	f7f3 fcfa 	bl	80002c8 <__aeabi_dsub>
 800c8d4:	a39c      	add	r3, pc, #624	@ (adr r3, 800cb48 <__ieee754_rem_pio2+0x300>)
 800c8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8da:	4606      	mov	r6, r0
 800c8dc:	460f      	mov	r7, r1
 800c8de:	f7f3 fcf3 	bl	80002c8 <__aeabi_dsub>
 800c8e2:	4602      	mov	r2, r0
 800c8e4:	460b      	mov	r3, r1
 800c8e6:	4680      	mov	r8, r0
 800c8e8:	4689      	mov	r9, r1
 800c8ea:	4630      	mov	r0, r6
 800c8ec:	4639      	mov	r1, r7
 800c8ee:	f7f3 fceb 	bl	80002c8 <__aeabi_dsub>
 800c8f2:	a395      	add	r3, pc, #596	@ (adr r3, 800cb48 <__ieee754_rem_pio2+0x300>)
 800c8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f8:	e7dc      	b.n	800c8b4 <__ieee754_rem_pio2+0x6c>
 800c8fa:	f7f3 fce7 	bl	80002cc <__adddf3>
 800c8fe:	45a8      	cmp	r8, r5
 800c900:	4606      	mov	r6, r0
 800c902:	460f      	mov	r7, r1
 800c904:	d018      	beq.n	800c938 <__ieee754_rem_pio2+0xf0>
 800c906:	a38c      	add	r3, pc, #560	@ (adr r3, 800cb38 <__ieee754_rem_pio2+0x2f0>)
 800c908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c90c:	f7f3 fcde 	bl	80002cc <__adddf3>
 800c910:	4602      	mov	r2, r0
 800c912:	460b      	mov	r3, r1
 800c914:	4680      	mov	r8, r0
 800c916:	4689      	mov	r9, r1
 800c918:	4630      	mov	r0, r6
 800c91a:	4639      	mov	r1, r7
 800c91c:	f7f3 fcd4 	bl	80002c8 <__aeabi_dsub>
 800c920:	a385      	add	r3, pc, #532	@ (adr r3, 800cb38 <__ieee754_rem_pio2+0x2f0>)
 800c922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c926:	f7f3 fcd1 	bl	80002cc <__adddf3>
 800c92a:	f04f 35ff 	mov.w	r5, #4294967295
 800c92e:	e9c4 8900 	strd	r8, r9, [r4]
 800c932:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c936:	e7c4      	b.n	800c8c2 <__ieee754_rem_pio2+0x7a>
 800c938:	a381      	add	r3, pc, #516	@ (adr r3, 800cb40 <__ieee754_rem_pio2+0x2f8>)
 800c93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c93e:	f7f3 fcc5 	bl	80002cc <__adddf3>
 800c942:	a381      	add	r3, pc, #516	@ (adr r3, 800cb48 <__ieee754_rem_pio2+0x300>)
 800c944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c948:	4606      	mov	r6, r0
 800c94a:	460f      	mov	r7, r1
 800c94c:	f7f3 fcbe 	bl	80002cc <__adddf3>
 800c950:	4602      	mov	r2, r0
 800c952:	460b      	mov	r3, r1
 800c954:	4680      	mov	r8, r0
 800c956:	4689      	mov	r9, r1
 800c958:	4630      	mov	r0, r6
 800c95a:	4639      	mov	r1, r7
 800c95c:	f7f3 fcb4 	bl	80002c8 <__aeabi_dsub>
 800c960:	a379      	add	r3, pc, #484	@ (adr r3, 800cb48 <__ieee754_rem_pio2+0x300>)
 800c962:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c966:	e7de      	b.n	800c926 <__ieee754_rem_pio2+0xde>
 800c968:	4b82      	ldr	r3, [pc, #520]	@ (800cb74 <__ieee754_rem_pio2+0x32c>)
 800c96a:	4598      	cmp	r8, r3
 800c96c:	f200 80d1 	bhi.w	800cb12 <__ieee754_rem_pio2+0x2ca>
 800c970:	f000 f966 	bl	800cc40 <fabs>
 800c974:	ec57 6b10 	vmov	r6, r7, d0
 800c978:	a375      	add	r3, pc, #468	@ (adr r3, 800cb50 <__ieee754_rem_pio2+0x308>)
 800c97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c97e:	4630      	mov	r0, r6
 800c980:	4639      	mov	r1, r7
 800c982:	f7f3 fe59 	bl	8000638 <__aeabi_dmul>
 800c986:	4b7c      	ldr	r3, [pc, #496]	@ (800cb78 <__ieee754_rem_pio2+0x330>)
 800c988:	2200      	movs	r2, #0
 800c98a:	f7f3 fc9f 	bl	80002cc <__adddf3>
 800c98e:	f7f4 f903 	bl	8000b98 <__aeabi_d2iz>
 800c992:	4605      	mov	r5, r0
 800c994:	f7f3 fde6 	bl	8000564 <__aeabi_i2d>
 800c998:	4602      	mov	r2, r0
 800c99a:	460b      	mov	r3, r1
 800c99c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c9a0:	a363      	add	r3, pc, #396	@ (adr r3, 800cb30 <__ieee754_rem_pio2+0x2e8>)
 800c9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9a6:	f7f3 fe47 	bl	8000638 <__aeabi_dmul>
 800c9aa:	4602      	mov	r2, r0
 800c9ac:	460b      	mov	r3, r1
 800c9ae:	4630      	mov	r0, r6
 800c9b0:	4639      	mov	r1, r7
 800c9b2:	f7f3 fc89 	bl	80002c8 <__aeabi_dsub>
 800c9b6:	a360      	add	r3, pc, #384	@ (adr r3, 800cb38 <__ieee754_rem_pio2+0x2f0>)
 800c9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9bc:	4682      	mov	sl, r0
 800c9be:	468b      	mov	fp, r1
 800c9c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9c4:	f7f3 fe38 	bl	8000638 <__aeabi_dmul>
 800c9c8:	2d1f      	cmp	r5, #31
 800c9ca:	4606      	mov	r6, r0
 800c9cc:	460f      	mov	r7, r1
 800c9ce:	dc0c      	bgt.n	800c9ea <__ieee754_rem_pio2+0x1a2>
 800c9d0:	4b6a      	ldr	r3, [pc, #424]	@ (800cb7c <__ieee754_rem_pio2+0x334>)
 800c9d2:	1e6a      	subs	r2, r5, #1
 800c9d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9d8:	4543      	cmp	r3, r8
 800c9da:	d006      	beq.n	800c9ea <__ieee754_rem_pio2+0x1a2>
 800c9dc:	4632      	mov	r2, r6
 800c9de:	463b      	mov	r3, r7
 800c9e0:	4650      	mov	r0, sl
 800c9e2:	4659      	mov	r1, fp
 800c9e4:	f7f3 fc70 	bl	80002c8 <__aeabi_dsub>
 800c9e8:	e00e      	b.n	800ca08 <__ieee754_rem_pio2+0x1c0>
 800c9ea:	463b      	mov	r3, r7
 800c9ec:	4632      	mov	r2, r6
 800c9ee:	4650      	mov	r0, sl
 800c9f0:	4659      	mov	r1, fp
 800c9f2:	f7f3 fc69 	bl	80002c8 <__aeabi_dsub>
 800c9f6:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c9fa:	9305      	str	r3, [sp, #20]
 800c9fc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ca00:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800ca04:	2b10      	cmp	r3, #16
 800ca06:	dc02      	bgt.n	800ca0e <__ieee754_rem_pio2+0x1c6>
 800ca08:	e9c4 0100 	strd	r0, r1, [r4]
 800ca0c:	e039      	b.n	800ca82 <__ieee754_rem_pio2+0x23a>
 800ca0e:	a34c      	add	r3, pc, #304	@ (adr r3, 800cb40 <__ieee754_rem_pio2+0x2f8>)
 800ca10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca18:	f7f3 fe0e 	bl	8000638 <__aeabi_dmul>
 800ca1c:	4606      	mov	r6, r0
 800ca1e:	460f      	mov	r7, r1
 800ca20:	4602      	mov	r2, r0
 800ca22:	460b      	mov	r3, r1
 800ca24:	4650      	mov	r0, sl
 800ca26:	4659      	mov	r1, fp
 800ca28:	f7f3 fc4e 	bl	80002c8 <__aeabi_dsub>
 800ca2c:	4602      	mov	r2, r0
 800ca2e:	460b      	mov	r3, r1
 800ca30:	4680      	mov	r8, r0
 800ca32:	4689      	mov	r9, r1
 800ca34:	4650      	mov	r0, sl
 800ca36:	4659      	mov	r1, fp
 800ca38:	f7f3 fc46 	bl	80002c8 <__aeabi_dsub>
 800ca3c:	4632      	mov	r2, r6
 800ca3e:	463b      	mov	r3, r7
 800ca40:	f7f3 fc42 	bl	80002c8 <__aeabi_dsub>
 800ca44:	a340      	add	r3, pc, #256	@ (adr r3, 800cb48 <__ieee754_rem_pio2+0x300>)
 800ca46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca4a:	4606      	mov	r6, r0
 800ca4c:	460f      	mov	r7, r1
 800ca4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca52:	f7f3 fdf1 	bl	8000638 <__aeabi_dmul>
 800ca56:	4632      	mov	r2, r6
 800ca58:	463b      	mov	r3, r7
 800ca5a:	f7f3 fc35 	bl	80002c8 <__aeabi_dsub>
 800ca5e:	4602      	mov	r2, r0
 800ca60:	460b      	mov	r3, r1
 800ca62:	4606      	mov	r6, r0
 800ca64:	460f      	mov	r7, r1
 800ca66:	4640      	mov	r0, r8
 800ca68:	4649      	mov	r1, r9
 800ca6a:	f7f3 fc2d 	bl	80002c8 <__aeabi_dsub>
 800ca6e:	9a05      	ldr	r2, [sp, #20]
 800ca70:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ca74:	1ad3      	subs	r3, r2, r3
 800ca76:	2b31      	cmp	r3, #49	@ 0x31
 800ca78:	dc20      	bgt.n	800cabc <__ieee754_rem_pio2+0x274>
 800ca7a:	e9c4 0100 	strd	r0, r1, [r4]
 800ca7e:	46c2      	mov	sl, r8
 800ca80:	46cb      	mov	fp, r9
 800ca82:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ca86:	4650      	mov	r0, sl
 800ca88:	4642      	mov	r2, r8
 800ca8a:	464b      	mov	r3, r9
 800ca8c:	4659      	mov	r1, fp
 800ca8e:	f7f3 fc1b 	bl	80002c8 <__aeabi_dsub>
 800ca92:	463b      	mov	r3, r7
 800ca94:	4632      	mov	r2, r6
 800ca96:	f7f3 fc17 	bl	80002c8 <__aeabi_dsub>
 800ca9a:	9b04      	ldr	r3, [sp, #16]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800caa2:	f6bf af0e 	bge.w	800c8c2 <__ieee754_rem_pio2+0x7a>
 800caa6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800caaa:	6063      	str	r3, [r4, #4]
 800caac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cab0:	f8c4 8000 	str.w	r8, [r4]
 800cab4:	60a0      	str	r0, [r4, #8]
 800cab6:	60e3      	str	r3, [r4, #12]
 800cab8:	426d      	negs	r5, r5
 800caba:	e702      	b.n	800c8c2 <__ieee754_rem_pio2+0x7a>
 800cabc:	a326      	add	r3, pc, #152	@ (adr r3, 800cb58 <__ieee754_rem_pio2+0x310>)
 800cabe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cac2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cac6:	f7f3 fdb7 	bl	8000638 <__aeabi_dmul>
 800caca:	4606      	mov	r6, r0
 800cacc:	460f      	mov	r7, r1
 800cace:	4602      	mov	r2, r0
 800cad0:	460b      	mov	r3, r1
 800cad2:	4640      	mov	r0, r8
 800cad4:	4649      	mov	r1, r9
 800cad6:	f7f3 fbf7 	bl	80002c8 <__aeabi_dsub>
 800cada:	4602      	mov	r2, r0
 800cadc:	460b      	mov	r3, r1
 800cade:	4682      	mov	sl, r0
 800cae0:	468b      	mov	fp, r1
 800cae2:	4640      	mov	r0, r8
 800cae4:	4649      	mov	r1, r9
 800cae6:	f7f3 fbef 	bl	80002c8 <__aeabi_dsub>
 800caea:	4632      	mov	r2, r6
 800caec:	463b      	mov	r3, r7
 800caee:	f7f3 fbeb 	bl	80002c8 <__aeabi_dsub>
 800caf2:	a31b      	add	r3, pc, #108	@ (adr r3, 800cb60 <__ieee754_rem_pio2+0x318>)
 800caf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caf8:	4606      	mov	r6, r0
 800cafa:	460f      	mov	r7, r1
 800cafc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb00:	f7f3 fd9a 	bl	8000638 <__aeabi_dmul>
 800cb04:	4632      	mov	r2, r6
 800cb06:	463b      	mov	r3, r7
 800cb08:	f7f3 fbde 	bl	80002c8 <__aeabi_dsub>
 800cb0c:	4606      	mov	r6, r0
 800cb0e:	460f      	mov	r7, r1
 800cb10:	e764      	b.n	800c9dc <__ieee754_rem_pio2+0x194>
 800cb12:	4b1b      	ldr	r3, [pc, #108]	@ (800cb80 <__ieee754_rem_pio2+0x338>)
 800cb14:	4598      	cmp	r8, r3
 800cb16:	d935      	bls.n	800cb84 <__ieee754_rem_pio2+0x33c>
 800cb18:	4632      	mov	r2, r6
 800cb1a:	463b      	mov	r3, r7
 800cb1c:	4630      	mov	r0, r6
 800cb1e:	4639      	mov	r1, r7
 800cb20:	f7f3 fbd2 	bl	80002c8 <__aeabi_dsub>
 800cb24:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800cb28:	e9c4 0100 	strd	r0, r1, [r4]
 800cb2c:	e69e      	b.n	800c86c <__ieee754_rem_pio2+0x24>
 800cb2e:	bf00      	nop
 800cb30:	54400000 	.word	0x54400000
 800cb34:	3ff921fb 	.word	0x3ff921fb
 800cb38:	1a626331 	.word	0x1a626331
 800cb3c:	3dd0b461 	.word	0x3dd0b461
 800cb40:	1a600000 	.word	0x1a600000
 800cb44:	3dd0b461 	.word	0x3dd0b461
 800cb48:	2e037073 	.word	0x2e037073
 800cb4c:	3ba3198a 	.word	0x3ba3198a
 800cb50:	6dc9c883 	.word	0x6dc9c883
 800cb54:	3fe45f30 	.word	0x3fe45f30
 800cb58:	2e000000 	.word	0x2e000000
 800cb5c:	3ba3198a 	.word	0x3ba3198a
 800cb60:	252049c1 	.word	0x252049c1
 800cb64:	397b839a 	.word	0x397b839a
 800cb68:	3fe921fb 	.word	0x3fe921fb
 800cb6c:	4002d97b 	.word	0x4002d97b
 800cb70:	3ff921fb 	.word	0x3ff921fb
 800cb74:	413921fb 	.word	0x413921fb
 800cb78:	3fe00000 	.word	0x3fe00000
 800cb7c:	0800d8b0 	.word	0x0800d8b0
 800cb80:	7fefffff 	.word	0x7fefffff
 800cb84:	ea4f 5528 	mov.w	r5, r8, asr #20
 800cb88:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800cb8c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800cb90:	4630      	mov	r0, r6
 800cb92:	460f      	mov	r7, r1
 800cb94:	f7f4 f800 	bl	8000b98 <__aeabi_d2iz>
 800cb98:	f7f3 fce4 	bl	8000564 <__aeabi_i2d>
 800cb9c:	4602      	mov	r2, r0
 800cb9e:	460b      	mov	r3, r1
 800cba0:	4630      	mov	r0, r6
 800cba2:	4639      	mov	r1, r7
 800cba4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cba8:	f7f3 fb8e 	bl	80002c8 <__aeabi_dsub>
 800cbac:	4b22      	ldr	r3, [pc, #136]	@ (800cc38 <__ieee754_rem_pio2+0x3f0>)
 800cbae:	2200      	movs	r2, #0
 800cbb0:	f7f3 fd42 	bl	8000638 <__aeabi_dmul>
 800cbb4:	460f      	mov	r7, r1
 800cbb6:	4606      	mov	r6, r0
 800cbb8:	f7f3 ffee 	bl	8000b98 <__aeabi_d2iz>
 800cbbc:	f7f3 fcd2 	bl	8000564 <__aeabi_i2d>
 800cbc0:	4602      	mov	r2, r0
 800cbc2:	460b      	mov	r3, r1
 800cbc4:	4630      	mov	r0, r6
 800cbc6:	4639      	mov	r1, r7
 800cbc8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cbcc:	f7f3 fb7c 	bl	80002c8 <__aeabi_dsub>
 800cbd0:	4b19      	ldr	r3, [pc, #100]	@ (800cc38 <__ieee754_rem_pio2+0x3f0>)
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	f7f3 fd30 	bl	8000638 <__aeabi_dmul>
 800cbd8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800cbdc:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800cbe0:	f04f 0803 	mov.w	r8, #3
 800cbe4:	2600      	movs	r6, #0
 800cbe6:	2700      	movs	r7, #0
 800cbe8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800cbec:	4632      	mov	r2, r6
 800cbee:	463b      	mov	r3, r7
 800cbf0:	46c2      	mov	sl, r8
 800cbf2:	f108 38ff 	add.w	r8, r8, #4294967295
 800cbf6:	f7f3 ff87 	bl	8000b08 <__aeabi_dcmpeq>
 800cbfa:	2800      	cmp	r0, #0
 800cbfc:	d1f4      	bne.n	800cbe8 <__ieee754_rem_pio2+0x3a0>
 800cbfe:	4b0f      	ldr	r3, [pc, #60]	@ (800cc3c <__ieee754_rem_pio2+0x3f4>)
 800cc00:	9301      	str	r3, [sp, #4]
 800cc02:	2302      	movs	r3, #2
 800cc04:	9300      	str	r3, [sp, #0]
 800cc06:	462a      	mov	r2, r5
 800cc08:	4653      	mov	r3, sl
 800cc0a:	4621      	mov	r1, r4
 800cc0c:	a806      	add	r0, sp, #24
 800cc0e:	f000 f81f 	bl	800cc50 <__kernel_rem_pio2>
 800cc12:	9b04      	ldr	r3, [sp, #16]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	4605      	mov	r5, r0
 800cc18:	f6bf ae53 	bge.w	800c8c2 <__ieee754_rem_pio2+0x7a>
 800cc1c:	e9d4 2100 	ldrd	r2, r1, [r4]
 800cc20:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cc24:	e9c4 2300 	strd	r2, r3, [r4]
 800cc28:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800cc2c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cc30:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800cc34:	e740      	b.n	800cab8 <__ieee754_rem_pio2+0x270>
 800cc36:	bf00      	nop
 800cc38:	41700000 	.word	0x41700000
 800cc3c:	0800d930 	.word	0x0800d930

0800cc40 <fabs>:
 800cc40:	ec51 0b10 	vmov	r0, r1, d0
 800cc44:	4602      	mov	r2, r0
 800cc46:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800cc4a:	ec43 2b10 	vmov	d0, r2, r3
 800cc4e:	4770      	bx	lr

0800cc50 <__kernel_rem_pio2>:
 800cc50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc54:	ed2d 8b02 	vpush	{d8}
 800cc58:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800cc5c:	f112 0f14 	cmn.w	r2, #20
 800cc60:	9306      	str	r3, [sp, #24]
 800cc62:	9104      	str	r1, [sp, #16]
 800cc64:	4bbe      	ldr	r3, [pc, #760]	@ (800cf60 <__kernel_rem_pio2+0x310>)
 800cc66:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800cc68:	9008      	str	r0, [sp, #32]
 800cc6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cc6e:	9300      	str	r3, [sp, #0]
 800cc70:	9b06      	ldr	r3, [sp, #24]
 800cc72:	f103 33ff 	add.w	r3, r3, #4294967295
 800cc76:	bfa8      	it	ge
 800cc78:	1ed4      	subge	r4, r2, #3
 800cc7a:	9305      	str	r3, [sp, #20]
 800cc7c:	bfb2      	itee	lt
 800cc7e:	2400      	movlt	r4, #0
 800cc80:	2318      	movge	r3, #24
 800cc82:	fb94 f4f3 	sdivge	r4, r4, r3
 800cc86:	f06f 0317 	mvn.w	r3, #23
 800cc8a:	fb04 3303 	mla	r3, r4, r3, r3
 800cc8e:	eb03 0b02 	add.w	fp, r3, r2
 800cc92:	9b00      	ldr	r3, [sp, #0]
 800cc94:	9a05      	ldr	r2, [sp, #20]
 800cc96:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800cf50 <__kernel_rem_pio2+0x300>
 800cc9a:	eb03 0802 	add.w	r8, r3, r2
 800cc9e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800cca0:	1aa7      	subs	r7, r4, r2
 800cca2:	ae20      	add	r6, sp, #128	@ 0x80
 800cca4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800cca8:	2500      	movs	r5, #0
 800ccaa:	4545      	cmp	r5, r8
 800ccac:	dd13      	ble.n	800ccd6 <__kernel_rem_pio2+0x86>
 800ccae:	9b06      	ldr	r3, [sp, #24]
 800ccb0:	aa20      	add	r2, sp, #128	@ 0x80
 800ccb2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800ccb6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800ccba:	f04f 0800 	mov.w	r8, #0
 800ccbe:	9b00      	ldr	r3, [sp, #0]
 800ccc0:	4598      	cmp	r8, r3
 800ccc2:	dc31      	bgt.n	800cd28 <__kernel_rem_pio2+0xd8>
 800ccc4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800cf50 <__kernel_rem_pio2+0x300>
 800ccc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cccc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ccd0:	462f      	mov	r7, r5
 800ccd2:	2600      	movs	r6, #0
 800ccd4:	e01b      	b.n	800cd0e <__kernel_rem_pio2+0xbe>
 800ccd6:	42ef      	cmn	r7, r5
 800ccd8:	d407      	bmi.n	800ccea <__kernel_rem_pio2+0x9a>
 800ccda:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ccde:	f7f3 fc41 	bl	8000564 <__aeabi_i2d>
 800cce2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800cce6:	3501      	adds	r5, #1
 800cce8:	e7df      	b.n	800ccaa <__kernel_rem_pio2+0x5a>
 800ccea:	ec51 0b18 	vmov	r0, r1, d8
 800ccee:	e7f8      	b.n	800cce2 <__kernel_rem_pio2+0x92>
 800ccf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ccf4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ccf8:	f7f3 fc9e 	bl	8000638 <__aeabi_dmul>
 800ccfc:	4602      	mov	r2, r0
 800ccfe:	460b      	mov	r3, r1
 800cd00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd04:	f7f3 fae2 	bl	80002cc <__adddf3>
 800cd08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd0c:	3601      	adds	r6, #1
 800cd0e:	9b05      	ldr	r3, [sp, #20]
 800cd10:	429e      	cmp	r6, r3
 800cd12:	f1a7 0708 	sub.w	r7, r7, #8
 800cd16:	ddeb      	ble.n	800ccf0 <__kernel_rem_pio2+0xa0>
 800cd18:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cd1c:	f108 0801 	add.w	r8, r8, #1
 800cd20:	ecaa 7b02 	vstmia	sl!, {d7}
 800cd24:	3508      	adds	r5, #8
 800cd26:	e7ca      	b.n	800ccbe <__kernel_rem_pio2+0x6e>
 800cd28:	9b00      	ldr	r3, [sp, #0]
 800cd2a:	f8dd 8000 	ldr.w	r8, [sp]
 800cd2e:	aa0c      	add	r2, sp, #48	@ 0x30
 800cd30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cd34:	930a      	str	r3, [sp, #40]	@ 0x28
 800cd36:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800cd38:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800cd3c:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd3e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800cd42:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cd44:	ab98      	add	r3, sp, #608	@ 0x260
 800cd46:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800cd4a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800cd4e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cd52:	ac0c      	add	r4, sp, #48	@ 0x30
 800cd54:	ab70      	add	r3, sp, #448	@ 0x1c0
 800cd56:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800cd5a:	46a1      	mov	r9, r4
 800cd5c:	46c2      	mov	sl, r8
 800cd5e:	f1ba 0f00 	cmp.w	sl, #0
 800cd62:	f1a5 0508 	sub.w	r5, r5, #8
 800cd66:	dc77      	bgt.n	800ce58 <__kernel_rem_pio2+0x208>
 800cd68:	4658      	mov	r0, fp
 800cd6a:	ed9d 0b02 	vldr	d0, [sp, #8]
 800cd6e:	f000 fac7 	bl	800d300 <scalbn>
 800cd72:	ec57 6b10 	vmov	r6, r7, d0
 800cd76:	2200      	movs	r2, #0
 800cd78:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800cd7c:	4630      	mov	r0, r6
 800cd7e:	4639      	mov	r1, r7
 800cd80:	f7f3 fc5a 	bl	8000638 <__aeabi_dmul>
 800cd84:	ec41 0b10 	vmov	d0, r0, r1
 800cd88:	f000 fb3a 	bl	800d400 <floor>
 800cd8c:	4b75      	ldr	r3, [pc, #468]	@ (800cf64 <__kernel_rem_pio2+0x314>)
 800cd8e:	ec51 0b10 	vmov	r0, r1, d0
 800cd92:	2200      	movs	r2, #0
 800cd94:	f7f3 fc50 	bl	8000638 <__aeabi_dmul>
 800cd98:	4602      	mov	r2, r0
 800cd9a:	460b      	mov	r3, r1
 800cd9c:	4630      	mov	r0, r6
 800cd9e:	4639      	mov	r1, r7
 800cda0:	f7f3 fa92 	bl	80002c8 <__aeabi_dsub>
 800cda4:	460f      	mov	r7, r1
 800cda6:	4606      	mov	r6, r0
 800cda8:	f7f3 fef6 	bl	8000b98 <__aeabi_d2iz>
 800cdac:	9002      	str	r0, [sp, #8]
 800cdae:	f7f3 fbd9 	bl	8000564 <__aeabi_i2d>
 800cdb2:	4602      	mov	r2, r0
 800cdb4:	460b      	mov	r3, r1
 800cdb6:	4630      	mov	r0, r6
 800cdb8:	4639      	mov	r1, r7
 800cdba:	f7f3 fa85 	bl	80002c8 <__aeabi_dsub>
 800cdbe:	f1bb 0f00 	cmp.w	fp, #0
 800cdc2:	4606      	mov	r6, r0
 800cdc4:	460f      	mov	r7, r1
 800cdc6:	dd6c      	ble.n	800cea2 <__kernel_rem_pio2+0x252>
 800cdc8:	f108 31ff 	add.w	r1, r8, #4294967295
 800cdcc:	ab0c      	add	r3, sp, #48	@ 0x30
 800cdce:	9d02      	ldr	r5, [sp, #8]
 800cdd0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cdd4:	f1cb 0018 	rsb	r0, fp, #24
 800cdd8:	fa43 f200 	asr.w	r2, r3, r0
 800cddc:	4415      	add	r5, r2
 800cdde:	4082      	lsls	r2, r0
 800cde0:	1a9b      	subs	r3, r3, r2
 800cde2:	aa0c      	add	r2, sp, #48	@ 0x30
 800cde4:	9502      	str	r5, [sp, #8]
 800cde6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800cdea:	f1cb 0217 	rsb	r2, fp, #23
 800cdee:	fa43 f902 	asr.w	r9, r3, r2
 800cdf2:	f1b9 0f00 	cmp.w	r9, #0
 800cdf6:	dd64      	ble.n	800cec2 <__kernel_rem_pio2+0x272>
 800cdf8:	9b02      	ldr	r3, [sp, #8]
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	3301      	adds	r3, #1
 800cdfe:	9302      	str	r3, [sp, #8]
 800ce00:	4615      	mov	r5, r2
 800ce02:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800ce06:	4590      	cmp	r8, r2
 800ce08:	f300 80b8 	bgt.w	800cf7c <__kernel_rem_pio2+0x32c>
 800ce0c:	f1bb 0f00 	cmp.w	fp, #0
 800ce10:	dd07      	ble.n	800ce22 <__kernel_rem_pio2+0x1d2>
 800ce12:	f1bb 0f01 	cmp.w	fp, #1
 800ce16:	f000 80bf 	beq.w	800cf98 <__kernel_rem_pio2+0x348>
 800ce1a:	f1bb 0f02 	cmp.w	fp, #2
 800ce1e:	f000 80c6 	beq.w	800cfae <__kernel_rem_pio2+0x35e>
 800ce22:	f1b9 0f02 	cmp.w	r9, #2
 800ce26:	d14c      	bne.n	800cec2 <__kernel_rem_pio2+0x272>
 800ce28:	4632      	mov	r2, r6
 800ce2a:	463b      	mov	r3, r7
 800ce2c:	494e      	ldr	r1, [pc, #312]	@ (800cf68 <__kernel_rem_pio2+0x318>)
 800ce2e:	2000      	movs	r0, #0
 800ce30:	f7f3 fa4a 	bl	80002c8 <__aeabi_dsub>
 800ce34:	4606      	mov	r6, r0
 800ce36:	460f      	mov	r7, r1
 800ce38:	2d00      	cmp	r5, #0
 800ce3a:	d042      	beq.n	800cec2 <__kernel_rem_pio2+0x272>
 800ce3c:	4658      	mov	r0, fp
 800ce3e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800cf58 <__kernel_rem_pio2+0x308>
 800ce42:	f000 fa5d 	bl	800d300 <scalbn>
 800ce46:	4630      	mov	r0, r6
 800ce48:	4639      	mov	r1, r7
 800ce4a:	ec53 2b10 	vmov	r2, r3, d0
 800ce4e:	f7f3 fa3b 	bl	80002c8 <__aeabi_dsub>
 800ce52:	4606      	mov	r6, r0
 800ce54:	460f      	mov	r7, r1
 800ce56:	e034      	b.n	800cec2 <__kernel_rem_pio2+0x272>
 800ce58:	4b44      	ldr	r3, [pc, #272]	@ (800cf6c <__kernel_rem_pio2+0x31c>)
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce60:	f7f3 fbea 	bl	8000638 <__aeabi_dmul>
 800ce64:	f7f3 fe98 	bl	8000b98 <__aeabi_d2iz>
 800ce68:	f7f3 fb7c 	bl	8000564 <__aeabi_i2d>
 800ce6c:	4b40      	ldr	r3, [pc, #256]	@ (800cf70 <__kernel_rem_pio2+0x320>)
 800ce6e:	2200      	movs	r2, #0
 800ce70:	4606      	mov	r6, r0
 800ce72:	460f      	mov	r7, r1
 800ce74:	f7f3 fbe0 	bl	8000638 <__aeabi_dmul>
 800ce78:	4602      	mov	r2, r0
 800ce7a:	460b      	mov	r3, r1
 800ce7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce80:	f7f3 fa22 	bl	80002c8 <__aeabi_dsub>
 800ce84:	f7f3 fe88 	bl	8000b98 <__aeabi_d2iz>
 800ce88:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ce8c:	f849 0b04 	str.w	r0, [r9], #4
 800ce90:	4639      	mov	r1, r7
 800ce92:	4630      	mov	r0, r6
 800ce94:	f7f3 fa1a 	bl	80002cc <__adddf3>
 800ce98:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ce9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cea0:	e75d      	b.n	800cd5e <__kernel_rem_pio2+0x10e>
 800cea2:	d107      	bne.n	800ceb4 <__kernel_rem_pio2+0x264>
 800cea4:	f108 33ff 	add.w	r3, r8, #4294967295
 800cea8:	aa0c      	add	r2, sp, #48	@ 0x30
 800ceaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ceae:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800ceb2:	e79e      	b.n	800cdf2 <__kernel_rem_pio2+0x1a2>
 800ceb4:	4b2f      	ldr	r3, [pc, #188]	@ (800cf74 <__kernel_rem_pio2+0x324>)
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	f7f3 fe44 	bl	8000b44 <__aeabi_dcmpge>
 800cebc:	2800      	cmp	r0, #0
 800cebe:	d143      	bne.n	800cf48 <__kernel_rem_pio2+0x2f8>
 800cec0:	4681      	mov	r9, r0
 800cec2:	2200      	movs	r2, #0
 800cec4:	2300      	movs	r3, #0
 800cec6:	4630      	mov	r0, r6
 800cec8:	4639      	mov	r1, r7
 800ceca:	f7f3 fe1d 	bl	8000b08 <__aeabi_dcmpeq>
 800cece:	2800      	cmp	r0, #0
 800ced0:	f000 80bf 	beq.w	800d052 <__kernel_rem_pio2+0x402>
 800ced4:	f108 33ff 	add.w	r3, r8, #4294967295
 800ced8:	2200      	movs	r2, #0
 800ceda:	9900      	ldr	r1, [sp, #0]
 800cedc:	428b      	cmp	r3, r1
 800cede:	da6e      	bge.n	800cfbe <__kernel_rem_pio2+0x36e>
 800cee0:	2a00      	cmp	r2, #0
 800cee2:	f000 8089 	beq.w	800cff8 <__kernel_rem_pio2+0x3a8>
 800cee6:	f108 38ff 	add.w	r8, r8, #4294967295
 800ceea:	ab0c      	add	r3, sp, #48	@ 0x30
 800ceec:	f1ab 0b18 	sub.w	fp, fp, #24
 800cef0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d0f6      	beq.n	800cee6 <__kernel_rem_pio2+0x296>
 800cef8:	4658      	mov	r0, fp
 800cefa:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800cf58 <__kernel_rem_pio2+0x308>
 800cefe:	f000 f9ff 	bl	800d300 <scalbn>
 800cf02:	f108 0301 	add.w	r3, r8, #1
 800cf06:	00da      	lsls	r2, r3, #3
 800cf08:	9205      	str	r2, [sp, #20]
 800cf0a:	ec55 4b10 	vmov	r4, r5, d0
 800cf0e:	aa70      	add	r2, sp, #448	@ 0x1c0
 800cf10:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800cf6c <__kernel_rem_pio2+0x31c>
 800cf14:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800cf18:	4646      	mov	r6, r8
 800cf1a:	f04f 0a00 	mov.w	sl, #0
 800cf1e:	2e00      	cmp	r6, #0
 800cf20:	f280 80cf 	bge.w	800d0c2 <__kernel_rem_pio2+0x472>
 800cf24:	4644      	mov	r4, r8
 800cf26:	2c00      	cmp	r4, #0
 800cf28:	f2c0 80fd 	blt.w	800d126 <__kernel_rem_pio2+0x4d6>
 800cf2c:	4b12      	ldr	r3, [pc, #72]	@ (800cf78 <__kernel_rem_pio2+0x328>)
 800cf2e:	461f      	mov	r7, r3
 800cf30:	ab70      	add	r3, sp, #448	@ 0x1c0
 800cf32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cf36:	9306      	str	r3, [sp, #24]
 800cf38:	f04f 0a00 	mov.w	sl, #0
 800cf3c:	f04f 0b00 	mov.w	fp, #0
 800cf40:	2600      	movs	r6, #0
 800cf42:	eba8 0504 	sub.w	r5, r8, r4
 800cf46:	e0e2      	b.n	800d10e <__kernel_rem_pio2+0x4be>
 800cf48:	f04f 0902 	mov.w	r9, #2
 800cf4c:	e754      	b.n	800cdf8 <__kernel_rem_pio2+0x1a8>
 800cf4e:	bf00      	nop
	...
 800cf5c:	3ff00000 	.word	0x3ff00000
 800cf60:	0800da78 	.word	0x0800da78
 800cf64:	40200000 	.word	0x40200000
 800cf68:	3ff00000 	.word	0x3ff00000
 800cf6c:	3e700000 	.word	0x3e700000
 800cf70:	41700000 	.word	0x41700000
 800cf74:	3fe00000 	.word	0x3fe00000
 800cf78:	0800da38 	.word	0x0800da38
 800cf7c:	f854 3b04 	ldr.w	r3, [r4], #4
 800cf80:	b945      	cbnz	r5, 800cf94 <__kernel_rem_pio2+0x344>
 800cf82:	b123      	cbz	r3, 800cf8e <__kernel_rem_pio2+0x33e>
 800cf84:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800cf88:	f844 3c04 	str.w	r3, [r4, #-4]
 800cf8c:	2301      	movs	r3, #1
 800cf8e:	3201      	adds	r2, #1
 800cf90:	461d      	mov	r5, r3
 800cf92:	e738      	b.n	800ce06 <__kernel_rem_pio2+0x1b6>
 800cf94:	1acb      	subs	r3, r1, r3
 800cf96:	e7f7      	b.n	800cf88 <__kernel_rem_pio2+0x338>
 800cf98:	f108 32ff 	add.w	r2, r8, #4294967295
 800cf9c:	ab0c      	add	r3, sp, #48	@ 0x30
 800cf9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfa2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800cfa6:	a90c      	add	r1, sp, #48	@ 0x30
 800cfa8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800cfac:	e739      	b.n	800ce22 <__kernel_rem_pio2+0x1d2>
 800cfae:	f108 32ff 	add.w	r2, r8, #4294967295
 800cfb2:	ab0c      	add	r3, sp, #48	@ 0x30
 800cfb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfb8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800cfbc:	e7f3      	b.n	800cfa6 <__kernel_rem_pio2+0x356>
 800cfbe:	a90c      	add	r1, sp, #48	@ 0x30
 800cfc0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800cfc4:	3b01      	subs	r3, #1
 800cfc6:	430a      	orrs	r2, r1
 800cfc8:	e787      	b.n	800ceda <__kernel_rem_pio2+0x28a>
 800cfca:	3401      	adds	r4, #1
 800cfcc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cfd0:	2a00      	cmp	r2, #0
 800cfd2:	d0fa      	beq.n	800cfca <__kernel_rem_pio2+0x37a>
 800cfd4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cfd6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800cfda:	eb0d 0503 	add.w	r5, sp, r3
 800cfde:	9b06      	ldr	r3, [sp, #24]
 800cfe0:	aa20      	add	r2, sp, #128	@ 0x80
 800cfe2:	4443      	add	r3, r8
 800cfe4:	f108 0701 	add.w	r7, r8, #1
 800cfe8:	3d98      	subs	r5, #152	@ 0x98
 800cfea:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800cfee:	4444      	add	r4, r8
 800cff0:	42bc      	cmp	r4, r7
 800cff2:	da04      	bge.n	800cffe <__kernel_rem_pio2+0x3ae>
 800cff4:	46a0      	mov	r8, r4
 800cff6:	e6a2      	b.n	800cd3e <__kernel_rem_pio2+0xee>
 800cff8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cffa:	2401      	movs	r4, #1
 800cffc:	e7e6      	b.n	800cfcc <__kernel_rem_pio2+0x37c>
 800cffe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d000:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800d004:	f7f3 faae 	bl	8000564 <__aeabi_i2d>
 800d008:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800d2d0 <__kernel_rem_pio2+0x680>
 800d00c:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d010:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d014:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d018:	46b2      	mov	sl, r6
 800d01a:	f04f 0800 	mov.w	r8, #0
 800d01e:	9b05      	ldr	r3, [sp, #20]
 800d020:	4598      	cmp	r8, r3
 800d022:	dd05      	ble.n	800d030 <__kernel_rem_pio2+0x3e0>
 800d024:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d028:	3701      	adds	r7, #1
 800d02a:	eca5 7b02 	vstmia	r5!, {d7}
 800d02e:	e7df      	b.n	800cff0 <__kernel_rem_pio2+0x3a0>
 800d030:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800d034:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d038:	f7f3 fafe 	bl	8000638 <__aeabi_dmul>
 800d03c:	4602      	mov	r2, r0
 800d03e:	460b      	mov	r3, r1
 800d040:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d044:	f7f3 f942 	bl	80002cc <__adddf3>
 800d048:	f108 0801 	add.w	r8, r8, #1
 800d04c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d050:	e7e5      	b.n	800d01e <__kernel_rem_pio2+0x3ce>
 800d052:	f1cb 0000 	rsb	r0, fp, #0
 800d056:	ec47 6b10 	vmov	d0, r6, r7
 800d05a:	f000 f951 	bl	800d300 <scalbn>
 800d05e:	ec55 4b10 	vmov	r4, r5, d0
 800d062:	4b9d      	ldr	r3, [pc, #628]	@ (800d2d8 <__kernel_rem_pio2+0x688>)
 800d064:	2200      	movs	r2, #0
 800d066:	4620      	mov	r0, r4
 800d068:	4629      	mov	r1, r5
 800d06a:	f7f3 fd6b 	bl	8000b44 <__aeabi_dcmpge>
 800d06e:	b300      	cbz	r0, 800d0b2 <__kernel_rem_pio2+0x462>
 800d070:	4b9a      	ldr	r3, [pc, #616]	@ (800d2dc <__kernel_rem_pio2+0x68c>)
 800d072:	2200      	movs	r2, #0
 800d074:	4620      	mov	r0, r4
 800d076:	4629      	mov	r1, r5
 800d078:	f7f3 fade 	bl	8000638 <__aeabi_dmul>
 800d07c:	f7f3 fd8c 	bl	8000b98 <__aeabi_d2iz>
 800d080:	4606      	mov	r6, r0
 800d082:	f7f3 fa6f 	bl	8000564 <__aeabi_i2d>
 800d086:	4b94      	ldr	r3, [pc, #592]	@ (800d2d8 <__kernel_rem_pio2+0x688>)
 800d088:	2200      	movs	r2, #0
 800d08a:	f7f3 fad5 	bl	8000638 <__aeabi_dmul>
 800d08e:	460b      	mov	r3, r1
 800d090:	4602      	mov	r2, r0
 800d092:	4629      	mov	r1, r5
 800d094:	4620      	mov	r0, r4
 800d096:	f7f3 f917 	bl	80002c8 <__aeabi_dsub>
 800d09a:	f7f3 fd7d 	bl	8000b98 <__aeabi_d2iz>
 800d09e:	ab0c      	add	r3, sp, #48	@ 0x30
 800d0a0:	f10b 0b18 	add.w	fp, fp, #24
 800d0a4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800d0a8:	f108 0801 	add.w	r8, r8, #1
 800d0ac:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800d0b0:	e722      	b.n	800cef8 <__kernel_rem_pio2+0x2a8>
 800d0b2:	4620      	mov	r0, r4
 800d0b4:	4629      	mov	r1, r5
 800d0b6:	f7f3 fd6f 	bl	8000b98 <__aeabi_d2iz>
 800d0ba:	ab0c      	add	r3, sp, #48	@ 0x30
 800d0bc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800d0c0:	e71a      	b.n	800cef8 <__kernel_rem_pio2+0x2a8>
 800d0c2:	ab0c      	add	r3, sp, #48	@ 0x30
 800d0c4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d0c8:	f7f3 fa4c 	bl	8000564 <__aeabi_i2d>
 800d0cc:	4622      	mov	r2, r4
 800d0ce:	462b      	mov	r3, r5
 800d0d0:	f7f3 fab2 	bl	8000638 <__aeabi_dmul>
 800d0d4:	4652      	mov	r2, sl
 800d0d6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800d0da:	465b      	mov	r3, fp
 800d0dc:	4620      	mov	r0, r4
 800d0de:	4629      	mov	r1, r5
 800d0e0:	f7f3 faaa 	bl	8000638 <__aeabi_dmul>
 800d0e4:	3e01      	subs	r6, #1
 800d0e6:	4604      	mov	r4, r0
 800d0e8:	460d      	mov	r5, r1
 800d0ea:	e718      	b.n	800cf1e <__kernel_rem_pio2+0x2ce>
 800d0ec:	9906      	ldr	r1, [sp, #24]
 800d0ee:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800d0f2:	9106      	str	r1, [sp, #24]
 800d0f4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800d0f8:	f7f3 fa9e 	bl	8000638 <__aeabi_dmul>
 800d0fc:	4602      	mov	r2, r0
 800d0fe:	460b      	mov	r3, r1
 800d100:	4650      	mov	r0, sl
 800d102:	4659      	mov	r1, fp
 800d104:	f7f3 f8e2 	bl	80002cc <__adddf3>
 800d108:	3601      	adds	r6, #1
 800d10a:	4682      	mov	sl, r0
 800d10c:	468b      	mov	fp, r1
 800d10e:	9b00      	ldr	r3, [sp, #0]
 800d110:	429e      	cmp	r6, r3
 800d112:	dc01      	bgt.n	800d118 <__kernel_rem_pio2+0x4c8>
 800d114:	42b5      	cmp	r5, r6
 800d116:	dae9      	bge.n	800d0ec <__kernel_rem_pio2+0x49c>
 800d118:	ab48      	add	r3, sp, #288	@ 0x120
 800d11a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800d11e:	e9c5 ab00 	strd	sl, fp, [r5]
 800d122:	3c01      	subs	r4, #1
 800d124:	e6ff      	b.n	800cf26 <__kernel_rem_pio2+0x2d6>
 800d126:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800d128:	2b02      	cmp	r3, #2
 800d12a:	dc0b      	bgt.n	800d144 <__kernel_rem_pio2+0x4f4>
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	dc39      	bgt.n	800d1a4 <__kernel_rem_pio2+0x554>
 800d130:	d05d      	beq.n	800d1ee <__kernel_rem_pio2+0x59e>
 800d132:	9b02      	ldr	r3, [sp, #8]
 800d134:	f003 0007 	and.w	r0, r3, #7
 800d138:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800d13c:	ecbd 8b02 	vpop	{d8}
 800d140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d144:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800d146:	2b03      	cmp	r3, #3
 800d148:	d1f3      	bne.n	800d132 <__kernel_rem_pio2+0x4e2>
 800d14a:	9b05      	ldr	r3, [sp, #20]
 800d14c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d150:	eb0d 0403 	add.w	r4, sp, r3
 800d154:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800d158:	4625      	mov	r5, r4
 800d15a:	46c2      	mov	sl, r8
 800d15c:	f1ba 0f00 	cmp.w	sl, #0
 800d160:	f1a5 0508 	sub.w	r5, r5, #8
 800d164:	dc6b      	bgt.n	800d23e <__kernel_rem_pio2+0x5ee>
 800d166:	4645      	mov	r5, r8
 800d168:	2d01      	cmp	r5, #1
 800d16a:	f1a4 0408 	sub.w	r4, r4, #8
 800d16e:	f300 8087 	bgt.w	800d280 <__kernel_rem_pio2+0x630>
 800d172:	9c05      	ldr	r4, [sp, #20]
 800d174:	ab48      	add	r3, sp, #288	@ 0x120
 800d176:	441c      	add	r4, r3
 800d178:	2000      	movs	r0, #0
 800d17a:	2100      	movs	r1, #0
 800d17c:	f1b8 0f01 	cmp.w	r8, #1
 800d180:	f300 809c 	bgt.w	800d2bc <__kernel_rem_pio2+0x66c>
 800d184:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800d188:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800d18c:	f1b9 0f00 	cmp.w	r9, #0
 800d190:	f040 80a6 	bne.w	800d2e0 <__kernel_rem_pio2+0x690>
 800d194:	9b04      	ldr	r3, [sp, #16]
 800d196:	e9c3 7800 	strd	r7, r8, [r3]
 800d19a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800d19e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800d1a2:	e7c6      	b.n	800d132 <__kernel_rem_pio2+0x4e2>
 800d1a4:	9d05      	ldr	r5, [sp, #20]
 800d1a6:	ab48      	add	r3, sp, #288	@ 0x120
 800d1a8:	441d      	add	r5, r3
 800d1aa:	4644      	mov	r4, r8
 800d1ac:	2000      	movs	r0, #0
 800d1ae:	2100      	movs	r1, #0
 800d1b0:	2c00      	cmp	r4, #0
 800d1b2:	da35      	bge.n	800d220 <__kernel_rem_pio2+0x5d0>
 800d1b4:	f1b9 0f00 	cmp.w	r9, #0
 800d1b8:	d038      	beq.n	800d22c <__kernel_rem_pio2+0x5dc>
 800d1ba:	4602      	mov	r2, r0
 800d1bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d1c0:	9c04      	ldr	r4, [sp, #16]
 800d1c2:	e9c4 2300 	strd	r2, r3, [r4]
 800d1c6:	4602      	mov	r2, r0
 800d1c8:	460b      	mov	r3, r1
 800d1ca:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800d1ce:	f7f3 f87b 	bl	80002c8 <__aeabi_dsub>
 800d1d2:	ad4a      	add	r5, sp, #296	@ 0x128
 800d1d4:	2401      	movs	r4, #1
 800d1d6:	45a0      	cmp	r8, r4
 800d1d8:	da2b      	bge.n	800d232 <__kernel_rem_pio2+0x5e2>
 800d1da:	f1b9 0f00 	cmp.w	r9, #0
 800d1de:	d002      	beq.n	800d1e6 <__kernel_rem_pio2+0x596>
 800d1e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d1e4:	4619      	mov	r1, r3
 800d1e6:	9b04      	ldr	r3, [sp, #16]
 800d1e8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d1ec:	e7a1      	b.n	800d132 <__kernel_rem_pio2+0x4e2>
 800d1ee:	9c05      	ldr	r4, [sp, #20]
 800d1f0:	ab48      	add	r3, sp, #288	@ 0x120
 800d1f2:	441c      	add	r4, r3
 800d1f4:	2000      	movs	r0, #0
 800d1f6:	2100      	movs	r1, #0
 800d1f8:	f1b8 0f00 	cmp.w	r8, #0
 800d1fc:	da09      	bge.n	800d212 <__kernel_rem_pio2+0x5c2>
 800d1fe:	f1b9 0f00 	cmp.w	r9, #0
 800d202:	d002      	beq.n	800d20a <__kernel_rem_pio2+0x5ba>
 800d204:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d208:	4619      	mov	r1, r3
 800d20a:	9b04      	ldr	r3, [sp, #16]
 800d20c:	e9c3 0100 	strd	r0, r1, [r3]
 800d210:	e78f      	b.n	800d132 <__kernel_rem_pio2+0x4e2>
 800d212:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d216:	f7f3 f859 	bl	80002cc <__adddf3>
 800d21a:	f108 38ff 	add.w	r8, r8, #4294967295
 800d21e:	e7eb      	b.n	800d1f8 <__kernel_rem_pio2+0x5a8>
 800d220:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800d224:	f7f3 f852 	bl	80002cc <__adddf3>
 800d228:	3c01      	subs	r4, #1
 800d22a:	e7c1      	b.n	800d1b0 <__kernel_rem_pio2+0x560>
 800d22c:	4602      	mov	r2, r0
 800d22e:	460b      	mov	r3, r1
 800d230:	e7c6      	b.n	800d1c0 <__kernel_rem_pio2+0x570>
 800d232:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800d236:	f7f3 f849 	bl	80002cc <__adddf3>
 800d23a:	3401      	adds	r4, #1
 800d23c:	e7cb      	b.n	800d1d6 <__kernel_rem_pio2+0x586>
 800d23e:	ed95 7b00 	vldr	d7, [r5]
 800d242:	ed8d 7b00 	vstr	d7, [sp]
 800d246:	ed95 7b02 	vldr	d7, [r5, #8]
 800d24a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d24e:	ec53 2b17 	vmov	r2, r3, d7
 800d252:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d256:	f7f3 f839 	bl	80002cc <__adddf3>
 800d25a:	4602      	mov	r2, r0
 800d25c:	460b      	mov	r3, r1
 800d25e:	4606      	mov	r6, r0
 800d260:	460f      	mov	r7, r1
 800d262:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d266:	f7f3 f82f 	bl	80002c8 <__aeabi_dsub>
 800d26a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d26e:	f7f3 f82d 	bl	80002cc <__adddf3>
 800d272:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d276:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800d27a:	e9c5 6700 	strd	r6, r7, [r5]
 800d27e:	e76d      	b.n	800d15c <__kernel_rem_pio2+0x50c>
 800d280:	ed94 7b00 	vldr	d7, [r4]
 800d284:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800d288:	ec51 0b17 	vmov	r0, r1, d7
 800d28c:	4652      	mov	r2, sl
 800d28e:	465b      	mov	r3, fp
 800d290:	ed8d 7b00 	vstr	d7, [sp]
 800d294:	f7f3 f81a 	bl	80002cc <__adddf3>
 800d298:	4602      	mov	r2, r0
 800d29a:	460b      	mov	r3, r1
 800d29c:	4606      	mov	r6, r0
 800d29e:	460f      	mov	r7, r1
 800d2a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d2a4:	f7f3 f810 	bl	80002c8 <__aeabi_dsub>
 800d2a8:	4652      	mov	r2, sl
 800d2aa:	465b      	mov	r3, fp
 800d2ac:	f7f3 f80e 	bl	80002cc <__adddf3>
 800d2b0:	3d01      	subs	r5, #1
 800d2b2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d2b6:	e9c4 6700 	strd	r6, r7, [r4]
 800d2ba:	e755      	b.n	800d168 <__kernel_rem_pio2+0x518>
 800d2bc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d2c0:	f7f3 f804 	bl	80002cc <__adddf3>
 800d2c4:	f108 38ff 	add.w	r8, r8, #4294967295
 800d2c8:	e758      	b.n	800d17c <__kernel_rem_pio2+0x52c>
 800d2ca:	bf00      	nop
 800d2cc:	f3af 8000 	nop.w
	...
 800d2d8:	41700000 	.word	0x41700000
 800d2dc:	3e700000 	.word	0x3e700000
 800d2e0:	9b04      	ldr	r3, [sp, #16]
 800d2e2:	9a04      	ldr	r2, [sp, #16]
 800d2e4:	601f      	str	r7, [r3, #0]
 800d2e6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800d2ea:	605c      	str	r4, [r3, #4]
 800d2ec:	609d      	str	r5, [r3, #8]
 800d2ee:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d2f2:	60d3      	str	r3, [r2, #12]
 800d2f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d2f8:	6110      	str	r0, [r2, #16]
 800d2fa:	6153      	str	r3, [r2, #20]
 800d2fc:	e719      	b.n	800d132 <__kernel_rem_pio2+0x4e2>
 800d2fe:	bf00      	nop

0800d300 <scalbn>:
 800d300:	b570      	push	{r4, r5, r6, lr}
 800d302:	ec55 4b10 	vmov	r4, r5, d0
 800d306:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800d30a:	4606      	mov	r6, r0
 800d30c:	462b      	mov	r3, r5
 800d30e:	b991      	cbnz	r1, 800d336 <scalbn+0x36>
 800d310:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800d314:	4323      	orrs	r3, r4
 800d316:	d03d      	beq.n	800d394 <scalbn+0x94>
 800d318:	4b35      	ldr	r3, [pc, #212]	@ (800d3f0 <scalbn+0xf0>)
 800d31a:	4620      	mov	r0, r4
 800d31c:	4629      	mov	r1, r5
 800d31e:	2200      	movs	r2, #0
 800d320:	f7f3 f98a 	bl	8000638 <__aeabi_dmul>
 800d324:	4b33      	ldr	r3, [pc, #204]	@ (800d3f4 <scalbn+0xf4>)
 800d326:	429e      	cmp	r6, r3
 800d328:	4604      	mov	r4, r0
 800d32a:	460d      	mov	r5, r1
 800d32c:	da0f      	bge.n	800d34e <scalbn+0x4e>
 800d32e:	a328      	add	r3, pc, #160	@ (adr r3, 800d3d0 <scalbn+0xd0>)
 800d330:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d334:	e01e      	b.n	800d374 <scalbn+0x74>
 800d336:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800d33a:	4291      	cmp	r1, r2
 800d33c:	d10b      	bne.n	800d356 <scalbn+0x56>
 800d33e:	4622      	mov	r2, r4
 800d340:	4620      	mov	r0, r4
 800d342:	4629      	mov	r1, r5
 800d344:	f7f2 ffc2 	bl	80002cc <__adddf3>
 800d348:	4604      	mov	r4, r0
 800d34a:	460d      	mov	r5, r1
 800d34c:	e022      	b.n	800d394 <scalbn+0x94>
 800d34e:	460b      	mov	r3, r1
 800d350:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800d354:	3936      	subs	r1, #54	@ 0x36
 800d356:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800d35a:	4296      	cmp	r6, r2
 800d35c:	dd0d      	ble.n	800d37a <scalbn+0x7a>
 800d35e:	2d00      	cmp	r5, #0
 800d360:	a11d      	add	r1, pc, #116	@ (adr r1, 800d3d8 <scalbn+0xd8>)
 800d362:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d366:	da02      	bge.n	800d36e <scalbn+0x6e>
 800d368:	a11d      	add	r1, pc, #116	@ (adr r1, 800d3e0 <scalbn+0xe0>)
 800d36a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d36e:	a31a      	add	r3, pc, #104	@ (adr r3, 800d3d8 <scalbn+0xd8>)
 800d370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d374:	f7f3 f960 	bl	8000638 <__aeabi_dmul>
 800d378:	e7e6      	b.n	800d348 <scalbn+0x48>
 800d37a:	1872      	adds	r2, r6, r1
 800d37c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800d380:	428a      	cmp	r2, r1
 800d382:	dcec      	bgt.n	800d35e <scalbn+0x5e>
 800d384:	2a00      	cmp	r2, #0
 800d386:	dd08      	ble.n	800d39a <scalbn+0x9a>
 800d388:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d38c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d390:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d394:	ec45 4b10 	vmov	d0, r4, r5
 800d398:	bd70      	pop	{r4, r5, r6, pc}
 800d39a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800d39e:	da08      	bge.n	800d3b2 <scalbn+0xb2>
 800d3a0:	2d00      	cmp	r5, #0
 800d3a2:	a10b      	add	r1, pc, #44	@ (adr r1, 800d3d0 <scalbn+0xd0>)
 800d3a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d3a8:	dac1      	bge.n	800d32e <scalbn+0x2e>
 800d3aa:	a10f      	add	r1, pc, #60	@ (adr r1, 800d3e8 <scalbn+0xe8>)
 800d3ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d3b0:	e7bd      	b.n	800d32e <scalbn+0x2e>
 800d3b2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d3b6:	3236      	adds	r2, #54	@ 0x36
 800d3b8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d3bc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d3c0:	4620      	mov	r0, r4
 800d3c2:	4b0d      	ldr	r3, [pc, #52]	@ (800d3f8 <scalbn+0xf8>)
 800d3c4:	4629      	mov	r1, r5
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	e7d4      	b.n	800d374 <scalbn+0x74>
 800d3ca:	bf00      	nop
 800d3cc:	f3af 8000 	nop.w
 800d3d0:	c2f8f359 	.word	0xc2f8f359
 800d3d4:	01a56e1f 	.word	0x01a56e1f
 800d3d8:	8800759c 	.word	0x8800759c
 800d3dc:	7e37e43c 	.word	0x7e37e43c
 800d3e0:	8800759c 	.word	0x8800759c
 800d3e4:	fe37e43c 	.word	0xfe37e43c
 800d3e8:	c2f8f359 	.word	0xc2f8f359
 800d3ec:	81a56e1f 	.word	0x81a56e1f
 800d3f0:	43500000 	.word	0x43500000
 800d3f4:	ffff3cb0 	.word	0xffff3cb0
 800d3f8:	3c900000 	.word	0x3c900000
 800d3fc:	00000000 	.word	0x00000000

0800d400 <floor>:
 800d400:	ec51 0b10 	vmov	r0, r1, d0
 800d404:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d40c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800d410:	2e13      	cmp	r6, #19
 800d412:	460c      	mov	r4, r1
 800d414:	4605      	mov	r5, r0
 800d416:	4680      	mov	r8, r0
 800d418:	dc34      	bgt.n	800d484 <floor+0x84>
 800d41a:	2e00      	cmp	r6, #0
 800d41c:	da17      	bge.n	800d44e <floor+0x4e>
 800d41e:	a332      	add	r3, pc, #200	@ (adr r3, 800d4e8 <floor+0xe8>)
 800d420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d424:	f7f2 ff52 	bl	80002cc <__adddf3>
 800d428:	2200      	movs	r2, #0
 800d42a:	2300      	movs	r3, #0
 800d42c:	f7f3 fb94 	bl	8000b58 <__aeabi_dcmpgt>
 800d430:	b150      	cbz	r0, 800d448 <floor+0x48>
 800d432:	2c00      	cmp	r4, #0
 800d434:	da55      	bge.n	800d4e2 <floor+0xe2>
 800d436:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800d43a:	432c      	orrs	r4, r5
 800d43c:	2500      	movs	r5, #0
 800d43e:	42ac      	cmp	r4, r5
 800d440:	4c2b      	ldr	r4, [pc, #172]	@ (800d4f0 <floor+0xf0>)
 800d442:	bf08      	it	eq
 800d444:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800d448:	4621      	mov	r1, r4
 800d44a:	4628      	mov	r0, r5
 800d44c:	e023      	b.n	800d496 <floor+0x96>
 800d44e:	4f29      	ldr	r7, [pc, #164]	@ (800d4f4 <floor+0xf4>)
 800d450:	4137      	asrs	r7, r6
 800d452:	ea01 0307 	and.w	r3, r1, r7
 800d456:	4303      	orrs	r3, r0
 800d458:	d01d      	beq.n	800d496 <floor+0x96>
 800d45a:	a323      	add	r3, pc, #140	@ (adr r3, 800d4e8 <floor+0xe8>)
 800d45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d460:	f7f2 ff34 	bl	80002cc <__adddf3>
 800d464:	2200      	movs	r2, #0
 800d466:	2300      	movs	r3, #0
 800d468:	f7f3 fb76 	bl	8000b58 <__aeabi_dcmpgt>
 800d46c:	2800      	cmp	r0, #0
 800d46e:	d0eb      	beq.n	800d448 <floor+0x48>
 800d470:	2c00      	cmp	r4, #0
 800d472:	bfbe      	ittt	lt
 800d474:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800d478:	4133      	asrlt	r3, r6
 800d47a:	18e4      	addlt	r4, r4, r3
 800d47c:	ea24 0407 	bic.w	r4, r4, r7
 800d480:	2500      	movs	r5, #0
 800d482:	e7e1      	b.n	800d448 <floor+0x48>
 800d484:	2e33      	cmp	r6, #51	@ 0x33
 800d486:	dd0a      	ble.n	800d49e <floor+0x9e>
 800d488:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800d48c:	d103      	bne.n	800d496 <floor+0x96>
 800d48e:	4602      	mov	r2, r0
 800d490:	460b      	mov	r3, r1
 800d492:	f7f2 ff1b 	bl	80002cc <__adddf3>
 800d496:	ec41 0b10 	vmov	d0, r0, r1
 800d49a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d49e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800d4a2:	f04f 37ff 	mov.w	r7, #4294967295
 800d4a6:	40df      	lsrs	r7, r3
 800d4a8:	4207      	tst	r7, r0
 800d4aa:	d0f4      	beq.n	800d496 <floor+0x96>
 800d4ac:	a30e      	add	r3, pc, #56	@ (adr r3, 800d4e8 <floor+0xe8>)
 800d4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4b2:	f7f2 ff0b 	bl	80002cc <__adddf3>
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	f7f3 fb4d 	bl	8000b58 <__aeabi_dcmpgt>
 800d4be:	2800      	cmp	r0, #0
 800d4c0:	d0c2      	beq.n	800d448 <floor+0x48>
 800d4c2:	2c00      	cmp	r4, #0
 800d4c4:	da0a      	bge.n	800d4dc <floor+0xdc>
 800d4c6:	2e14      	cmp	r6, #20
 800d4c8:	d101      	bne.n	800d4ce <floor+0xce>
 800d4ca:	3401      	adds	r4, #1
 800d4cc:	e006      	b.n	800d4dc <floor+0xdc>
 800d4ce:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800d4d2:	2301      	movs	r3, #1
 800d4d4:	40b3      	lsls	r3, r6
 800d4d6:	441d      	add	r5, r3
 800d4d8:	4545      	cmp	r5, r8
 800d4da:	d3f6      	bcc.n	800d4ca <floor+0xca>
 800d4dc:	ea25 0507 	bic.w	r5, r5, r7
 800d4e0:	e7b2      	b.n	800d448 <floor+0x48>
 800d4e2:	2500      	movs	r5, #0
 800d4e4:	462c      	mov	r4, r5
 800d4e6:	e7af      	b.n	800d448 <floor+0x48>
 800d4e8:	8800759c 	.word	0x8800759c
 800d4ec:	7e37e43c 	.word	0x7e37e43c
 800d4f0:	bff00000 	.word	0xbff00000
 800d4f4:	000fffff 	.word	0x000fffff

0800d4f8 <_init>:
 800d4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4fa:	bf00      	nop
 800d4fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4fe:	bc08      	pop	{r3}
 800d500:	469e      	mov	lr, r3
 800d502:	4770      	bx	lr

0800d504 <_fini>:
 800d504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d506:	bf00      	nop
 800d508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d50a:	bc08      	pop	{r3}
 800d50c:	469e      	mov	lr, r3
 800d50e:	4770      	bx	lr
