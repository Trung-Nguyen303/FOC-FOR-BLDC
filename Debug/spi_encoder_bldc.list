
spi_encoder_bldc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d3e0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000578  0800d5b0  0800d5b0  0000e5b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db28  0800db28  0000f218  2**0
                  CONTENTS
  4 .ARM          00000008  0800db28  0800db28  0000eb28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800db30  0800db30  0000f218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db30  0800db30  0000eb30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800db34  0800db34  0000eb34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000218  20000000  0800db38  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f4  20000218  0800dd50  0000f218  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000080c  0800dd50  0000f80c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f218  2**0
                  CONTENTS, READONLY
 12 .debug_info   000137d9  00000000  00000000  0000f248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b37  00000000  00000000  00022a21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001238  00000000  00000000  00025558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e47  00000000  00000000  00026790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024b94  00000000  00000000  000275d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015bfe  00000000  00000000  0004c16b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e22f0  00000000  00000000  00061d69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00144059  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061d8  00000000  00000000  0014409c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0014a274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000218 	.word	0x20000218
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d598 	.word	0x0800d598

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000021c 	.word	0x2000021c
 800020c:	0800d598 	.word	0x0800d598

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b96a 	b.w	8000fb4 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	460c      	mov	r4, r1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d14e      	bne.n	8000da2 <__udivmoddi4+0xaa>
 8000d04:	4694      	mov	ip, r2
 8000d06:	458c      	cmp	ip, r1
 8000d08:	4686      	mov	lr, r0
 8000d0a:	fab2 f282 	clz	r2, r2
 8000d0e:	d962      	bls.n	8000dd6 <__udivmoddi4+0xde>
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0320 	rsb	r3, r2, #32
 8000d16:	4091      	lsls	r1, r2
 8000d18:	fa20 f303 	lsr.w	r3, r0, r3
 8000d1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d20:	4319      	orrs	r1, r3
 8000d22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2a:	fa1f f68c 	uxth.w	r6, ip
 8000d2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d36:	fb07 1114 	mls	r1, r7, r4, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb04 f106 	mul.w	r1, r4, r6
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d4e:	f080 8112 	bcs.w	8000f76 <__udivmoddi4+0x27e>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 810f 	bls.w	8000f76 <__udivmoddi4+0x27e>
 8000d58:	3c02      	subs	r4, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a59      	subs	r1, r3, r1
 8000d5e:	fa1f f38e 	uxth.w	r3, lr
 8000d62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d66:	fb07 1110 	mls	r1, r7, r0, r1
 8000d6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6e:	fb00 f606 	mul.w	r6, r0, r6
 8000d72:	429e      	cmp	r6, r3
 8000d74:	d90a      	bls.n	8000d8c <__udivmoddi4+0x94>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d7e:	f080 80fc 	bcs.w	8000f7a <__udivmoddi4+0x282>
 8000d82:	429e      	cmp	r6, r3
 8000d84:	f240 80f9 	bls.w	8000f7a <__udivmoddi4+0x282>
 8000d88:	4463      	add	r3, ip
 8000d8a:	3802      	subs	r0, #2
 8000d8c:	1b9b      	subs	r3, r3, r6
 8000d8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d92:	2100      	movs	r1, #0
 8000d94:	b11d      	cbz	r5, 8000d9e <__udivmoddi4+0xa6>
 8000d96:	40d3      	lsrs	r3, r2
 8000d98:	2200      	movs	r2, #0
 8000d9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d905      	bls.n	8000db2 <__udivmoddi4+0xba>
 8000da6:	b10d      	cbz	r5, 8000dac <__udivmoddi4+0xb4>
 8000da8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dac:	2100      	movs	r1, #0
 8000dae:	4608      	mov	r0, r1
 8000db0:	e7f5      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000db2:	fab3 f183 	clz	r1, r3
 8000db6:	2900      	cmp	r1, #0
 8000db8:	d146      	bne.n	8000e48 <__udivmoddi4+0x150>
 8000dba:	42a3      	cmp	r3, r4
 8000dbc:	d302      	bcc.n	8000dc4 <__udivmoddi4+0xcc>
 8000dbe:	4290      	cmp	r0, r2
 8000dc0:	f0c0 80f0 	bcc.w	8000fa4 <__udivmoddi4+0x2ac>
 8000dc4:	1a86      	subs	r6, r0, r2
 8000dc6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dca:	2001      	movs	r0, #1
 8000dcc:	2d00      	cmp	r5, #0
 8000dce:	d0e6      	beq.n	8000d9e <__udivmoddi4+0xa6>
 8000dd0:	e9c5 6300 	strd	r6, r3, [r5]
 8000dd4:	e7e3      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000dd6:	2a00      	cmp	r2, #0
 8000dd8:	f040 8090 	bne.w	8000efc <__udivmoddi4+0x204>
 8000ddc:	eba1 040c 	sub.w	r4, r1, ip
 8000de0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000de4:	fa1f f78c 	uxth.w	r7, ip
 8000de8:	2101      	movs	r1, #1
 8000dea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000df2:	fb08 4416 	mls	r4, r8, r6, r4
 8000df6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dfa:	fb07 f006 	mul.w	r0, r7, r6
 8000dfe:	4298      	cmp	r0, r3
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x11c>
 8000e02:	eb1c 0303 	adds.w	r3, ip, r3
 8000e06:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x11a>
 8000e0c:	4298      	cmp	r0, r3
 8000e0e:	f200 80cd 	bhi.w	8000fac <__udivmoddi4+0x2b4>
 8000e12:	4626      	mov	r6, r4
 8000e14:	1a1c      	subs	r4, r3, r0
 8000e16:	fa1f f38e 	uxth.w	r3, lr
 8000e1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb00 f707 	mul.w	r7, r0, r7
 8000e2a:	429f      	cmp	r7, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x148>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x146>
 8000e38:	429f      	cmp	r7, r3
 8000e3a:	f200 80b0 	bhi.w	8000f9e <__udivmoddi4+0x2a6>
 8000e3e:	4620      	mov	r0, r4
 8000e40:	1bdb      	subs	r3, r3, r7
 8000e42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e46:	e7a5      	b.n	8000d94 <__udivmoddi4+0x9c>
 8000e48:	f1c1 0620 	rsb	r6, r1, #32
 8000e4c:	408b      	lsls	r3, r1
 8000e4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e52:	431f      	orrs	r7, r3
 8000e54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e58:	fa04 f301 	lsl.w	r3, r4, r1
 8000e5c:	ea43 030c 	orr.w	r3, r3, ip
 8000e60:	40f4      	lsrs	r4, r6
 8000e62:	fa00 f801 	lsl.w	r8, r0, r1
 8000e66:	0c38      	lsrs	r0, r7, #16
 8000e68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e70:	fa1f fc87 	uxth.w	ip, r7
 8000e74:	fb00 441e 	mls	r4, r0, lr, r4
 8000e78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e80:	45a1      	cmp	r9, r4
 8000e82:	fa02 f201 	lsl.w	r2, r2, r1
 8000e86:	d90a      	bls.n	8000e9e <__udivmoddi4+0x1a6>
 8000e88:	193c      	adds	r4, r7, r4
 8000e8a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e8e:	f080 8084 	bcs.w	8000f9a <__udivmoddi4+0x2a2>
 8000e92:	45a1      	cmp	r9, r4
 8000e94:	f240 8081 	bls.w	8000f9a <__udivmoddi4+0x2a2>
 8000e98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e9c:	443c      	add	r4, r7
 8000e9e:	eba4 0409 	sub.w	r4, r4, r9
 8000ea2:	fa1f f983 	uxth.w	r9, r3
 8000ea6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eaa:	fb00 4413 	mls	r4, r0, r3, r4
 8000eae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eb6:	45a4      	cmp	ip, r4
 8000eb8:	d907      	bls.n	8000eca <__udivmoddi4+0x1d2>
 8000eba:	193c      	adds	r4, r7, r4
 8000ebc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ec0:	d267      	bcs.n	8000f92 <__udivmoddi4+0x29a>
 8000ec2:	45a4      	cmp	ip, r4
 8000ec4:	d965      	bls.n	8000f92 <__udivmoddi4+0x29a>
 8000ec6:	3b02      	subs	r3, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ece:	fba0 9302 	umull	r9, r3, r0, r2
 8000ed2:	eba4 040c 	sub.w	r4, r4, ip
 8000ed6:	429c      	cmp	r4, r3
 8000ed8:	46ce      	mov	lr, r9
 8000eda:	469c      	mov	ip, r3
 8000edc:	d351      	bcc.n	8000f82 <__udivmoddi4+0x28a>
 8000ede:	d04e      	beq.n	8000f7e <__udivmoddi4+0x286>
 8000ee0:	b155      	cbz	r5, 8000ef8 <__udivmoddi4+0x200>
 8000ee2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ee6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eea:	fa04 f606 	lsl.w	r6, r4, r6
 8000eee:	40cb      	lsrs	r3, r1
 8000ef0:	431e      	orrs	r6, r3
 8000ef2:	40cc      	lsrs	r4, r1
 8000ef4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ef8:	2100      	movs	r1, #0
 8000efa:	e750      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000efc:	f1c2 0320 	rsb	r3, r2, #32
 8000f00:	fa20 f103 	lsr.w	r1, r0, r3
 8000f04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f08:	fa24 f303 	lsr.w	r3, r4, r3
 8000f0c:	4094      	lsls	r4, r2
 8000f0e:	430c      	orrs	r4, r1
 8000f10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f18:	fa1f f78c 	uxth.w	r7, ip
 8000f1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f20:	fb08 3110 	mls	r1, r8, r0, r3
 8000f24:	0c23      	lsrs	r3, r4, #16
 8000f26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f2a:	fb00 f107 	mul.w	r1, r0, r7
 8000f2e:	4299      	cmp	r1, r3
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x24c>
 8000f32:	eb1c 0303 	adds.w	r3, ip, r3
 8000f36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f3a:	d22c      	bcs.n	8000f96 <__udivmoddi4+0x29e>
 8000f3c:	4299      	cmp	r1, r3
 8000f3e:	d92a      	bls.n	8000f96 <__udivmoddi4+0x29e>
 8000f40:	3802      	subs	r0, #2
 8000f42:	4463      	add	r3, ip
 8000f44:	1a5b      	subs	r3, r3, r1
 8000f46:	b2a4      	uxth	r4, r4
 8000f48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f54:	fb01 f307 	mul.w	r3, r1, r7
 8000f58:	42a3      	cmp	r3, r4
 8000f5a:	d908      	bls.n	8000f6e <__udivmoddi4+0x276>
 8000f5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f64:	d213      	bcs.n	8000f8e <__udivmoddi4+0x296>
 8000f66:	42a3      	cmp	r3, r4
 8000f68:	d911      	bls.n	8000f8e <__udivmoddi4+0x296>
 8000f6a:	3902      	subs	r1, #2
 8000f6c:	4464      	add	r4, ip
 8000f6e:	1ae4      	subs	r4, r4, r3
 8000f70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f74:	e739      	b.n	8000dea <__udivmoddi4+0xf2>
 8000f76:	4604      	mov	r4, r0
 8000f78:	e6f0      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	e706      	b.n	8000d8c <__udivmoddi4+0x94>
 8000f7e:	45c8      	cmp	r8, r9
 8000f80:	d2ae      	bcs.n	8000ee0 <__udivmoddi4+0x1e8>
 8000f82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f8a:	3801      	subs	r0, #1
 8000f8c:	e7a8      	b.n	8000ee0 <__udivmoddi4+0x1e8>
 8000f8e:	4631      	mov	r1, r6
 8000f90:	e7ed      	b.n	8000f6e <__udivmoddi4+0x276>
 8000f92:	4603      	mov	r3, r0
 8000f94:	e799      	b.n	8000eca <__udivmoddi4+0x1d2>
 8000f96:	4630      	mov	r0, r6
 8000f98:	e7d4      	b.n	8000f44 <__udivmoddi4+0x24c>
 8000f9a:	46d6      	mov	lr, sl
 8000f9c:	e77f      	b.n	8000e9e <__udivmoddi4+0x1a6>
 8000f9e:	4463      	add	r3, ip
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	e74d      	b.n	8000e40 <__udivmoddi4+0x148>
 8000fa4:	4606      	mov	r6, r0
 8000fa6:	4623      	mov	r3, r4
 8000fa8:	4608      	mov	r0, r1
 8000faa:	e70f      	b.n	8000dcc <__udivmoddi4+0xd4>
 8000fac:	3e02      	subs	r6, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	e730      	b.n	8000e14 <__udivmoddi4+0x11c>
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <_micros>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

unsigned long _micros(){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	return HAL_GetTick()*1000;
 8000fbc:	f002 ff1e 	bl	8003dfc <HAL_GetTick>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000fc6:	fb02 f303 	mul.w	r3, r2, r3
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <Update_dt>:

void Update_dt()
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
	 static uint32_t t_prev = 0;
	uint32_t t_now = _micros();
 8000fd6:	f7ff ffef 	bl	8000fb8 <_micros>
 8000fda:	6078      	str	r0, [r7, #4]
	dt = (t_now - t_prev) / 1000000.0f;
 8000fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8001008 <Update_dt+0x38>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	ee07 3a90 	vmov	s15, r3
 8000fe8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fec:	eddf 6a07 	vldr	s13, [pc, #28]	@ 800100c <Update_dt+0x3c>
 8000ff0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ff4:	4b06      	ldr	r3, [pc, #24]	@ (8001010 <Update_dt+0x40>)
 8000ff6:	edc3 7a00 	vstr	s15, [r3]
//	if (dt <= 0.0f || dt > 0.5f) dt = 0.001f;
	t_prev = t_now;
 8000ffa:	4a03      	ldr	r2, [pc, #12]	@ (8001008 <Update_dt+0x38>)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6013      	str	r3, [r2, #0]
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000688 	.word	0x20000688
 800100c:	49742400 	.word	0x49742400
 8001010:	20000298 	.word	0x20000298

08001014 <update_speed_dt>:

void update_speed_dt()
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
	 static uint32_t t_speed_prev = 0;
	uint32_t t_speed_now = _micros();
 800101a:	f7ff ffcd 	bl	8000fb8 <_micros>
 800101e:	6078      	str	r0, [r7, #4]
	Speed_dt = (t_speed_now - t_speed_prev) / 1000000.0f;
 8001020:	4b0a      	ldr	r3, [pc, #40]	@ (800104c <update_speed_dt+0x38>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	ee07 3a90 	vmov	s15, r3
 800102c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001030:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8001050 <update_speed_dt+0x3c>
 8001034:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001038:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <update_speed_dt+0x40>)
 800103a:	edc3 7a00 	vstr	s15, [r3]
	t_speed_prev = t_speed_now;
 800103e:	4a03      	ldr	r2, [pc, #12]	@ (800104c <update_speed_dt+0x38>)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6013      	str	r3, [r2, #0]
}
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	2000068c 	.word	0x2000068c
 8001050:	49742400 	.word	0x49742400
 8001054:	200002d0 	.word	0x200002d0

08001058 <update_position_dt>:

void update_position_dt()
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
	 static uint32_t t_position_prev = 0;
	uint32_t t_position_now = _micros();
 800105e:	f7ff ffab 	bl	8000fb8 <_micros>
 8001062:	6078      	str	r0, [r7, #4]
	position_dt = (t_position_now - t_position_prev) / 1000000.0f;
 8001064:	4b0a      	ldr	r3, [pc, #40]	@ (8001090 <update_position_dt+0x38>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	ee07 3a90 	vmov	s15, r3
 8001070:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001074:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8001094 <update_position_dt+0x3c>
 8001078:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800107c:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <update_position_dt+0x40>)
 800107e:	edc3 7a00 	vstr	s15, [r3]
	t_position_prev = t_position_now;
 8001082:	4a03      	ldr	r2, [pc, #12]	@ (8001090 <update_position_dt+0x38>)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6013      	str	r3, [r2, #0]
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000690 	.word	0x20000690
 8001094:	49742400 	.word	0x49742400
 8001098:	200002cc 	.word	0x200002cc

0800109c <delay_us>:

void delay_us (uint16_t us)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3,0);
 80010a6:	4b09      	ldr	r3, [pc, #36]	@ (80010cc <delay_us+0x30>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2200      	movs	r2, #0
 80010ac:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim3) < us);
 80010ae:	bf00      	nop
 80010b0:	4b06      	ldr	r3, [pc, #24]	@ (80010cc <delay_us+0x30>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80010b6:	88fb      	ldrh	r3, [r7, #6]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d3f9      	bcc.n	80010b0 <delay_us+0x14>
}
 80010bc:	bf00      	nop
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	20000508 	.word	0x20000508

080010d0 <spiCalcEvenParity>:

uint8_t spiCalcEvenParity(uint16_t value) {
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	80fb      	strh	r3, [r7, #6]
    uint8_t cnt = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < 16; i++) {
 80010de:	2300      	movs	r3, #0
 80010e0:	73bb      	strb	r3, [r7, #14]
 80010e2:	e00d      	b.n	8001100 <spiCalcEvenParity+0x30>
        if (value & 0x1) cnt++;
 80010e4:	88fb      	ldrh	r3, [r7, #6]
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d002      	beq.n	80010f4 <spiCalcEvenParity+0x24>
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
 80010f0:	3301      	adds	r3, #1
 80010f2:	73fb      	strb	r3, [r7, #15]
        value >>= 1;
 80010f4:	88fb      	ldrh	r3, [r7, #6]
 80010f6:	085b      	lsrs	r3, r3, #1
 80010f8:	80fb      	strh	r3, [r7, #6]
    for (uint8_t i = 0; i < 16; i++) {
 80010fa:	7bbb      	ldrb	r3, [r7, #14]
 80010fc:	3301      	adds	r3, #1
 80010fe:	73bb      	strb	r3, [r7, #14]
 8001100:	7bbb      	ldrb	r3, [r7, #14]
 8001102:	2b0f      	cmp	r3, #15
 8001104:	d9ee      	bls.n	80010e4 <spiCalcEvenParity+0x14>
    }
    return cnt & 0x1;
 8001106:	7bfb      	ldrb	r3, [r7, #15]
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	b2db      	uxtb	r3, r3
}
 800110e:	4618      	mov	r0, r3
 8001110:	3714      	adds	r7, #20
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
	...

0800111c <AS5147U_ReadAngle>:

uint16_t AS5147U_ReadAngle() {
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af02      	add	r7, sp, #8
    uint16_t command = AS5147U_ANGLE_REG ;
 8001122:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 8001126:	80bb      	strh	r3, [r7, #4]
    command |= (1 << 14);
 8001128:	88bb      	ldrh	r3, [r7, #4]
 800112a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800112e:	b29b      	uxth	r3, r3
 8001130:	80bb      	strh	r3, [r7, #4]
    command |= ((uint16_t)spiCalcEvenParity(command) << 15);
 8001132:	88bb      	ldrh	r3, [r7, #4]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff ffcb 	bl	80010d0 <spiCalcEvenParity>
 800113a:	4603      	mov	r3, r0
 800113c:	03db      	lsls	r3, r3, #15
 800113e:	b21a      	sxth	r2, r3
 8001140:	88bb      	ldrh	r3, [r7, #4]
 8001142:	b21b      	sxth	r3, r3
 8001144:	4313      	orrs	r3, r2
 8001146:	b21b      	sxth	r3, r3
 8001148:	b29b      	uxth	r3, r3
 800114a:	80bb      	strh	r3, [r7, #4]
    uint16_t receivedData;

    uint16_t nop = 0x0000;
 800114c:	2300      	movs	r3, #0
 800114e:	803b      	strh	r3, [r7, #0]

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001150:	2200      	movs	r2, #0
 8001152:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001156:	481a      	ldr	r0, [pc, #104]	@ (80011c0 <AS5147U_ReadAngle+0xa4>)
 8001158:	f004 fcfe 	bl	8005b58 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)&command, 1, HAL_MAX_DELAY);
 800115c:	1d39      	adds	r1, r7, #4
 800115e:	f04f 33ff 	mov.w	r3, #4294967295
 8001162:	2201      	movs	r2, #1
 8001164:	4817      	ldr	r0, [pc, #92]	@ (80011c4 <AS5147U_ReadAngle+0xa8>)
 8001166:	f005 fbd2 	bl	800690e <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800116a:	2201      	movs	r2, #1
 800116c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001170:	4813      	ldr	r0, [pc, #76]	@ (80011c0 <AS5147U_ReadAngle+0xa4>)
 8001172:	f004 fcf1 	bl	8005b58 <HAL_GPIO_WritePin>
    delay_us(10);
 8001176:	200a      	movs	r0, #10
 8001178:	f7ff ff90 	bl	800109c <delay_us>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800117c:	2200      	movs	r2, #0
 800117e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001182:	480f      	ldr	r0, [pc, #60]	@ (80011c0 <AS5147U_ReadAngle+0xa4>)
 8001184:	f004 fce8 	bl	8005b58 <HAL_GPIO_WritePin>

    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)&nop ,(uint8_t*)&receivedData, 1, HAL_MAX_DELAY);
 8001188:	1cba      	adds	r2, r7, #2
 800118a:	4639      	mov	r1, r7
 800118c:	f04f 33ff 	mov.w	r3, #4294967295
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	2301      	movs	r3, #1
 8001194:	480b      	ldr	r0, [pc, #44]	@ (80011c4 <AS5147U_ReadAngle+0xa8>)
 8001196:	f005 fcfe 	bl	8006b96 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800119a:	2201      	movs	r2, #1
 800119c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011a0:	4807      	ldr	r0, [pc, #28]	@ (80011c0 <AS5147U_ReadAngle+0xa4>)
 80011a2:	f004 fcd9 	bl	8005b58 <HAL_GPIO_WritePin>

    receivedData = receivedData >> (1 + 13 - AS5147U_BIT_RESOLUTION);
 80011a6:	887b      	ldrh	r3, [r7, #2]
 80011a8:	807b      	strh	r3, [r7, #2]
    const uint16_t data_mask = 0xFFFF >> (16 - AS5147U_BIT_RESOLUTION);
 80011aa:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 80011ae:	80fb      	strh	r3, [r7, #6]
    return receivedData & data_mask;
 80011b0:	887a      	ldrh	r2, [r7, #2]
 80011b2:	88fb      	ldrh	r3, [r7, #6]
 80011b4:	4013      	ands	r3, r2
 80011b6:	b29b      	uxth	r3, r3

}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40020400 	.word	0x40020400
 80011c4:	20000420 	.word	0x20000420

080011c8 <AS5147U_GetAngleRad>:
    while (angle_elec_rad >= 2 * M_PI) angle_elec_rad -= 2 * M_PI;
    while (angle_elec_rad < 0) angle_elec_rad += 2 * M_PI;
    return angle_elec_rad;
}

float AS5147U_GetAngleRad() {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
    rawCount = AS5147U_ReadAngle();
 80011ce:	f7ff ffa5 	bl	800111c <AS5147U_ReadAngle>
 80011d2:	4603      	mov	r3, r0
 80011d4:	461a      	mov	r2, r3
 80011d6:	4b32      	ldr	r3, [pc, #200]	@ (80012a0 <AS5147U_GetAngleRad+0xd8>)
 80011d8:	801a      	strh	r2, [r3, #0]
    float mechanical = rawCount / 16384.0 * 2.0 * PI;
 80011da:	4b31      	ldr	r3, [pc, #196]	@ (80012a0 <AS5147U_GetAngleRad+0xd8>)
 80011dc:	881b      	ldrh	r3, [r3, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff f9c0 	bl	8000564 <__aeabi_i2d>
 80011e4:	f04f 0200 	mov.w	r2, #0
 80011e8:	4b2e      	ldr	r3, [pc, #184]	@ (80012a4 <AS5147U_GetAngleRad+0xdc>)
 80011ea:	f7ff fb4f 	bl	800088c <__aeabi_ddiv>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	4610      	mov	r0, r2
 80011f4:	4619      	mov	r1, r3
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	f7ff f867 	bl	80002cc <__adddf3>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	4610      	mov	r0, r2
 8001204:	4619      	mov	r1, r3
 8001206:	a320      	add	r3, pc, #128	@ (adr r3, 8001288 <AS5147U_GetAngleRad+0xc0>)
 8001208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120c:	f7ff fa14 	bl	8000638 <__aeabi_dmul>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	4610      	mov	r0, r2
 8001216:	4619      	mov	r1, r3
 8001218:	f7ff fd06 	bl	8000c28 <__aeabi_d2f>
 800121c:	4603      	mov	r3, r0
 800121e:	607b      	str	r3, [r7, #4]
//    mechanical -= (M_PI+0.18714565);
    mechanical -= 1.23627206;
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff f9b1 	bl	8000588 <__aeabi_f2d>
 8001226:	a31a      	add	r3, pc, #104	@ (adr r3, 8001290 <AS5147U_GetAngleRad+0xc8>)
 8001228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122c:	f7ff f84c 	bl	80002c8 <__aeabi_dsub>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	4610      	mov	r0, r2
 8001236:	4619      	mov	r1, r3
 8001238:	f7ff fcf6 	bl	8000c28 <__aeabi_d2f>
 800123c:	4603      	mov	r3, r0
 800123e:	607b      	str	r3, [r7, #4]
    if (mechanical >= 2.0f * PI) mechanical -= 2.0f * PI;
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff f9a1 	bl	8000588 <__aeabi_f2d>
 8001246:	a314      	add	r3, pc, #80	@ (adr r3, 8001298 <AS5147U_GetAngleRad+0xd0>)
 8001248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124c:	f7ff fc7a 	bl	8000b44 <__aeabi_dcmpge>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d00f      	beq.n	8001276 <AS5147U_GetAngleRad+0xae>
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff f996 	bl	8000588 <__aeabi_f2d>
 800125c:	a30e      	add	r3, pc, #56	@ (adr r3, 8001298 <AS5147U_GetAngleRad+0xd0>)
 800125e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001262:	f7ff f831 	bl	80002c8 <__aeabi_dsub>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4610      	mov	r0, r2
 800126c:	4619      	mov	r1, r3
 800126e:	f7ff fcdb 	bl	8000c28 <__aeabi_d2f>
 8001272:	4603      	mov	r3, r0
 8001274:	607b      	str	r3, [r7, #4]
    return mechanical;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	ee07 3a90 	vmov	s15, r3
//    return (rawCount / 16384.0 * 2.0 * PI) ;
}
 800127c:	eeb0 0a67 	vmov.f32	s0, s15
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	54442eea 	.word	0x54442eea
 800128c:	400921fb 	.word	0x400921fb
 8001290:	362a896b 	.word	0x362a896b
 8001294:	3ff3c7c5 	.word	0x3ff3c7c5
 8001298:	54442eea 	.word	0x54442eea
 800129c:	401921fb 	.word	0x401921fb
 80012a0:	200002ea 	.word	0x200002ea
 80012a4:	40d00000 	.word	0x40d00000

080012a8 <electricalAngle>:

float electricalAngle() {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
	float mechanical_angle_rad = AS5147U_GetAngleRad();
 80012ae:	f7ff ff8b 	bl	80011c8 <AS5147U_GetAngleRad>
 80012b2:	ed87 0a01 	vstr	s0, [r7, #4]
     elec_angle = ((mechanical_angle_rad  - angle_offset )) * pole_pairs;//+ PI/2
 80012b6:	4b2e      	ldr	r3, [pc, #184]	@ (8001370 <electricalAngle+0xc8>)
 80012b8:	edd3 7a00 	vldr	s15, [r3]
 80012bc:	ed97 7a01 	vldr	s14, [r7, #4]
 80012c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001374 <electricalAngle+0xcc>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	ee07 3a90 	vmov	s15, r3
 80012cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012d4:	4b28      	ldr	r3, [pc, #160]	@ (8001378 <electricalAngle+0xd0>)
 80012d6:	edc3 7a00 	vstr	s15, [r3]
    // elec_angle -= M_PI;
    while (elec_angle >= 2 * M_PI) elec_angle -= 2 * M_PI;
 80012da:	e012      	b.n	8001302 <electricalAngle+0x5a>
 80012dc:	4b26      	ldr	r3, [pc, #152]	@ (8001378 <electricalAngle+0xd0>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff f951 	bl	8000588 <__aeabi_f2d>
 80012e6:	a320      	add	r3, pc, #128	@ (adr r3, 8001368 <electricalAngle+0xc0>)
 80012e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ec:	f7fe ffec 	bl	80002c8 <__aeabi_dsub>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4610      	mov	r0, r2
 80012f6:	4619      	mov	r1, r3
 80012f8:	f7ff fc96 	bl	8000c28 <__aeabi_d2f>
 80012fc:	4603      	mov	r3, r0
 80012fe:	4a1e      	ldr	r2, [pc, #120]	@ (8001378 <electricalAngle+0xd0>)
 8001300:	6013      	str	r3, [r2, #0]
 8001302:	4b1d      	ldr	r3, [pc, #116]	@ (8001378 <electricalAngle+0xd0>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff f93e 	bl	8000588 <__aeabi_f2d>
 800130c:	a316      	add	r3, pc, #88	@ (adr r3, 8001368 <electricalAngle+0xc0>)
 800130e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001312:	f7ff fc17 	bl	8000b44 <__aeabi_dcmpge>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1df      	bne.n	80012dc <electricalAngle+0x34>
    while (elec_angle < 0) elec_angle += 2 * M_PI;
 800131c:	e012      	b.n	8001344 <electricalAngle+0x9c>
 800131e:	4b16      	ldr	r3, [pc, #88]	@ (8001378 <electricalAngle+0xd0>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff f930 	bl	8000588 <__aeabi_f2d>
 8001328:	a30f      	add	r3, pc, #60	@ (adr r3, 8001368 <electricalAngle+0xc0>)
 800132a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132e:	f7fe ffcd 	bl	80002cc <__adddf3>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	4610      	mov	r0, r2
 8001338:	4619      	mov	r1, r3
 800133a:	f7ff fc75 	bl	8000c28 <__aeabi_d2f>
 800133e:	4603      	mov	r3, r0
 8001340:	4a0d      	ldr	r2, [pc, #52]	@ (8001378 <electricalAngle+0xd0>)
 8001342:	6013      	str	r3, [r2, #0]
 8001344:	4b0c      	ldr	r3, [pc, #48]	@ (8001378 <electricalAngle+0xd0>)
 8001346:	edd3 7a00 	vldr	s15, [r3]
 800134a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800134e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001352:	d4e4      	bmi.n	800131e <electricalAngle+0x76>
    return elec_angle;
 8001354:	4b08      	ldr	r3, [pc, #32]	@ (8001378 <electricalAngle+0xd0>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	ee07 3a90 	vmov	s15, r3
}
 800135c:	eeb0 0a67 	vmov.f32	s0, s15
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	54442d18 	.word	0x54442d18
 800136c:	401921fb 	.word	0x401921fb
 8001370:	2000029c 	.word	0x2000029c
 8001374:	20000030 	.word	0x20000030
 8001378:	200002c0 	.word	0x200002c0
 800137c:	00000000 	.word	0x00000000

08001380 <alignRotor>:


void alignRotor() {
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
    float V_align = 1.0;
 8001386:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800138a:	607b      	str	r3, [r7, #4]

    Va = V_align;
 800138c:	4a3a      	ldr	r2, [pc, #232]	@ (8001478 <alignRotor+0xf8>)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6013      	str	r3, [r2, #0]
    PWM_A = ((Va / 8.0 + 1.0)/2 * PWM_PERIOD)*0.1;
 8001392:	4b39      	ldr	r3, [pc, #228]	@ (8001478 <alignRotor+0xf8>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff f8f6 	bl	8000588 <__aeabi_f2d>
 800139c:	f04f 0200 	mov.w	r2, #0
 80013a0:	4b36      	ldr	r3, [pc, #216]	@ (800147c <alignRotor+0xfc>)
 80013a2:	f7ff fa73 	bl	800088c <__aeabi_ddiv>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	4610      	mov	r0, r2
 80013ac:	4619      	mov	r1, r3
 80013ae:	f04f 0200 	mov.w	r2, #0
 80013b2:	4b33      	ldr	r3, [pc, #204]	@ (8001480 <alignRotor+0x100>)
 80013b4:	f7fe ff8a 	bl	80002cc <__adddf3>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4610      	mov	r0, r2
 80013be:	4619      	mov	r1, r3
 80013c0:	f04f 0200 	mov.w	r2, #0
 80013c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013c8:	f7ff fa60 	bl	800088c <__aeabi_ddiv>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	4610      	mov	r0, r2
 80013d2:	4619      	mov	r1, r3
 80013d4:	a324      	add	r3, pc, #144	@ (adr r3, 8001468 <alignRotor+0xe8>)
 80013d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013da:	f7ff f92d 	bl	8000638 <__aeabi_dmul>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	4610      	mov	r0, r2
 80013e4:	4619      	mov	r1, r3
 80013e6:	a322      	add	r3, pc, #136	@ (adr r3, 8001470 <alignRotor+0xf0>)
 80013e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ec:	f7ff f924 	bl	8000638 <__aeabi_dmul>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	4610      	mov	r0, r2
 80013f6:	4619      	mov	r1, r3
 80013f8:	f7ff fbf6 	bl	8000be8 <__aeabi_d2uiz>
 80013fc:	4603      	mov	r3, r0
 80013fe:	b29a      	uxth	r2, r3
 8001400:	4b20      	ldr	r3, [pc, #128]	@ (8001484 <alignRotor+0x104>)
 8001402:	801a      	strh	r2, [r3, #0]
    PWM_B = 0;
 8001404:	4b20      	ldr	r3, [pc, #128]	@ (8001488 <alignRotor+0x108>)
 8001406:	2200      	movs	r2, #0
 8001408:	801a      	strh	r2, [r3, #0]
    PWM_C = 0;
 800140a:	4b20      	ldr	r3, [pc, #128]	@ (800148c <alignRotor+0x10c>)
 800140c:	2200      	movs	r2, #0
 800140e:	801a      	strh	r2, [r3, #0]

    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM_A);
 8001410:	4b1c      	ldr	r3, [pc, #112]	@ (8001484 <alignRotor+0x104>)
 8001412:	881a      	ldrh	r2, [r3, #0]
 8001414:	4b1e      	ldr	r3, [pc, #120]	@ (8001490 <alignRotor+0x110>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWM_B);
 800141a:	4b1b      	ldr	r3, [pc, #108]	@ (8001488 <alignRotor+0x108>)
 800141c:	881a      	ldrh	r2, [r3, #0]
 800141e:	4b1c      	ldr	r3, [pc, #112]	@ (8001490 <alignRotor+0x110>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, PWM_C);
 8001424:	4b19      	ldr	r3, [pc, #100]	@ (800148c <alignRotor+0x10c>)
 8001426:	881a      	ldrh	r2, [r3, #0]
 8001428:	4b19      	ldr	r3, [pc, #100]	@ (8001490 <alignRotor+0x110>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	63da      	str	r2, [r3, #60]	@ 0x3c

    HAL_Delay(1000);
 800142e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001432:	f002 fcef 	bl	8003e14 <HAL_Delay>

    angle_offset = AS5147U_GetAngleRad();
 8001436:	f7ff fec7 	bl	80011c8 <AS5147U_GetAngleRad>
 800143a:	eef0 7a40 	vmov.f32	s15, s0
 800143e:	4b15      	ldr	r3, [pc, #84]	@ (8001494 <alignRotor+0x114>)
 8001440:	edc3 7a00 	vstr	s15, [r3]

    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001444:	4b12      	ldr	r3, [pc, #72]	@ (8001490 <alignRotor+0x110>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2200      	movs	r2, #0
 800144a:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 800144c:	4b10      	ldr	r3, [pc, #64]	@ (8001490 <alignRotor+0x110>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2200      	movs	r2, #0
 8001452:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001454:	4b0e      	ldr	r3, [pc, #56]	@ (8001490 <alignRotor+0x110>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2200      	movs	r2, #0
 800145a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800145c:	bf00      	nop
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	f3af 8000 	nop.w
 8001468:	00000000 	.word	0x00000000
 800146c:	40b76e00 	.word	0x40b76e00
 8001470:	9999999a 	.word	0x9999999a
 8001474:	3fb99999 	.word	0x3fb99999
 8001478:	20000260 	.word	0x20000260
 800147c:	40200000 	.word	0x40200000
 8001480:	3ff00000 	.word	0x3ff00000
 8001484:	200002e4 	.word	0x200002e4
 8001488:	200002e6 	.word	0x200002e6
 800148c:	200002e8 	.word	0x200002e8
 8001490:	20000478 	.word	0x20000478
 8001494:	2000029c 	.word	0x2000029c

08001498 <clark>:
void clark()
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
 	i_alpha = ia;
 800149c:	4b12      	ldr	r3, [pc, #72]	@ (80014e8 <clark+0x50>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a12      	ldr	r2, [pc, #72]	@ (80014ec <clark+0x54>)
 80014a2:	6013      	str	r3, [r2, #0]
	i_beta = (ib - ic) / sqrt(3);
 80014a4:	4b12      	ldr	r3, [pc, #72]	@ (80014f0 <clark+0x58>)
 80014a6:	ed93 7a00 	vldr	s14, [r3]
 80014aa:	4b12      	ldr	r3, [pc, #72]	@ (80014f4 <clark+0x5c>)
 80014ac:	edd3 7a00 	vldr	s15, [r3]
 80014b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014b4:	ee17 0a90 	vmov	r0, s15
 80014b8:	f7ff f866 	bl	8000588 <__aeabi_f2d>
 80014bc:	a308      	add	r3, pc, #32	@ (adr r3, 80014e0 <clark+0x48>)
 80014be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c2:	f7ff f9e3 	bl	800088c <__aeabi_ddiv>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	4610      	mov	r0, r2
 80014cc:	4619      	mov	r1, r3
 80014ce:	f7ff fbab 	bl	8000c28 <__aeabi_d2f>
 80014d2:	4603      	mov	r3, r0
 80014d4:	4a08      	ldr	r2, [pc, #32]	@ (80014f8 <clark+0x60>)
 80014d6:	6013      	str	r3, [r2, #0]
}
 80014d8:	bf00      	nop
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	f3af 8000 	nop.w
 80014e0:	e8584caa 	.word	0xe8584caa
 80014e4:	3ffbb67a 	.word	0x3ffbb67a
 80014e8:	2000023c 	.word	0x2000023c
 80014ec:	20000248 	.word	0x20000248
 80014f0:	20000240 	.word	0x20000240
 80014f4:	20000244 	.word	0x20000244
 80014f8:	2000024c 	.word	0x2000024c

080014fc <park>:

void park()
{
 80014fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001500:	af00      	add	r7, sp, #0
	i_d = i_alpha*cos(theta) + i_beta*sin(theta);
 8001502:	4b59      	ldr	r3, [pc, #356]	@ (8001668 <park+0x16c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff f83e 	bl	8000588 <__aeabi_f2d>
 800150c:	4604      	mov	r4, r0
 800150e:	460d      	mov	r5, r1
 8001510:	4b56      	ldr	r3, [pc, #344]	@ (800166c <park+0x170>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff f837 	bl	8000588 <__aeabi_f2d>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	ec43 2b10 	vmov	d0, r2, r3
 8001522:	f00a fe85 	bl	800c230 <cos>
 8001526:	ec53 2b10 	vmov	r2, r3, d0
 800152a:	4620      	mov	r0, r4
 800152c:	4629      	mov	r1, r5
 800152e:	f7ff f883 	bl	8000638 <__aeabi_dmul>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4690      	mov	r8, r2
 8001538:	4699      	mov	r9, r3
 800153a:	4b4d      	ldr	r3, [pc, #308]	@ (8001670 <park+0x174>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff f822 	bl	8000588 <__aeabi_f2d>
 8001544:	4604      	mov	r4, r0
 8001546:	460d      	mov	r5, r1
 8001548:	4b48      	ldr	r3, [pc, #288]	@ (800166c <park+0x170>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff f81b 	bl	8000588 <__aeabi_f2d>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	ec43 2b10 	vmov	d0, r2, r3
 800155a:	f00a febd 	bl	800c2d8 <sin>
 800155e:	ec53 2b10 	vmov	r2, r3, d0
 8001562:	4620      	mov	r0, r4
 8001564:	4629      	mov	r1, r5
 8001566:	f7ff f867 	bl	8000638 <__aeabi_dmul>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	4640      	mov	r0, r8
 8001570:	4649      	mov	r1, r9
 8001572:	f7fe feab 	bl	80002cc <__adddf3>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	4610      	mov	r0, r2
 800157c:	4619      	mov	r1, r3
 800157e:	f7ff fb53 	bl	8000c28 <__aeabi_d2f>
 8001582:	4603      	mov	r3, r0
 8001584:	4a3b      	ldr	r2, [pc, #236]	@ (8001674 <park+0x178>)
 8001586:	6013      	str	r3, [r2, #0]
	i_q = -i_alpha*sin(theta) + i_beta*cos(theta);
 8001588:	4b37      	ldr	r3, [pc, #220]	@ (8001668 <park+0x16c>)
 800158a:	edd3 7a00 	vldr	s15, [r3]
 800158e:	eef1 7a67 	vneg.f32	s15, s15
 8001592:	ee17 3a90 	vmov	r3, s15
 8001596:	4618      	mov	r0, r3
 8001598:	f7fe fff6 	bl	8000588 <__aeabi_f2d>
 800159c:	4604      	mov	r4, r0
 800159e:	460d      	mov	r5, r1
 80015a0:	4b32      	ldr	r3, [pc, #200]	@ (800166c <park+0x170>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7fe ffef 	bl	8000588 <__aeabi_f2d>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	ec43 2b10 	vmov	d0, r2, r3
 80015b2:	f00a fe91 	bl	800c2d8 <sin>
 80015b6:	ec53 2b10 	vmov	r2, r3, d0
 80015ba:	4620      	mov	r0, r4
 80015bc:	4629      	mov	r1, r5
 80015be:	f7ff f83b 	bl	8000638 <__aeabi_dmul>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4690      	mov	r8, r2
 80015c8:	4699      	mov	r9, r3
 80015ca:	4b29      	ldr	r3, [pc, #164]	@ (8001670 <park+0x174>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7fe ffda 	bl	8000588 <__aeabi_f2d>
 80015d4:	4604      	mov	r4, r0
 80015d6:	460d      	mov	r5, r1
 80015d8:	4b24      	ldr	r3, [pc, #144]	@ (800166c <park+0x170>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7fe ffd3 	bl	8000588 <__aeabi_f2d>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	ec43 2b10 	vmov	d0, r2, r3
 80015ea:	f00a fe21 	bl	800c230 <cos>
 80015ee:	ec53 2b10 	vmov	r2, r3, d0
 80015f2:	4620      	mov	r0, r4
 80015f4:	4629      	mov	r1, r5
 80015f6:	f7ff f81f 	bl	8000638 <__aeabi_dmul>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	4640      	mov	r0, r8
 8001600:	4649      	mov	r1, r9
 8001602:	f7fe fe63 	bl	80002cc <__adddf3>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4610      	mov	r0, r2
 800160c:	4619      	mov	r1, r3
 800160e:	f7ff fb0b 	bl	8000c28 <__aeabi_d2f>
 8001612:	4603      	mov	r3, r0
 8001614:	4a18      	ldr	r2, [pc, #96]	@ (8001678 <park+0x17c>)
 8001616:	6013      	str	r3, [r2, #0]
	idq = sqrt( i_d * i_d + i_q * i_q);
 8001618:	4b16      	ldr	r3, [pc, #88]	@ (8001674 <park+0x178>)
 800161a:	ed93 7a00 	vldr	s14, [r3]
 800161e:	4b15      	ldr	r3, [pc, #84]	@ (8001674 <park+0x178>)
 8001620:	edd3 7a00 	vldr	s15, [r3]
 8001624:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001628:	4b13      	ldr	r3, [pc, #76]	@ (8001678 <park+0x17c>)
 800162a:	edd3 6a00 	vldr	s13, [r3]
 800162e:	4b12      	ldr	r3, [pc, #72]	@ (8001678 <park+0x17c>)
 8001630:	edd3 7a00 	vldr	s15, [r3]
 8001634:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001638:	ee77 7a27 	vadd.f32	s15, s14, s15
 800163c:	ee17 0a90 	vmov	r0, s15
 8001640:	f7fe ffa2 	bl	8000588 <__aeabi_f2d>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	ec43 2b10 	vmov	d0, r2, r3
 800164c:	f00a fdc4 	bl	800c1d8 <sqrt>
 8001650:	ec53 2b10 	vmov	r2, r3, d0
 8001654:	4610      	mov	r0, r2
 8001656:	4619      	mov	r1, r3
 8001658:	f7ff fae6 	bl	8000c28 <__aeabi_d2f>
 800165c:	4603      	mov	r3, r0
 800165e:	4a07      	ldr	r2, [pc, #28]	@ (800167c <park+0x180>)
 8001660:	6013      	str	r3, [r2, #0]
}
 8001662:	bf00      	nop
 8001664:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001668:	20000248 	.word	0x20000248
 800166c:	200002a4 	.word	0x200002a4
 8001670:	2000024c 	.word	0x2000024c
 8001674:	20000250 	.word	0x20000250
 8001678:	20000254 	.word	0x20000254
 800167c:	200002b8 	.word	0x200002b8

08001680 <setpwm>:

void setpwm(){
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0

	PWM_A = ((Va / 8 + 1.0)/2 * PWM_PERIOD)*0.3;
 8001684:	4ba0      	ldr	r3, [pc, #640]	@ (8001908 <setpwm+0x288>)
 8001686:	edd3 7a00 	vldr	s15, [r3]
 800168a:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 800168e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001692:	ee16 0a90 	vmov	r0, s13
 8001696:	f7fe ff77 	bl	8000588 <__aeabi_f2d>
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	4b9b      	ldr	r3, [pc, #620]	@ (800190c <setpwm+0x28c>)
 80016a0:	f7fe fe14 	bl	80002cc <__adddf3>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	4610      	mov	r0, r2
 80016aa:	4619      	mov	r1, r3
 80016ac:	f04f 0200 	mov.w	r2, #0
 80016b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80016b4:	f7ff f8ea 	bl	800088c <__aeabi_ddiv>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4610      	mov	r0, r2
 80016be:	4619      	mov	r1, r3
 80016c0:	a389      	add	r3, pc, #548	@ (adr r3, 80018e8 <setpwm+0x268>)
 80016c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c6:	f7fe ffb7 	bl	8000638 <__aeabi_dmul>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	4610      	mov	r0, r2
 80016d0:	4619      	mov	r1, r3
 80016d2:	a387      	add	r3, pc, #540	@ (adr r3, 80018f0 <setpwm+0x270>)
 80016d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d8:	f7fe ffae 	bl	8000638 <__aeabi_dmul>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4610      	mov	r0, r2
 80016e2:	4619      	mov	r1, r3
 80016e4:	f7ff fa80 	bl	8000be8 <__aeabi_d2uiz>
 80016e8:	4603      	mov	r3, r0
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	4b88      	ldr	r3, [pc, #544]	@ (8001910 <setpwm+0x290>)
 80016ee:	801a      	strh	r2, [r3, #0]
	PWM_B = ((Vb / 8 + 1.0)/2 * PWM_PERIOD)*0.3;
 80016f0:	4b88      	ldr	r3, [pc, #544]	@ (8001914 <setpwm+0x294>)
 80016f2:	edd3 7a00 	vldr	s15, [r3]
 80016f6:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 80016fa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80016fe:	ee16 0a90 	vmov	r0, s13
 8001702:	f7fe ff41 	bl	8000588 <__aeabi_f2d>
 8001706:	f04f 0200 	mov.w	r2, #0
 800170a:	4b80      	ldr	r3, [pc, #512]	@ (800190c <setpwm+0x28c>)
 800170c:	f7fe fdde 	bl	80002cc <__adddf3>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4610      	mov	r0, r2
 8001716:	4619      	mov	r1, r3
 8001718:	f04f 0200 	mov.w	r2, #0
 800171c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001720:	f7ff f8b4 	bl	800088c <__aeabi_ddiv>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	4610      	mov	r0, r2
 800172a:	4619      	mov	r1, r3
 800172c:	a36e      	add	r3, pc, #440	@ (adr r3, 80018e8 <setpwm+0x268>)
 800172e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001732:	f7fe ff81 	bl	8000638 <__aeabi_dmul>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4610      	mov	r0, r2
 800173c:	4619      	mov	r1, r3
 800173e:	a36c      	add	r3, pc, #432	@ (adr r3, 80018f0 <setpwm+0x270>)
 8001740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001744:	f7fe ff78 	bl	8000638 <__aeabi_dmul>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	4610      	mov	r0, r2
 800174e:	4619      	mov	r1, r3
 8001750:	f7ff fa4a 	bl	8000be8 <__aeabi_d2uiz>
 8001754:	4603      	mov	r3, r0
 8001756:	b29a      	uxth	r2, r3
 8001758:	4b6f      	ldr	r3, [pc, #444]	@ (8001918 <setpwm+0x298>)
 800175a:	801a      	strh	r2, [r3, #0]
	PWM_C = ((Vc / 8 + 1.0)/2 * PWM_PERIOD)*0.3;
 800175c:	4b6f      	ldr	r3, [pc, #444]	@ (800191c <setpwm+0x29c>)
 800175e:	edd3 7a00 	vldr	s15, [r3]
 8001762:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8001766:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800176a:	ee16 0a90 	vmov	r0, s13
 800176e:	f7fe ff0b 	bl	8000588 <__aeabi_f2d>
 8001772:	f04f 0200 	mov.w	r2, #0
 8001776:	4b65      	ldr	r3, [pc, #404]	@ (800190c <setpwm+0x28c>)
 8001778:	f7fe fda8 	bl	80002cc <__adddf3>
 800177c:	4602      	mov	r2, r0
 800177e:	460b      	mov	r3, r1
 8001780:	4610      	mov	r0, r2
 8001782:	4619      	mov	r1, r3
 8001784:	f04f 0200 	mov.w	r2, #0
 8001788:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800178c:	f7ff f87e 	bl	800088c <__aeabi_ddiv>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4610      	mov	r0, r2
 8001796:	4619      	mov	r1, r3
 8001798:	a353      	add	r3, pc, #332	@ (adr r3, 80018e8 <setpwm+0x268>)
 800179a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179e:	f7fe ff4b 	bl	8000638 <__aeabi_dmul>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4610      	mov	r0, r2
 80017a8:	4619      	mov	r1, r3
 80017aa:	a351      	add	r3, pc, #324	@ (adr r3, 80018f0 <setpwm+0x270>)
 80017ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b0:	f7fe ff42 	bl	8000638 <__aeabi_dmul>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4610      	mov	r0, r2
 80017ba:	4619      	mov	r1, r3
 80017bc:	f7ff fa14 	bl	8000be8 <__aeabi_d2uiz>
 80017c0:	4603      	mov	r3, r0
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	4b56      	ldr	r3, [pc, #344]	@ (8001920 <setpwm+0x2a0>)
 80017c6:	801a      	strh	r2, [r3, #0]


	 current_sq = sqrt(ia * ia + ib * ib + ic * ic);
 80017c8:	4b56      	ldr	r3, [pc, #344]	@ (8001924 <setpwm+0x2a4>)
 80017ca:	ed93 7a00 	vldr	s14, [r3]
 80017ce:	4b55      	ldr	r3, [pc, #340]	@ (8001924 <setpwm+0x2a4>)
 80017d0:	edd3 7a00 	vldr	s15, [r3]
 80017d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017d8:	4b53      	ldr	r3, [pc, #332]	@ (8001928 <setpwm+0x2a8>)
 80017da:	edd3 6a00 	vldr	s13, [r3]
 80017de:	4b52      	ldr	r3, [pc, #328]	@ (8001928 <setpwm+0x2a8>)
 80017e0:	edd3 7a00 	vldr	s15, [r3]
 80017e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017ec:	4b4f      	ldr	r3, [pc, #316]	@ (800192c <setpwm+0x2ac>)
 80017ee:	edd3 6a00 	vldr	s13, [r3]
 80017f2:	4b4e      	ldr	r3, [pc, #312]	@ (800192c <setpwm+0x2ac>)
 80017f4:	edd3 7a00 	vldr	s15, [r3]
 80017f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001800:	ee17 0a90 	vmov	r0, s15
 8001804:	f7fe fec0 	bl	8000588 <__aeabi_f2d>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	ec43 2b10 	vmov	d0, r2, r3
 8001810:	f00a fce2 	bl	800c1d8 <sqrt>
 8001814:	ec53 2b10 	vmov	r2, r3, d0
 8001818:	4610      	mov	r0, r2
 800181a:	4619      	mov	r1, r3
 800181c:	f7ff fa04 	bl	8000c28 <__aeabi_d2f>
 8001820:	4603      	mov	r3, r0
 8001822:	4a43      	ldr	r2, [pc, #268]	@ (8001930 <setpwm+0x2b0>)
 8001824:	6013      	str	r3, [r2, #0]
	 //current_sq = ia * ia + ib * ib + ic * ic;


	if (current_sq > OVERCURRENT_LIMIT_SQ) {
 8001826:	4b42      	ldr	r3, [pc, #264]	@ (8001930 <setpwm+0x2b0>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f7fe feac 	bl	8000588 <__aeabi_f2d>
 8001830:	a331      	add	r3, pc, #196	@ (adr r3, 80018f8 <setpwm+0x278>)
 8001832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001836:	f7ff f98f 	bl	8000b58 <__aeabi_dcmpgt>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d00c      	beq.n	800185a <setpwm+0x1da>
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001840:	4b3c      	ldr	r3, [pc, #240]	@ (8001934 <setpwm+0x2b4>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2200      	movs	r2, #0
 8001846:	635a      	str	r2, [r3, #52]	@ 0x34
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001848:	4b3a      	ldr	r3, [pc, #232]	@ (8001934 <setpwm+0x2b4>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2200      	movs	r2, #0
 800184e:	639a      	str	r2, [r3, #56]	@ 0x38
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001850:	4b38      	ldr	r3, [pc, #224]	@ (8001934 <setpwm+0x2b4>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2200      	movs	r2, #0
 8001856:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001858:	e00e      	b.n	8001878 <setpwm+0x1f8>
	    //HAL_Delay(5000);
	} else {
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM_A);
 800185a:	4b2d      	ldr	r3, [pc, #180]	@ (8001910 <setpwm+0x290>)
 800185c:	881a      	ldrh	r2, [r3, #0]
 800185e:	4b35      	ldr	r3, [pc, #212]	@ (8001934 <setpwm+0x2b4>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	635a      	str	r2, [r3, #52]	@ 0x34
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWM_B);
 8001864:	4b2c      	ldr	r3, [pc, #176]	@ (8001918 <setpwm+0x298>)
 8001866:	881a      	ldrh	r2, [r3, #0]
 8001868:	4b32      	ldr	r3, [pc, #200]	@ (8001934 <setpwm+0x2b4>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	639a      	str	r2, [r3, #56]	@ 0x38
	    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, PWM_C);
 800186e:	4b2c      	ldr	r3, [pc, #176]	@ (8001920 <setpwm+0x2a0>)
 8001870:	881a      	ldrh	r2, [r3, #0]
 8001872:	4b30      	ldr	r3, [pc, #192]	@ (8001934 <setpwm+0x2b4>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	63da      	str	r2, [r3, #60]	@ 0x3c
	}
	if (adc_dma_voltage < 1.5 || adc_dma_voltage > 1.9) {
 8001878:	4b2f      	ldr	r3, [pc, #188]	@ (8001938 <setpwm+0x2b8>)
 800187a:	edd3 7a00 	vldr	s15, [r3]
 800187e:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8001882:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800188a:	d40c      	bmi.n	80018a6 <setpwm+0x226>
 800188c:	4b2a      	ldr	r3, [pc, #168]	@ (8001938 <setpwm+0x2b8>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	f7fe fe79 	bl	8000588 <__aeabi_f2d>
 8001896:	a31a      	add	r3, pc, #104	@ (adr r3, 8001900 <setpwm+0x280>)
 8001898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189c:	f7ff f95c 	bl	8000b58 <__aeabi_dcmpgt>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d00c      	beq.n	80018c0 <setpwm+0x240>
		    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80018a6:	4b23      	ldr	r3, [pc, #140]	@ (8001934 <setpwm+0x2b4>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2200      	movs	r2, #0
 80018ac:	635a      	str	r2, [r3, #52]	@ 0x34
		    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80018ae:	4b21      	ldr	r3, [pc, #132]	@ (8001934 <setpwm+0x2b4>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2200      	movs	r2, #0
 80018b4:	639a      	str	r2, [r3, #56]	@ 0x38
		    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80018b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001934 <setpwm+0x2b4>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2200      	movs	r2, #0
 80018bc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80018be:	e00f      	b.n	80018e0 <setpwm+0x260>
		    //HAL_Delay(5000);

		} else {
		    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM_A);
 80018c0:	4b13      	ldr	r3, [pc, #76]	@ (8001910 <setpwm+0x290>)
 80018c2:	881a      	ldrh	r2, [r3, #0]
 80018c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001934 <setpwm+0x2b4>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	635a      	str	r2, [r3, #52]	@ 0x34
		    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWM_B);
 80018ca:	4b13      	ldr	r3, [pc, #76]	@ (8001918 <setpwm+0x298>)
 80018cc:	881a      	ldrh	r2, [r3, #0]
 80018ce:	4b19      	ldr	r3, [pc, #100]	@ (8001934 <setpwm+0x2b4>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	639a      	str	r2, [r3, #56]	@ 0x38
		    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, PWM_C);
 80018d4:	4b12      	ldr	r3, [pc, #72]	@ (8001920 <setpwm+0x2a0>)
 80018d6:	881a      	ldrh	r2, [r3, #0]
 80018d8:	4b16      	ldr	r3, [pc, #88]	@ (8001934 <setpwm+0x2b4>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	63da      	str	r2, [r3, #60]	@ 0x3c
		}
}
 80018de:	bf00      	nop
 80018e0:	bf00      	nop
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	f3af 8000 	nop.w
 80018e8:	00000000 	.word	0x00000000
 80018ec:	40b76e00 	.word	0x40b76e00
 80018f0:	33333333 	.word	0x33333333
 80018f4:	3fd33333 	.word	0x3fd33333
 80018f8:	70a3d70a 	.word	0x70a3d70a
 80018fc:	3ff70a3d 	.word	0x3ff70a3d
 8001900:	66666666 	.word	0x66666666
 8001904:	3ffe6666 	.word	0x3ffe6666
 8001908:	20000260 	.word	0x20000260
 800190c:	3ff00000 	.word	0x3ff00000
 8001910:	200002e4 	.word	0x200002e4
 8001914:	20000264 	.word	0x20000264
 8001918:	200002e6 	.word	0x200002e6
 800191c:	20000268 	.word	0x20000268
 8001920:	200002e8 	.word	0x200002e8
 8001924:	2000023c 	.word	0x2000023c
 8001928:	20000240 	.word	0x20000240
 800192c:	20000244 	.word	0x20000244
 8001930:	200002c8 	.word	0x200002c8
 8001934:	20000478 	.word	0x20000478
 8001938:	200002ac 	.word	0x200002ac

0800193c <update_PID>:

void update_PID()
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
	if ((fabs(error_pos) >= 0.0f) && (fabs(error_pos) <= 1.1f))//(6.0f * (float)M_PI) ))
 8001940:	4bb1      	ldr	r3, [pc, #708]	@ (8001c08 <update_PID+0x2cc>)
 8001942:	edd3 7a00 	vldr	s15, [r3]
 8001946:	eef0 7ae7 	vabs.f32	s15, s15
 800194a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800194e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001952:	f2c0 80e8 	blt.w	8001b26 <update_PID+0x1ea>
 8001956:	4bac      	ldr	r3, [pc, #688]	@ (8001c08 <update_PID+0x2cc>)
 8001958:	edd3 7a00 	vldr	s15, [r3]
 800195c:	eef0 7ae7 	vabs.f32	s15, s15
 8001960:	ed9f 7aaa 	vldr	s14, [pc, #680]	@ 8001c0c <update_PID+0x2d0>
 8001964:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800196c:	f200 80db 	bhi.w	8001b26 <update_PID+0x1ea>
//		else
//		{
//		Ki = 7;
//		Kp = 2;
//		}
		Kp_speed = 20.0f;
 8001970:	4ba7      	ldr	r3, [pc, #668]	@ (8001c10 <update_PID+0x2d4>)
 8001972:	4aa8      	ldr	r2, [pc, #672]	@ (8001c14 <update_PID+0x2d8>)
 8001974:	601a      	str	r2, [r3, #0]
				Ki_speed = 0.0f;
 8001976:	4ba8      	ldr	r3, [pc, #672]	@ (8001c18 <update_PID+0x2dc>)
 8001978:	f04f 0200 	mov.w	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
				Kd_speed = 0.0f;
 800197e:	4ba7      	ldr	r3, [pc, #668]	@ (8001c1c <update_PID+0x2e0>)
 8001980:	f04f 0200 	mov.w	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
				Ki_pos = 2.0f;
 8001986:	4ba6      	ldr	r3, [pc, #664]	@ (8001c20 <update_PID+0x2e4>)
 8001988:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800198c:	601a      	str	r2, [r3, #0]
				Kp_pos = 100.0f;
 800198e:	4ba5      	ldr	r3, [pc, #660]	@ (8001c24 <update_PID+0x2e8>)
 8001990:	4aa5      	ldr	r2, [pc, #660]	@ (8001c28 <update_PID+0x2ec>)
 8001992:	601a      	str	r2, [r3, #0]
				Kd_pos = 0.0f;
 8001994:	4ba5      	ldr	r3, [pc, #660]	@ (8001c2c <update_PID+0x2f0>)
 8001996:	f04f 0200 	mov.w	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
				if((velocity_ref > -200 && velocity_ref <= 0) || (velocity_ref > 0 && velocity_ref <= 200))
 800199c:	4ba4      	ldr	r3, [pc, #656]	@ (8001c30 <update_PID+0x2f4>)
 800199e:	edd3 7a00 	vldr	s15, [r3]
 80019a2:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 8001c34 <update_PID+0x2f8>
 80019a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ae:	dd07      	ble.n	80019c0 <update_PID+0x84>
 80019b0:	4b9f      	ldr	r3, [pc, #636]	@ (8001c30 <update_PID+0x2f4>)
 80019b2:	edd3 7a00 	vldr	s15, [r3]
 80019b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019be:	d911      	bls.n	80019e4 <update_PID+0xa8>
 80019c0:	4b9b      	ldr	r3, [pc, #620]	@ (8001c30 <update_PID+0x2f4>)
 80019c2:	edd3 7a00 	vldr	s15, [r3]
 80019c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ce:	dd11      	ble.n	80019f4 <update_PID+0xb8>
 80019d0:	4b97      	ldr	r3, [pc, #604]	@ (8001c30 <update_PID+0x2f4>)
 80019d2:	edd3 7a00 	vldr	s15, [r3]
 80019d6:	ed9f 7a98 	vldr	s14, [pc, #608]	@ 8001c38 <update_PID+0x2fc>
 80019da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e2:	d807      	bhi.n	80019f4 <update_PID+0xb8>
				{
				Ki = 4.5;
 80019e4:	4b95      	ldr	r3, [pc, #596]	@ (8001c3c <update_PID+0x300>)
 80019e6:	4a96      	ldr	r2, [pc, #600]	@ (8001c40 <update_PID+0x304>)
 80019e8:	601a      	str	r2, [r3, #0]
				Kp = 1.0;
 80019ea:	4b96      	ldr	r3, [pc, #600]	@ (8001c44 <update_PID+0x308>)
 80019ec:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	e097      	b.n	8001b24 <update_PID+0x1e8>
				}
				else if((velocity_ref > -500 && velocity_ref <= -200)||(velocity_ref > 200 && velocity_ref <= 500))
 80019f4:	4b8e      	ldr	r3, [pc, #568]	@ (8001c30 <update_PID+0x2f4>)
 80019f6:	edd3 7a00 	vldr	s15, [r3]
 80019fa:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 8001c48 <update_PID+0x30c>
 80019fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a06:	dd09      	ble.n	8001a1c <update_PID+0xe0>
 8001a08:	4b89      	ldr	r3, [pc, #548]	@ (8001c30 <update_PID+0x2f4>)
 8001a0a:	edd3 7a00 	vldr	s15, [r3]
 8001a0e:	ed9f 7a89 	vldr	s14, [pc, #548]	@ 8001c34 <update_PID+0x2f8>
 8001a12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a1a:	d913      	bls.n	8001a44 <update_PID+0x108>
 8001a1c:	4b84      	ldr	r3, [pc, #528]	@ (8001c30 <update_PID+0x2f4>)
 8001a1e:	edd3 7a00 	vldr	s15, [r3]
 8001a22:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8001c38 <update_PID+0x2fc>
 8001a26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a2e:	dd11      	ble.n	8001a54 <update_PID+0x118>
 8001a30:	4b7f      	ldr	r3, [pc, #508]	@ (8001c30 <update_PID+0x2f4>)
 8001a32:	edd3 7a00 	vldr	s15, [r3]
 8001a36:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8001c4c <update_PID+0x310>
 8001a3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a42:	d807      	bhi.n	8001a54 <update_PID+0x118>
				{
				 Ki = 7.0;
 8001a44:	4b7d      	ldr	r3, [pc, #500]	@ (8001c3c <update_PID+0x300>)
 8001a46:	4a82      	ldr	r2, [pc, #520]	@ (8001c50 <update_PID+0x314>)
 8001a48:	601a      	str	r2, [r3, #0]
				 Kp = 0.5;
 8001a4a:	4b7e      	ldr	r3, [pc, #504]	@ (8001c44 <update_PID+0x308>)
 8001a4c:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	e067      	b.n	8001b24 <update_PID+0x1e8>
				 }
				else if((velocity_ref > -1000 && velocity_ref <= -500)||(velocity_ref > 500 && velocity_ref <= 1000))
 8001a54:	4b76      	ldr	r3, [pc, #472]	@ (8001c30 <update_PID+0x2f4>)
 8001a56:	edd3 7a00 	vldr	s15, [r3]
 8001a5a:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 8001c54 <update_PID+0x318>
 8001a5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a66:	dd09      	ble.n	8001a7c <update_PID+0x140>
 8001a68:	4b71      	ldr	r3, [pc, #452]	@ (8001c30 <update_PID+0x2f4>)
 8001a6a:	edd3 7a00 	vldr	s15, [r3]
 8001a6e:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 8001c48 <update_PID+0x30c>
 8001a72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a7a:	d913      	bls.n	8001aa4 <update_PID+0x168>
 8001a7c:	4b6c      	ldr	r3, [pc, #432]	@ (8001c30 <update_PID+0x2f4>)
 8001a7e:	edd3 7a00 	vldr	s15, [r3]
 8001a82:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 8001c4c <update_PID+0x310>
 8001a86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a8e:	dd11      	ble.n	8001ab4 <update_PID+0x178>
 8001a90:	4b67      	ldr	r3, [pc, #412]	@ (8001c30 <update_PID+0x2f4>)
 8001a92:	edd3 7a00 	vldr	s15, [r3]
 8001a96:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 8001c58 <update_PID+0x31c>
 8001a9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa2:	d807      	bhi.n	8001ab4 <update_PID+0x178>
				{
				 Ki = 9.0;
 8001aa4:	4b65      	ldr	r3, [pc, #404]	@ (8001c3c <update_PID+0x300>)
 8001aa6:	4a6d      	ldr	r2, [pc, #436]	@ (8001c5c <update_PID+0x320>)
 8001aa8:	601a      	str	r2, [r3, #0]
				 Kp = 0.5;
 8001aaa:	4b66      	ldr	r3, [pc, #408]	@ (8001c44 <update_PID+0x308>)
 8001aac:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	e037      	b.n	8001b24 <update_PID+0x1e8>
				 }
				else if((velocity_ref > -1500 && velocity_ref <= -1000)||(velocity_ref > 1000 && velocity_ref <= 1500))
 8001ab4:	4b5e      	ldr	r3, [pc, #376]	@ (8001c30 <update_PID+0x2f4>)
 8001ab6:	edd3 7a00 	vldr	s15, [r3]
 8001aba:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8001c60 <update_PID+0x324>
 8001abe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac6:	dd09      	ble.n	8001adc <update_PID+0x1a0>
 8001ac8:	4b59      	ldr	r3, [pc, #356]	@ (8001c30 <update_PID+0x2f4>)
 8001aca:	edd3 7a00 	vldr	s15, [r3]
 8001ace:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 8001c54 <update_PID+0x318>
 8001ad2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ada:	d913      	bls.n	8001b04 <update_PID+0x1c8>
 8001adc:	4b54      	ldr	r3, [pc, #336]	@ (8001c30 <update_PID+0x2f4>)
 8001ade:	edd3 7a00 	vldr	s15, [r3]
 8001ae2:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8001c58 <update_PID+0x31c>
 8001ae6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aee:	dd11      	ble.n	8001b14 <update_PID+0x1d8>
 8001af0:	4b4f      	ldr	r3, [pc, #316]	@ (8001c30 <update_PID+0x2f4>)
 8001af2:	edd3 7a00 	vldr	s15, [r3]
 8001af6:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8001c64 <update_PID+0x328>
 8001afa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b02:	d807      	bhi.n	8001b14 <update_PID+0x1d8>
				{
				Ki = 13;
 8001b04:	4b4d      	ldr	r3, [pc, #308]	@ (8001c3c <update_PID+0x300>)
 8001b06:	4a58      	ldr	r2, [pc, #352]	@ (8001c68 <update_PID+0x32c>)
 8001b08:	601a      	str	r2, [r3, #0]
				Kp = 0.5;
 8001b0a:	4b4e      	ldr	r3, [pc, #312]	@ (8001c44 <update_PID+0x308>)
 8001b0c:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	e007      	b.n	8001b24 <update_PID+0x1e8>
				}
				else
				{
				Ki = 15;
 8001b14:	4b49      	ldr	r3, [pc, #292]	@ (8001c3c <update_PID+0x300>)
 8001b16:	4a55      	ldr	r2, [pc, #340]	@ (8001c6c <update_PID+0x330>)
 8001b18:	601a      	str	r2, [r3, #0]
				Kp = 0.5;
 8001b1a:	4b4a      	ldr	r3, [pc, #296]	@ (8001c44 <update_PID+0x308>)
 8001b1c:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8001b20:	601a      	str	r2, [r3, #0]
				if((velocity_ref > -200 && velocity_ref <= 0) || (velocity_ref > 0 && velocity_ref <= 200))
 8001b22:	e112      	b.n	8001d4a <update_PID+0x40e>
 8001b24:	e111      	b.n	8001d4a <update_PID+0x40e>
				}
	}
else //if  ( (fabs(error_pos) > (6.0f * (float)M_PI)))
	{
		Kp_speed = 10.0f;
 8001b26:	4b3a      	ldr	r3, [pc, #232]	@ (8001c10 <update_PID+0x2d4>)
 8001b28:	4a51      	ldr	r2, [pc, #324]	@ (8001c70 <update_PID+0x334>)
 8001b2a:	601a      	str	r2, [r3, #0]
		Ki_speed = 0.0f;
 8001b2c:	4b3a      	ldr	r3, [pc, #232]	@ (8001c18 <update_PID+0x2dc>)
 8001b2e:	f04f 0200 	mov.w	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
		Kd_speed = 0.0f;
 8001b34:	4b39      	ldr	r3, [pc, #228]	@ (8001c1c <update_PID+0x2e0>)
 8001b36:	f04f 0200 	mov.w	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
		Ki_pos = 5.0f;
 8001b3c:	4b38      	ldr	r3, [pc, #224]	@ (8001c20 <update_PID+0x2e4>)
 8001b3e:	4a4d      	ldr	r2, [pc, #308]	@ (8001c74 <update_PID+0x338>)
 8001b40:	601a      	str	r2, [r3, #0]
		Kp_pos = 100.0f;
 8001b42:	4b38      	ldr	r3, [pc, #224]	@ (8001c24 <update_PID+0x2e8>)
 8001b44:	4a38      	ldr	r2, [pc, #224]	@ (8001c28 <update_PID+0x2ec>)
 8001b46:	601a      	str	r2, [r3, #0]
		Kd_pos = 0.5f;
 8001b48:	4b38      	ldr	r3, [pc, #224]	@ (8001c2c <update_PID+0x2f0>)
 8001b4a:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8001b4e:	601a      	str	r2, [r3, #0]
		if((velocity_ref > -200 && velocity_ref <= 0) || (velocity_ref > 0 && velocity_ref <= 200))
 8001b50:	4b37      	ldr	r3, [pc, #220]	@ (8001c30 <update_PID+0x2f4>)
 8001b52:	edd3 7a00 	vldr	s15, [r3]
 8001b56:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8001c34 <update_PID+0x2f8>
 8001b5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b62:	dd07      	ble.n	8001b74 <update_PID+0x238>
 8001b64:	4b32      	ldr	r3, [pc, #200]	@ (8001c30 <update_PID+0x2f4>)
 8001b66:	edd3 7a00 	vldr	s15, [r3]
 8001b6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b72:	d911      	bls.n	8001b98 <update_PID+0x25c>
 8001b74:	4b2e      	ldr	r3, [pc, #184]	@ (8001c30 <update_PID+0x2f4>)
 8001b76:	edd3 7a00 	vldr	s15, [r3]
 8001b7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b82:	dd10      	ble.n	8001ba6 <update_PID+0x26a>
 8001b84:	4b2a      	ldr	r3, [pc, #168]	@ (8001c30 <update_PID+0x2f4>)
 8001b86:	edd3 7a00 	vldr	s15, [r3]
 8001b8a:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8001c38 <update_PID+0x2fc>
 8001b8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b96:	d806      	bhi.n	8001ba6 <update_PID+0x26a>
		{
		Ki = 7.5;
 8001b98:	4b28      	ldr	r3, [pc, #160]	@ (8001c3c <update_PID+0x300>)
 8001b9a:	4a37      	ldr	r2, [pc, #220]	@ (8001c78 <update_PID+0x33c>)
 8001b9c:	601a      	str	r2, [r3, #0]
		Kp = 5.5;
 8001b9e:	4b29      	ldr	r3, [pc, #164]	@ (8001c44 <update_PID+0x308>)
 8001ba0:	4a36      	ldr	r2, [pc, #216]	@ (8001c7c <update_PID+0x340>)
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	e0d1      	b.n	8001d4a <update_PID+0x40e>
		}
		else if((velocity_ref > -500 && velocity_ref <= -200)||(velocity_ref > 200 && velocity_ref <= 500))
 8001ba6:	4b22      	ldr	r3, [pc, #136]	@ (8001c30 <update_PID+0x2f4>)
 8001ba8:	edd3 7a00 	vldr	s15, [r3]
 8001bac:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001c48 <update_PID+0x30c>
 8001bb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb8:	dd09      	ble.n	8001bce <update_PID+0x292>
 8001bba:	4b1d      	ldr	r3, [pc, #116]	@ (8001c30 <update_PID+0x2f4>)
 8001bbc:	edd3 7a00 	vldr	s15, [r3]
 8001bc0:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001c34 <update_PID+0x2f8>
 8001bc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bcc:	d913      	bls.n	8001bf6 <update_PID+0x2ba>
 8001bce:	4b18      	ldr	r3, [pc, #96]	@ (8001c30 <update_PID+0x2f4>)
 8001bd0:	edd3 7a00 	vldr	s15, [r3]
 8001bd4:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8001c38 <update_PID+0x2fc>
 8001bd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be0:	dd4e      	ble.n	8001c80 <update_PID+0x344>
 8001be2:	4b13      	ldr	r3, [pc, #76]	@ (8001c30 <update_PID+0x2f4>)
 8001be4:	edd3 7a00 	vldr	s15, [r3]
 8001be8:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8001c4c <update_PID+0x310>
 8001bec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf4:	d844      	bhi.n	8001c80 <update_PID+0x344>
		{
		 Ki = 8.0;
 8001bf6:	4b11      	ldr	r3, [pc, #68]	@ (8001c3c <update_PID+0x300>)
 8001bf8:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8001bfc:	601a      	str	r2, [r3, #0]
		 Kp = 5.5;
 8001bfe:	4b11      	ldr	r3, [pc, #68]	@ (8001c44 <update_PID+0x308>)
 8001c00:	4a1e      	ldr	r2, [pc, #120]	@ (8001c7c <update_PID+0x340>)
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	e0a1      	b.n	8001d4a <update_PID+0x40e>
 8001c06:	bf00      	nop
 8001c08:	20000290 	.word	0x20000290
 8001c0c:	3f8ccccd 	.word	0x3f8ccccd
 8001c10:	20000010 	.word	0x20000010
 8001c14:	41a00000 	.word	0x41a00000
 8001c18:	20000014 	.word	0x20000014
 8001c1c:	20000018 	.word	0x20000018
 8001c20:	2000001c 	.word	0x2000001c
 8001c24:	20000020 	.word	0x20000020
 8001c28:	42c80000 	.word	0x42c80000
 8001c2c:	20000024 	.word	0x20000024
 8001c30:	20000004 	.word	0x20000004
 8001c34:	c3480000 	.word	0xc3480000
 8001c38:	43480000 	.word	0x43480000
 8001c3c:	20000008 	.word	0x20000008
 8001c40:	40900000 	.word	0x40900000
 8001c44:	2000000c 	.word	0x2000000c
 8001c48:	c3fa0000 	.word	0xc3fa0000
 8001c4c:	43fa0000 	.word	0x43fa0000
 8001c50:	40e00000 	.word	0x40e00000
 8001c54:	c47a0000 	.word	0xc47a0000
 8001c58:	447a0000 	.word	0x447a0000
 8001c5c:	41100000 	.word	0x41100000
 8001c60:	c4bb8000 	.word	0xc4bb8000
 8001c64:	44bb8000 	.word	0x44bb8000
 8001c68:	41500000 	.word	0x41500000
 8001c6c:	41700000 	.word	0x41700000
 8001c70:	41200000 	.word	0x41200000
 8001c74:	40a00000 	.word	0x40a00000
 8001c78:	40f00000 	.word	0x40f00000
 8001c7c:	40b00000 	.word	0x40b00000
		 }
		else if((velocity_ref > -1000 && velocity_ref <= -500)||(velocity_ref > 500 && velocity_ref <= 1000))
 8001c80:	4b34      	ldr	r3, [pc, #208]	@ (8001d54 <update_PID+0x418>)
 8001c82:	edd3 7a00 	vldr	s15, [r3]
 8001c86:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8001d58 <update_PID+0x41c>
 8001c8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c92:	dd09      	ble.n	8001ca8 <update_PID+0x36c>
 8001c94:	4b2f      	ldr	r3, [pc, #188]	@ (8001d54 <update_PID+0x418>)
 8001c96:	edd3 7a00 	vldr	s15, [r3]
 8001c9a:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001d5c <update_PID+0x420>
 8001c9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca6:	d913      	bls.n	8001cd0 <update_PID+0x394>
 8001ca8:	4b2a      	ldr	r3, [pc, #168]	@ (8001d54 <update_PID+0x418>)
 8001caa:	edd3 7a00 	vldr	s15, [r3]
 8001cae:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8001d60 <update_PID+0x424>
 8001cb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cba:	dd10      	ble.n	8001cde <update_PID+0x3a2>
 8001cbc:	4b25      	ldr	r3, [pc, #148]	@ (8001d54 <update_PID+0x418>)
 8001cbe:	edd3 7a00 	vldr	s15, [r3]
 8001cc2:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001d64 <update_PID+0x428>
 8001cc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cce:	d806      	bhi.n	8001cde <update_PID+0x3a2>
		{
		 Ki = 9.0;
 8001cd0:	4b25      	ldr	r3, [pc, #148]	@ (8001d68 <update_PID+0x42c>)
 8001cd2:	4a26      	ldr	r2, [pc, #152]	@ (8001d6c <update_PID+0x430>)
 8001cd4:	601a      	str	r2, [r3, #0]
		 Kp = 5.5;
 8001cd6:	4b26      	ldr	r3, [pc, #152]	@ (8001d70 <update_PID+0x434>)
 8001cd8:	4a26      	ldr	r2, [pc, #152]	@ (8001d74 <update_PID+0x438>)
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	e035      	b.n	8001d4a <update_PID+0x40e>
		 }
		else if((velocity_ref > -1500 && velocity_ref <= -1000)||(velocity_ref > 1000 && velocity_ref <= 1500))
 8001cde:	4b1d      	ldr	r3, [pc, #116]	@ (8001d54 <update_PID+0x418>)
 8001ce0:	edd3 7a00 	vldr	s15, [r3]
 8001ce4:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8001d78 <update_PID+0x43c>
 8001ce8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf0:	dd09      	ble.n	8001d06 <update_PID+0x3ca>
 8001cf2:	4b18      	ldr	r3, [pc, #96]	@ (8001d54 <update_PID+0x418>)
 8001cf4:	edd3 7a00 	vldr	s15, [r3]
 8001cf8:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001d58 <update_PID+0x41c>
 8001cfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d04:	d913      	bls.n	8001d2e <update_PID+0x3f2>
 8001d06:	4b13      	ldr	r3, [pc, #76]	@ (8001d54 <update_PID+0x418>)
 8001d08:	edd3 7a00 	vldr	s15, [r3]
 8001d0c:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001d64 <update_PID+0x428>
 8001d10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d18:	dd10      	ble.n	8001d3c <update_PID+0x400>
 8001d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d54 <update_PID+0x418>)
 8001d1c:	edd3 7a00 	vldr	s15, [r3]
 8001d20:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001d7c <update_PID+0x440>
 8001d24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d2c:	d806      	bhi.n	8001d3c <update_PID+0x400>
		{
		Ki = 13;
 8001d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d68 <update_PID+0x42c>)
 8001d30:	4a13      	ldr	r2, [pc, #76]	@ (8001d80 <update_PID+0x444>)
 8001d32:	601a      	str	r2, [r3, #0]
		Kp = 5.5;
 8001d34:	4b0e      	ldr	r3, [pc, #56]	@ (8001d70 <update_PID+0x434>)
 8001d36:	4a0f      	ldr	r2, [pc, #60]	@ (8001d74 <update_PID+0x438>)
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	e006      	b.n	8001d4a <update_PID+0x40e>
		}
		else
		{
		Ki = 13;
 8001d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d68 <update_PID+0x42c>)
 8001d3e:	4a10      	ldr	r2, [pc, #64]	@ (8001d80 <update_PID+0x444>)
 8001d40:	601a      	str	r2, [r3, #0]
		Kp = 5.5;
 8001d42:	4b0b      	ldr	r3, [pc, #44]	@ (8001d70 <update_PID+0x434>)
 8001d44:	4a0b      	ldr	r2, [pc, #44]	@ (8001d74 <update_PID+0x438>)
 8001d46:	601a      	str	r2, [r3, #0]
		}
	}

}
 8001d48:	bf00      	nop
 8001d4a:	bf00      	nop
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	20000004 	.word	0x20000004
 8001d58:	c47a0000 	.word	0xc47a0000
 8001d5c:	c3fa0000 	.word	0xc3fa0000
 8001d60:	43fa0000 	.word	0x43fa0000
 8001d64:	447a0000 	.word	0x447a0000
 8001d68:	20000008 	.word	0x20000008
 8001d6c:	41100000 	.word	0x41100000
 8001d70:	2000000c 	.word	0x2000000c
 8001d74:	40b00000 	.word	0x40b00000
 8001d78:	c4bb8000 	.word	0xc4bb8000
 8001d7c:	44bb8000 	.word	0x44bb8000
 8001d80:	41500000 	.word	0x41500000
 8001d84:	00000000 	.word	0x00000000

08001d88 <position_loop>:


void position_loop()
{
 8001d88:	b5b0      	push	{r4, r5, r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
	update_position_dt();
 8001d8e:	f7ff f963 	bl	8001058 <update_position_dt>
	    static float raw_angle_prev = 0;
	    static int turn_count = 0;

	    static float velocity_ref_prev = 0;

	     raw_angle = AS5147U_GetAngleRad();
 8001d92:	f7ff fa19 	bl	80011c8 <AS5147U_GetAngleRad>
 8001d96:	eef0 7a40 	vmov.f32	s15, s0
 8001d9a:	4b8f      	ldr	r3, [pc, #572]	@ (8001fd8 <position_loop+0x250>)
 8001d9c:	edc3 7a00 	vstr	s15, [r3]
	     angle_deg = raw_angle * (180.0f / M_PI);
 8001da0:	4b8d      	ldr	r3, [pc, #564]	@ (8001fd8 <position_loop+0x250>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7fe fbef 	bl	8000588 <__aeabi_f2d>
 8001daa:	a385      	add	r3, pc, #532	@ (adr r3, 8001fc0 <position_loop+0x238>)
 8001dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db0:	f7fe fc42 	bl	8000638 <__aeabi_dmul>
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	4610      	mov	r0, r2
 8001dba:	4619      	mov	r1, r3
 8001dbc:	f7fe ff34 	bl	8000c28 <__aeabi_d2f>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	4a86      	ldr	r2, [pc, #536]	@ (8001fdc <position_loop+0x254>)
 8001dc4:	6013      	str	r3, [r2, #0]
	    float delta = raw_angle - raw_angle_prev;
 8001dc6:	4b84      	ldr	r3, [pc, #528]	@ (8001fd8 <position_loop+0x250>)
 8001dc8:	ed93 7a00 	vldr	s14, [r3]
 8001dcc:	4b84      	ldr	r3, [pc, #528]	@ (8001fe0 <position_loop+0x258>)
 8001dce:	edd3 7a00 	vldr	s15, [r3]
 8001dd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dd6:	edc7 7a03 	vstr	s15, [r7, #12]

	    if (delta > M_PI) turn_count--;
 8001dda:	68f8      	ldr	r0, [r7, #12]
 8001ddc:	f7fe fbd4 	bl	8000588 <__aeabi_f2d>
 8001de0:	a379      	add	r3, pc, #484	@ (adr r3, 8001fc8 <position_loop+0x240>)
 8001de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de6:	f7fe feb7 	bl	8000b58 <__aeabi_dcmpgt>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d005      	beq.n	8001dfc <position_loop+0x74>
 8001df0:	4b7c      	ldr	r3, [pc, #496]	@ (8001fe4 <position_loop+0x25c>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	3b01      	subs	r3, #1
 8001df6:	4a7b      	ldr	r2, [pc, #492]	@ (8001fe4 <position_loop+0x25c>)
 8001df8:	6013      	str	r3, [r2, #0]
 8001dfa:	e00f      	b.n	8001e1c <position_loop+0x94>
	    else if (delta < -M_PI) turn_count++;
 8001dfc:	68f8      	ldr	r0, [r7, #12]
 8001dfe:	f7fe fbc3 	bl	8000588 <__aeabi_f2d>
 8001e02:	a373      	add	r3, pc, #460	@ (adr r3, 8001fd0 <position_loop+0x248>)
 8001e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e08:	f7fe fe88 	bl	8000b1c <__aeabi_dcmplt>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d004      	beq.n	8001e1c <position_loop+0x94>
 8001e12:	4b74      	ldr	r3, [pc, #464]	@ (8001fe4 <position_loop+0x25c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	3301      	adds	r3, #1
 8001e18:	4a72      	ldr	r2, [pc, #456]	@ (8001fe4 <position_loop+0x25c>)
 8001e1a:	6013      	str	r3, [r2, #0]

	    raw_angle_prev = raw_angle;
 8001e1c:	4b6e      	ldr	r3, [pc, #440]	@ (8001fd8 <position_loop+0x250>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a6f      	ldr	r2, [pc, #444]	@ (8001fe0 <position_loop+0x258>)
 8001e22:	6013      	str	r3, [r2, #0]

	    theta_now = raw_angle + turn_count * 2.0f * M_PI;
 8001e24:	4b6c      	ldr	r3, [pc, #432]	@ (8001fd8 <position_loop+0x250>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7fe fbad 	bl	8000588 <__aeabi_f2d>
 8001e2e:	4604      	mov	r4, r0
 8001e30:	460d      	mov	r5, r1
 8001e32:	4b6c      	ldr	r3, [pc, #432]	@ (8001fe4 <position_loop+0x25c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	ee07 3a90 	vmov	s15, r3
 8001e3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e3e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e42:	ee17 0a90 	vmov	r0, s15
 8001e46:	f7fe fb9f 	bl	8000588 <__aeabi_f2d>
 8001e4a:	a35f      	add	r3, pc, #380	@ (adr r3, 8001fc8 <position_loop+0x240>)
 8001e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e50:	f7fe fbf2 	bl	8000638 <__aeabi_dmul>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	4620      	mov	r0, r4
 8001e5a:	4629      	mov	r1, r5
 8001e5c:	f7fe fa36 	bl	80002cc <__adddf3>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4610      	mov	r0, r2
 8001e66:	4619      	mov	r1, r3
 8001e68:	f7fe fede 	bl	8000c28 <__aeabi_d2f>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	4a5e      	ldr	r2, [pc, #376]	@ (8001fe8 <position_loop+0x260>)
 8001e70:	6013      	str	r3, [r2, #0]
	    error_pos = theta_ref - theta_now;
 8001e72:	4b5e      	ldr	r3, [pc, #376]	@ (8001fec <position_loop+0x264>)
 8001e74:	ed93 7a00 	vldr	s14, [r3]
 8001e78:	4b5b      	ldr	r3, [pc, #364]	@ (8001fe8 <position_loop+0x260>)
 8001e7a:	edd3 7a00 	vldr	s15, [r3]
 8001e7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e82:	4b5b      	ldr	r3, [pc, #364]	@ (8001ff0 <position_loop+0x268>)
 8001e84:	edc3 7a00 	vstr	s15, [r3]

	    error_pos_sum += error_pos * position_dt;
 8001e88:	4b59      	ldr	r3, [pc, #356]	@ (8001ff0 <position_loop+0x268>)
 8001e8a:	ed93 7a00 	vldr	s14, [r3]
 8001e8e:	4b59      	ldr	r3, [pc, #356]	@ (8001ff4 <position_loop+0x26c>)
 8001e90:	edd3 7a00 	vldr	s15, [r3]
 8001e94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e98:	4b57      	ldr	r3, [pc, #348]	@ (8001ff8 <position_loop+0x270>)
 8001e9a:	edd3 7a00 	vldr	s15, [r3]
 8001e9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ea2:	4b55      	ldr	r3, [pc, #340]	@ (8001ff8 <position_loop+0x270>)
 8001ea4:	edc3 7a00 	vstr	s15, [r3]
	    error_pos_sum = fminf(fmaxf(error_pos_sum, -0.5f), 0.5f);
 8001ea8:	4b53      	ldr	r3, [pc, #332]	@ (8001ff8 <position_loop+0x270>)
 8001eaa:	edd3 7a00 	vldr	s15, [r3]
 8001eae:	eefe 0a00 	vmov.f32	s1, #224	@ 0xbf000000 -0.5
 8001eb2:	eeb0 0a67 	vmov.f32	s0, s15
 8001eb6:	f00a fa63 	bl	800c380 <fmaxf>
 8001eba:	eef0 7a40 	vmov.f32	s15, s0
 8001ebe:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 8001ec2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ec6:	f00a fa78 	bl	800c3ba <fminf>
 8001eca:	eef0 7a40 	vmov.f32	s15, s0
 8001ece:	4b4a      	ldr	r3, [pc, #296]	@ (8001ff8 <position_loop+0x270>)
 8001ed0:	edc3 7a00 	vstr	s15, [r3]

	    float velocity_unclamped = Kp_pos * error_pos + Ki_pos * error_pos_sum;// + Kd_pos * derivative_pos;
 8001ed4:	4b49      	ldr	r3, [pc, #292]	@ (8001ffc <position_loop+0x274>)
 8001ed6:	ed93 7a00 	vldr	s14, [r3]
 8001eda:	4b45      	ldr	r3, [pc, #276]	@ (8001ff0 <position_loop+0x268>)
 8001edc:	edd3 7a00 	vldr	s15, [r3]
 8001ee0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ee4:	4b46      	ldr	r3, [pc, #280]	@ (8002000 <position_loop+0x278>)
 8001ee6:	edd3 6a00 	vldr	s13, [r3]
 8001eea:	4b43      	ldr	r3, [pc, #268]	@ (8001ff8 <position_loop+0x270>)
 8001eec:	edd3 7a00 	vldr	s15, [r3]
 8001ef0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ef4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ef8:	edc7 7a02 	vstr	s15, [r7, #8]
	    velocity_unclamped = fminf(fmaxf(velocity_unclamped, -1700), 1700);
 8001efc:	eddf 0a41 	vldr	s1, [pc, #260]	@ 8002004 <position_loop+0x27c>
 8001f00:	ed97 0a02 	vldr	s0, [r7, #8]
 8001f04:	f00a fa3c 	bl	800c380 <fmaxf>
 8001f08:	eef0 7a40 	vmov.f32	s15, s0
 8001f0c:	eddf 0a3e 	vldr	s1, [pc, #248]	@ 8002008 <position_loop+0x280>
 8001f10:	eeb0 0a67 	vmov.f32	s0, s15
 8001f14:	f00a fa51 	bl	800c3ba <fminf>
 8001f18:	ed87 0a02 	vstr	s0, [r7, #8]


	    float velocity_ramp = 5000.0f;
 8001f1c:	4b3b      	ldr	r3, [pc, #236]	@ (800200c <position_loop+0x284>)
 8001f1e:	607b      	str	r3, [r7, #4]
	    float velocity_rate = (velocity_unclamped - velocity_ref_prev) / position_dt;
 8001f20:	4b3b      	ldr	r3, [pc, #236]	@ (8002010 <position_loop+0x288>)
 8001f22:	edd3 7a00 	vldr	s15, [r3]
 8001f26:	ed97 7a02 	vldr	s14, [r7, #8]
 8001f2a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001f2e:	4b31      	ldr	r3, [pc, #196]	@ (8001ff4 <position_loop+0x26c>)
 8001f30:	ed93 7a00 	vldr	s14, [r3]
 8001f34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f38:	edc7 7a00 	vstr	s15, [r7]

	    if (velocity_rate > velocity_ramp)
 8001f3c:	ed97 7a00 	vldr	s14, [r7]
 8001f40:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f4c:	dd0f      	ble.n	8001f6e <position_loop+0x1e6>
	        velocity_ref = velocity_ref_prev + velocity_ramp * position_dt;
 8001f4e:	4b29      	ldr	r3, [pc, #164]	@ (8001ff4 <position_loop+0x26c>)
 8001f50:	ed93 7a00 	vldr	s14, [r3]
 8001f54:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f5c:	4b2c      	ldr	r3, [pc, #176]	@ (8002010 <position_loop+0x288>)
 8001f5e:	edd3 7a00 	vldr	s15, [r3]
 8001f62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f66:	4b2b      	ldr	r3, [pc, #172]	@ (8002014 <position_loop+0x28c>)
 8001f68:	edc3 7a00 	vstr	s15, [r3]
 8001f6c:	e01d      	b.n	8001faa <position_loop+0x222>
	    else if (velocity_rate < -velocity_ramp)
 8001f6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f72:	eef1 7a67 	vneg.f32	s15, s15
 8001f76:	ed97 7a00 	vldr	s14, [r7]
 8001f7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f82:	d50f      	bpl.n	8001fa4 <position_loop+0x21c>
	        velocity_ref = velocity_ref_prev - velocity_ramp * position_dt;
 8001f84:	4b22      	ldr	r3, [pc, #136]	@ (8002010 <position_loop+0x288>)
 8001f86:	ed93 7a00 	vldr	s14, [r3]
 8001f8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ff4 <position_loop+0x26c>)
 8001f8c:	edd3 6a00 	vldr	s13, [r3]
 8001f90:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f9c:	4b1d      	ldr	r3, [pc, #116]	@ (8002014 <position_loop+0x28c>)
 8001f9e:	edc3 7a00 	vstr	s15, [r3]
 8001fa2:	e002      	b.n	8001faa <position_loop+0x222>
	    else
	        velocity_ref = velocity_unclamped;
 8001fa4:	4a1b      	ldr	r2, [pc, #108]	@ (8002014 <position_loop+0x28c>)
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	6013      	str	r3, [r2, #0]

	    velocity_ref_prev = velocity_ref;
 8001faa:	4b1a      	ldr	r3, [pc, #104]	@ (8002014 <position_loop+0x28c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a18      	ldr	r2, [pc, #96]	@ (8002010 <position_loop+0x288>)
 8001fb0:	6013      	str	r3, [r2, #0]
}
 8001fb2:	bf00      	nop
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bdb0      	pop	{r4, r5, r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	f3af 8000 	nop.w
 8001fc0:	1a63c1f8 	.word	0x1a63c1f8
 8001fc4:	404ca5dc 	.word	0x404ca5dc
 8001fc8:	54442d18 	.word	0x54442d18
 8001fcc:	400921fb 	.word	0x400921fb
 8001fd0:	54442d18 	.word	0x54442d18
 8001fd4:	c00921fb 	.word	0xc00921fb
 8001fd8:	20000328 	.word	0x20000328
 8001fdc:	2000032c 	.word	0x2000032c
 8001fe0:	20000694 	.word	0x20000694
 8001fe4:	20000698 	.word	0x20000698
 8001fe8:	20000294 	.word	0x20000294
 8001fec:	20000288 	.word	0x20000288
 8001ff0:	20000290 	.word	0x20000290
 8001ff4:	200002cc 	.word	0x200002cc
 8001ff8:	2000069c 	.word	0x2000069c
 8001ffc:	20000020 	.word	0x20000020
 8002000:	2000001c 	.word	0x2000001c
 8002004:	c4d48000 	.word	0xc4d48000
 8002008:	44d48000 	.word	0x44d48000
 800200c:	459c4000 	.word	0x459c4000
 8002010:	200006a0 	.word	0x200006a0
 8002014:	20000004 	.word	0x20000004

08002018 <Speed_Loop>:

void Speed_Loop()
{
 8002018:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800201c:	b086      	sub	sp, #24
 800201e:	af00      	add	r7, sp, #0
	update_speed_dt();
 8002020:	f7fe fff8 	bl	8001014 <update_speed_dt>
    static float angle_prev = 0;
    static float error_speed_prev = 0;
    float angle_now = electricalAngle();
 8002024:	f7ff f940 	bl	80012a8 <electricalAngle>
 8002028:	ed87 0a04 	vstr	s0, [r7, #16]
    float delta_angle = angle_now - angle_prev;
 800202c:	4bae      	ldr	r3, [pc, #696]	@ (80022e8 <Speed_Loop+0x2d0>)
 800202e:	edd3 7a00 	vldr	s15, [r3]
 8002032:	ed97 7a04 	vldr	s14, [r7, #16]
 8002036:	ee77 7a67 	vsub.f32	s15, s14, s15
 800203a:	edc7 7a05 	vstr	s15, [r7, #20]

    if (delta_angle > PI) delta_angle -= 2 * PI;
 800203e:	6978      	ldr	r0, [r7, #20]
 8002040:	f7fe faa2 	bl	8000588 <__aeabi_f2d>
 8002044:	a3a0      	add	r3, pc, #640	@ (adr r3, 80022c8 <Speed_Loop+0x2b0>)
 8002046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800204a:	f7fe fd85 	bl	8000b58 <__aeabi_dcmpgt>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d00f      	beq.n	8002074 <Speed_Loop+0x5c>
 8002054:	6978      	ldr	r0, [r7, #20]
 8002056:	f7fe fa97 	bl	8000588 <__aeabi_f2d>
 800205a:	a39d      	add	r3, pc, #628	@ (adr r3, 80022d0 <Speed_Loop+0x2b8>)
 800205c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002060:	f7fe f932 	bl	80002c8 <__aeabi_dsub>
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	4610      	mov	r0, r2
 800206a:	4619      	mov	r1, r3
 800206c:	f7fe fddc 	bl	8000c28 <__aeabi_d2f>
 8002070:	4603      	mov	r3, r0
 8002072:	617b      	str	r3, [r7, #20]
    if (delta_angle < -PI) delta_angle += 2 * PI;
 8002074:	6978      	ldr	r0, [r7, #20]
 8002076:	f7fe fa87 	bl	8000588 <__aeabi_f2d>
 800207a:	a397      	add	r3, pc, #604	@ (adr r3, 80022d8 <Speed_Loop+0x2c0>)
 800207c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002080:	f7fe fd4c 	bl	8000b1c <__aeabi_dcmplt>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00f      	beq.n	80020aa <Speed_Loop+0x92>
 800208a:	6978      	ldr	r0, [r7, #20]
 800208c:	f7fe fa7c 	bl	8000588 <__aeabi_f2d>
 8002090:	a38f      	add	r3, pc, #572	@ (adr r3, 80022d0 <Speed_Loop+0x2b8>)
 8002092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002096:	f7fe f919 	bl	80002cc <__adddf3>
 800209a:	4602      	mov	r2, r0
 800209c:	460b      	mov	r3, r1
 800209e:	4610      	mov	r0, r2
 80020a0:	4619      	mov	r1, r3
 80020a2:	f7fe fdc1 	bl	8000c28 <__aeabi_d2f>
 80020a6:	4603      	mov	r3, r0
 80020a8:	617b      	str	r3, [r7, #20]

    velocity = alpha * velocity + (1 - alpha) * ((delta_angle / speed_dt) * (60.0f / (2.0f * PI)));
 80020aa:	4b90      	ldr	r3, [pc, #576]	@ (80022ec <Speed_Loop+0x2d4>)
 80020ac:	ed93 7a00 	vldr	s14, [r3]
 80020b0:	4b8f      	ldr	r3, [pc, #572]	@ (80022f0 <Speed_Loop+0x2d8>)
 80020b2:	edd3 7a00 	vldr	s15, [r3]
 80020b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ba:	ee17 0a90 	vmov	r0, s15
 80020be:	f7fe fa63 	bl	8000588 <__aeabi_f2d>
 80020c2:	4604      	mov	r4, r0
 80020c4:	460d      	mov	r5, r1
 80020c6:	4b89      	ldr	r3, [pc, #548]	@ (80022ec <Speed_Loop+0x2d4>)
 80020c8:	edd3 7a00 	vldr	s15, [r3]
 80020cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80020d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020d4:	ee17 0a90 	vmov	r0, s15
 80020d8:	f7fe fa56 	bl	8000588 <__aeabi_f2d>
 80020dc:	4680      	mov	r8, r0
 80020de:	4689      	mov	r9, r1
 80020e0:	4b84      	ldr	r3, [pc, #528]	@ (80022f4 <Speed_Loop+0x2dc>)
 80020e2:	edd3 7a00 	vldr	s15, [r3]
 80020e6:	ed97 7a05 	vldr	s14, [r7, #20]
 80020ea:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80020ee:	ee16 0a90 	vmov	r0, s13
 80020f2:	f7fe fa49 	bl	8000588 <__aeabi_f2d>
 80020f6:	a37a      	add	r3, pc, #488	@ (adr r3, 80022e0 <Speed_Loop+0x2c8>)
 80020f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020fc:	f7fe fa9c 	bl	8000638 <__aeabi_dmul>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	4640      	mov	r0, r8
 8002106:	4649      	mov	r1, r9
 8002108:	f7fe fa96 	bl	8000638 <__aeabi_dmul>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	4620      	mov	r0, r4
 8002112:	4629      	mov	r1, r5
 8002114:	f7fe f8da 	bl	80002cc <__adddf3>
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	4610      	mov	r0, r2
 800211e:	4619      	mov	r1, r3
 8002120:	f7fe fd82 	bl	8000c28 <__aeabi_d2f>
 8002124:	4603      	mov	r3, r0
 8002126:	4a72      	ldr	r2, [pc, #456]	@ (80022f0 <Speed_Loop+0x2d8>)
 8002128:	6013      	str	r3, [r2, #0]
    error_speed = velocity_ref - velocity;
 800212a:	4b73      	ldr	r3, [pc, #460]	@ (80022f8 <Speed_Loop+0x2e0>)
 800212c:	ed93 7a00 	vldr	s14, [r3]
 8002130:	4b6f      	ldr	r3, [pc, #444]	@ (80022f0 <Speed_Loop+0x2d8>)
 8002132:	edd3 7a00 	vldr	s15, [r3]
 8002136:	ee77 7a67 	vsub.f32	s15, s14, s15
 800213a:	4b70      	ldr	r3, [pc, #448]	@ (80022fc <Speed_Loop+0x2e4>)
 800213c:	edc3 7a00 	vstr	s15, [r3]
    speed_error_sum += error_speed * speed_dt;
 8002140:	4b6e      	ldr	r3, [pc, #440]	@ (80022fc <Speed_Loop+0x2e4>)
 8002142:	ed93 7a00 	vldr	s14, [r3]
 8002146:	4b6b      	ldr	r3, [pc, #428]	@ (80022f4 <Speed_Loop+0x2dc>)
 8002148:	edd3 7a00 	vldr	s15, [r3]
 800214c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002150:	4b6b      	ldr	r3, [pc, #428]	@ (8002300 <Speed_Loop+0x2e8>)
 8002152:	edd3 7a00 	vldr	s15, [r3]
 8002156:	ee77 7a27 	vadd.f32	s15, s14, s15
 800215a:	4b69      	ldr	r3, [pc, #420]	@ (8002300 <Speed_Loop+0x2e8>)
 800215c:	edc3 7a00 	vstr	s15, [r3]
    speed_error_sum = fminf(fmaxf(speed_error_sum, -0.8f), 0.8f);
 8002160:	4b67      	ldr	r3, [pc, #412]	@ (8002300 <Speed_Loop+0x2e8>)
 8002162:	edd3 7a00 	vldr	s15, [r3]
 8002166:	eddf 0a67 	vldr	s1, [pc, #412]	@ 8002304 <Speed_Loop+0x2ec>
 800216a:	eeb0 0a67 	vmov.f32	s0, s15
 800216e:	f00a f907 	bl	800c380 <fmaxf>
 8002172:	eef0 7a40 	vmov.f32	s15, s0
 8002176:	eddf 0a64 	vldr	s1, [pc, #400]	@ 8002308 <Speed_Loop+0x2f0>
 800217a:	eeb0 0a67 	vmov.f32	s0, s15
 800217e:	f00a f91c 	bl	800c3ba <fminf>
 8002182:	eef0 7a40 	vmov.f32	s15, s0
 8002186:	4b5e      	ldr	r3, [pc, #376]	@ (8002300 <Speed_Loop+0x2e8>)
 8002188:	edc3 7a00 	vstr	s15, [r3]

    float derivative = (error_speed - error_speed_prev) / speed_dt;
 800218c:	4b5b      	ldr	r3, [pc, #364]	@ (80022fc <Speed_Loop+0x2e4>)
 800218e:	ed93 7a00 	vldr	s14, [r3]
 8002192:	4b5e      	ldr	r3, [pc, #376]	@ (800230c <Speed_Loop+0x2f4>)
 8002194:	edd3 7a00 	vldr	s15, [r3]
 8002198:	ee77 6a67 	vsub.f32	s13, s14, s15
 800219c:	4b55      	ldr	r3, [pc, #340]	@ (80022f4 <Speed_Loop+0x2dc>)
 800219e:	ed93 7a00 	vldr	s14, [r3]
 80021a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021a6:	edc7 7a03 	vstr	s15, [r7, #12]
    error_speed_prev = error_speed;
 80021aa:	4b54      	ldr	r3, [pc, #336]	@ (80022fc <Speed_Loop+0x2e4>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a57      	ldr	r2, [pc, #348]	@ (800230c <Speed_Loop+0x2f4>)
 80021b0:	6013      	str	r3, [r2, #0]

    float Iq_unlimited = Kp_speed * error_speed + Ki_speed * speed_error_sum + Kd_speed * derivative;
 80021b2:	4b57      	ldr	r3, [pc, #348]	@ (8002310 <Speed_Loop+0x2f8>)
 80021b4:	ed93 7a00 	vldr	s14, [r3]
 80021b8:	4b50      	ldr	r3, [pc, #320]	@ (80022fc <Speed_Loop+0x2e4>)
 80021ba:	edd3 7a00 	vldr	s15, [r3]
 80021be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021c2:	4b54      	ldr	r3, [pc, #336]	@ (8002314 <Speed_Loop+0x2fc>)
 80021c4:	edd3 6a00 	vldr	s13, [r3]
 80021c8:	4b4d      	ldr	r3, [pc, #308]	@ (8002300 <Speed_Loop+0x2e8>)
 80021ca:	edd3 7a00 	vldr	s15, [r3]
 80021ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021d6:	4b50      	ldr	r3, [pc, #320]	@ (8002318 <Speed_Loop+0x300>)
 80021d8:	edd3 6a00 	vldr	s13, [r3]
 80021dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80021e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021e8:	edc7 7a02 	vstr	s15, [r7, #8]

       float Ts = speed_dt;
 80021ec:	4b41      	ldr	r3, [pc, #260]	@ (80022f4 <Speed_Loop+0x2dc>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	607b      	str	r3, [r7, #4]
       float Iq_ramp = 5000;
 80021f2:	4b4a      	ldr	r3, [pc, #296]	@ (800231c <Speed_Loop+0x304>)
 80021f4:	603b      	str	r3, [r7, #0]


       static float iq_ref_prev = 0.0f;
        Iq_rate = (Iq_unlimited - iq_ref_prev) / Ts;
 80021f6:	4b4a      	ldr	r3, [pc, #296]	@ (8002320 <Speed_Loop+0x308>)
 80021f8:	edd3 7a00 	vldr	s15, [r3]
 80021fc:	ed97 7a02 	vldr	s14, [r7, #8]
 8002200:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002204:	ed97 7a01 	vldr	s14, [r7, #4]
 8002208:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800220c:	4b45      	ldr	r3, [pc, #276]	@ (8002324 <Speed_Loop+0x30c>)
 800220e:	edc3 7a00 	vstr	s15, [r3]
       if (Iq_rate > Iq_ramp)
 8002212:	4b44      	ldr	r3, [pc, #272]	@ (8002324 <Speed_Loop+0x30c>)
 8002214:	edd3 7a00 	vldr	s15, [r3]
 8002218:	ed97 7a00 	vldr	s14, [r7]
 800221c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002224:	d50e      	bpl.n	8002244 <Speed_Loop+0x22c>
           iq_ref = iq_ref_prev + Iq_ramp * Ts;
 8002226:	ed97 7a00 	vldr	s14, [r7]
 800222a:	edd7 7a01 	vldr	s15, [r7, #4]
 800222e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002232:	4b3b      	ldr	r3, [pc, #236]	@ (8002320 <Speed_Loop+0x308>)
 8002234:	edd3 7a00 	vldr	s15, [r3]
 8002238:	ee77 7a27 	vadd.f32	s15, s14, s15
 800223c:	4b3a      	ldr	r3, [pc, #232]	@ (8002328 <Speed_Loop+0x310>)
 800223e:	edc3 7a00 	vstr	s15, [r3]
 8002242:	e01d      	b.n	8002280 <Speed_Loop+0x268>
       else if (Iq_rate < -Iq_ramp)
 8002244:	edd7 7a00 	vldr	s15, [r7]
 8002248:	eeb1 7a67 	vneg.f32	s14, s15
 800224c:	4b35      	ldr	r3, [pc, #212]	@ (8002324 <Speed_Loop+0x30c>)
 800224e:	edd3 7a00 	vldr	s15, [r3]
 8002252:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800225a:	dd0e      	ble.n	800227a <Speed_Loop+0x262>
           iq_ref = iq_ref_prev - Iq_ramp * Ts;
 800225c:	4b30      	ldr	r3, [pc, #192]	@ (8002320 <Speed_Loop+0x308>)
 800225e:	ed93 7a00 	vldr	s14, [r3]
 8002262:	edd7 6a00 	vldr	s13, [r7]
 8002266:	edd7 7a01 	vldr	s15, [r7, #4]
 800226a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800226e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002272:	4b2d      	ldr	r3, [pc, #180]	@ (8002328 <Speed_Loop+0x310>)
 8002274:	edc3 7a00 	vstr	s15, [r3]
 8002278:	e002      	b.n	8002280 <Speed_Loop+0x268>
       else
           iq_ref = Iq_unlimited;
 800227a:	4a2b      	ldr	r2, [pc, #172]	@ (8002328 <Speed_Loop+0x310>)
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	6013      	str	r3, [r2, #0]

       iq_ref = fminf(fmaxf(iq_ref, -1.0f), 1.0f);
 8002280:	4b29      	ldr	r3, [pc, #164]	@ (8002328 <Speed_Loop+0x310>)
 8002282:	edd3 7a00 	vldr	s15, [r3]
 8002286:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 800228a:	eeb0 0a67 	vmov.f32	s0, s15
 800228e:	f00a f877 	bl	800c380 <fmaxf>
 8002292:	eef0 7a40 	vmov.f32	s15, s0
 8002296:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800229a:	eeb0 0a67 	vmov.f32	s0, s15
 800229e:	f00a f88c 	bl	800c3ba <fminf>
 80022a2:	eef0 7a40 	vmov.f32	s15, s0
 80022a6:	4b20      	ldr	r3, [pc, #128]	@ (8002328 <Speed_Loop+0x310>)
 80022a8:	edc3 7a00 	vstr	s15, [r3]


       iq_ref_prev = iq_ref;
 80022ac:	4b1e      	ldr	r3, [pc, #120]	@ (8002328 <Speed_Loop+0x310>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a1b      	ldr	r2, [pc, #108]	@ (8002320 <Speed_Loop+0x308>)
 80022b2:	6013      	str	r3, [r2, #0]

    angle_prev = angle_now;
 80022b4:	4a0c      	ldr	r2, [pc, #48]	@ (80022e8 <Speed_Loop+0x2d0>)
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	6013      	str	r3, [r2, #0]

}
 80022ba:	bf00      	nop
 80022bc:	3718      	adds	r7, #24
 80022be:	46bd      	mov	sp, r7
 80022c0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80022c4:	f3af 8000 	nop.w
 80022c8:	54442eea 	.word	0x54442eea
 80022cc:	400921fb 	.word	0x400921fb
 80022d0:	54442eea 	.word	0x54442eea
 80022d4:	401921fb 	.word	0x401921fb
 80022d8:	54442eea 	.word	0x54442eea
 80022dc:	c00921fb 	.word	0xc00921fb
 80022e0:	66ed2a99 	.word	0x66ed2a99
 80022e4:	4023193d 	.word	0x4023193d
 80022e8:	200006a4 	.word	0x200006a4
 80022ec:	20000028 	.word	0x20000028
 80022f0:	2000028c 	.word	0x2000028c
 80022f4:	2000002c 	.word	0x2000002c
 80022f8:	20000004 	.word	0x20000004
 80022fc:	200002a0 	.word	0x200002a0
 8002300:	20000280 	.word	0x20000280
 8002304:	bf4ccccd 	.word	0xbf4ccccd
 8002308:	3f4ccccd 	.word	0x3f4ccccd
 800230c:	200006a8 	.word	0x200006a8
 8002310:	20000010 	.word	0x20000010
 8002314:	20000014 	.word	0x20000014
 8002318:	20000018 	.word	0x20000018
 800231c:	459c4000 	.word	0x459c4000
 8002320:	200006ac 	.word	0x200006ac
 8002324:	200002b4 	.word	0x200002b4
 8002328:	20000000 	.word	0x20000000

0800232c <Current_Loop>:


void Current_Loop()
{
 800232c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002330:	b084      	sub	sp, #16
 8002332:	af00      	add	r7, sp, #0
    Update_dt();
 8002334:	f7fe fe4c 	bl	8000fd0 <Update_dt>

    theta = electricalAngle();
 8002338:	f7fe ffb6 	bl	80012a8 <electricalAngle>
 800233c:	eef0 7a40 	vmov.f32	s15, s0
 8002340:	4b90      	ldr	r3, [pc, #576]	@ (8002584 <Current_Loop+0x258>)
 8002342:	edc3 7a00 	vstr	s15, [r3]
    clark();
 8002346:	f7ff f8a7 	bl	8001498 <clark>
    park();
 800234a:	f7ff f8d7 	bl	80014fc <park>

    error_d = id_ref - i_d;
 800234e:	4b8e      	ldr	r3, [pc, #568]	@ (8002588 <Current_Loop+0x25c>)
 8002350:	ed93 7a00 	vldr	s14, [r3]
 8002354:	4b8d      	ldr	r3, [pc, #564]	@ (800258c <Current_Loop+0x260>)
 8002356:	edd3 7a00 	vldr	s15, [r3]
 800235a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800235e:	4b8c      	ldr	r3, [pc, #560]	@ (8002590 <Current_Loop+0x264>)
 8002360:	edc3 7a00 	vstr	s15, [r3]
    error_q = iq_ref - i_q;
 8002364:	4b8b      	ldr	r3, [pc, #556]	@ (8002594 <Current_Loop+0x268>)
 8002366:	ed93 7a00 	vldr	s14, [r3]
 800236a:	4b8b      	ldr	r3, [pc, #556]	@ (8002598 <Current_Loop+0x26c>)
 800236c:	edd3 7a00 	vldr	s15, [r3]
 8002370:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002374:	4b89      	ldr	r3, [pc, #548]	@ (800259c <Current_Loop+0x270>)
 8002376:	edc3 7a00 	vstr	s15, [r3]


    error_d_sum += error_d * dt;
 800237a:	4b85      	ldr	r3, [pc, #532]	@ (8002590 <Current_Loop+0x264>)
 800237c:	ed93 7a00 	vldr	s14, [r3]
 8002380:	4b87      	ldr	r3, [pc, #540]	@ (80025a0 <Current_Loop+0x274>)
 8002382:	edd3 7a00 	vldr	s15, [r3]
 8002386:	ee27 7a27 	vmul.f32	s14, s14, s15
 800238a:	4b86      	ldr	r3, [pc, #536]	@ (80025a4 <Current_Loop+0x278>)
 800238c:	edd3 7a00 	vldr	s15, [r3]
 8002390:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002394:	4b83      	ldr	r3, [pc, #524]	@ (80025a4 <Current_Loop+0x278>)
 8002396:	edc3 7a00 	vstr	s15, [r3]
    error_q_sum += error_q * dt;
 800239a:	4b80      	ldr	r3, [pc, #512]	@ (800259c <Current_Loop+0x270>)
 800239c:	ed93 7a00 	vldr	s14, [r3]
 80023a0:	4b7f      	ldr	r3, [pc, #508]	@ (80025a0 <Current_Loop+0x274>)
 80023a2:	edd3 7a00 	vldr	s15, [r3]
 80023a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023aa:	4b7f      	ldr	r3, [pc, #508]	@ (80025a8 <Current_Loop+0x27c>)
 80023ac:	edd3 7a00 	vldr	s15, [r3]
 80023b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023b4:	4b7c      	ldr	r3, [pc, #496]	@ (80025a8 <Current_Loop+0x27c>)
 80023b6:	edc3 7a00 	vstr	s15, [r3]

    error_d_sum = fminf(fmaxf(error_d_sum, -INTEGRAL_LIMIT), INTEGRAL_LIMIT);
 80023ba:	4b7a      	ldr	r3, [pc, #488]	@ (80025a4 <Current_Loop+0x278>)
 80023bc:	edd3 7a00 	vldr	s15, [r3]
 80023c0:	eeff 0a08 	vmov.f32	s1, #248	@ 0xbfc00000 -1.5
 80023c4:	eeb0 0a67 	vmov.f32	s0, s15
 80023c8:	f009 ffda 	bl	800c380 <fmaxf>
 80023cc:	eef0 7a40 	vmov.f32	s15, s0
 80023d0:	eef7 0a08 	vmov.f32	s1, #120	@ 0x3fc00000  1.5
 80023d4:	eeb0 0a67 	vmov.f32	s0, s15
 80023d8:	f009 ffef 	bl	800c3ba <fminf>
 80023dc:	eef0 7a40 	vmov.f32	s15, s0
 80023e0:	4b70      	ldr	r3, [pc, #448]	@ (80025a4 <Current_Loop+0x278>)
 80023e2:	edc3 7a00 	vstr	s15, [r3]
    error_q_sum = fminf(fmaxf(error_q_sum, -INTEGRAL_LIMIT), INTEGRAL_LIMIT);
 80023e6:	4b70      	ldr	r3, [pc, #448]	@ (80025a8 <Current_Loop+0x27c>)
 80023e8:	edd3 7a00 	vldr	s15, [r3]
 80023ec:	eeff 0a08 	vmov.f32	s1, #248	@ 0xbfc00000 -1.5
 80023f0:	eeb0 0a67 	vmov.f32	s0, s15
 80023f4:	f009 ffc4 	bl	800c380 <fmaxf>
 80023f8:	eef0 7a40 	vmov.f32	s15, s0
 80023fc:	eef7 0a08 	vmov.f32	s1, #120	@ 0x3fc00000  1.5
 8002400:	eeb0 0a67 	vmov.f32	s0, s15
 8002404:	f009 ffd9 	bl	800c3ba <fminf>
 8002408:	eef0 7a40 	vmov.f32	s15, s0
 800240c:	4b66      	ldr	r3, [pc, #408]	@ (80025a8 <Current_Loop+0x27c>)
 800240e:	edc3 7a00 	vstr	s15, [r3]

    float Vd_unclamped = Kp * error_d + Ki * error_d_sum ;
 8002412:	4b66      	ldr	r3, [pc, #408]	@ (80025ac <Current_Loop+0x280>)
 8002414:	ed93 7a00 	vldr	s14, [r3]
 8002418:	4b5d      	ldr	r3, [pc, #372]	@ (8002590 <Current_Loop+0x264>)
 800241a:	edd3 7a00 	vldr	s15, [r3]
 800241e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002422:	4b63      	ldr	r3, [pc, #396]	@ (80025b0 <Current_Loop+0x284>)
 8002424:	edd3 6a00 	vldr	s13, [r3]
 8002428:	4b5e      	ldr	r3, [pc, #376]	@ (80025a4 <Current_Loop+0x278>)
 800242a:	edd3 7a00 	vldr	s15, [r3]
 800242e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002432:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002436:	edc7 7a03 	vstr	s15, [r7, #12]
     Vq_unclamped = Kp * error_q + Ki * error_q_sum ;
 800243a:	4b5c      	ldr	r3, [pc, #368]	@ (80025ac <Current_Loop+0x280>)
 800243c:	ed93 7a00 	vldr	s14, [r3]
 8002440:	4b56      	ldr	r3, [pc, #344]	@ (800259c <Current_Loop+0x270>)
 8002442:	edd3 7a00 	vldr	s15, [r3]
 8002446:	ee27 7a27 	vmul.f32	s14, s14, s15
 800244a:	4b59      	ldr	r3, [pc, #356]	@ (80025b0 <Current_Loop+0x284>)
 800244c:	edd3 6a00 	vldr	s13, [r3]
 8002450:	4b55      	ldr	r3, [pc, #340]	@ (80025a8 <Current_Loop+0x27c>)
 8002452:	edd3 7a00 	vldr	s15, [r3]
 8002456:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800245a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800245e:	4b55      	ldr	r3, [pc, #340]	@ (80025b4 <Current_Loop+0x288>)
 8002460:	edc3 7a00 	vstr	s15, [r3]

    float V_limit = 8.0f;
 8002464:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8002468:	60bb      	str	r3, [r7, #8]
//    Vq_unclamped = fminf(fmaxf(Vq_unclamped, -V_limit), V_limit);

    // Ramping
    static float Vd_prev = 0;
    static float Vq_prev = 0;
    float output_ramp = 1000.0f;
 800246a:	4b53      	ldr	r3, [pc, #332]	@ (80025b8 <Current_Loop+0x28c>)
 800246c:	607b      	str	r3, [r7, #4]

    float output_d_rate = (Vd_unclamped - Vd_prev) / dt;
 800246e:	4b53      	ldr	r3, [pc, #332]	@ (80025bc <Current_Loop+0x290>)
 8002470:	edd3 7a00 	vldr	s15, [r3]
 8002474:	ed97 7a03 	vldr	s14, [r7, #12]
 8002478:	ee77 6a67 	vsub.f32	s13, s14, s15
 800247c:	4b48      	ldr	r3, [pc, #288]	@ (80025a0 <Current_Loop+0x274>)
 800247e:	ed93 7a00 	vldr	s14, [r3]
 8002482:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002486:	edc7 7a00 	vstr	s15, [r7]
    output_q_rate = (Vq_unclamped - Vq_prev) / dt;
 800248a:	4b4a      	ldr	r3, [pc, #296]	@ (80025b4 <Current_Loop+0x288>)
 800248c:	ed93 7a00 	vldr	s14, [r3]
 8002490:	4b4b      	ldr	r3, [pc, #300]	@ (80025c0 <Current_Loop+0x294>)
 8002492:	edd3 7a00 	vldr	s15, [r3]
 8002496:	ee77 6a67 	vsub.f32	s13, s14, s15
 800249a:	4b41      	ldr	r3, [pc, #260]	@ (80025a0 <Current_Loop+0x274>)
 800249c:	ed93 7a00 	vldr	s14, [r3]
 80024a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024a4:	4b47      	ldr	r3, [pc, #284]	@ (80025c4 <Current_Loop+0x298>)
 80024a6:	edc3 7a00 	vstr	s15, [r3]

    if (output_d_rate > output_ramp)
 80024aa:	ed97 7a00 	vldr	s14, [r7]
 80024ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80024b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ba:	dd0f      	ble.n	80024dc <Current_Loop+0x1b0>
        Vd = Vd_prev + output_ramp * dt;
 80024bc:	4b38      	ldr	r3, [pc, #224]	@ (80025a0 <Current_Loop+0x274>)
 80024be:	ed93 7a00 	vldr	s14, [r3]
 80024c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80024c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024ca:	4b3c      	ldr	r3, [pc, #240]	@ (80025bc <Current_Loop+0x290>)
 80024cc:	edd3 7a00 	vldr	s15, [r3]
 80024d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024d4:	4b3c      	ldr	r3, [pc, #240]	@ (80025c8 <Current_Loop+0x29c>)
 80024d6:	edc3 7a00 	vstr	s15, [r3]
 80024da:	e01d      	b.n	8002518 <Current_Loop+0x1ec>
    else if (output_d_rate < -output_ramp)
 80024dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80024e0:	eef1 7a67 	vneg.f32	s15, s15
 80024e4:	ed97 7a00 	vldr	s14, [r7]
 80024e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f0:	d50f      	bpl.n	8002512 <Current_Loop+0x1e6>
        Vd = Vd_prev - output_ramp * dt;
 80024f2:	4b32      	ldr	r3, [pc, #200]	@ (80025bc <Current_Loop+0x290>)
 80024f4:	ed93 7a00 	vldr	s14, [r3]
 80024f8:	4b29      	ldr	r3, [pc, #164]	@ (80025a0 <Current_Loop+0x274>)
 80024fa:	edd3 6a00 	vldr	s13, [r3]
 80024fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8002502:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002506:	ee77 7a67 	vsub.f32	s15, s14, s15
 800250a:	4b2f      	ldr	r3, [pc, #188]	@ (80025c8 <Current_Loop+0x29c>)
 800250c:	edc3 7a00 	vstr	s15, [r3]
 8002510:	e002      	b.n	8002518 <Current_Loop+0x1ec>
    else
        Vd = Vd_unclamped;
 8002512:	4a2d      	ldr	r2, [pc, #180]	@ (80025c8 <Current_Loop+0x29c>)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6013      	str	r3, [r2, #0]

    if (output_q_rate > output_ramp)
 8002518:	4b2a      	ldr	r3, [pc, #168]	@ (80025c4 <Current_Loop+0x298>)
 800251a:	edd3 7a00 	vldr	s15, [r3]
 800251e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002522:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800252a:	d50f      	bpl.n	800254c <Current_Loop+0x220>
        Vq = Vq_prev + output_ramp * dt;
 800252c:	4b1c      	ldr	r3, [pc, #112]	@ (80025a0 <Current_Loop+0x274>)
 800252e:	ed93 7a00 	vldr	s14, [r3]
 8002532:	edd7 7a01 	vldr	s15, [r7, #4]
 8002536:	ee27 7a27 	vmul.f32	s14, s14, s15
 800253a:	4b21      	ldr	r3, [pc, #132]	@ (80025c0 <Current_Loop+0x294>)
 800253c:	edd3 7a00 	vldr	s15, [r3]
 8002540:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002544:	4b21      	ldr	r3, [pc, #132]	@ (80025cc <Current_Loop+0x2a0>)
 8002546:	edc3 7a00 	vstr	s15, [r3]
 800254a:	e045      	b.n	80025d8 <Current_Loop+0x2ac>
    else if (output_q_rate < -output_ramp)
 800254c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002550:	eeb1 7a67 	vneg.f32	s14, s15
 8002554:	4b1b      	ldr	r3, [pc, #108]	@ (80025c4 <Current_Loop+0x298>)
 8002556:	edd3 7a00 	vldr	s15, [r3]
 800255a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800255e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002562:	dd35      	ble.n	80025d0 <Current_Loop+0x2a4>
        Vq = Vq_prev - output_ramp * dt;
 8002564:	4b16      	ldr	r3, [pc, #88]	@ (80025c0 <Current_Loop+0x294>)
 8002566:	ed93 7a00 	vldr	s14, [r3]
 800256a:	4b0d      	ldr	r3, [pc, #52]	@ (80025a0 <Current_Loop+0x274>)
 800256c:	edd3 6a00 	vldr	s13, [r3]
 8002570:	edd7 7a01 	vldr	s15, [r7, #4]
 8002574:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002578:	ee77 7a67 	vsub.f32	s15, s14, s15
 800257c:	4b13      	ldr	r3, [pc, #76]	@ (80025cc <Current_Loop+0x2a0>)
 800257e:	edc3 7a00 	vstr	s15, [r3]
 8002582:	e029      	b.n	80025d8 <Current_Loop+0x2ac>
 8002584:	200002a4 	.word	0x200002a4
 8002588:	20000284 	.word	0x20000284
 800258c:	20000250 	.word	0x20000250
 8002590:	20000270 	.word	0x20000270
 8002594:	20000000 	.word	0x20000000
 8002598:	20000254 	.word	0x20000254
 800259c:	20000274 	.word	0x20000274
 80025a0:	20000298 	.word	0x20000298
 80025a4:	20000278 	.word	0x20000278
 80025a8:	2000027c 	.word	0x2000027c
 80025ac:	2000000c 	.word	0x2000000c
 80025b0:	20000008 	.word	0x20000008
 80025b4:	200002c4 	.word	0x200002c4
 80025b8:	447a0000 	.word	0x447a0000
 80025bc:	200006b0 	.word	0x200006b0
 80025c0:	200006b4 	.word	0x200006b4
 80025c4:	200002bc 	.word	0x200002bc
 80025c8:	200002a8 	.word	0x200002a8
 80025cc:	200002b0 	.word	0x200002b0
    else
        Vq = Vq_unclamped;
 80025d0:	4ba0      	ldr	r3, [pc, #640]	@ (8002854 <Current_Loop+0x528>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4aa0      	ldr	r2, [pc, #640]	@ (8002858 <Current_Loop+0x52c>)
 80025d6:	6013      	str	r3, [r2, #0]

    Vd = fminf(fmaxf(Vd, -V_limit), V_limit);
 80025d8:	4ba0      	ldr	r3, [pc, #640]	@ (800285c <Current_Loop+0x530>)
 80025da:	ed93 7a00 	vldr	s14, [r3]
 80025de:	edd7 7a02 	vldr	s15, [r7, #8]
 80025e2:	eef1 7a67 	vneg.f32	s15, s15
 80025e6:	eef0 0a67 	vmov.f32	s1, s15
 80025ea:	eeb0 0a47 	vmov.f32	s0, s14
 80025ee:	f009 fec7 	bl	800c380 <fmaxf>
 80025f2:	eef0 7a40 	vmov.f32	s15, s0
 80025f6:	eef0 0a67 	vmov.f32	s1, s15
 80025fa:	ed97 0a02 	vldr	s0, [r7, #8]
 80025fe:	f009 fedc 	bl	800c3ba <fminf>
 8002602:	eef0 7a40 	vmov.f32	s15, s0
 8002606:	4b95      	ldr	r3, [pc, #596]	@ (800285c <Current_Loop+0x530>)
 8002608:	edc3 7a00 	vstr	s15, [r3]
    Vq = fminf(fmaxf(Vq, -V_limit), V_limit);
 800260c:	4b92      	ldr	r3, [pc, #584]	@ (8002858 <Current_Loop+0x52c>)
 800260e:	ed93 7a00 	vldr	s14, [r3]
 8002612:	edd7 7a02 	vldr	s15, [r7, #8]
 8002616:	eef1 7a67 	vneg.f32	s15, s15
 800261a:	eef0 0a67 	vmov.f32	s1, s15
 800261e:	eeb0 0a47 	vmov.f32	s0, s14
 8002622:	f009 fead 	bl	800c380 <fmaxf>
 8002626:	eef0 7a40 	vmov.f32	s15, s0
 800262a:	eef0 0a67 	vmov.f32	s1, s15
 800262e:	ed97 0a02 	vldr	s0, [r7, #8]
 8002632:	f009 fec2 	bl	800c3ba <fminf>
 8002636:	eef0 7a40 	vmov.f32	s15, s0
 800263a:	4b87      	ldr	r3, [pc, #540]	@ (8002858 <Current_Loop+0x52c>)
 800263c:	edc3 7a00 	vstr	s15, [r3]

    Vd_prev = Vd;
 8002640:	4b86      	ldr	r3, [pc, #536]	@ (800285c <Current_Loop+0x530>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a86      	ldr	r2, [pc, #536]	@ (8002860 <Current_Loop+0x534>)
 8002646:	6013      	str	r3, [r2, #0]
    Vq_prev = Vq;
 8002648:	4b83      	ldr	r3, [pc, #524]	@ (8002858 <Current_Loop+0x52c>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a85      	ldr	r2, [pc, #532]	@ (8002864 <Current_Loop+0x538>)
 800264e:	6013      	str	r3, [r2, #0]

	Valpha = Vd * cos(theta) - Vq * sin(theta);
 8002650:	4b82      	ldr	r3, [pc, #520]	@ (800285c <Current_Loop+0x530>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4618      	mov	r0, r3
 8002656:	f7fd ff97 	bl	8000588 <__aeabi_f2d>
 800265a:	4604      	mov	r4, r0
 800265c:	460d      	mov	r5, r1
 800265e:	4b82      	ldr	r3, [pc, #520]	@ (8002868 <Current_Loop+0x53c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f7fd ff90 	bl	8000588 <__aeabi_f2d>
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	ec43 2b10 	vmov	d0, r2, r3
 8002670:	f009 fdde 	bl	800c230 <cos>
 8002674:	ec53 2b10 	vmov	r2, r3, d0
 8002678:	4620      	mov	r0, r4
 800267a:	4629      	mov	r1, r5
 800267c:	f7fd ffdc 	bl	8000638 <__aeabi_dmul>
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	4690      	mov	r8, r2
 8002686:	4699      	mov	r9, r3
 8002688:	4b73      	ldr	r3, [pc, #460]	@ (8002858 <Current_Loop+0x52c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f7fd ff7b 	bl	8000588 <__aeabi_f2d>
 8002692:	4604      	mov	r4, r0
 8002694:	460d      	mov	r5, r1
 8002696:	4b74      	ldr	r3, [pc, #464]	@ (8002868 <Current_Loop+0x53c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f7fd ff74 	bl	8000588 <__aeabi_f2d>
 80026a0:	4602      	mov	r2, r0
 80026a2:	460b      	mov	r3, r1
 80026a4:	ec43 2b10 	vmov	d0, r2, r3
 80026a8:	f009 fe16 	bl	800c2d8 <sin>
 80026ac:	ec53 2b10 	vmov	r2, r3, d0
 80026b0:	4620      	mov	r0, r4
 80026b2:	4629      	mov	r1, r5
 80026b4:	f7fd ffc0 	bl	8000638 <__aeabi_dmul>
 80026b8:	4602      	mov	r2, r0
 80026ba:	460b      	mov	r3, r1
 80026bc:	4640      	mov	r0, r8
 80026be:	4649      	mov	r1, r9
 80026c0:	f7fd fe02 	bl	80002c8 <__aeabi_dsub>
 80026c4:	4602      	mov	r2, r0
 80026c6:	460b      	mov	r3, r1
 80026c8:	4610      	mov	r0, r2
 80026ca:	4619      	mov	r1, r3
 80026cc:	f7fe faac 	bl	8000c28 <__aeabi_d2f>
 80026d0:	4603      	mov	r3, r0
 80026d2:	4a66      	ldr	r2, [pc, #408]	@ (800286c <Current_Loop+0x540>)
 80026d4:	6013      	str	r3, [r2, #0]
	Vbeta  = Vd * sin(theta) + Vq * cos(theta);
 80026d6:	4b61      	ldr	r3, [pc, #388]	@ (800285c <Current_Loop+0x530>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fd ff54 	bl	8000588 <__aeabi_f2d>
 80026e0:	4604      	mov	r4, r0
 80026e2:	460d      	mov	r5, r1
 80026e4:	4b60      	ldr	r3, [pc, #384]	@ (8002868 <Current_Loop+0x53c>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7fd ff4d 	bl	8000588 <__aeabi_f2d>
 80026ee:	4602      	mov	r2, r0
 80026f0:	460b      	mov	r3, r1
 80026f2:	ec43 2b10 	vmov	d0, r2, r3
 80026f6:	f009 fdef 	bl	800c2d8 <sin>
 80026fa:	ec53 2b10 	vmov	r2, r3, d0
 80026fe:	4620      	mov	r0, r4
 8002700:	4629      	mov	r1, r5
 8002702:	f7fd ff99 	bl	8000638 <__aeabi_dmul>
 8002706:	4602      	mov	r2, r0
 8002708:	460b      	mov	r3, r1
 800270a:	4690      	mov	r8, r2
 800270c:	4699      	mov	r9, r3
 800270e:	4b52      	ldr	r3, [pc, #328]	@ (8002858 <Current_Loop+0x52c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f7fd ff38 	bl	8000588 <__aeabi_f2d>
 8002718:	4604      	mov	r4, r0
 800271a:	460d      	mov	r5, r1
 800271c:	4b52      	ldr	r3, [pc, #328]	@ (8002868 <Current_Loop+0x53c>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4618      	mov	r0, r3
 8002722:	f7fd ff31 	bl	8000588 <__aeabi_f2d>
 8002726:	4602      	mov	r2, r0
 8002728:	460b      	mov	r3, r1
 800272a:	ec43 2b10 	vmov	d0, r2, r3
 800272e:	f009 fd7f 	bl	800c230 <cos>
 8002732:	ec53 2b10 	vmov	r2, r3, d0
 8002736:	4620      	mov	r0, r4
 8002738:	4629      	mov	r1, r5
 800273a:	f7fd ff7d 	bl	8000638 <__aeabi_dmul>
 800273e:	4602      	mov	r2, r0
 8002740:	460b      	mov	r3, r1
 8002742:	4640      	mov	r0, r8
 8002744:	4649      	mov	r1, r9
 8002746:	f7fd fdc1 	bl	80002cc <__adddf3>
 800274a:	4602      	mov	r2, r0
 800274c:	460b      	mov	r3, r1
 800274e:	4610      	mov	r0, r2
 8002750:	4619      	mov	r1, r3
 8002752:	f7fe fa69 	bl	8000c28 <__aeabi_d2f>
 8002756:	4603      	mov	r3, r0
 8002758:	4a45      	ldr	r2, [pc, #276]	@ (8002870 <Current_Loop+0x544>)
 800275a:	6013      	str	r3, [r2, #0]

    Va = Valpha;
 800275c:	4b43      	ldr	r3, [pc, #268]	@ (800286c <Current_Loop+0x540>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a44      	ldr	r2, [pc, #272]	@ (8002874 <Current_Loop+0x548>)
 8002762:	6013      	str	r3, [r2, #0]
    Vb = -0.5 * Valpha + (sqrtf(3) / 2) * Vbeta ;
 8002764:	4b41      	ldr	r3, [pc, #260]	@ (800286c <Current_Loop+0x540>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4618      	mov	r0, r3
 800276a:	f7fd ff0d 	bl	8000588 <__aeabi_f2d>
 800276e:	f04f 0200 	mov.w	r2, #0
 8002772:	4b41      	ldr	r3, [pc, #260]	@ (8002878 <Current_Loop+0x54c>)
 8002774:	f7fd ff60 	bl	8000638 <__aeabi_dmul>
 8002778:	4602      	mov	r2, r0
 800277a:	460b      	mov	r3, r1
 800277c:	4614      	mov	r4, r2
 800277e:	461d      	mov	r5, r3
 8002780:	4b3b      	ldr	r3, [pc, #236]	@ (8002870 <Current_Loop+0x544>)
 8002782:	edd3 7a00 	vldr	s15, [r3]
 8002786:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 800287c <Current_Loop+0x550>
 800278a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800278e:	ee17 0a90 	vmov	r0, s15
 8002792:	f7fd fef9 	bl	8000588 <__aeabi_f2d>
 8002796:	4602      	mov	r2, r0
 8002798:	460b      	mov	r3, r1
 800279a:	4620      	mov	r0, r4
 800279c:	4629      	mov	r1, r5
 800279e:	f7fd fd95 	bl	80002cc <__adddf3>
 80027a2:	4602      	mov	r2, r0
 80027a4:	460b      	mov	r3, r1
 80027a6:	4610      	mov	r0, r2
 80027a8:	4619      	mov	r1, r3
 80027aa:	f7fe fa3d 	bl	8000c28 <__aeabi_d2f>
 80027ae:	4603      	mov	r3, r0
 80027b0:	4a33      	ldr	r2, [pc, #204]	@ (8002880 <Current_Loop+0x554>)
 80027b2:	6013      	str	r3, [r2, #0]
    Vc = -0.5 * Valpha - (sqrtf(3) / 2) * Vbeta ;
 80027b4:	4b2d      	ldr	r3, [pc, #180]	@ (800286c <Current_Loop+0x540>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7fd fee5 	bl	8000588 <__aeabi_f2d>
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	4b2d      	ldr	r3, [pc, #180]	@ (8002878 <Current_Loop+0x54c>)
 80027c4:	f7fd ff38 	bl	8000638 <__aeabi_dmul>
 80027c8:	4602      	mov	r2, r0
 80027ca:	460b      	mov	r3, r1
 80027cc:	4614      	mov	r4, r2
 80027ce:	461d      	mov	r5, r3
 80027d0:	4b27      	ldr	r3, [pc, #156]	@ (8002870 <Current_Loop+0x544>)
 80027d2:	edd3 7a00 	vldr	s15, [r3]
 80027d6:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 800287c <Current_Loop+0x550>
 80027da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027de:	ee17 0a90 	vmov	r0, s15
 80027e2:	f7fd fed1 	bl	8000588 <__aeabi_f2d>
 80027e6:	4602      	mov	r2, r0
 80027e8:	460b      	mov	r3, r1
 80027ea:	4620      	mov	r0, r4
 80027ec:	4629      	mov	r1, r5
 80027ee:	f7fd fd6b 	bl	80002c8 <__aeabi_dsub>
 80027f2:	4602      	mov	r2, r0
 80027f4:	460b      	mov	r3, r1
 80027f6:	4610      	mov	r0, r2
 80027f8:	4619      	mov	r1, r3
 80027fa:	f7fe fa15 	bl	8000c28 <__aeabi_d2f>
 80027fe:	4603      	mov	r3, r0
 8002800:	4a20      	ldr	r2, [pc, #128]	@ (8002884 <Current_Loop+0x558>)
 8002802:	6013      	str	r3, [r2, #0]

    setpwm(Va, Vb, Vc);
 8002804:	4b1b      	ldr	r3, [pc, #108]	@ (8002874 <Current_Loop+0x548>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4618      	mov	r0, r3
 800280a:	f7fd febd 	bl	8000588 <__aeabi_f2d>
 800280e:	4604      	mov	r4, r0
 8002810:	460d      	mov	r5, r1
 8002812:	4b1b      	ldr	r3, [pc, #108]	@ (8002880 <Current_Loop+0x554>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f7fd feb6 	bl	8000588 <__aeabi_f2d>
 800281c:	4680      	mov	r8, r0
 800281e:	4689      	mov	r9, r1
 8002820:	4b18      	ldr	r3, [pc, #96]	@ (8002884 <Current_Loop+0x558>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4618      	mov	r0, r3
 8002826:	f7fd feaf 	bl	8000588 <__aeabi_f2d>
 800282a:	4602      	mov	r2, r0
 800282c:	460b      	mov	r3, r1
 800282e:	ec43 2b12 	vmov	d2, r2, r3
 8002832:	ec49 8b11 	vmov	d1, r8, r9
 8002836:	ec45 4b10 	vmov	d0, r4, r5
 800283a:	f7fe ff21 	bl	8001680 <setpwm>
    HAL_ADC_Start_DMA(&hadc2, &adc_dma_value, 1);
 800283e:	2201      	movs	r2, #1
 8002840:	4911      	ldr	r1, [pc, #68]	@ (8002888 <Current_Loop+0x55c>)
 8002842:	4812      	ldr	r0, [pc, #72]	@ (800288c <Current_Loop+0x560>)
 8002844:	f001 fc5e 	bl	8004104 <HAL_ADC_Start_DMA>
}
 8002848:	bf00      	nop
 800284a:	3710      	adds	r7, #16
 800284c:	46bd      	mov	sp, r7
 800284e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002852:	bf00      	nop
 8002854:	200002c4 	.word	0x200002c4
 8002858:	200002b0 	.word	0x200002b0
 800285c:	200002a8 	.word	0x200002a8
 8002860:	200006b0 	.word	0x200006b0
 8002864:	200006b4 	.word	0x200006b4
 8002868:	200002a4 	.word	0x200002a4
 800286c:	20000258 	.word	0x20000258
 8002870:	2000025c 	.word	0x2000025c
 8002874:	20000260 	.word	0x20000260
 8002878:	bfe00000 	.word	0xbfe00000
 800287c:	3f5db3d7 	.word	0x3f5db3d7
 8002880:	20000264 	.word	0x20000264
 8002884:	20000268 	.word	0x20000268
 8002888:	200002e0 	.word	0x200002e0
 800288c:	20000378 	.word	0x20000378

08002890 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002890:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002894:	b084      	sub	sp, #16
 8002896:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002898:	f001 fa4a 	bl	8003d30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800289c:	f000 f902 	bl	8002aa4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028a0:	f000 fcb0 	bl	8003204 <MX_GPIO_Init>
  MX_DMA_Init();
 80028a4:	f000 fc78 	bl	8003198 <MX_DMA_Init>
  MX_TIM1_Init();
 80028a8:	f000 fa80 	bl	8002dac <MX_TIM1_Init>
  MX_ADC1_Init();
 80028ac:	f000 f96e 	bl	8002b8c <MX_ADC1_Init>
  MX_SPI1_Init();
 80028b0:	f000 fa44 	bl	8002d3c <MX_SPI1_Init>
  MX_TIM3_Init();
 80028b4:	f000 fb7e 	bl	8002fb4 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80028b8:	f000 fc44 	bl	8003144 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80028bc:	f000 fb2e 	bl	8002f1c <MX_TIM2_Init>
  MX_TIM8_Init();
 80028c0:	f000 fbc6 	bl	8003050 <MX_TIM8_Init>
  MX_UART4_Init();
 80028c4:	f000 fc14 	bl	80030f0 <MX_UART4_Init>
  MX_ADC2_Init();
 80028c8:	f000 f9e6 	bl	8002c98 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 80028cc:	4862      	ldr	r0, [pc, #392]	@ (8002a58 <main+0x1c8>)
 80028ce:	f004 fd49 	bl	8007364 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80028d2:	2100      	movs	r1, #0
 80028d4:	4860      	ldr	r0, [pc, #384]	@ (8002a58 <main+0x1c8>)
 80028d6:	f004 fe77 	bl	80075c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80028da:	2104      	movs	r1, #4
 80028dc:	485e      	ldr	r0, [pc, #376]	@ (8002a58 <main+0x1c8>)
 80028de:	f004 fe73 	bl	80075c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80028e2:	2108      	movs	r1, #8
 80028e4:	485c      	ldr	r0, [pc, #368]	@ (8002a58 <main+0x1c8>)
 80028e6:	f004 fe6f 	bl	80075c8 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim8);
 80028ea:	485c      	ldr	r0, [pc, #368]	@ (8002a5c <main+0x1cc>)
 80028ec:	f004 fda2 	bl	8007434 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim3);
 80028f0:	485b      	ldr	r0, [pc, #364]	@ (8002a60 <main+0x1d0>)
 80028f2:	f004 fd37 	bl	8007364 <HAL_TIM_Base_Start>
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 80028f6:	4b5b      	ldr	r3, [pc, #364]	@ (8002a64 <main+0x1d4>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2200      	movs	r2, #0
 80028fc:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_TIM_Base_Start(&htim2);
 80028fe:	4859      	ldr	r0, [pc, #356]	@ (8002a64 <main+0x1d4>)
 8002900:	f004 fd30 	bl	8007364 <HAL_TIM_Base_Start>
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 8002904:	4858      	ldr	r0, [pc, #352]	@ (8002a68 <main+0x1d8>)
 8002906:	f001 ffdb 	bl	80048c0 <HAL_ADCEx_InjectedStart_IT>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 800290a:	2201      	movs	r2, #1
 800290c:	2108      	movs	r1, #8
 800290e:	4857      	ldr	r0, [pc, #348]	@ (8002a6c <main+0x1dc>)
 8002910:	f003 f922 	bl	8005b58 <HAL_GPIO_WritePin>
  HAL_ADC_Start_DMA(&hadc2, &adc_dma_value, 1);
 8002914:	2201      	movs	r2, #1
 8002916:	4956      	ldr	r1, [pc, #344]	@ (8002a70 <main+0x1e0>)
 8002918:	4856      	ldr	r0, [pc, #344]	@ (8002a74 <main+0x1e4>)
 800291a:	f001 fbf3 	bl	8004104 <HAL_ADC_Start_DMA>
  angle = AS5147U_GetAngleRad();
 800291e:	f7fe fc53 	bl	80011c8 <AS5147U_GetAngleRad>
 8002922:	eef0 7a40 	vmov.f32	s15, s0
 8002926:	4b54      	ldr	r3, [pc, #336]	@ (8002a78 <main+0x1e8>)
 8002928:	edc3 7a00 	vstr	s15, [r3]
  alignRotor();
 800292c:	f7fe fd28 	bl	8001380 <alignRotor>
  position_loop();
 8002930:	f7ff fa2a 	bl	8001d88 <position_loop>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (flag_current_loop)
 8002934:	4b51      	ldr	r3, [pc, #324]	@ (8002a7c <main+0x1ec>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d04f      	beq.n	80029de <main+0x14e>
	     {
	         flag_current_loop = 0;
 800293e:	4b4f      	ldr	r3, [pc, #316]	@ (8002a7c <main+0x1ec>)
 8002940:	2200      	movs	r2, #0
 8002942:	701a      	strb	r2, [r3, #0]
	         update_PID();
 8002944:	f7fe fffa 	bl	800193c <update_PID>
	         Current_Loop();
 8002948:	f7ff fcf0 	bl	800232c <Current_Loop>
	         Speed_Loop();
 800294c:	f7ff fb64 	bl	8002018 <Speed_Loop>
	         i++;
 8002950:	4b4b      	ldr	r3, [pc, #300]	@ (8002a80 <main+0x1f0>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	3301      	adds	r3, #1
 8002956:	4a4a      	ldr	r2, [pc, #296]	@ (8002a80 <main+0x1f0>)
 8002958:	6013      	str	r3, [r2, #0]
	         position_loop_counter++;
 800295a:	4b4a      	ldr	r3, [pc, #296]	@ (8002a84 <main+0x1f4>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	3301      	adds	r3, #1
 8002960:	4a48      	ldr	r2, [pc, #288]	@ (8002a84 <main+0x1f4>)
 8002962:	6013      	str	r3, [r2, #0]
	         if(position_loop_counter >= 12)
 8002964:	4b47      	ldr	r3, [pc, #284]	@ (8002a84 <main+0x1f4>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2b0b      	cmp	r3, #11
 800296a:	dd04      	ble.n	8002976 <main+0xe6>
	         {
       	     position_loop();
 800296c:	f7ff fa0c 	bl	8001d88 <position_loop>
          	 position_loop_counter = 0;
 8002970:	4b44      	ldr	r3, [pc, #272]	@ (8002a84 <main+0x1f4>)
 8002972:	2200      	movs	r2, #0
 8002974:	601a      	str	r2, [r3, #0]
	                   }
*/

// demo vòng vị trí

	                   if(i == 2000)
 8002976:	4b42      	ldr	r3, [pc, #264]	@ (8002a80 <main+0x1f0>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800297e:	d113      	bne.n	80029a8 <main+0x118>
	                   {
	                	   theta_ref += M_PI*6;
 8002980:	4b41      	ldr	r3, [pc, #260]	@ (8002a88 <main+0x1f8>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f7fd fdff 	bl	8000588 <__aeabi_f2d>
 800298a:	a32f      	add	r3, pc, #188	@ (adr r3, 8002a48 <main+0x1b8>)
 800298c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002990:	f7fd fc9c 	bl	80002cc <__adddf3>
 8002994:	4602      	mov	r2, r0
 8002996:	460b      	mov	r3, r1
 8002998:	4610      	mov	r0, r2
 800299a:	4619      	mov	r1, r3
 800299c:	f7fe f944 	bl	8000c28 <__aeabi_d2f>
 80029a0:	4603      	mov	r3, r0
 80029a2:	4a39      	ldr	r2, [pc, #228]	@ (8002a88 <main+0x1f8>)
 80029a4:	6013      	str	r3, [r2, #0]
 80029a6:	e01a      	b.n	80029de <main+0x14e>
                        // i = 0;
	                   }
	                   else if (i == 4000)
 80029a8:	4b35      	ldr	r3, [pc, #212]	@ (8002a80 <main+0x1f0>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80029b0:	d115      	bne.n	80029de <main+0x14e>
	                   {
	                	   theta_ref -= M_PI*3;
 80029b2:	4b35      	ldr	r3, [pc, #212]	@ (8002a88 <main+0x1f8>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7fd fde6 	bl	8000588 <__aeabi_f2d>
 80029bc:	a324      	add	r3, pc, #144	@ (adr r3, 8002a50 <main+0x1c0>)
 80029be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c2:	f7fd fc81 	bl	80002c8 <__aeabi_dsub>
 80029c6:	4602      	mov	r2, r0
 80029c8:	460b      	mov	r3, r1
 80029ca:	4610      	mov	r0, r2
 80029cc:	4619      	mov	r1, r3
 80029ce:	f7fe f92b 	bl	8000c28 <__aeabi_d2f>
 80029d2:	4603      	mov	r3, r0
 80029d4:	4a2c      	ldr	r2, [pc, #176]	@ (8002a88 <main+0x1f8>)
 80029d6:	6013      	str	r3, [r2, #0]
	                	   i = 0;
 80029d8:	4b29      	ldr	r3, [pc, #164]	@ (8002a80 <main+0x1f0>)
 80029da:	2200      	movs	r2, #0
 80029dc:	601a      	str	r2, [r3, #0]
	                   }
	     }
	      if (!uart_busy)
 80029de:	4b2b      	ldr	r3, [pc, #172]	@ (8002a8c <main+0x1fc>)
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1a5      	bne.n	8002934 <main+0xa4>
//	    sprintf((char*)array_iq, "%f\t%f\t\r\n", velocity_ref, velocity);
//	    uart_busy = 1; // Đánh dấu UART đang bận
//	    HAL_UART_Transmit_DMA(&huart2, array_iq, strlen((char*)array_iq));


	    	  	    sprintf((char*)array_iq, "%f\t%f\t%f\t\r\n", theta_ref, theta_now,velocity);
 80029e8:	4b27      	ldr	r3, [pc, #156]	@ (8002a88 <main+0x1f8>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7fd fdcb 	bl	8000588 <__aeabi_f2d>
 80029f2:	4680      	mov	r8, r0
 80029f4:	4689      	mov	r9, r1
 80029f6:	4b26      	ldr	r3, [pc, #152]	@ (8002a90 <main+0x200>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7fd fdc4 	bl	8000588 <__aeabi_f2d>
 8002a00:	4604      	mov	r4, r0
 8002a02:	460d      	mov	r5, r1
 8002a04:	4b23      	ldr	r3, [pc, #140]	@ (8002a94 <main+0x204>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7fd fdbd 	bl	8000588 <__aeabi_f2d>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	460b      	mov	r3, r1
 8002a12:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002a16:	e9cd 4500 	strd	r4, r5, [sp]
 8002a1a:	4642      	mov	r2, r8
 8002a1c:	464b      	mov	r3, r9
 8002a1e:	491e      	ldr	r1, [pc, #120]	@ (8002a98 <main+0x208>)
 8002a20:	481e      	ldr	r0, [pc, #120]	@ (8002a9c <main+0x20c>)
 8002a22:	f007 faad 	bl	8009f80 <siprintf>
	    	  	    uart_busy = 1; // Đánh dấu UART đang bận
 8002a26:	4b19      	ldr	r3, [pc, #100]	@ (8002a8c <main+0x1fc>)
 8002a28:	2201      	movs	r2, #1
 8002a2a:	701a      	strb	r2, [r3, #0]
	    	  	    HAL_UART_Transmit_DMA(&huart2, array_iq, strlen((char*)array_iq));
 8002a2c:	481b      	ldr	r0, [pc, #108]	@ (8002a9c <main+0x20c>)
 8002a2e:	f7fd fc3f 	bl	80002b0 <strlen>
 8002a32:	4603      	mov	r3, r0
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	461a      	mov	r2, r3
 8002a38:	4918      	ldr	r1, [pc, #96]	@ (8002a9c <main+0x20c>)
 8002a3a:	4819      	ldr	r0, [pc, #100]	@ (8002aa0 <main+0x210>)
 8002a3c:	f005 fd7c 	bl	8008538 <HAL_UART_Transmit_DMA>
	  if (flag_current_loop)
 8002a40:	e778      	b.n	8002934 <main+0xa4>
 8002a42:	bf00      	nop
 8002a44:	f3af 8000 	nop.w
 8002a48:	7f3321d2 	.word	0x7f3321d2
 8002a4c:	4032d97c 	.word	0x4032d97c
 8002a50:	7f3321d2 	.word	0x7f3321d2
 8002a54:	4022d97c 	.word	0x4022d97c
 8002a58:	20000478 	.word	0x20000478
 8002a5c:	20000550 	.word	0x20000550
 8002a60:	20000508 	.word	0x20000508
 8002a64:	200004c0 	.word	0x200004c0
 8002a68:	20000330 	.word	0x20000330
 8002a6c:	40020400 	.word	0x40020400
 8002a70:	200002e0 	.word	0x200002e0
 8002a74:	20000378 	.word	0x20000378
 8002a78:	2000026c 	.word	0x2000026c
 8002a7c:	200002dc 	.word	0x200002dc
 8002a80:	200002d8 	.word	0x200002d8
 8002a84:	200002d4 	.word	0x200002d4
 8002a88:	20000288 	.word	0x20000288
 8002a8c:	200002dd 	.word	0x200002dd
 8002a90:	20000294 	.word	0x20000294
 8002a94:	2000028c 	.word	0x2000028c
 8002a98:	0800d5b0 	.word	0x0800d5b0
 8002a9c:	200002f4 	.word	0x200002f4
 8002aa0:	200005e0 	.word	0x200005e0

08002aa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b094      	sub	sp, #80	@ 0x50
 8002aa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002aaa:	f107 031c 	add.w	r3, r7, #28
 8002aae:	2234      	movs	r2, #52	@ 0x34
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f007 fac7 	bl	800a046 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ab8:	f107 0308 	add.w	r3, r7, #8
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	605a      	str	r2, [r3, #4]
 8002ac2:	609a      	str	r2, [r3, #8]
 8002ac4:	60da      	str	r2, [r3, #12]
 8002ac6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ac8:	2300      	movs	r3, #0
 8002aca:	607b      	str	r3, [r7, #4]
 8002acc:	4b2d      	ldr	r3, [pc, #180]	@ (8002b84 <SystemClock_Config+0xe0>)
 8002ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad0:	4a2c      	ldr	r2, [pc, #176]	@ (8002b84 <SystemClock_Config+0xe0>)
 8002ad2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ad6:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ad8:	4b2a      	ldr	r3, [pc, #168]	@ (8002b84 <SystemClock_Config+0xe0>)
 8002ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002adc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ae0:	607b      	str	r3, [r7, #4]
 8002ae2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	603b      	str	r3, [r7, #0]
 8002ae8:	4b27      	ldr	r3, [pc, #156]	@ (8002b88 <SystemClock_Config+0xe4>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a26      	ldr	r2, [pc, #152]	@ (8002b88 <SystemClock_Config+0xe4>)
 8002aee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002af2:	6013      	str	r3, [r2, #0]
 8002af4:	4b24      	ldr	r3, [pc, #144]	@ (8002b88 <SystemClock_Config+0xe4>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002afc:	603b      	str	r3, [r7, #0]
 8002afe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b00:	2302      	movs	r3, #2
 8002b02:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b04:	2301      	movs	r3, #1
 8002b06:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b08:	2310      	movs	r3, #16
 8002b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002b10:	2300      	movs	r3, #0
 8002b12:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002b14:	2310      	movs	r3, #16
 8002b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8002b18:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8002b1c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002b1e:	2302      	movs	r3, #2
 8002b20:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002b22:	2302      	movs	r3, #2
 8002b24:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002b26:	2302      	movs	r3, #2
 8002b28:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b2a:	f107 031c 	add.w	r3, r7, #28
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f003 fbc6 	bl	80062c0 <HAL_RCC_OscConfig>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002b3a:	f000 fcf7 	bl	800352c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002b3e:	f003 f825 	bl	8005b8c <HAL_PWREx_EnableOverDrive>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8002b48:	f000 fcf0 	bl	800352c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b4c:	230f      	movs	r3, #15
 8002b4e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b50:	2302      	movs	r3, #2
 8002b52:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b54:	2300      	movs	r3, #0
 8002b56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002b58:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002b5c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002b5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b62:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002b64:	f107 0308 	add.w	r3, r7, #8
 8002b68:	2105      	movs	r1, #5
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f003 f85e 	bl	8005c2c <HAL_RCC_ClockConfig>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8002b76:	f000 fcd9 	bl	800352c <Error_Handler>
  }
}
 8002b7a:	bf00      	nop
 8002b7c:	3750      	adds	r7, #80	@ 0x50
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	40023800 	.word	0x40023800
 8002b88:	40007000 	.word	0x40007000

08002b8c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b08c      	sub	sp, #48	@ 0x30
 8002b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002b92:	f107 0320 	add.w	r3, r7, #32
 8002b96:	2200      	movs	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	605a      	str	r2, [r3, #4]
 8002b9c:	609a      	str	r2, [r3, #8]
 8002b9e:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8002ba0:	463b      	mov	r3, r7
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f007 fa4d 	bl	800a046 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002bac:	4b37      	ldr	r3, [pc, #220]	@ (8002c8c <MX_ADC1_Init+0x100>)
 8002bae:	4a38      	ldr	r2, [pc, #224]	@ (8002c90 <MX_ADC1_Init+0x104>)
 8002bb0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8002bb2:	4b36      	ldr	r3, [pc, #216]	@ (8002c8c <MX_ADC1_Init+0x100>)
 8002bb4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002bb8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002bba:	4b34      	ldr	r3, [pc, #208]	@ (8002c8c <MX_ADC1_Init+0x100>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002bc0:	4b32      	ldr	r3, [pc, #200]	@ (8002c8c <MX_ADC1_Init+0x100>)
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002bc6:	4b31      	ldr	r3, [pc, #196]	@ (8002c8c <MX_ADC1_Init+0x100>)
 8002bc8:	2201      	movs	r2, #1
 8002bca:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002bcc:	4b2f      	ldr	r3, [pc, #188]	@ (8002c8c <MX_ADC1_Init+0x100>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002bd4:	4b2d      	ldr	r3, [pc, #180]	@ (8002c8c <MX_ADC1_Init+0x100>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002bda:	4b2c      	ldr	r3, [pc, #176]	@ (8002c8c <MX_ADC1_Init+0x100>)
 8002bdc:	4a2d      	ldr	r2, [pc, #180]	@ (8002c94 <MX_ADC1_Init+0x108>)
 8002bde:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002be0:	4b2a      	ldr	r3, [pc, #168]	@ (8002c8c <MX_ADC1_Init+0x100>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002be6:	4b29      	ldr	r3, [pc, #164]	@ (8002c8c <MX_ADC1_Init+0x100>)
 8002be8:	2201      	movs	r2, #1
 8002bea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002bec:	4b27      	ldr	r3, [pc, #156]	@ (8002c8c <MX_ADC1_Init+0x100>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002bf4:	4b25      	ldr	r3, [pc, #148]	@ (8002c8c <MX_ADC1_Init+0x100>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002bfa:	4824      	ldr	r0, [pc, #144]	@ (8002c8c <MX_ADC1_Init+0x100>)
 8002bfc:	f001 f92e 	bl	8003e5c <HAL_ADC_Init>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 8002c06:	f000 fc91 	bl	800352c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002c12:	2307      	movs	r3, #7
 8002c14:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c16:	f107 0320 	add.w	r3, r7, #32
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	481b      	ldr	r0, [pc, #108]	@ (8002c8c <MX_ADC1_Init+0x100>)
 8002c1e:	f001 fb9f 	bl	8004360 <HAL_ADC_ConfigChannel>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8002c28:	f000 fc80 	bl	800352c <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8002c30:	2301      	movs	r3, #1
 8002c32:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 2;
 8002c34:	2302      	movs	r3, #2
 8002c36:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002c38:	2307      	movs	r3, #7
 8002c3a:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 8002c3c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002c40:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_TRGO;
 8002c42:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c46:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = ENABLE;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8002c50:	2300      	movs	r3, #0
 8002c52:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8002c54:	463b      	mov	r3, r7
 8002c56:	4619      	mov	r1, r3
 8002c58:	480c      	ldr	r0, [pc, #48]	@ (8002c8c <MX_ADC1_Init+0x100>)
 8002c5a:	f001 ff3b 	bl	8004ad4 <HAL_ADCEx_InjectedConfigChannel>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8002c64:	f000 fc62 	bl	800352c <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8002c68:	2304      	movs	r3, #4
 8002c6a:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8002c70:	463b      	mov	r3, r7
 8002c72:	4619      	mov	r1, r3
 8002c74:	4805      	ldr	r0, [pc, #20]	@ (8002c8c <MX_ADC1_Init+0x100>)
 8002c76:	f001 ff2d 	bl	8004ad4 <HAL_ADCEx_InjectedConfigChannel>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8002c80:	f000 fc54 	bl	800352c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002c84:	bf00      	nop
 8002c86:	3730      	adds	r7, #48	@ 0x30
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	20000330 	.word	0x20000330
 8002c90:	40012000 	.word	0x40012000
 8002c94:	0f000001 	.word	0x0f000001

08002c98 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002c9e:	463b      	mov	r3, r7
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	605a      	str	r2, [r3, #4]
 8002ca6:	609a      	str	r2, [r3, #8]
 8002ca8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8002caa:	4b21      	ldr	r3, [pc, #132]	@ (8002d30 <MX_ADC2_Init+0x98>)
 8002cac:	4a21      	ldr	r2, [pc, #132]	@ (8002d34 <MX_ADC2_Init+0x9c>)
 8002cae:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8002cb0:	4b1f      	ldr	r3, [pc, #124]	@ (8002d30 <MX_ADC2_Init+0x98>)
 8002cb2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002cb6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002cb8:	4b1d      	ldr	r3, [pc, #116]	@ (8002d30 <MX_ADC2_Init+0x98>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8002cbe:	4b1c      	ldr	r3, [pc, #112]	@ (8002d30 <MX_ADC2_Init+0x98>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002cc4:	4b1a      	ldr	r3, [pc, #104]	@ (8002d30 <MX_ADC2_Init+0x98>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002cca:	4b19      	ldr	r3, [pc, #100]	@ (8002d30 <MX_ADC2_Init+0x98>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002cd2:	4b17      	ldr	r3, [pc, #92]	@ (8002d30 <MX_ADC2_Init+0x98>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002cd8:	4b15      	ldr	r3, [pc, #84]	@ (8002d30 <MX_ADC2_Init+0x98>)
 8002cda:	4a17      	ldr	r2, [pc, #92]	@ (8002d38 <MX_ADC2_Init+0xa0>)
 8002cdc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002cde:	4b14      	ldr	r3, [pc, #80]	@ (8002d30 <MX_ADC2_Init+0x98>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8002ce4:	4b12      	ldr	r3, [pc, #72]	@ (8002d30 <MX_ADC2_Init+0x98>)
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002cea:	4b11      	ldr	r3, [pc, #68]	@ (8002d30 <MX_ADC2_Init+0x98>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002cf2:	4b0f      	ldr	r3, [pc, #60]	@ (8002d30 <MX_ADC2_Init+0x98>)
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002cf8:	480d      	ldr	r0, [pc, #52]	@ (8002d30 <MX_ADC2_Init+0x98>)
 8002cfa:	f001 f8af 	bl	8003e5c <HAL_ADC_Init>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8002d04:	f000 fc12 	bl	800352c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8002d10:	2301      	movs	r3, #1
 8002d12:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002d14:	463b      	mov	r3, r7
 8002d16:	4619      	mov	r1, r3
 8002d18:	4805      	ldr	r0, [pc, #20]	@ (8002d30 <MX_ADC2_Init+0x98>)
 8002d1a:	f001 fb21 	bl	8004360 <HAL_ADC_ConfigChannel>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8002d24:	f000 fc02 	bl	800352c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002d28:	bf00      	nop
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	20000378 	.word	0x20000378
 8002d34:	40012100 	.word	0x40012100
 8002d38:	0f000001 	.word	0x0f000001

08002d3c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002d40:	4b18      	ldr	r3, [pc, #96]	@ (8002da4 <MX_SPI1_Init+0x68>)
 8002d42:	4a19      	ldr	r2, [pc, #100]	@ (8002da8 <MX_SPI1_Init+0x6c>)
 8002d44:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002d46:	4b17      	ldr	r3, [pc, #92]	@ (8002da4 <MX_SPI1_Init+0x68>)
 8002d48:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002d4c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002d4e:	4b15      	ldr	r3, [pc, #84]	@ (8002da4 <MX_SPI1_Init+0x68>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8002d54:	4b13      	ldr	r3, [pc, #76]	@ (8002da4 <MX_SPI1_Init+0x68>)
 8002d56:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002d5a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d5c:	4b11      	ldr	r3, [pc, #68]	@ (8002da4 <MX_SPI1_Init+0x68>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002d62:	4b10      	ldr	r3, [pc, #64]	@ (8002da4 <MX_SPI1_Init+0x68>)
 8002d64:	2201      	movs	r2, #1
 8002d66:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002d68:	4b0e      	ldr	r3, [pc, #56]	@ (8002da4 <MX_SPI1_Init+0x68>)
 8002d6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d6e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002d70:	4b0c      	ldr	r3, [pc, #48]	@ (8002da4 <MX_SPI1_Init+0x68>)
 8002d72:	2218      	movs	r2, #24
 8002d74:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d76:	4b0b      	ldr	r3, [pc, #44]	@ (8002da4 <MX_SPI1_Init+0x68>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d7c:	4b09      	ldr	r3, [pc, #36]	@ (8002da4 <MX_SPI1_Init+0x68>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d82:	4b08      	ldr	r3, [pc, #32]	@ (8002da4 <MX_SPI1_Init+0x68>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002d88:	4b06      	ldr	r3, [pc, #24]	@ (8002da4 <MX_SPI1_Init+0x68>)
 8002d8a:	220a      	movs	r2, #10
 8002d8c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d8e:	4805      	ldr	r0, [pc, #20]	@ (8002da4 <MX_SPI1_Init+0x68>)
 8002d90:	f003 fd34 	bl	80067fc <HAL_SPI_Init>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8002d9a:	f000 fbc7 	bl	800352c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d9e:	bf00      	nop
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	20000420 	.word	0x20000420
 8002da8:	40013000 	.word	0x40013000

08002dac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b096      	sub	sp, #88	@ 0x58
 8002db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002db2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002db6:	2200      	movs	r2, #0
 8002db8:	601a      	str	r2, [r3, #0]
 8002dba:	605a      	str	r2, [r3, #4]
 8002dbc:	609a      	str	r2, [r3, #8]
 8002dbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dc0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002dce:	2200      	movs	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]
 8002dd2:	605a      	str	r2, [r3, #4]
 8002dd4:	609a      	str	r2, [r3, #8]
 8002dd6:	60da      	str	r2, [r3, #12]
 8002dd8:	611a      	str	r2, [r3, #16]
 8002dda:	615a      	str	r2, [r3, #20]
 8002ddc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002dde:	1d3b      	adds	r3, r7, #4
 8002de0:	2220      	movs	r2, #32
 8002de2:	2100      	movs	r1, #0
 8002de4:	4618      	mov	r0, r3
 8002de6:	f007 f92e 	bl	800a046 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002dea:	4b4a      	ldr	r3, [pc, #296]	@ (8002f14 <MX_TIM1_Init+0x168>)
 8002dec:	4a4a      	ldr	r2, [pc, #296]	@ (8002f18 <MX_TIM1_Init+0x16c>)
 8002dee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002df0:	4b48      	ldr	r3, [pc, #288]	@ (8002f14 <MX_TIM1_Init+0x168>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002df6:	4b47      	ldr	r3, [pc, #284]	@ (8002f14 <MX_TIM1_Init+0x168>)
 8002df8:	2220      	movs	r2, #32
 8002dfa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2999;
 8002dfc:	4b45      	ldr	r3, [pc, #276]	@ (8002f14 <MX_TIM1_Init+0x168>)
 8002dfe:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8002e02:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e04:	4b43      	ldr	r3, [pc, #268]	@ (8002f14 <MX_TIM1_Init+0x168>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002e0a:	4b42      	ldr	r3, [pc, #264]	@ (8002f14 <MX_TIM1_Init+0x168>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e10:	4b40      	ldr	r3, [pc, #256]	@ (8002f14 <MX_TIM1_Init+0x168>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002e16:	483f      	ldr	r0, [pc, #252]	@ (8002f14 <MX_TIM1_Init+0x168>)
 8002e18:	f004 fa54 	bl	80072c4 <HAL_TIM_Base_Init>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002e22:	f000 fb83 	bl	800352c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e2a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002e2c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002e30:	4619      	mov	r1, r3
 8002e32:	4838      	ldr	r0, [pc, #224]	@ (8002f14 <MX_TIM1_Init+0x168>)
 8002e34:	f004 fe42 	bl	8007abc <HAL_TIM_ConfigClockSource>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002e3e:	f000 fb75 	bl	800352c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002e42:	4834      	ldr	r0, [pc, #208]	@ (8002f14 <MX_TIM1_Init+0x168>)
 8002e44:	f004 fb66 	bl	8007514 <HAL_TIM_PWM_Init>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002e4e:	f000 fb6d 	bl	800352c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002e52:	2320      	movs	r3, #32
 8002e54:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e56:	2300      	movs	r3, #0
 8002e58:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002e5a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002e5e:	4619      	mov	r1, r3
 8002e60:	482c      	ldr	r0, [pc, #176]	@ (8002f14 <MX_TIM1_Init+0x168>)
 8002e62:	f005 fa37 	bl	80082d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002e6c:	f000 fb5e 	bl	800352c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002e70:	2370      	movs	r3, #112	@ 0x70
 8002e72:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002e74:	2300      	movs	r3, #0
 8002e76:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002e80:	2304      	movs	r3, #4
 8002e82:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002e84:	2300      	movs	r3, #0
 8002e86:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e90:	2200      	movs	r2, #0
 8002e92:	4619      	mov	r1, r3
 8002e94:	481f      	ldr	r0, [pc, #124]	@ (8002f14 <MX_TIM1_Init+0x168>)
 8002e96:	f004 fd4f 	bl	8007938 <HAL_TIM_PWM_ConfigChannel>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002ea0:	f000 fb44 	bl	800352c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ea4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ea8:	2204      	movs	r2, #4
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4819      	ldr	r0, [pc, #100]	@ (8002f14 <MX_TIM1_Init+0x168>)
 8002eae:	f004 fd43 	bl	8007938 <HAL_TIM_PWM_ConfigChannel>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002eb8:	f000 fb38 	bl	800352c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002ebc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ec0:	2208      	movs	r2, #8
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4813      	ldr	r0, [pc, #76]	@ (8002f14 <MX_TIM1_Init+0x168>)
 8002ec6:	f004 fd37 	bl	8007938 <HAL_TIM_PWM_ConfigChannel>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002ed0:	f000 fb2c 	bl	800352c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002edc:	2300      	movs	r3, #0
 8002ede:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002ee8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002eec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002ef2:	1d3b      	adds	r3, r7, #4
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	4807      	ldr	r0, [pc, #28]	@ (8002f14 <MX_TIM1_Init+0x168>)
 8002ef8:	f005 fa68 	bl	80083cc <HAL_TIMEx_ConfigBreakDeadTime>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8002f02:	f000 fb13 	bl	800352c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002f06:	4803      	ldr	r0, [pc, #12]	@ (8002f14 <MX_TIM1_Init+0x168>)
 8002f08:	f000 fcae 	bl	8003868 <HAL_TIM_MspPostInit>

}
 8002f0c:	bf00      	nop
 8002f0e:	3758      	adds	r7, #88	@ 0x58
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	20000478 	.word	0x20000478
 8002f18:	40010000 	.word	0x40010000

08002f1c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f22:	f107 0308 	add.w	r3, r7, #8
 8002f26:	2200      	movs	r2, #0
 8002f28:	601a      	str	r2, [r3, #0]
 8002f2a:	605a      	str	r2, [r3, #4]
 8002f2c:	609a      	str	r2, [r3, #8]
 8002f2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f30:	463b      	mov	r3, r7
 8002f32:	2200      	movs	r2, #0
 8002f34:	601a      	str	r2, [r3, #0]
 8002f36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002f38:	4b1d      	ldr	r3, [pc, #116]	@ (8002fb0 <MX_TIM2_Init+0x94>)
 8002f3a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002f3e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 44;
 8002f40:	4b1b      	ldr	r3, [pc, #108]	@ (8002fb0 <MX_TIM2_Init+0x94>)
 8002f42:	222c      	movs	r2, #44	@ 0x2c
 8002f44:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f46:	4b1a      	ldr	r3, [pc, #104]	@ (8002fb0 <MX_TIM2_Init+0x94>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002f4c:	4b18      	ldr	r3, [pc, #96]	@ (8002fb0 <MX_TIM2_Init+0x94>)
 8002f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8002f52:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f54:	4b16      	ldr	r3, [pc, #88]	@ (8002fb0 <MX_TIM2_Init+0x94>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f5a:	4b15      	ldr	r3, [pc, #84]	@ (8002fb0 <MX_TIM2_Init+0x94>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002f60:	4813      	ldr	r0, [pc, #76]	@ (8002fb0 <MX_TIM2_Init+0x94>)
 8002f62:	f004 f9af 	bl	80072c4 <HAL_TIM_Base_Init>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002f6c:	f000 fade 	bl	800352c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002f76:	f107 0308 	add.w	r3, r7, #8
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	480c      	ldr	r0, [pc, #48]	@ (8002fb0 <MX_TIM2_Init+0x94>)
 8002f7e:	f004 fd9d 	bl	8007abc <HAL_TIM_ConfigClockSource>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002f88:	f000 fad0 	bl	800352c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f90:	2300      	movs	r3, #0
 8002f92:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f94:	463b      	mov	r3, r7
 8002f96:	4619      	mov	r1, r3
 8002f98:	4805      	ldr	r0, [pc, #20]	@ (8002fb0 <MX_TIM2_Init+0x94>)
 8002f9a:	f005 f99b 	bl	80082d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002fa4:	f000 fac2 	bl	800352c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002fa8:	bf00      	nop
 8002faa:	3718      	adds	r7, #24
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	200004c0 	.word	0x200004c0

08002fb4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fba:	f107 0308 	add.w	r3, r7, #8
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	605a      	str	r2, [r3, #4]
 8002fc4:	609a      	str	r2, [r3, #8]
 8002fc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fc8:	463b      	mov	r3, r7
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002fd0:	4b1d      	ldr	r3, [pc, #116]	@ (8003048 <MX_TIM3_Init+0x94>)
 8002fd2:	4a1e      	ldr	r2, [pc, #120]	@ (800304c <MX_TIM3_Init+0x98>)
 8002fd4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 19;
 8002fd6:	4b1c      	ldr	r3, [pc, #112]	@ (8003048 <MX_TIM3_Init+0x94>)
 8002fd8:	2213      	movs	r2, #19
 8002fda:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fdc:	4b1a      	ldr	r3, [pc, #104]	@ (8003048 <MX_TIM3_Init+0x94>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002fe2:	4b19      	ldr	r3, [pc, #100]	@ (8003048 <MX_TIM3_Init+0x94>)
 8002fe4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002fe8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fea:	4b17      	ldr	r3, [pc, #92]	@ (8003048 <MX_TIM3_Init+0x94>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ff0:	4b15      	ldr	r3, [pc, #84]	@ (8003048 <MX_TIM3_Init+0x94>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002ff6:	4814      	ldr	r0, [pc, #80]	@ (8003048 <MX_TIM3_Init+0x94>)
 8002ff8:	f004 f964 	bl	80072c4 <HAL_TIM_Base_Init>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8003002:	f000 fa93 	bl	800352c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003006:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800300a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800300c:	f107 0308 	add.w	r3, r7, #8
 8003010:	4619      	mov	r1, r3
 8003012:	480d      	ldr	r0, [pc, #52]	@ (8003048 <MX_TIM3_Init+0x94>)
 8003014:	f004 fd52 	bl	8007abc <HAL_TIM_ConfigClockSource>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800301e:	f000 fa85 	bl	800352c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003022:	2300      	movs	r3, #0
 8003024:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003026:	2300      	movs	r3, #0
 8003028:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800302a:	463b      	mov	r3, r7
 800302c:	4619      	mov	r1, r3
 800302e:	4806      	ldr	r0, [pc, #24]	@ (8003048 <MX_TIM3_Init+0x94>)
 8003030:	f005 f950 	bl	80082d4 <HAL_TIMEx_MasterConfigSynchronization>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800303a:	f000 fa77 	bl	800352c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800303e:	bf00      	nop
 8003040:	3718      	adds	r7, #24
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	20000508 	.word	0x20000508
 800304c:	40000400 	.word	0x40000400

08003050 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003056:	f107 0308 	add.w	r3, r7, #8
 800305a:	2200      	movs	r2, #0
 800305c:	601a      	str	r2, [r3, #0]
 800305e:	605a      	str	r2, [r3, #4]
 8003060:	609a      	str	r2, [r3, #8]
 8003062:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003064:	463b      	mov	r3, r7
 8003066:	2200      	movs	r2, #0
 8003068:	601a      	str	r2, [r3, #0]
 800306a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800306c:	4b1e      	ldr	r3, [pc, #120]	@ (80030e8 <MX_TIM8_Init+0x98>)
 800306e:	4a1f      	ldr	r2, [pc, #124]	@ (80030ec <MX_TIM8_Init+0x9c>)
 8003070:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 179;
 8003072:	4b1d      	ldr	r3, [pc, #116]	@ (80030e8 <MX_TIM8_Init+0x98>)
 8003074:	22b3      	movs	r2, #179	@ 0xb3
 8003076:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003078:	4b1b      	ldr	r3, [pc, #108]	@ (80030e8 <MX_TIM8_Init+0x98>)
 800307a:	2200      	movs	r2, #0
 800307c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 800307e:	4b1a      	ldr	r3, [pc, #104]	@ (80030e8 <MX_TIM8_Init+0x98>)
 8003080:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003084:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003086:	4b18      	ldr	r3, [pc, #96]	@ (80030e8 <MX_TIM8_Init+0x98>)
 8003088:	2200      	movs	r2, #0
 800308a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800308c:	4b16      	ldr	r3, [pc, #88]	@ (80030e8 <MX_TIM8_Init+0x98>)
 800308e:	2200      	movs	r2, #0
 8003090:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003092:	4b15      	ldr	r3, [pc, #84]	@ (80030e8 <MX_TIM8_Init+0x98>)
 8003094:	2200      	movs	r2, #0
 8003096:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003098:	4813      	ldr	r0, [pc, #76]	@ (80030e8 <MX_TIM8_Init+0x98>)
 800309a:	f004 f913 	bl	80072c4 <HAL_TIM_Base_Init>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 80030a4:	f000 fa42 	bl	800352c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80030ae:	f107 0308 	add.w	r3, r7, #8
 80030b2:	4619      	mov	r1, r3
 80030b4:	480c      	ldr	r0, [pc, #48]	@ (80030e8 <MX_TIM8_Init+0x98>)
 80030b6:	f004 fd01 	bl	8007abc <HAL_TIM_ConfigClockSource>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 80030c0:	f000 fa34 	bl	800352c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030c4:	2300      	movs	r3, #0
 80030c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030c8:	2300      	movs	r3, #0
 80030ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80030cc:	463b      	mov	r3, r7
 80030ce:	4619      	mov	r1, r3
 80030d0:	4805      	ldr	r0, [pc, #20]	@ (80030e8 <MX_TIM8_Init+0x98>)
 80030d2:	f005 f8ff 	bl	80082d4 <HAL_TIMEx_MasterConfigSynchronization>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d001      	beq.n	80030e0 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80030dc:	f000 fa26 	bl	800352c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80030e0:	bf00      	nop
 80030e2:	3718      	adds	r7, #24
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	20000550 	.word	0x20000550
 80030ec:	40010400 	.word	0x40010400

080030f0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80030f4:	4b11      	ldr	r3, [pc, #68]	@ (800313c <MX_UART4_Init+0x4c>)
 80030f6:	4a12      	ldr	r2, [pc, #72]	@ (8003140 <MX_UART4_Init+0x50>)
 80030f8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80030fa:	4b10      	ldr	r3, [pc, #64]	@ (800313c <MX_UART4_Init+0x4c>)
 80030fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003100:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003102:	4b0e      	ldr	r3, [pc, #56]	@ (800313c <MX_UART4_Init+0x4c>)
 8003104:	2200      	movs	r2, #0
 8003106:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003108:	4b0c      	ldr	r3, [pc, #48]	@ (800313c <MX_UART4_Init+0x4c>)
 800310a:	2200      	movs	r2, #0
 800310c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800310e:	4b0b      	ldr	r3, [pc, #44]	@ (800313c <MX_UART4_Init+0x4c>)
 8003110:	2200      	movs	r2, #0
 8003112:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003114:	4b09      	ldr	r3, [pc, #36]	@ (800313c <MX_UART4_Init+0x4c>)
 8003116:	220c      	movs	r2, #12
 8003118:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800311a:	4b08      	ldr	r3, [pc, #32]	@ (800313c <MX_UART4_Init+0x4c>)
 800311c:	2200      	movs	r2, #0
 800311e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003120:	4b06      	ldr	r3, [pc, #24]	@ (800313c <MX_UART4_Init+0x4c>)
 8003122:	2200      	movs	r2, #0
 8003124:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003126:	4805      	ldr	r0, [pc, #20]	@ (800313c <MX_UART4_Init+0x4c>)
 8003128:	f005 f9b6 	bl	8008498 <HAL_UART_Init>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8003132:	f000 f9fb 	bl	800352c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003136:	bf00      	nop
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	20000598 	.word	0x20000598
 8003140:	40004c00 	.word	0x40004c00

08003144 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003148:	4b11      	ldr	r3, [pc, #68]	@ (8003190 <MX_USART2_UART_Init+0x4c>)
 800314a:	4a12      	ldr	r2, [pc, #72]	@ (8003194 <MX_USART2_UART_Init+0x50>)
 800314c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800314e:	4b10      	ldr	r3, [pc, #64]	@ (8003190 <MX_USART2_UART_Init+0x4c>)
 8003150:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8003154:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003156:	4b0e      	ldr	r3, [pc, #56]	@ (8003190 <MX_USART2_UART_Init+0x4c>)
 8003158:	2200      	movs	r2, #0
 800315a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800315c:	4b0c      	ldr	r3, [pc, #48]	@ (8003190 <MX_USART2_UART_Init+0x4c>)
 800315e:	2200      	movs	r2, #0
 8003160:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003162:	4b0b      	ldr	r3, [pc, #44]	@ (8003190 <MX_USART2_UART_Init+0x4c>)
 8003164:	2200      	movs	r2, #0
 8003166:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003168:	4b09      	ldr	r3, [pc, #36]	@ (8003190 <MX_USART2_UART_Init+0x4c>)
 800316a:	220c      	movs	r2, #12
 800316c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800316e:	4b08      	ldr	r3, [pc, #32]	@ (8003190 <MX_USART2_UART_Init+0x4c>)
 8003170:	2200      	movs	r2, #0
 8003172:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003174:	4b06      	ldr	r3, [pc, #24]	@ (8003190 <MX_USART2_UART_Init+0x4c>)
 8003176:	2200      	movs	r2, #0
 8003178:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800317a:	4805      	ldr	r0, [pc, #20]	@ (8003190 <MX_USART2_UART_Init+0x4c>)
 800317c:	f005 f98c 	bl	8008498 <HAL_UART_Init>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003186:	f000 f9d1 	bl	800352c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800318a:	bf00      	nop
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	200005e0 	.word	0x200005e0
 8003194:	40004400 	.word	0x40004400

08003198 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800319e:	2300      	movs	r3, #0
 80031a0:	607b      	str	r3, [r7, #4]
 80031a2:	4b17      	ldr	r3, [pc, #92]	@ (8003200 <MX_DMA_Init+0x68>)
 80031a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a6:	4a16      	ldr	r2, [pc, #88]	@ (8003200 <MX_DMA_Init+0x68>)
 80031a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80031ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80031ae:	4b14      	ldr	r3, [pc, #80]	@ (8003200 <MX_DMA_Init+0x68>)
 80031b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031b6:	607b      	str	r3, [r7, #4]
 80031b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80031ba:	2300      	movs	r3, #0
 80031bc:	603b      	str	r3, [r7, #0]
 80031be:	4b10      	ldr	r3, [pc, #64]	@ (8003200 <MX_DMA_Init+0x68>)
 80031c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c2:	4a0f      	ldr	r2, [pc, #60]	@ (8003200 <MX_DMA_Init+0x68>)
 80031c4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80031c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80031ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003200 <MX_DMA_Init+0x68>)
 80031cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031d2:	603b      	str	r3, [r7, #0]
 80031d4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80031d6:	2200      	movs	r2, #0
 80031d8:	2100      	movs	r1, #0
 80031da:	2011      	movs	r0, #17
 80031dc:	f001 feef 	bl	8004fbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80031e0:	2011      	movs	r0, #17
 80031e2:	f001 ff08 	bl	8004ff6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80031e6:	2200      	movs	r2, #0
 80031e8:	2100      	movs	r1, #0
 80031ea:	203a      	movs	r0, #58	@ 0x3a
 80031ec:	f001 fee7 	bl	8004fbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80031f0:	203a      	movs	r0, #58	@ 0x3a
 80031f2:	f001 ff00 	bl	8004ff6 <HAL_NVIC_EnableIRQ>

}
 80031f6:	bf00      	nop
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	40023800 	.word	0x40023800

08003204 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b08a      	sub	sp, #40	@ 0x28
 8003208:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800320a:	f107 0314 	add.w	r3, r7, #20
 800320e:	2200      	movs	r2, #0
 8003210:	601a      	str	r2, [r3, #0]
 8003212:	605a      	str	r2, [r3, #4]
 8003214:	609a      	str	r2, [r3, #8]
 8003216:	60da      	str	r2, [r3, #12]
 8003218:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800321a:	2300      	movs	r3, #0
 800321c:	613b      	str	r3, [r7, #16]
 800321e:	4b2e      	ldr	r3, [pc, #184]	@ (80032d8 <MX_GPIO_Init+0xd4>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003222:	4a2d      	ldr	r2, [pc, #180]	@ (80032d8 <MX_GPIO_Init+0xd4>)
 8003224:	f043 0304 	orr.w	r3, r3, #4
 8003228:	6313      	str	r3, [r2, #48]	@ 0x30
 800322a:	4b2b      	ldr	r3, [pc, #172]	@ (80032d8 <MX_GPIO_Init+0xd4>)
 800322c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800322e:	f003 0304 	and.w	r3, r3, #4
 8003232:	613b      	str	r3, [r7, #16]
 8003234:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003236:	2300      	movs	r3, #0
 8003238:	60fb      	str	r3, [r7, #12]
 800323a:	4b27      	ldr	r3, [pc, #156]	@ (80032d8 <MX_GPIO_Init+0xd4>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800323e:	4a26      	ldr	r2, [pc, #152]	@ (80032d8 <MX_GPIO_Init+0xd4>)
 8003240:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003244:	6313      	str	r3, [r2, #48]	@ 0x30
 8003246:	4b24      	ldr	r3, [pc, #144]	@ (80032d8 <MX_GPIO_Init+0xd4>)
 8003248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800324a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800324e:	60fb      	str	r3, [r7, #12]
 8003250:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003252:	2300      	movs	r3, #0
 8003254:	60bb      	str	r3, [r7, #8]
 8003256:	4b20      	ldr	r3, [pc, #128]	@ (80032d8 <MX_GPIO_Init+0xd4>)
 8003258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800325a:	4a1f      	ldr	r2, [pc, #124]	@ (80032d8 <MX_GPIO_Init+0xd4>)
 800325c:	f043 0301 	orr.w	r3, r3, #1
 8003260:	6313      	str	r3, [r2, #48]	@ 0x30
 8003262:	4b1d      	ldr	r3, [pc, #116]	@ (80032d8 <MX_GPIO_Init+0xd4>)
 8003264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	60bb      	str	r3, [r7, #8]
 800326c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800326e:	2300      	movs	r3, #0
 8003270:	607b      	str	r3, [r7, #4]
 8003272:	4b19      	ldr	r3, [pc, #100]	@ (80032d8 <MX_GPIO_Init+0xd4>)
 8003274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003276:	4a18      	ldr	r2, [pc, #96]	@ (80032d8 <MX_GPIO_Init+0xd4>)
 8003278:	f043 0302 	orr.w	r3, r3, #2
 800327c:	6313      	str	r3, [r2, #48]	@ 0x30
 800327e:	4b16      	ldr	r3, [pc, #88]	@ (80032d8 <MX_GPIO_Init+0xd4>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	607b      	str	r3, [r7, #4]
 8003288:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_8, GPIO_PIN_RESET);
 800328a:	2200      	movs	r2, #0
 800328c:	f44f 7184 	mov.w	r1, #264	@ 0x108
 8003290:	4812      	ldr	r0, [pc, #72]	@ (80032dc <MX_GPIO_Init+0xd8>)
 8003292:	f002 fc61 	bl	8005b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003296:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800329a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800329c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80032a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a2:	2300      	movs	r3, #0
 80032a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032a6:	f107 0314 	add.w	r3, r7, #20
 80032aa:	4619      	mov	r1, r3
 80032ac:	480c      	ldr	r0, [pc, #48]	@ (80032e0 <MX_GPIO_Init+0xdc>)
 80032ae:	f002 fabf 	bl	8005830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_8;
 80032b2:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80032b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032b8:	2301      	movs	r3, #1
 80032ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032bc:	2300      	movs	r3, #0
 80032be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032c0:	2300      	movs	r3, #0
 80032c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032c4:	f107 0314 	add.w	r3, r7, #20
 80032c8:	4619      	mov	r1, r3
 80032ca:	4804      	ldr	r0, [pc, #16]	@ (80032dc <MX_GPIO_Init+0xd8>)
 80032cc:	f002 fab0 	bl	8005830 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80032d0:	bf00      	nop
 80032d2:	3728      	adds	r7, #40	@ 0x28
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	40023800 	.word	0x40023800
 80032dc:	40020400 	.word	0x40020400
 80032e0:	40020000 	.word	0x40020000
 80032e4:	00000000 	.word	0x00000000

080032e8 <HAL_ADCEx_InjectedConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1) {
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a50      	ldr	r2, [pc, #320]	@ (8003438 <HAL_ADCEx_InjectedConvCpltCallback+0x150>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	f040 808d 	bne.w	8003416 <HAL_ADCEx_InjectedConvCpltCallback+0x12e>


   	     cnt_val = __HAL_TIM_GET_COUNTER(&htim1);
 80032fc:	4b4f      	ldr	r3, [pc, #316]	@ (800343c <HAL_ADCEx_InjectedConvCpltCallback+0x154>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003302:	b29a      	uxth	r2, r3
 8003304:	4b4e      	ldr	r3, [pc, #312]	@ (8003440 <HAL_ADCEx_InjectedConvCpltCallback+0x158>)
 8003306:	801a      	strh	r2, [r3, #0]
   	     adc_inj_val[0]= HAL_ADCEx_InjectedGetValue(hadc, ADC_INJECTED_RANK_1);
 8003308:	2101      	movs	r1, #1
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f001 fbaa 	bl	8004a64 <HAL_ADCEx_InjectedGetValue>
 8003310:	4603      	mov	r3, r0
 8003312:	b29a      	uxth	r2, r3
 8003314:	4b4b      	ldr	r3, [pc, #300]	@ (8003444 <HAL_ADCEx_InjectedConvCpltCallback+0x15c>)
 8003316:	801a      	strh	r2, [r3, #0]
         adc_value_A0 = HAL_ADCEx_InjectedGetValue(hadc, ADC_INJECTED_RANK_1);
 8003318:	2101      	movs	r1, #1
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f001 fba2 	bl	8004a64 <HAL_ADCEx_InjectedGetValue>
 8003320:	4603      	mov	r3, r0
 8003322:	4a49      	ldr	r2, [pc, #292]	@ (8003448 <HAL_ADCEx_InjectedConvCpltCallback+0x160>)
 8003324:	6013      	str	r3, [r2, #0]
         adc_inj_val[1]= HAL_ADCEx_InjectedGetValue(hadc, ADC_INJECTED_RANK_2);
 8003326:	2102      	movs	r1, #2
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f001 fb9b 	bl	8004a64 <HAL_ADCEx_InjectedGetValue>
 800332e:	4603      	mov	r3, r0
 8003330:	b29a      	uxth	r2, r3
 8003332:	4b44      	ldr	r3, [pc, #272]	@ (8003444 <HAL_ADCEx_InjectedConvCpltCallback+0x15c>)
 8003334:	805a      	strh	r2, [r3, #2]
         adc_value_A2 = HAL_ADCEx_InjectedGetValue(hadc, ADC_INJECTED_RANK_2);
 8003336:	2102      	movs	r1, #2
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f001 fb93 	bl	8004a64 <HAL_ADCEx_InjectedGetValue>
 800333e:	4603      	mov	r3, r0
 8003340:	4a42      	ldr	r2, [pc, #264]	@ (800344c <HAL_ADCEx_InjectedConvCpltCallback+0x164>)
 8003342:	6013      	str	r3, [r2, #0]
         ia = (((adc_value_A0/4095.0)*3.3 - 1.65))/(50.0*0.01);
 8003344:	4b40      	ldr	r3, [pc, #256]	@ (8003448 <HAL_ADCEx_InjectedConvCpltCallback+0x160>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4618      	mov	r0, r3
 800334a:	f7fd f8fb 	bl	8000544 <__aeabi_ui2d>
 800334e:	a334      	add	r3, pc, #208	@ (adr r3, 8003420 <HAL_ADCEx_InjectedConvCpltCallback+0x138>)
 8003350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003354:	f7fd fa9a 	bl	800088c <__aeabi_ddiv>
 8003358:	4602      	mov	r2, r0
 800335a:	460b      	mov	r3, r1
 800335c:	4610      	mov	r0, r2
 800335e:	4619      	mov	r1, r3
 8003360:	a331      	add	r3, pc, #196	@ (adr r3, 8003428 <HAL_ADCEx_InjectedConvCpltCallback+0x140>)
 8003362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003366:	f7fd f967 	bl	8000638 <__aeabi_dmul>
 800336a:	4602      	mov	r2, r0
 800336c:	460b      	mov	r3, r1
 800336e:	4610      	mov	r0, r2
 8003370:	4619      	mov	r1, r3
 8003372:	a32f      	add	r3, pc, #188	@ (adr r3, 8003430 <HAL_ADCEx_InjectedConvCpltCallback+0x148>)
 8003374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003378:	f7fc ffa6 	bl	80002c8 <__aeabi_dsub>
 800337c:	4602      	mov	r2, r0
 800337e:	460b      	mov	r3, r1
 8003380:	4610      	mov	r0, r2
 8003382:	4619      	mov	r1, r3
 8003384:	f04f 0200 	mov.w	r2, #0
 8003388:	4b31      	ldr	r3, [pc, #196]	@ (8003450 <HAL_ADCEx_InjectedConvCpltCallback+0x168>)
 800338a:	f7fd fa7f 	bl	800088c <__aeabi_ddiv>
 800338e:	4602      	mov	r2, r0
 8003390:	460b      	mov	r3, r1
 8003392:	4610      	mov	r0, r2
 8003394:	4619      	mov	r1, r3
 8003396:	f7fd fc47 	bl	8000c28 <__aeabi_d2f>
 800339a:	4603      	mov	r3, r0
 800339c:	4a2d      	ldr	r2, [pc, #180]	@ (8003454 <HAL_ADCEx_InjectedConvCpltCallback+0x16c>)
 800339e:	6013      	str	r3, [r2, #0]
         ib = (((adc_value_A2/4095.0)*3.3 - 1.65))/(50.0*0.01);
 80033a0:	4b2a      	ldr	r3, [pc, #168]	@ (800344c <HAL_ADCEx_InjectedConvCpltCallback+0x164>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7fd f8cd 	bl	8000544 <__aeabi_ui2d>
 80033aa:	a31d      	add	r3, pc, #116	@ (adr r3, 8003420 <HAL_ADCEx_InjectedConvCpltCallback+0x138>)
 80033ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b0:	f7fd fa6c 	bl	800088c <__aeabi_ddiv>
 80033b4:	4602      	mov	r2, r0
 80033b6:	460b      	mov	r3, r1
 80033b8:	4610      	mov	r0, r2
 80033ba:	4619      	mov	r1, r3
 80033bc:	a31a      	add	r3, pc, #104	@ (adr r3, 8003428 <HAL_ADCEx_InjectedConvCpltCallback+0x140>)
 80033be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c2:	f7fd f939 	bl	8000638 <__aeabi_dmul>
 80033c6:	4602      	mov	r2, r0
 80033c8:	460b      	mov	r3, r1
 80033ca:	4610      	mov	r0, r2
 80033cc:	4619      	mov	r1, r3
 80033ce:	a318      	add	r3, pc, #96	@ (adr r3, 8003430 <HAL_ADCEx_InjectedConvCpltCallback+0x148>)
 80033d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d4:	f7fc ff78 	bl	80002c8 <__aeabi_dsub>
 80033d8:	4602      	mov	r2, r0
 80033da:	460b      	mov	r3, r1
 80033dc:	4610      	mov	r0, r2
 80033de:	4619      	mov	r1, r3
 80033e0:	f04f 0200 	mov.w	r2, #0
 80033e4:	4b1a      	ldr	r3, [pc, #104]	@ (8003450 <HAL_ADCEx_InjectedConvCpltCallback+0x168>)
 80033e6:	f7fd fa51 	bl	800088c <__aeabi_ddiv>
 80033ea:	4602      	mov	r2, r0
 80033ec:	460b      	mov	r3, r1
 80033ee:	4610      	mov	r0, r2
 80033f0:	4619      	mov	r1, r3
 80033f2:	f7fd fc19 	bl	8000c28 <__aeabi_d2f>
 80033f6:	4603      	mov	r3, r0
 80033f8:	4a17      	ldr	r2, [pc, #92]	@ (8003458 <HAL_ADCEx_InjectedConvCpltCallback+0x170>)
 80033fa:	6013      	str	r3, [r2, #0]
         ic= -( ia + ib);
 80033fc:	4b15      	ldr	r3, [pc, #84]	@ (8003454 <HAL_ADCEx_InjectedConvCpltCallback+0x16c>)
 80033fe:	ed93 7a00 	vldr	s14, [r3]
 8003402:	4b15      	ldr	r3, [pc, #84]	@ (8003458 <HAL_ADCEx_InjectedConvCpltCallback+0x170>)
 8003404:	edd3 7a00 	vldr	s15, [r3]
 8003408:	ee77 7a27 	vadd.f32	s15, s14, s15
 800340c:	eef1 7a67 	vneg.f32	s15, s15
 8003410:	4b12      	ldr	r3, [pc, #72]	@ (800345c <HAL_ADCEx_InjectedConvCpltCallback+0x174>)
 8003412:	edc3 7a00 	vstr	s15, [r3]
    }
}
 8003416:	bf00      	nop
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	00000000 	.word	0x00000000
 8003424:	40affe00 	.word	0x40affe00
 8003428:	66666666 	.word	0x66666666
 800342c:	400a6666 	.word	0x400a6666
 8003430:	66666666 	.word	0x66666666
 8003434:	3ffa6666 	.word	0x3ffa6666
 8003438:	40012000 	.word	0x40012000
 800343c:	20000478 	.word	0x20000478
 8003440:	200002f0 	.word	0x200002f0
 8003444:	200002ec 	.word	0x200002ec
 8003448:	20000234 	.word	0x20000234
 800344c:	20000238 	.word	0x20000238
 8003450:	3fe00000 	.word	0x3fe00000
 8003454:	2000023c 	.word	0x2000023c
 8003458:	20000240 	.word	0x20000240
 800345c:	20000244 	.word	0x20000244

08003460 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM8)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a05      	ldr	r2, [pc, #20]	@ (8003484 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d102      	bne.n	8003478 <HAL_TIM_PeriodElapsedCallback+0x18>
    {
        flag_current_loop = 1;
 8003472:	4b05      	ldr	r3, [pc, #20]	@ (8003488 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003474:	2201      	movs	r2, #1
 8003476:	701a      	strb	r2, [r3, #0]
    }
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	40010400 	.word	0x40010400
 8003488:	200002dc 	.word	0x200002dc

0800348c <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a05      	ldr	r2, [pc, #20]	@ (80034b0 <HAL_UART_TxCpltCallback+0x24>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d102      	bne.n	80034a4 <HAL_UART_TxCpltCallback+0x18>
    {
        uart_busy = 0;
 800349e:	4b05      	ldr	r3, [pc, #20]	@ (80034b4 <HAL_UART_TxCpltCallback+0x28>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	701a      	strb	r2, [r3, #0]
    }
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	40004400 	.word	0x40004400
 80034b4:	200002dd 	.word	0x200002dd

080034b8 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC2)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a16      	ldr	r2, [pc, #88]	@ (8003520 <HAL_ADC_ConvCpltCallback+0x68>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d11b      	bne.n	8003502 <HAL_ADC_ConvCpltCallback+0x4a>
    {
        adc_dma_voltage = (adc_dma_value / 4095.0) * 3.3;
 80034ca:	4b16      	ldr	r3, [pc, #88]	@ (8003524 <HAL_ADC_ConvCpltCallback+0x6c>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7fd f838 	bl	8000544 <__aeabi_ui2d>
 80034d4:	a30e      	add	r3, pc, #56	@ (adr r3, 8003510 <HAL_ADC_ConvCpltCallback+0x58>)
 80034d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034da:	f7fd f9d7 	bl	800088c <__aeabi_ddiv>
 80034de:	4602      	mov	r2, r0
 80034e0:	460b      	mov	r3, r1
 80034e2:	4610      	mov	r0, r2
 80034e4:	4619      	mov	r1, r3
 80034e6:	a30c      	add	r3, pc, #48	@ (adr r3, 8003518 <HAL_ADC_ConvCpltCallback+0x60>)
 80034e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ec:	f7fd f8a4 	bl	8000638 <__aeabi_dmul>
 80034f0:	4602      	mov	r2, r0
 80034f2:	460b      	mov	r3, r1
 80034f4:	4610      	mov	r0, r2
 80034f6:	4619      	mov	r1, r3
 80034f8:	f7fd fb96 	bl	8000c28 <__aeabi_d2f>
 80034fc:	4603      	mov	r3, r0
 80034fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003528 <HAL_ADC_ConvCpltCallback+0x70>)
 8003500:	6013      	str	r3, [r2, #0]
    }
}
 8003502:	bf00      	nop
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	f3af 8000 	nop.w
 8003510:	00000000 	.word	0x00000000
 8003514:	40affe00 	.word	0x40affe00
 8003518:	66666666 	.word	0x66666666
 800351c:	400a6666 	.word	0x400a6666
 8003520:	40012100 	.word	0x40012100
 8003524:	200002e0 	.word	0x200002e0
 8003528:	200002ac 	.word	0x200002ac

0800352c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003530:	b672      	cpsid	i
}
 8003532:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003534:	bf00      	nop
 8003536:	e7fd      	b.n	8003534 <Error_Handler+0x8>

08003538 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800353e:	2300      	movs	r3, #0
 8003540:	607b      	str	r3, [r7, #4]
 8003542:	4b10      	ldr	r3, [pc, #64]	@ (8003584 <HAL_MspInit+0x4c>)
 8003544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003546:	4a0f      	ldr	r2, [pc, #60]	@ (8003584 <HAL_MspInit+0x4c>)
 8003548:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800354c:	6453      	str	r3, [r2, #68]	@ 0x44
 800354e:	4b0d      	ldr	r3, [pc, #52]	@ (8003584 <HAL_MspInit+0x4c>)
 8003550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003552:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003556:	607b      	str	r3, [r7, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800355a:	2300      	movs	r3, #0
 800355c:	603b      	str	r3, [r7, #0]
 800355e:	4b09      	ldr	r3, [pc, #36]	@ (8003584 <HAL_MspInit+0x4c>)
 8003560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003562:	4a08      	ldr	r2, [pc, #32]	@ (8003584 <HAL_MspInit+0x4c>)
 8003564:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003568:	6413      	str	r3, [r2, #64]	@ 0x40
 800356a:	4b06      	ldr	r3, [pc, #24]	@ (8003584 <HAL_MspInit+0x4c>)
 800356c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003572:	603b      	str	r3, [r7, #0]
 8003574:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003576:	2007      	movs	r0, #7
 8003578:	f001 fd16 	bl	8004fa8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800357c:	bf00      	nop
 800357e:	3708      	adds	r7, #8
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	40023800 	.word	0x40023800

08003588 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b08c      	sub	sp, #48	@ 0x30
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003590:	f107 031c 	add.w	r3, r7, #28
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]
 8003598:	605a      	str	r2, [r3, #4]
 800359a:	609a      	str	r2, [r3, #8]
 800359c:	60da      	str	r2, [r3, #12]
 800359e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a4e      	ldr	r2, [pc, #312]	@ (80036e0 <HAL_ADC_MspInit+0x158>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d130      	bne.n	800360c <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80035aa:	2300      	movs	r3, #0
 80035ac:	61bb      	str	r3, [r7, #24]
 80035ae:	4b4d      	ldr	r3, [pc, #308]	@ (80036e4 <HAL_ADC_MspInit+0x15c>)
 80035b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035b2:	4a4c      	ldr	r2, [pc, #304]	@ (80036e4 <HAL_ADC_MspInit+0x15c>)
 80035b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80035ba:	4b4a      	ldr	r3, [pc, #296]	@ (80036e4 <HAL_ADC_MspInit+0x15c>)
 80035bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035c2:	61bb      	str	r3, [r7, #24]
 80035c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035c6:	2300      	movs	r3, #0
 80035c8:	617b      	str	r3, [r7, #20]
 80035ca:	4b46      	ldr	r3, [pc, #280]	@ (80036e4 <HAL_ADC_MspInit+0x15c>)
 80035cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ce:	4a45      	ldr	r2, [pc, #276]	@ (80036e4 <HAL_ADC_MspInit+0x15c>)
 80035d0:	f043 0301 	orr.w	r3, r3, #1
 80035d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80035d6:	4b43      	ldr	r3, [pc, #268]	@ (80036e4 <HAL_ADC_MspInit+0x15c>)
 80035d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	617b      	str	r3, [r7, #20]
 80035e0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 80035e2:	2311      	movs	r3, #17
 80035e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035e6:	2303      	movs	r3, #3
 80035e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ea:	2300      	movs	r3, #0
 80035ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ee:	f107 031c 	add.w	r3, r7, #28
 80035f2:	4619      	mov	r1, r3
 80035f4:	483c      	ldr	r0, [pc, #240]	@ (80036e8 <HAL_ADC_MspInit+0x160>)
 80035f6:	f002 f91b 	bl	8005830 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80035fa:	2200      	movs	r2, #0
 80035fc:	2100      	movs	r1, #0
 80035fe:	2012      	movs	r0, #18
 8003600:	f001 fcdd 	bl	8004fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003604:	2012      	movs	r0, #18
 8003606:	f001 fcf6 	bl	8004ff6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800360a:	e065      	b.n	80036d8 <HAL_ADC_MspInit+0x150>
  else if(hadc->Instance==ADC2)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a36      	ldr	r2, [pc, #216]	@ (80036ec <HAL_ADC_MspInit+0x164>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d160      	bne.n	80036d8 <HAL_ADC_MspInit+0x150>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003616:	2300      	movs	r3, #0
 8003618:	613b      	str	r3, [r7, #16]
 800361a:	4b32      	ldr	r3, [pc, #200]	@ (80036e4 <HAL_ADC_MspInit+0x15c>)
 800361c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800361e:	4a31      	ldr	r2, [pc, #196]	@ (80036e4 <HAL_ADC_MspInit+0x15c>)
 8003620:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003624:	6453      	str	r3, [r2, #68]	@ 0x44
 8003626:	4b2f      	ldr	r3, [pc, #188]	@ (80036e4 <HAL_ADC_MspInit+0x15c>)
 8003628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800362a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800362e:	613b      	str	r3, [r7, #16]
 8003630:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003632:	2300      	movs	r3, #0
 8003634:	60fb      	str	r3, [r7, #12]
 8003636:	4b2b      	ldr	r3, [pc, #172]	@ (80036e4 <HAL_ADC_MspInit+0x15c>)
 8003638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800363a:	4a2a      	ldr	r2, [pc, #168]	@ (80036e4 <HAL_ADC_MspInit+0x15c>)
 800363c:	f043 0301 	orr.w	r3, r3, #1
 8003640:	6313      	str	r3, [r2, #48]	@ 0x30
 8003642:	4b28      	ldr	r3, [pc, #160]	@ (80036e4 <HAL_ADC_MspInit+0x15c>)
 8003644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800364e:	2302      	movs	r3, #2
 8003650:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003652:	2303      	movs	r3, #3
 8003654:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003656:	2300      	movs	r3, #0
 8003658:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800365a:	f107 031c 	add.w	r3, r7, #28
 800365e:	4619      	mov	r1, r3
 8003660:	4821      	ldr	r0, [pc, #132]	@ (80036e8 <HAL_ADC_MspInit+0x160>)
 8003662:	f002 f8e5 	bl	8005830 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8003666:	4b22      	ldr	r3, [pc, #136]	@ (80036f0 <HAL_ADC_MspInit+0x168>)
 8003668:	4a22      	ldr	r2, [pc, #136]	@ (80036f4 <HAL_ADC_MspInit+0x16c>)
 800366a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800366c:	4b20      	ldr	r3, [pc, #128]	@ (80036f0 <HAL_ADC_MspInit+0x168>)
 800366e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003672:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003674:	4b1e      	ldr	r3, [pc, #120]	@ (80036f0 <HAL_ADC_MspInit+0x168>)
 8003676:	2200      	movs	r2, #0
 8003678:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800367a:	4b1d      	ldr	r3, [pc, #116]	@ (80036f0 <HAL_ADC_MspInit+0x168>)
 800367c:	2200      	movs	r2, #0
 800367e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003680:	4b1b      	ldr	r3, [pc, #108]	@ (80036f0 <HAL_ADC_MspInit+0x168>)
 8003682:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003686:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003688:	4b19      	ldr	r3, [pc, #100]	@ (80036f0 <HAL_ADC_MspInit+0x168>)
 800368a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800368e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003690:	4b17      	ldr	r3, [pc, #92]	@ (80036f0 <HAL_ADC_MspInit+0x168>)
 8003692:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003696:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8003698:	4b15      	ldr	r3, [pc, #84]	@ (80036f0 <HAL_ADC_MspInit+0x168>)
 800369a:	2200      	movs	r2, #0
 800369c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 800369e:	4b14      	ldr	r3, [pc, #80]	@ (80036f0 <HAL_ADC_MspInit+0x168>)
 80036a0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80036a4:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036a6:	4b12      	ldr	r3, [pc, #72]	@ (80036f0 <HAL_ADC_MspInit+0x168>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80036ac:	4810      	ldr	r0, [pc, #64]	@ (80036f0 <HAL_ADC_MspInit+0x168>)
 80036ae:	f001 fcbd 	bl	800502c <HAL_DMA_Init>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <HAL_ADC_MspInit+0x134>
      Error_Handler();
 80036b8:	f7ff ff38 	bl	800352c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a0c      	ldr	r2, [pc, #48]	@ (80036f0 <HAL_ADC_MspInit+0x168>)
 80036c0:	639a      	str	r2, [r3, #56]	@ 0x38
 80036c2:	4a0b      	ldr	r2, [pc, #44]	@ (80036f0 <HAL_ADC_MspInit+0x168>)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80036c8:	2200      	movs	r2, #0
 80036ca:	2100      	movs	r1, #0
 80036cc:	2012      	movs	r0, #18
 80036ce:	f001 fc76 	bl	8004fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80036d2:	2012      	movs	r0, #18
 80036d4:	f001 fc8f 	bl	8004ff6 <HAL_NVIC_EnableIRQ>
}
 80036d8:	bf00      	nop
 80036da:	3730      	adds	r7, #48	@ 0x30
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	40012000 	.word	0x40012000
 80036e4:	40023800 	.word	0x40023800
 80036e8:	40020000 	.word	0x40020000
 80036ec:	40012100 	.word	0x40012100
 80036f0:	200003c0 	.word	0x200003c0
 80036f4:	40026440 	.word	0x40026440

080036f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b08a      	sub	sp, #40	@ 0x28
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003700:	f107 0314 	add.w	r3, r7, #20
 8003704:	2200      	movs	r2, #0
 8003706:	601a      	str	r2, [r3, #0]
 8003708:	605a      	str	r2, [r3, #4]
 800370a:	609a      	str	r2, [r3, #8]
 800370c:	60da      	str	r2, [r3, #12]
 800370e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a1d      	ldr	r2, [pc, #116]	@ (800378c <HAL_SPI_MspInit+0x94>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d133      	bne.n	8003782 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800371a:	2300      	movs	r3, #0
 800371c:	613b      	str	r3, [r7, #16]
 800371e:	4b1c      	ldr	r3, [pc, #112]	@ (8003790 <HAL_SPI_MspInit+0x98>)
 8003720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003722:	4a1b      	ldr	r2, [pc, #108]	@ (8003790 <HAL_SPI_MspInit+0x98>)
 8003724:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003728:	6453      	str	r3, [r2, #68]	@ 0x44
 800372a:	4b19      	ldr	r3, [pc, #100]	@ (8003790 <HAL_SPI_MspInit+0x98>)
 800372c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800372e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003732:	613b      	str	r3, [r7, #16]
 8003734:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003736:	2300      	movs	r3, #0
 8003738:	60fb      	str	r3, [r7, #12]
 800373a:	4b15      	ldr	r3, [pc, #84]	@ (8003790 <HAL_SPI_MspInit+0x98>)
 800373c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800373e:	4a14      	ldr	r2, [pc, #80]	@ (8003790 <HAL_SPI_MspInit+0x98>)
 8003740:	f043 0301 	orr.w	r3, r3, #1
 8003744:	6313      	str	r3, [r2, #48]	@ 0x30
 8003746:	4b12      	ldr	r3, [pc, #72]	@ (8003790 <HAL_SPI_MspInit+0x98>)
 8003748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003752:	23e0      	movs	r3, #224	@ 0xe0
 8003754:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003756:	2302      	movs	r3, #2
 8003758:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800375a:	2300      	movs	r3, #0
 800375c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800375e:	2303      	movs	r3, #3
 8003760:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003762:	2305      	movs	r3, #5
 8003764:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003766:	f107 0314 	add.w	r3, r7, #20
 800376a:	4619      	mov	r1, r3
 800376c:	4809      	ldr	r0, [pc, #36]	@ (8003794 <HAL_SPI_MspInit+0x9c>)
 800376e:	f002 f85f 	bl	8005830 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003772:	2200      	movs	r2, #0
 8003774:	2100      	movs	r1, #0
 8003776:	2023      	movs	r0, #35	@ 0x23
 8003778:	f001 fc21 	bl	8004fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800377c:	2023      	movs	r0, #35	@ 0x23
 800377e:	f001 fc3a 	bl	8004ff6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003782:	bf00      	nop
 8003784:	3728      	adds	r7, #40	@ 0x28
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	40013000 	.word	0x40013000
 8003790:	40023800 	.word	0x40023800
 8003794:	40020000 	.word	0x40020000

08003798 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a2c      	ldr	r2, [pc, #176]	@ (8003858 <HAL_TIM_Base_MspInit+0xc0>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d10e      	bne.n	80037c8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80037aa:	2300      	movs	r3, #0
 80037ac:	617b      	str	r3, [r7, #20]
 80037ae:	4b2b      	ldr	r3, [pc, #172]	@ (800385c <HAL_TIM_Base_MspInit+0xc4>)
 80037b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037b2:	4a2a      	ldr	r2, [pc, #168]	@ (800385c <HAL_TIM_Base_MspInit+0xc4>)
 80037b4:	f043 0301 	orr.w	r3, r3, #1
 80037b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80037ba:	4b28      	ldr	r3, [pc, #160]	@ (800385c <HAL_TIM_Base_MspInit+0xc4>)
 80037bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	617b      	str	r3, [r7, #20]
 80037c4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80037c6:	e042      	b.n	800384e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037d0:	d10e      	bne.n	80037f0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80037d2:	2300      	movs	r3, #0
 80037d4:	613b      	str	r3, [r7, #16]
 80037d6:	4b21      	ldr	r3, [pc, #132]	@ (800385c <HAL_TIM_Base_MspInit+0xc4>)
 80037d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037da:	4a20      	ldr	r2, [pc, #128]	@ (800385c <HAL_TIM_Base_MspInit+0xc4>)
 80037dc:	f043 0301 	orr.w	r3, r3, #1
 80037e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80037e2:	4b1e      	ldr	r3, [pc, #120]	@ (800385c <HAL_TIM_Base_MspInit+0xc4>)
 80037e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	613b      	str	r3, [r7, #16]
 80037ec:	693b      	ldr	r3, [r7, #16]
}
 80037ee:	e02e      	b.n	800384e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a1a      	ldr	r2, [pc, #104]	@ (8003860 <HAL_TIM_Base_MspInit+0xc8>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d10e      	bne.n	8003818 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80037fa:	2300      	movs	r3, #0
 80037fc:	60fb      	str	r3, [r7, #12]
 80037fe:	4b17      	ldr	r3, [pc, #92]	@ (800385c <HAL_TIM_Base_MspInit+0xc4>)
 8003800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003802:	4a16      	ldr	r2, [pc, #88]	@ (800385c <HAL_TIM_Base_MspInit+0xc4>)
 8003804:	f043 0302 	orr.w	r3, r3, #2
 8003808:	6413      	str	r3, [r2, #64]	@ 0x40
 800380a:	4b14      	ldr	r3, [pc, #80]	@ (800385c <HAL_TIM_Base_MspInit+0xc4>)
 800380c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	60fb      	str	r3, [r7, #12]
 8003814:	68fb      	ldr	r3, [r7, #12]
}
 8003816:	e01a      	b.n	800384e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM8)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a11      	ldr	r2, [pc, #68]	@ (8003864 <HAL_TIM_Base_MspInit+0xcc>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d115      	bne.n	800384e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003822:	2300      	movs	r3, #0
 8003824:	60bb      	str	r3, [r7, #8]
 8003826:	4b0d      	ldr	r3, [pc, #52]	@ (800385c <HAL_TIM_Base_MspInit+0xc4>)
 8003828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800382a:	4a0c      	ldr	r2, [pc, #48]	@ (800385c <HAL_TIM_Base_MspInit+0xc4>)
 800382c:	f043 0302 	orr.w	r3, r3, #2
 8003830:	6453      	str	r3, [r2, #68]	@ 0x44
 8003832:	4b0a      	ldr	r3, [pc, #40]	@ (800385c <HAL_TIM_Base_MspInit+0xc4>)
 8003834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	60bb      	str	r3, [r7, #8]
 800383c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800383e:	2200      	movs	r2, #0
 8003840:	2100      	movs	r1, #0
 8003842:	202c      	movs	r0, #44	@ 0x2c
 8003844:	f001 fbbb 	bl	8004fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003848:	202c      	movs	r0, #44	@ 0x2c
 800384a:	f001 fbd4 	bl	8004ff6 <HAL_NVIC_EnableIRQ>
}
 800384e:	bf00      	nop
 8003850:	3718      	adds	r7, #24
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	40010000 	.word	0x40010000
 800385c:	40023800 	.word	0x40023800
 8003860:	40000400 	.word	0x40000400
 8003864:	40010400 	.word	0x40010400

08003868 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b088      	sub	sp, #32
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003870:	f107 030c 	add.w	r3, r7, #12
 8003874:	2200      	movs	r2, #0
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	605a      	str	r2, [r3, #4]
 800387a:	609a      	str	r2, [r3, #8]
 800387c:	60da      	str	r2, [r3, #12]
 800387e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a12      	ldr	r2, [pc, #72]	@ (80038d0 <HAL_TIM_MspPostInit+0x68>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d11e      	bne.n	80038c8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800388a:	2300      	movs	r3, #0
 800388c:	60bb      	str	r3, [r7, #8]
 800388e:	4b11      	ldr	r3, [pc, #68]	@ (80038d4 <HAL_TIM_MspPostInit+0x6c>)
 8003890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003892:	4a10      	ldr	r2, [pc, #64]	@ (80038d4 <HAL_TIM_MspPostInit+0x6c>)
 8003894:	f043 0301 	orr.w	r3, r3, #1
 8003898:	6313      	str	r3, [r2, #48]	@ 0x30
 800389a:	4b0e      	ldr	r3, [pc, #56]	@ (80038d4 <HAL_TIM_MspPostInit+0x6c>)
 800389c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	60bb      	str	r3, [r7, #8]
 80038a4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80038a6:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80038aa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ac:	2302      	movs	r3, #2
 80038ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b0:	2300      	movs	r3, #0
 80038b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038b4:	2300      	movs	r3, #0
 80038b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80038b8:	2301      	movs	r3, #1
 80038ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038bc:	f107 030c 	add.w	r3, r7, #12
 80038c0:	4619      	mov	r1, r3
 80038c2:	4805      	ldr	r0, [pc, #20]	@ (80038d8 <HAL_TIM_MspPostInit+0x70>)
 80038c4:	f001 ffb4 	bl	8005830 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80038c8:	bf00      	nop
 80038ca:	3720      	adds	r7, #32
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40010000 	.word	0x40010000
 80038d4:	40023800 	.word	0x40023800
 80038d8:	40020000 	.word	0x40020000

080038dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b08c      	sub	sp, #48	@ 0x30
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038e4:	f107 031c 	add.w	r3, r7, #28
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]
 80038ec:	605a      	str	r2, [r3, #4]
 80038ee:	609a      	str	r2, [r3, #8]
 80038f0:	60da      	str	r2, [r3, #12]
 80038f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a4d      	ldr	r2, [pc, #308]	@ (8003a30 <HAL_UART_MspInit+0x154>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d12d      	bne.n	800395a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80038fe:	2300      	movs	r3, #0
 8003900:	61bb      	str	r3, [r7, #24]
 8003902:	4b4c      	ldr	r3, [pc, #304]	@ (8003a34 <HAL_UART_MspInit+0x158>)
 8003904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003906:	4a4b      	ldr	r2, [pc, #300]	@ (8003a34 <HAL_UART_MspInit+0x158>)
 8003908:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800390c:	6413      	str	r3, [r2, #64]	@ 0x40
 800390e:	4b49      	ldr	r3, [pc, #292]	@ (8003a34 <HAL_UART_MspInit+0x158>)
 8003910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003912:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003916:	61bb      	str	r3, [r7, #24]
 8003918:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800391a:	2300      	movs	r3, #0
 800391c:	617b      	str	r3, [r7, #20]
 800391e:	4b45      	ldr	r3, [pc, #276]	@ (8003a34 <HAL_UART_MspInit+0x158>)
 8003920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003922:	4a44      	ldr	r2, [pc, #272]	@ (8003a34 <HAL_UART_MspInit+0x158>)
 8003924:	f043 0304 	orr.w	r3, r3, #4
 8003928:	6313      	str	r3, [r2, #48]	@ 0x30
 800392a:	4b42      	ldr	r3, [pc, #264]	@ (8003a34 <HAL_UART_MspInit+0x158>)
 800392c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800392e:	f003 0304 	and.w	r3, r3, #4
 8003932:	617b      	str	r3, [r7, #20]
 8003934:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003936:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800393a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800393c:	2302      	movs	r3, #2
 800393e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003940:	2300      	movs	r3, #0
 8003942:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003944:	2303      	movs	r3, #3
 8003946:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003948:	2308      	movs	r3, #8
 800394a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800394c:	f107 031c 	add.w	r3, r7, #28
 8003950:	4619      	mov	r1, r3
 8003952:	4839      	ldr	r0, [pc, #228]	@ (8003a38 <HAL_UART_MspInit+0x15c>)
 8003954:	f001 ff6c 	bl	8005830 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003958:	e066      	b.n	8003a28 <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART2)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a37      	ldr	r2, [pc, #220]	@ (8003a3c <HAL_UART_MspInit+0x160>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d161      	bne.n	8003a28 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003964:	2300      	movs	r3, #0
 8003966:	613b      	str	r3, [r7, #16]
 8003968:	4b32      	ldr	r3, [pc, #200]	@ (8003a34 <HAL_UART_MspInit+0x158>)
 800396a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800396c:	4a31      	ldr	r2, [pc, #196]	@ (8003a34 <HAL_UART_MspInit+0x158>)
 800396e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003972:	6413      	str	r3, [r2, #64]	@ 0x40
 8003974:	4b2f      	ldr	r3, [pc, #188]	@ (8003a34 <HAL_UART_MspInit+0x158>)
 8003976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003978:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800397c:	613b      	str	r3, [r7, #16]
 800397e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003980:	2300      	movs	r3, #0
 8003982:	60fb      	str	r3, [r7, #12]
 8003984:	4b2b      	ldr	r3, [pc, #172]	@ (8003a34 <HAL_UART_MspInit+0x158>)
 8003986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003988:	4a2a      	ldr	r2, [pc, #168]	@ (8003a34 <HAL_UART_MspInit+0x158>)
 800398a:	f043 0301 	orr.w	r3, r3, #1
 800398e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003990:	4b28      	ldr	r3, [pc, #160]	@ (8003a34 <HAL_UART_MspInit+0x158>)
 8003992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003994:	f003 0301 	and.w	r3, r3, #1
 8003998:	60fb      	str	r3, [r7, #12]
 800399a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800399c:	230c      	movs	r3, #12
 800399e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039a0:	2302      	movs	r3, #2
 80039a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a4:	2300      	movs	r3, #0
 80039a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039a8:	2303      	movs	r3, #3
 80039aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80039ac:	2307      	movs	r3, #7
 80039ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039b0:	f107 031c 	add.w	r3, r7, #28
 80039b4:	4619      	mov	r1, r3
 80039b6:	4822      	ldr	r0, [pc, #136]	@ (8003a40 <HAL_UART_MspInit+0x164>)
 80039b8:	f001 ff3a 	bl	8005830 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80039bc:	4b21      	ldr	r3, [pc, #132]	@ (8003a44 <HAL_UART_MspInit+0x168>)
 80039be:	4a22      	ldr	r2, [pc, #136]	@ (8003a48 <HAL_UART_MspInit+0x16c>)
 80039c0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80039c2:	4b20      	ldr	r3, [pc, #128]	@ (8003a44 <HAL_UART_MspInit+0x168>)
 80039c4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80039c8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80039ca:	4b1e      	ldr	r3, [pc, #120]	@ (8003a44 <HAL_UART_MspInit+0x168>)
 80039cc:	2240      	movs	r2, #64	@ 0x40
 80039ce:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039d0:	4b1c      	ldr	r3, [pc, #112]	@ (8003a44 <HAL_UART_MspInit+0x168>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80039d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003a44 <HAL_UART_MspInit+0x168>)
 80039d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80039dc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039de:	4b19      	ldr	r3, [pc, #100]	@ (8003a44 <HAL_UART_MspInit+0x168>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039e4:	4b17      	ldr	r3, [pc, #92]	@ (8003a44 <HAL_UART_MspInit+0x168>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80039ea:	4b16      	ldr	r3, [pc, #88]	@ (8003a44 <HAL_UART_MspInit+0x168>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80039f0:	4b14      	ldr	r3, [pc, #80]	@ (8003a44 <HAL_UART_MspInit+0x168>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80039f6:	4b13      	ldr	r3, [pc, #76]	@ (8003a44 <HAL_UART_MspInit+0x168>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80039fc:	4811      	ldr	r0, [pc, #68]	@ (8003a44 <HAL_UART_MspInit+0x168>)
 80039fe:	f001 fb15 	bl	800502c <HAL_DMA_Init>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <HAL_UART_MspInit+0x130>
      Error_Handler();
 8003a08:	f7ff fd90 	bl	800352c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a0d      	ldr	r2, [pc, #52]	@ (8003a44 <HAL_UART_MspInit+0x168>)
 8003a10:	639a      	str	r2, [r3, #56]	@ 0x38
 8003a12:	4a0c      	ldr	r2, [pc, #48]	@ (8003a44 <HAL_UART_MspInit+0x168>)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003a18:	2200      	movs	r2, #0
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	2026      	movs	r0, #38	@ 0x26
 8003a1e:	f001 face 	bl	8004fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003a22:	2026      	movs	r0, #38	@ 0x26
 8003a24:	f001 fae7 	bl	8004ff6 <HAL_NVIC_EnableIRQ>
}
 8003a28:	bf00      	nop
 8003a2a:	3730      	adds	r7, #48	@ 0x30
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	40004c00 	.word	0x40004c00
 8003a34:	40023800 	.word	0x40023800
 8003a38:	40020800 	.word	0x40020800
 8003a3c:	40004400 	.word	0x40004400
 8003a40:	40020000 	.word	0x40020000
 8003a44:	20000628 	.word	0x20000628
 8003a48:	400260a0 	.word	0x400260a0

08003a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003a50:	bf00      	nop
 8003a52:	e7fd      	b.n	8003a50 <NMI_Handler+0x4>

08003a54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a58:	bf00      	nop
 8003a5a:	e7fd      	b.n	8003a58 <HardFault_Handler+0x4>

08003a5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a60:	bf00      	nop
 8003a62:	e7fd      	b.n	8003a60 <MemManage_Handler+0x4>

08003a64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a64:	b480      	push	{r7}
 8003a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a68:	bf00      	nop
 8003a6a:	e7fd      	b.n	8003a68 <BusFault_Handler+0x4>

08003a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a70:	bf00      	nop
 8003a72:	e7fd      	b.n	8003a70 <UsageFault_Handler+0x4>

08003a74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a78:	bf00      	nop
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr

08003a82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a82:	b480      	push	{r7}
 8003a84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a86:	bf00      	nop
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a94:	bf00      	nop
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003aa2:	f000 f997 	bl	8003dd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003aa6:	bf00      	nop
 8003aa8:	bd80      	pop	{r7, pc}
	...

08003aac <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003ab0:	4802      	ldr	r0, [pc, #8]	@ (8003abc <DMA1_Stream6_IRQHandler+0x10>)
 8003ab2:	f001 fc53 	bl	800535c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003ab6:	bf00      	nop
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	20000628 	.word	0x20000628

08003ac0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003ac4:	4803      	ldr	r0, [pc, #12]	@ (8003ad4 <ADC_IRQHandler+0x14>)
 8003ac6:	f000 fa0c 	bl	8003ee2 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8003aca:	4803      	ldr	r0, [pc, #12]	@ (8003ad8 <ADC_IRQHandler+0x18>)
 8003acc:	f000 fa09 	bl	8003ee2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003ad0:	bf00      	nop
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	20000330 	.word	0x20000330
 8003ad8:	20000378 	.word	0x20000378

08003adc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003ae0:	4802      	ldr	r0, [pc, #8]	@ (8003aec <SPI1_IRQHandler+0x10>)
 8003ae2:	f003 fa01 	bl	8006ee8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003ae6:	bf00      	nop
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	20000420 	.word	0x20000420

08003af0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003af4:	4802      	ldr	r0, [pc, #8]	@ (8003b00 <USART2_IRQHandler+0x10>)
 8003af6:	f004 fd8f 	bl	8008618 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003afa:	bf00      	nop
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	200005e0 	.word	0x200005e0

08003b04 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003b08:	4802      	ldr	r0, [pc, #8]	@ (8003b14 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8003b0a:	f003 fe25 	bl	8007758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003b0e:	bf00      	nop
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	20000550 	.word	0x20000550

08003b18 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003b1c:	4802      	ldr	r0, [pc, #8]	@ (8003b28 <DMA2_Stream2_IRQHandler+0x10>)
 8003b1e:	f001 fc1d 	bl	800535c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003b22:	bf00      	nop
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	200003c0 	.word	0x200003c0

08003b2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
  return 1;
 8003b30:	2301      	movs	r3, #1
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <_kill>:

int _kill(int pid, int sig)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003b46:	f006 fad1 	bl	800a0ec <__errno>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2216      	movs	r2, #22
 8003b4e:	601a      	str	r2, [r3, #0]
  return -1;
 8003b50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3708      	adds	r7, #8
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <_exit>:

void _exit (int status)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003b64:	f04f 31ff 	mov.w	r1, #4294967295
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f7ff ffe7 	bl	8003b3c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003b6e:	bf00      	nop
 8003b70:	e7fd      	b.n	8003b6e <_exit+0x12>

08003b72 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b086      	sub	sp, #24
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	60f8      	str	r0, [r7, #12]
 8003b7a:	60b9      	str	r1, [r7, #8]
 8003b7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b7e:	2300      	movs	r3, #0
 8003b80:	617b      	str	r3, [r7, #20]
 8003b82:	e00a      	b.n	8003b9a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003b84:	f3af 8000 	nop.w
 8003b88:	4601      	mov	r1, r0
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	1c5a      	adds	r2, r3, #1
 8003b8e:	60ba      	str	r2, [r7, #8]
 8003b90:	b2ca      	uxtb	r2, r1
 8003b92:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	3301      	adds	r3, #1
 8003b98:	617b      	str	r3, [r7, #20]
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	dbf0      	blt.n	8003b84 <_read+0x12>
  }

  return len;
 8003ba2:	687b      	ldr	r3, [r7, #4]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3718      	adds	r7, #24
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b086      	sub	sp, #24
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bb8:	2300      	movs	r3, #0
 8003bba:	617b      	str	r3, [r7, #20]
 8003bbc:	e009      	b.n	8003bd2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	1c5a      	adds	r2, r3, #1
 8003bc2:	60ba      	str	r2, [r7, #8]
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	3301      	adds	r3, #1
 8003bd0:	617b      	str	r3, [r7, #20]
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	dbf1      	blt.n	8003bbe <_write+0x12>
  }
  return len;
 8003bda:	687b      	ldr	r3, [r7, #4]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3718      	adds	r7, #24
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <_close>:

int _close(int file)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003bec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003c0c:	605a      	str	r2, [r3, #4]
  return 0;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <_isatty>:

int _isatty(int file)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003c24:	2301      	movs	r3, #1
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b085      	sub	sp, #20
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	60f8      	str	r0, [r7, #12]
 8003c3a:	60b9      	str	r1, [r7, #8]
 8003c3c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3714      	adds	r7, #20
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c54:	4a14      	ldr	r2, [pc, #80]	@ (8003ca8 <_sbrk+0x5c>)
 8003c56:	4b15      	ldr	r3, [pc, #84]	@ (8003cac <_sbrk+0x60>)
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c60:	4b13      	ldr	r3, [pc, #76]	@ (8003cb0 <_sbrk+0x64>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d102      	bne.n	8003c6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c68:	4b11      	ldr	r3, [pc, #68]	@ (8003cb0 <_sbrk+0x64>)
 8003c6a:	4a12      	ldr	r2, [pc, #72]	@ (8003cb4 <_sbrk+0x68>)
 8003c6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c6e:	4b10      	ldr	r3, [pc, #64]	@ (8003cb0 <_sbrk+0x64>)
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4413      	add	r3, r2
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d207      	bcs.n	8003c8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c7c:	f006 fa36 	bl	800a0ec <__errno>
 8003c80:	4603      	mov	r3, r0
 8003c82:	220c      	movs	r2, #12
 8003c84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c86:	f04f 33ff 	mov.w	r3, #4294967295
 8003c8a:	e009      	b.n	8003ca0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c8c:	4b08      	ldr	r3, [pc, #32]	@ (8003cb0 <_sbrk+0x64>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c92:	4b07      	ldr	r3, [pc, #28]	@ (8003cb0 <_sbrk+0x64>)
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4413      	add	r3, r2
 8003c9a:	4a05      	ldr	r2, [pc, #20]	@ (8003cb0 <_sbrk+0x64>)
 8003c9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3718      	adds	r7, #24
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	20020000 	.word	0x20020000
 8003cac:	00000400 	.word	0x00000400
 8003cb0:	200006b8 	.word	0x200006b8
 8003cb4:	20000810 	.word	0x20000810

08003cb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003cbc:	4b06      	ldr	r3, [pc, #24]	@ (8003cd8 <SystemInit+0x20>)
 8003cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cc2:	4a05      	ldr	r2, [pc, #20]	@ (8003cd8 <SystemInit+0x20>)
 8003cc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003cc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ccc:	bf00      	nop
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	e000ed00 	.word	0xe000ed00

08003cdc <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

 	  ldr   sp, =_estack      /* set stack pointer */
 8003cdc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003d14 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003ce0:	f7ff ffea 	bl	8003cb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ce4:	480c      	ldr	r0, [pc, #48]	@ (8003d18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003ce6:	490d      	ldr	r1, [pc, #52]	@ (8003d1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003ce8:	4a0d      	ldr	r2, [pc, #52]	@ (8003d20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003cea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003cec:	e002      	b.n	8003cf4 <LoopCopyDataInit>

08003cee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003cee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003cf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003cf2:	3304      	adds	r3, #4

08003cf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003cf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003cf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003cf8:	d3f9      	bcc.n	8003cee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003cfa:	4a0a      	ldr	r2, [pc, #40]	@ (8003d24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003cfc:	4c0a      	ldr	r4, [pc, #40]	@ (8003d28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003cfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d00:	e001      	b.n	8003d06 <LoopFillZerobss>

08003d02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d04:	3204      	adds	r2, #4

08003d06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d08:	d3fb      	bcc.n	8003d02 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003d0a:	f006 f9f5 	bl	800a0f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d0e:	f7fe fdbf 	bl	8002890 <main>
  bx  lr    
 8003d12:	4770      	bx	lr
 	  ldr   sp, =_estack      /* set stack pointer */
 8003d14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003d18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d1c:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8003d20:	0800db38 	.word	0x0800db38
  ldr r2, =_sbss
 8003d24:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8003d28:	2000080c 	.word	0x2000080c

08003d2c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d2c:	e7fe      	b.n	8003d2c <CAN1_RX0_IRQHandler>
	...

08003d30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d34:	4b0e      	ldr	r3, [pc, #56]	@ (8003d70 <HAL_Init+0x40>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a0d      	ldr	r2, [pc, #52]	@ (8003d70 <HAL_Init+0x40>)
 8003d3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d40:	4b0b      	ldr	r3, [pc, #44]	@ (8003d70 <HAL_Init+0x40>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a0a      	ldr	r2, [pc, #40]	@ (8003d70 <HAL_Init+0x40>)
 8003d46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d4c:	4b08      	ldr	r3, [pc, #32]	@ (8003d70 <HAL_Init+0x40>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a07      	ldr	r2, [pc, #28]	@ (8003d70 <HAL_Init+0x40>)
 8003d52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d58:	2003      	movs	r0, #3
 8003d5a:	f001 f925 	bl	8004fa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d5e:	2000      	movs	r0, #0
 8003d60:	f000 f808 	bl	8003d74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d64:	f7ff fbe8 	bl	8003538 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	40023c00 	.word	0x40023c00

08003d74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d7c:	4b12      	ldr	r3, [pc, #72]	@ (8003dc8 <HAL_InitTick+0x54>)
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	4b12      	ldr	r3, [pc, #72]	@ (8003dcc <HAL_InitTick+0x58>)
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	4619      	mov	r1, r3
 8003d86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d92:	4618      	mov	r0, r3
 8003d94:	f001 f93d 	bl	8005012 <HAL_SYSTICK_Config>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e00e      	b.n	8003dc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2b0f      	cmp	r3, #15
 8003da6:	d80a      	bhi.n	8003dbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003da8:	2200      	movs	r2, #0
 8003daa:	6879      	ldr	r1, [r7, #4]
 8003dac:	f04f 30ff 	mov.w	r0, #4294967295
 8003db0:	f001 f905 	bl	8004fbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003db4:	4a06      	ldr	r2, [pc, #24]	@ (8003dd0 <HAL_InitTick+0x5c>)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	e000      	b.n	8003dc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	20000034 	.word	0x20000034
 8003dcc:	2000003c 	.word	0x2000003c
 8003dd0:	20000038 	.word	0x20000038

08003dd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003dd8:	4b06      	ldr	r3, [pc, #24]	@ (8003df4 <HAL_IncTick+0x20>)
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	461a      	mov	r2, r3
 8003dde:	4b06      	ldr	r3, [pc, #24]	@ (8003df8 <HAL_IncTick+0x24>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4413      	add	r3, r2
 8003de4:	4a04      	ldr	r2, [pc, #16]	@ (8003df8 <HAL_IncTick+0x24>)
 8003de6:	6013      	str	r3, [r2, #0]
}
 8003de8:	bf00      	nop
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	2000003c 	.word	0x2000003c
 8003df8:	200006bc 	.word	0x200006bc

08003dfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0
  return uwTick;
 8003e00:	4b03      	ldr	r3, [pc, #12]	@ (8003e10 <HAL_GetTick+0x14>)
 8003e02:	681b      	ldr	r3, [r3, #0]
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	200006bc 	.word	0x200006bc

08003e14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e1c:	f7ff ffee 	bl	8003dfc <HAL_GetTick>
 8003e20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e2c:	d005      	beq.n	8003e3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8003e58 <HAL_Delay+0x44>)
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	461a      	mov	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	4413      	add	r3, r2
 8003e38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003e3a:	bf00      	nop
 8003e3c:	f7ff ffde 	bl	8003dfc <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d8f7      	bhi.n	8003e3c <HAL_Delay+0x28>
  {
  }
}
 8003e4c:	bf00      	nop
 8003e4e:	bf00      	nop
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	2000003c 	.word	0x2000003c

08003e5c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e64:	2300      	movs	r3, #0
 8003e66:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e033      	b.n	8003eda <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d109      	bne.n	8003e8e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f7ff fb84 	bl	8003588 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e92:	f003 0310 	and.w	r3, r3, #16
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d118      	bne.n	8003ecc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003ea2:	f023 0302 	bic.w	r3, r3, #2
 8003ea6:	f043 0202 	orr.w	r2, r3, #2
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 fb88 	bl	80045c4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ebe:	f023 0303 	bic.w	r3, r3, #3
 8003ec2:	f043 0201 	orr.w	r2, r3, #1
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	641a      	str	r2, [r3, #64]	@ 0x40
 8003eca:	e001      	b.n	8003ed0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3710      	adds	r7, #16
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b086      	sub	sp, #24
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003eea:	2300      	movs	r3, #0
 8003eec:	617b      	str	r3, [r7, #20]
 8003eee:	2300      	movs	r3, #0
 8003ef0:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	f003 0320 	and.w	r3, r3, #32
 8003f10:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d049      	beq.n	8003fac <HAL_ADC_IRQHandler+0xca>
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d046      	beq.n	8003fac <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f22:	f003 0310 	and.w	r3, r3, #16
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d105      	bne.n	8003f36 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d12b      	bne.n	8003f9c <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d127      	bne.n	8003f9c <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f52:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d006      	beq.n	8003f68 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d119      	bne.n	8003f9c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	685a      	ldr	r2, [r3, #4]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0220 	bic.w	r2, r2, #32
 8003f76:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d105      	bne.n	8003f9c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f94:	f043 0201 	orr.w	r2, r3, #1
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f7ff fa8b 	bl	80034b8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f06f 0212 	mvn.w	r2, #18
 8003faa:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f003 0304 	and.w	r3, r3, #4
 8003fb2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fba:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d057      	beq.n	8004072 <HAL_ADC_IRQHandler+0x190>
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d054      	beq.n	8004072 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fcc:	f003 0310 	and.w	r3, r3, #16
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d105      	bne.n	8003fe0 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d139      	bne.n	8004062 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ff4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d006      	beq.n	800400a <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004006:	2b00      	cmp	r3, #0
 8004008:	d12b      	bne.n	8004062 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8004014:	2b00      	cmp	r3, #0
 8004016:	d124      	bne.n	8004062 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004022:	2b00      	cmp	r3, #0
 8004024:	d11d      	bne.n	8004062 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800402a:	2b00      	cmp	r3, #0
 800402c:	d119      	bne.n	8004062 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	685a      	ldr	r2, [r3, #4]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800403c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004042:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004052:	2b00      	cmp	r3, #0
 8004054:	d105      	bne.n	8004062 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800405a:	f043 0201 	orr.w	r2, r3, #1
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7ff f940 	bl	80032e8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f06f 020c 	mvn.w	r2, #12
 8004070:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f003 0301 	and.w	r3, r3, #1
 8004078:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004080:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d017      	beq.n	80040b8 <HAL_ADC_IRQHandler+0x1d6>
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d014      	beq.n	80040b8 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0301 	and.w	r3, r3, #1
 8004098:	2b01      	cmp	r3, #1
 800409a:	d10d      	bne.n	80040b8 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 f945 	bl	8004338 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f06f 0201 	mvn.w	r2, #1
 80040b6:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f003 0320 	and.w	r3, r3, #32
 80040be:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80040c6:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d015      	beq.n	80040fa <HAL_ADC_IRQHandler+0x218>
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d012      	beq.n	80040fa <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040d8:	f043 0202 	orr.w	r2, r3, #2
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f06f 0220 	mvn.w	r2, #32
 80040e8:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f92e 	bl	800434c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f06f 0220 	mvn.w	r2, #32
 80040f8:	601a      	str	r2, [r3, #0]
  }
}
 80040fa:	bf00      	nop
 80040fc:	3718      	adds	r7, #24
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
	...

08004104 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004110:	2300      	movs	r3, #0
 8004112:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800411a:	2b01      	cmp	r3, #1
 800411c:	d101      	bne.n	8004122 <HAL_ADC_Start_DMA+0x1e>
 800411e:	2302      	movs	r3, #2
 8004120:	e0e9      	b.n	80042f6 <HAL_ADC_Start_DMA+0x1f2>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2201      	movs	r2, #1
 8004126:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f003 0301 	and.w	r3, r3, #1
 8004134:	2b01      	cmp	r3, #1
 8004136:	d018      	beq.n	800416a <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	689a      	ldr	r2, [r3, #8]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f042 0201 	orr.w	r2, r2, #1
 8004146:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004148:	4b6d      	ldr	r3, [pc, #436]	@ (8004300 <HAL_ADC_Start_DMA+0x1fc>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a6d      	ldr	r2, [pc, #436]	@ (8004304 <HAL_ADC_Start_DMA+0x200>)
 800414e:	fba2 2303 	umull	r2, r3, r2, r3
 8004152:	0c9a      	lsrs	r2, r3, #18
 8004154:	4613      	mov	r3, r2
 8004156:	005b      	lsls	r3, r3, #1
 8004158:	4413      	add	r3, r2
 800415a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800415c:	e002      	b.n	8004164 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	3b01      	subs	r3, #1
 8004162:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1f9      	bne.n	800415e <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004174:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004178:	d107      	bne.n	800418a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	689a      	ldr	r2, [r3, #8]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004188:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f003 0301 	and.w	r3, r3, #1
 8004194:	2b01      	cmp	r3, #1
 8004196:	f040 80a1 	bne.w	80042dc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800419e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80041a2:	f023 0301 	bic.w	r3, r3, #1
 80041a6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d007      	beq.n	80041cc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80041c4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041d8:	d106      	bne.n	80041e8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041de:	f023 0206 	bic.w	r2, r3, #6
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	645a      	str	r2, [r3, #68]	@ 0x44
 80041e6:	e002      	b.n	80041ee <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80041f6:	4b44      	ldr	r3, [pc, #272]	@ (8004308 <HAL_ADC_Start_DMA+0x204>)
 80041f8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041fe:	4a43      	ldr	r2, [pc, #268]	@ (800430c <HAL_ADC_Start_DMA+0x208>)
 8004200:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004206:	4a42      	ldr	r2, [pc, #264]	@ (8004310 <HAL_ADC_Start_DMA+0x20c>)
 8004208:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800420e:	4a41      	ldr	r2, [pc, #260]	@ (8004314 <HAL_ADC_Start_DMA+0x210>)
 8004210:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800421a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	685a      	ldr	r2, [r3, #4]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800422a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	689a      	ldr	r2, [r3, #8]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800423a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	334c      	adds	r3, #76	@ 0x4c
 8004246:	4619      	mov	r1, r3
 8004248:	68ba      	ldr	r2, [r7, #8]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f000 ff9c 	bl	8005188 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f003 031f 	and.w	r3, r3, #31
 8004258:	2b00      	cmp	r3, #0
 800425a:	d12a      	bne.n	80042b2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a2d      	ldr	r2, [pc, #180]	@ (8004318 <HAL_ADC_Start_DMA+0x214>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d015      	beq.n	8004292 <HAL_ADC_Start_DMA+0x18e>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a2c      	ldr	r2, [pc, #176]	@ (800431c <HAL_ADC_Start_DMA+0x218>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d105      	bne.n	800427c <HAL_ADC_Start_DMA+0x178>
 8004270:	4b25      	ldr	r3, [pc, #148]	@ (8004308 <HAL_ADC_Start_DMA+0x204>)
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f003 031f 	and.w	r3, r3, #31
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00a      	beq.n	8004292 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a27      	ldr	r2, [pc, #156]	@ (8004320 <HAL_ADC_Start_DMA+0x21c>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d136      	bne.n	80042f4 <HAL_ADC_Start_DMA+0x1f0>
 8004286:	4b20      	ldr	r3, [pc, #128]	@ (8004308 <HAL_ADC_Start_DMA+0x204>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f003 0310 	and.w	r3, r3, #16
 800428e:	2b00      	cmp	r3, #0
 8004290:	d130      	bne.n	80042f4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d129      	bne.n	80042f4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	689a      	ldr	r2, [r3, #8]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80042ae:	609a      	str	r2, [r3, #8]
 80042b0:	e020      	b.n	80042f4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a18      	ldr	r2, [pc, #96]	@ (8004318 <HAL_ADC_Start_DMA+0x214>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d11b      	bne.n	80042f4 <HAL_ADC_Start_DMA+0x1f0>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d114      	bne.n	80042f4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	689a      	ldr	r2, [r3, #8]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80042d8:	609a      	str	r2, [r3, #8]
 80042da:	e00b      	b.n	80042f4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e0:	f043 0210 	orr.w	r2, r3, #16
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ec:	f043 0201 	orr.w	r2, r3, #1
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3718      	adds	r7, #24
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	20000034 	.word	0x20000034
 8004304:	431bde83 	.word	0x431bde83
 8004308:	40012300 	.word	0x40012300
 800430c:	080047bd 	.word	0x080047bd
 8004310:	08004877 	.word	0x08004877
 8004314:	08004893 	.word	0x08004893
 8004318:	40012000 	.word	0x40012000
 800431c:	40012100 	.word	0x40012100
 8004320:	40012200 	.word	0x40012200

08004324 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800432c:	bf00      	nop
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004360:	b480      	push	{r7}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800436a:	2300      	movs	r3, #0
 800436c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004374:	2b01      	cmp	r3, #1
 8004376:	d101      	bne.n	800437c <HAL_ADC_ConfigChannel+0x1c>
 8004378:	2302      	movs	r3, #2
 800437a:	e113      	b.n	80045a4 <HAL_ADC_ConfigChannel+0x244>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2b09      	cmp	r3, #9
 800438a:	d925      	bls.n	80043d8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68d9      	ldr	r1, [r3, #12]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	b29b      	uxth	r3, r3
 8004398:	461a      	mov	r2, r3
 800439a:	4613      	mov	r3, r2
 800439c:	005b      	lsls	r3, r3, #1
 800439e:	4413      	add	r3, r2
 80043a0:	3b1e      	subs	r3, #30
 80043a2:	2207      	movs	r2, #7
 80043a4:	fa02 f303 	lsl.w	r3, r2, r3
 80043a8:	43da      	mvns	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	400a      	ands	r2, r1
 80043b0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68d9      	ldr	r1, [r3, #12]
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	689a      	ldr	r2, [r3, #8]
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	4618      	mov	r0, r3
 80043c4:	4603      	mov	r3, r0
 80043c6:	005b      	lsls	r3, r3, #1
 80043c8:	4403      	add	r3, r0
 80043ca:	3b1e      	subs	r3, #30
 80043cc:	409a      	lsls	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	430a      	orrs	r2, r1
 80043d4:	60da      	str	r2, [r3, #12]
 80043d6:	e022      	b.n	800441e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	6919      	ldr	r1, [r3, #16]
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	461a      	mov	r2, r3
 80043e6:	4613      	mov	r3, r2
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	4413      	add	r3, r2
 80043ec:	2207      	movs	r2, #7
 80043ee:	fa02 f303 	lsl.w	r3, r2, r3
 80043f2:	43da      	mvns	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	400a      	ands	r2, r1
 80043fa:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	6919      	ldr	r1, [r3, #16]
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	689a      	ldr	r2, [r3, #8]
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	b29b      	uxth	r3, r3
 800440c:	4618      	mov	r0, r3
 800440e:	4603      	mov	r3, r0
 8004410:	005b      	lsls	r3, r3, #1
 8004412:	4403      	add	r3, r0
 8004414:	409a      	lsls	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	430a      	orrs	r2, r1
 800441c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	2b06      	cmp	r3, #6
 8004424:	d824      	bhi.n	8004470 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685a      	ldr	r2, [r3, #4]
 8004430:	4613      	mov	r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	4413      	add	r3, r2
 8004436:	3b05      	subs	r3, #5
 8004438:	221f      	movs	r2, #31
 800443a:	fa02 f303 	lsl.w	r3, r2, r3
 800443e:	43da      	mvns	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	400a      	ands	r2, r1
 8004446:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	b29b      	uxth	r3, r3
 8004454:	4618      	mov	r0, r3
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	685a      	ldr	r2, [r3, #4]
 800445a:	4613      	mov	r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	4413      	add	r3, r2
 8004460:	3b05      	subs	r3, #5
 8004462:	fa00 f203 	lsl.w	r2, r0, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	430a      	orrs	r2, r1
 800446c:	635a      	str	r2, [r3, #52]	@ 0x34
 800446e:	e04c      	b.n	800450a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	2b0c      	cmp	r3, #12
 8004476:	d824      	bhi.n	80044c2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	4613      	mov	r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	4413      	add	r3, r2
 8004488:	3b23      	subs	r3, #35	@ 0x23
 800448a:	221f      	movs	r2, #31
 800448c:	fa02 f303 	lsl.w	r3, r2, r3
 8004490:	43da      	mvns	r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	400a      	ands	r2, r1
 8004498:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	4618      	mov	r0, r3
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	685a      	ldr	r2, [r3, #4]
 80044ac:	4613      	mov	r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	4413      	add	r3, r2
 80044b2:	3b23      	subs	r3, #35	@ 0x23
 80044b4:	fa00 f203 	lsl.w	r2, r0, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	631a      	str	r2, [r3, #48]	@ 0x30
 80044c0:	e023      	b.n	800450a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	685a      	ldr	r2, [r3, #4]
 80044cc:	4613      	mov	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4413      	add	r3, r2
 80044d2:	3b41      	subs	r3, #65	@ 0x41
 80044d4:	221f      	movs	r2, #31
 80044d6:	fa02 f303 	lsl.w	r3, r2, r3
 80044da:	43da      	mvns	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	400a      	ands	r2, r1
 80044e2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	4618      	mov	r0, r3
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	4613      	mov	r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	4413      	add	r3, r2
 80044fc:	3b41      	subs	r3, #65	@ 0x41
 80044fe:	fa00 f203 	lsl.w	r2, r0, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	430a      	orrs	r2, r1
 8004508:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800450a:	4b29      	ldr	r3, [pc, #164]	@ (80045b0 <HAL_ADC_ConfigChannel+0x250>)
 800450c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a28      	ldr	r2, [pc, #160]	@ (80045b4 <HAL_ADC_ConfigChannel+0x254>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d10f      	bne.n	8004538 <HAL_ADC_ConfigChannel+0x1d8>
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2b12      	cmp	r3, #18
 800451e:	d10b      	bne.n	8004538 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a1d      	ldr	r2, [pc, #116]	@ (80045b4 <HAL_ADC_ConfigChannel+0x254>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d12b      	bne.n	800459a <HAL_ADC_ConfigChannel+0x23a>
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a1c      	ldr	r2, [pc, #112]	@ (80045b8 <HAL_ADC_ConfigChannel+0x258>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d003      	beq.n	8004554 <HAL_ADC_ConfigChannel+0x1f4>
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2b11      	cmp	r3, #17
 8004552:	d122      	bne.n	800459a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a11      	ldr	r2, [pc, #68]	@ (80045b8 <HAL_ADC_ConfigChannel+0x258>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d111      	bne.n	800459a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004576:	4b11      	ldr	r3, [pc, #68]	@ (80045bc <HAL_ADC_ConfigChannel+0x25c>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a11      	ldr	r2, [pc, #68]	@ (80045c0 <HAL_ADC_ConfigChannel+0x260>)
 800457c:	fba2 2303 	umull	r2, r3, r2, r3
 8004580:	0c9a      	lsrs	r2, r3, #18
 8004582:	4613      	mov	r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	4413      	add	r3, r2
 8004588:	005b      	lsls	r3, r3, #1
 800458a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800458c:	e002      	b.n	8004594 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	3b01      	subs	r3, #1
 8004592:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1f9      	bne.n	800458e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3714      	adds	r7, #20
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr
 80045b0:	40012300 	.word	0x40012300
 80045b4:	40012000 	.word	0x40012000
 80045b8:	10000012 	.word	0x10000012
 80045bc:	20000034 	.word	0x20000034
 80045c0:	431bde83 	.word	0x431bde83

080045c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80045cc:	4b79      	ldr	r3, [pc, #484]	@ (80047b4 <ADC_Init+0x1f0>)
 80045ce:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	431a      	orrs	r2, r3
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80045f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	6859      	ldr	r1, [r3, #4]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	021a      	lsls	r2, r3, #8
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	430a      	orrs	r2, r1
 800460c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	685a      	ldr	r2, [r3, #4]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800461c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	6859      	ldr	r1, [r3, #4]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689a      	ldr	r2, [r3, #8]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	430a      	orrs	r2, r1
 800462e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	689a      	ldr	r2, [r3, #8]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800463e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	6899      	ldr	r1, [r3, #8]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68da      	ldr	r2, [r3, #12]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	430a      	orrs	r2, r1
 8004650:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004656:	4a58      	ldr	r2, [pc, #352]	@ (80047b8 <ADC_Init+0x1f4>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d022      	beq.n	80046a2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	689a      	ldr	r2, [r3, #8]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800466a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	6899      	ldr	r1, [r3, #8]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	430a      	orrs	r2, r1
 800467c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	689a      	ldr	r2, [r3, #8]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800468c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	6899      	ldr	r1, [r3, #8]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	430a      	orrs	r2, r1
 800469e:	609a      	str	r2, [r3, #8]
 80046a0:	e00f      	b.n	80046c2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	689a      	ldr	r2, [r3, #8]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80046b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	689a      	ldr	r2, [r3, #8]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80046c0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	689a      	ldr	r2, [r3, #8]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f022 0202 	bic.w	r2, r2, #2
 80046d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	6899      	ldr	r1, [r3, #8]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	7e1b      	ldrb	r3, [r3, #24]
 80046dc:	005a      	lsls	r2, r3, #1
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	430a      	orrs	r2, r1
 80046e4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d01b      	beq.n	8004728 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	685a      	ldr	r2, [r3, #4]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046fe:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	685a      	ldr	r2, [r3, #4]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800470e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6859      	ldr	r1, [r3, #4]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800471a:	3b01      	subs	r3, #1
 800471c:	035a      	lsls	r2, r3, #13
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	430a      	orrs	r2, r1
 8004724:	605a      	str	r2, [r3, #4]
 8004726:	e007      	b.n	8004738 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004736:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004746:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	69db      	ldr	r3, [r3, #28]
 8004752:	3b01      	subs	r3, #1
 8004754:	051a      	lsls	r2, r3, #20
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	430a      	orrs	r2, r1
 800475c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	689a      	ldr	r2, [r3, #8]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800476c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	6899      	ldr	r1, [r3, #8]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800477a:	025a      	lsls	r2, r3, #9
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	430a      	orrs	r2, r1
 8004782:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	689a      	ldr	r2, [r3, #8]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004792:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	6899      	ldr	r1, [r3, #8]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	029a      	lsls	r2, r3, #10
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	430a      	orrs	r2, r1
 80047a6:	609a      	str	r2, [r3, #8]
}
 80047a8:	bf00      	nop
 80047aa:	3714      	adds	r7, #20
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr
 80047b4:	40012300 	.word	0x40012300
 80047b8:	0f000001 	.word	0x0f000001

080047bc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047c8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ce:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d13c      	bne.n	8004850 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047da:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d12b      	bne.n	8004848 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d127      	bne.n	8004848 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047fe:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004802:	2b00      	cmp	r3, #0
 8004804:	d006      	beq.n	8004814 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004810:	2b00      	cmp	r3, #0
 8004812:	d119      	bne.n	8004848 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	685a      	ldr	r2, [r3, #4]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f022 0220 	bic.w	r2, r2, #32
 8004822:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004828:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004834:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d105      	bne.n	8004848 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004840:	f043 0201 	orr.w	r2, r3, #1
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f7fe fe35 	bl	80034b8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800484e:	e00e      	b.n	800486e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004854:	f003 0310 	and.w	r3, r3, #16
 8004858:	2b00      	cmp	r3, #0
 800485a:	d003      	beq.n	8004864 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800485c:	68f8      	ldr	r0, [r7, #12]
 800485e:	f7ff fd75 	bl	800434c <HAL_ADC_ErrorCallback>
}
 8004862:	e004      	b.n	800486e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	4798      	blx	r3
}
 800486e:	bf00      	nop
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b084      	sub	sp, #16
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004882:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f7ff fd4d 	bl	8004324 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800488a:	bf00      	nop
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004892:	b580      	push	{r7, lr}
 8004894:	b084      	sub	sp, #16
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800489e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2240      	movs	r2, #64	@ 0x40
 80048a4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048aa:	f043 0204 	orr.w	r2, r3, #4
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80048b2:	68f8      	ldr	r0, [r7, #12]
 80048b4:	f7ff fd4a 	bl	800434c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80048b8:	bf00      	nop
 80048ba:	3710      	adds	r7, #16
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <HAL_ADCEx_InjectedStart_IT>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b087      	sub	sp, #28
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80048c8:	2300      	movs	r3, #0
 80048ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80048cc:	2300      	movs	r3, #0
 80048ce:	617b      	str	r3, [r7, #20]
 80048d0:	2300      	movs	r3, #0
 80048d2:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;

  /* Process locked */
  __HAL_LOCK(hadc);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d101      	bne.n	80048e2 <HAL_ADCEx_InjectedStart_IT+0x22>
 80048de:	2302      	movs	r3, #2
 80048e0:	e0b2      	b.n	8004a48 <HAL_ADCEx_InjectedStart_IT+0x188>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2201      	movs	r2, #1
 80048e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */

  /* Check if ADC peripheral is disabled in order to enable it and wait during
     Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f003 0301 	and.w	r3, r3, #1
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d018      	beq.n	800492a <HAL_ADCEx_InjectedStart_IT+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689a      	ldr	r2, [r3, #8]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f042 0201 	orr.w	r2, r2, #1
 8004906:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004908:	4b52      	ldr	r3, [pc, #328]	@ (8004a54 <HAL_ADCEx_InjectedStart_IT+0x194>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a52      	ldr	r2, [pc, #328]	@ (8004a58 <HAL_ADCEx_InjectedStart_IT+0x198>)
 800490e:	fba2 2303 	umull	r2, r3, r2, r3
 8004912:	0c9a      	lsrs	r2, r3, #18
 8004914:	4613      	mov	r3, r2
 8004916:	005b      	lsls	r3, r3, #1
 8004918:	4413      	add	r3, r2
 800491a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800491c:	e002      	b.n	8004924 <HAL_ADCEx_InjectedStart_IT+0x64>
    {
      counter--;
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	3b01      	subs	r3, #1
 8004922:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1f9      	bne.n	800491e <HAL_ADCEx_InjectedStart_IT+0x5e>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f003 0301 	and.w	r3, r3, #1
 8004934:	2b01      	cmp	r3, #1
 8004936:	d17a      	bne.n	8004a2e <HAL_ADCEx_InjectedStart_IT+0x16e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800493c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004940:	f023 0301 	bic.w	r3, r3, #1
 8004944:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004954:	2b00      	cmp	r3, #0
 8004956:	d102      	bne.n	800495e <HAL_ADCEx_InjectedStart_IT+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f06f 0204 	mvn.w	r2, #4
 800496e:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for injected channels */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	685a      	ldr	r2, [r3, #4]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800497e:	605a      	str	r2, [r3, #4]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004980:	4b36      	ldr	r3, [pc, #216]	@ (8004a5c <HAL_ADCEx_InjectedStart_IT+0x19c>)
 8004982:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f003 031f 	and.w	r3, r3, #31
 800498c:	2b00      	cmp	r3, #0
 800498e:	d124      	bne.n	80049da <HAL_ADCEx_InjectedStart_IT+0x11a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800499a:	2b00      	cmp	r3, #0
 800499c:	bf0c      	ite	eq
 800499e:	2301      	moveq	r3, #1
 80049a0:	2300      	movne	r3, #0
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	bf0c      	ite	eq
 80049b4:	2301      	moveq	r3, #1
 80049b6:	2300      	movne	r3, #0
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	613b      	str	r3, [r7, #16]
      if (tmp1 && tmp2)
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d041      	beq.n	8004a46 <HAL_ADCEx_InjectedStart_IT+0x186>
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d03e      	beq.n	8004a46 <HAL_ADCEx_InjectedStart_IT+0x186>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	689a      	ldr	r2, [r3, #8]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 80049d6:	609a      	str	r2, [r3, #8]
 80049d8:	e035      	b.n	8004a46 <HAL_ADCEx_InjectedStart_IT+0x186>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	bf0c      	ite	eq
 80049e8:	2301      	moveq	r3, #1
 80049ea:	2300      	movne	r3, #0
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	bf0c      	ite	eq
 80049fe:	2301      	moveq	r3, #1
 8004a00:	2300      	movne	r3, #0
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	613b      	str	r3, [r7, #16]
      if ((hadc->Instance == ADC1) && tmp1 && tmp2)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a15      	ldr	r2, [pc, #84]	@ (8004a60 <HAL_ADCEx_InjectedStart_IT+0x1a0>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d11a      	bne.n	8004a46 <HAL_ADCEx_InjectedStart_IT+0x186>
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d017      	beq.n	8004a46 <HAL_ADCEx_InjectedStart_IT+0x186>
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d014      	beq.n	8004a46 <HAL_ADCEx_InjectedStart_IT+0x186>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	689a      	ldr	r2, [r3, #8]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8004a2a:	609a      	str	r2, [r3, #8]
 8004a2c:	e00b      	b.n	8004a46 <HAL_ADCEx_InjectedStart_IT+0x186>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a32:	f043 0210 	orr.w	r2, r3, #16
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a3e:	f043 0201 	orr.w	r2, r3, #1
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	371c      	adds	r7, #28
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr
 8004a54:	20000034 	.word	0x20000034
 8004a58:	431bde83 	.word	0x431bde83
 8004a5c:	40012300 	.word	0x40012300
 8004a60:	40012000 	.word	0x40012000

08004a64 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef *hadc, uint32_t InjectedRank)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));

  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f06f 0204 	mvn.w	r2, #4
 8004a7a:	601a      	str	r2, [r3, #0]

  /* Return the selected ADC converted value */
  switch (InjectedRank)
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	2b03      	cmp	r3, #3
 8004a82:	d81f      	bhi.n	8004ac4 <HAL_ADCEx_InjectedGetValue+0x60>
 8004a84:	a201      	add	r2, pc, #4	@ (adr r2, 8004a8c <HAL_ADCEx_InjectedGetValue+0x28>)
 8004a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a8a:	bf00      	nop
 8004a8c:	08004abb 	.word	0x08004abb
 8004a90:	08004ab1 	.word	0x08004ab1
 8004a94:	08004aa7 	.word	0x08004aa7
 8004a98:	08004a9d 	.word	0x08004a9d
  {
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004aa2:	60fb      	str	r3, [r7, #12]
    }
    break;
 8004aa4:	e00f      	b.n	8004ac6 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3:
    {
      tmp =  hadc->Instance->JDR3;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aac:	60fb      	str	r3, [r7, #12]
    }
    break;
 8004aae:	e00a      	b.n	8004ac6 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2:
    {
      tmp =  hadc->Instance->JDR2;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab6:	60fb      	str	r3, [r7, #12]
    }
    break;
 8004ab8:	e005      	b.n	8004ac6 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ac0:	60fb      	str	r3, [r7, #12]
    }
    break;
 8004ac2:	e000      	b.n	8004ac6 <HAL_ADCEx_InjectedGetValue+0x62>
    default:
      break;
 8004ac4:	bf00      	nop
  }
  return tmp;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3714      	adds	r7, #20
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d101      	bne.n	8004aec <HAL_ADCEx_InjectedConfigChannel+0x18>
 8004ae8:	2302      	movs	r3, #2
 8004aea:	e17e      	b.n	8004dea <HAL_ADCEx_InjectedConfigChannel+0x316>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2b09      	cmp	r3, #9
 8004afa:	d925      	bls.n	8004b48 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68d9      	ldr	r1, [r3, #12]
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	461a      	mov	r2, r3
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	005b      	lsls	r3, r3, #1
 8004b0e:	4413      	add	r3, r2
 8004b10:	3b1e      	subs	r3, #30
 8004b12:	2207      	movs	r2, #7
 8004b14:	fa02 f303 	lsl.w	r3, r2, r3
 8004b18:	43da      	mvns	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	400a      	ands	r2, r1
 8004b20:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68d9      	ldr	r1, [r3, #12]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	689a      	ldr	r2, [r3, #8]
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	4618      	mov	r0, r3
 8004b34:	4603      	mov	r3, r0
 8004b36:	005b      	lsls	r3, r3, #1
 8004b38:	4403      	add	r3, r0
 8004b3a:	3b1e      	subs	r3, #30
 8004b3c:	409a      	lsls	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	430a      	orrs	r2, r1
 8004b44:	60da      	str	r2, [r3, #12]
 8004b46:	e022      	b.n	8004b8e <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6919      	ldr	r1, [r3, #16]
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	461a      	mov	r2, r3
 8004b56:	4613      	mov	r3, r2
 8004b58:	005b      	lsls	r3, r3, #1
 8004b5a:	4413      	add	r3, r2
 8004b5c:	2207      	movs	r2, #7
 8004b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b62:	43da      	mvns	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	400a      	ands	r2, r1
 8004b6a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6919      	ldr	r1, [r3, #16]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	689a      	ldr	r2, [r3, #8]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	4603      	mov	r3, r0
 8004b80:	005b      	lsls	r3, r3, #1
 8004b82:	4403      	add	r3, r0
 8004b84:	409a      	lsls	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	611a      	str	r2, [r3, #16]
  }

  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8004b9c:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	051a      	lsls	r2, r3, #20
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Rank configuration */

  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	b2da      	uxtb	r2, r3
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	3303      	adds	r3, #3
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	461a      	mov	r2, r3
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	4413      	add	r3, r2
 8004bd6:	221f      	movs	r2, #31
 8004bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bdc:	43da      	mvns	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	400a      	ands	r2, r1
 8004be4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	b2da      	uxtb	r2, r3
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	3303      	adds	r3, #3
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	461a      	mov	r2, r3
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	4413      	add	r3, r2
 8004c10:	fa00 f203 	lsl.w	r2, r0, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	699b      	ldr	r3, [r3, #24]
 8004c20:	4a75      	ldr	r2, [pc, #468]	@ (8004df8 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d022      	beq.n	8004c6c <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	689a      	ldr	r2, [r3, #8]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 8004c34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	6899      	ldr	r1, [r3, #8]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	699a      	ldr	r2, [r3, #24]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	430a      	orrs	r2, r1
 8004c46:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	689a      	ldr	r2, [r3, #8]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8004c56:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	6899      	ldr	r1, [r3, #8]
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	69da      	ldr	r2, [r3, #28]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	430a      	orrs	r2, r1
 8004c68:	609a      	str	r2, [r3, #8]
 8004c6a:	e00f      	b.n	8004c8c <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	689a      	ldr	r2, [r3, #8]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 8004c7a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	689a      	ldr	r2, [r3, #8]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8004c8a:	609a      	str	r2, [r3, #8]
  }

  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	7d5b      	ldrb	r3, [r3, #21]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d008      	beq.n	8004ca6 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	685a      	ldr	r2, [r3, #4]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004ca2:	605a      	str	r2, [r3, #4]
 8004ca4:	e007      	b.n	8004cb6 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cb4:	605a      	str	r2, [r3, #4]
  }

  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	7d1b      	ldrb	r3, [r3, #20]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d008      	beq.n	8004cd0 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	685a      	ldr	r2, [r3, #4]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004ccc:	605a      	str	r2, [r3, #4]
 8004cce:	e007      	b.n	8004ce0 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	685a      	ldr	r2, [r3, #4]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004cde:	605a      	str	r2, [r3, #4]
  }

  switch (sConfigInjected->InjectedRank)
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	2b03      	cmp	r3, #3
 8004ce6:	d02e      	beq.n	8004d46 <HAL_ADCEx_InjectedConfigChannel+0x272>
 8004ce8:	2b03      	cmp	r3, #3
 8004cea:	d840      	bhi.n	8004d6e <HAL_ADCEx_InjectedConfigChannel+0x29a>
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d002      	beq.n	8004cf6 <HAL_ADCEx_InjectedConfigChannel+0x222>
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d014      	beq.n	8004d1e <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8004cf4:	e03b      	b.n	8004d6e <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	695b      	ldr	r3, [r3, #20]
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	6812      	ldr	r2, [r2, #0]
 8004d00:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8004d04:	f023 030f 	bic.w	r3, r3, #15
 8004d08:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	6959      	ldr	r1, [r3, #20]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	68da      	ldr	r2, [r3, #12]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	615a      	str	r2, [r3, #20]
      break;
 8004d1c:	e03b      	b.n	8004d96 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	6812      	ldr	r2, [r2, #0]
 8004d28:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8004d2c:	f023 030f 	bic.w	r3, r3, #15
 8004d30:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	6999      	ldr	r1, [r3, #24]
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	68da      	ldr	r2, [r3, #12]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	430a      	orrs	r2, r1
 8004d42:	619a      	str	r2, [r3, #24]
      break;
 8004d44:	e027      	b.n	8004d96 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	69db      	ldr	r3, [r3, #28]
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	6812      	ldr	r2, [r2, #0]
 8004d50:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8004d54:	f023 030f 	bic.w	r3, r3, #15
 8004d58:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	69d9      	ldr	r1, [r3, #28]
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	68da      	ldr	r2, [r3, #12]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	61da      	str	r2, [r3, #28]
      break;
 8004d6c:	e013      	b.n	8004d96 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	6a1b      	ldr	r3, [r3, #32]
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	6812      	ldr	r2, [r2, #0]
 8004d78:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8004d7c:	f023 030f 	bic.w	r3, r3, #15
 8004d80:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	6a19      	ldr	r1, [r3, #32]
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	68da      	ldr	r2, [r3, #12]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	430a      	orrs	r2, r1
 8004d92:	621a      	str	r2, [r3, #32]
      break;
 8004d94:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004d96:	4b19      	ldr	r3, [pc, #100]	@ (8004dfc <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8004d98:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a18      	ldr	r2, [pc, #96]	@ (8004e00 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d109      	bne.n	8004db8 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2b12      	cmp	r3, #18
 8004daa:	d105      	bne.n	8004db8 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a10      	ldr	r2, [pc, #64]	@ (8004e00 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d10e      	bne.n	8004de0 <HAL_ADCEx_InjectedConfigChannel+0x30c>
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a0f      	ldr	r2, [pc, #60]	@ (8004e04 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d003      	beq.n	8004dd4 <HAL_ADCEx_InjectedConfigChannel+0x300>
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2b11      	cmp	r3, #17
 8004dd2:	d105      	bne.n	8004de0 <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	605a      	str	r2, [r3, #4]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3714      	adds	r7, #20
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	000f0001 	.word	0x000f0001
 8004dfc:	40012300 	.word	0x40012300
 8004e00:	40012000 	.word	0x40012000
 8004e04:	10000012 	.word	0x10000012

08004e08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f003 0307 	and.w	r3, r3, #7
 8004e16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e18:	4b0c      	ldr	r3, [pc, #48]	@ (8004e4c <__NVIC_SetPriorityGrouping+0x44>)
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e1e:	68ba      	ldr	r2, [r7, #8]
 8004e20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004e24:	4013      	ands	r3, r2
 8004e26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004e34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e3a:	4a04      	ldr	r2, [pc, #16]	@ (8004e4c <__NVIC_SetPriorityGrouping+0x44>)
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	60d3      	str	r3, [r2, #12]
}
 8004e40:	bf00      	nop
 8004e42:	3714      	adds	r7, #20
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr
 8004e4c:	e000ed00 	.word	0xe000ed00

08004e50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e50:	b480      	push	{r7}
 8004e52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e54:	4b04      	ldr	r3, [pc, #16]	@ (8004e68 <__NVIC_GetPriorityGrouping+0x18>)
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	0a1b      	lsrs	r3, r3, #8
 8004e5a:	f003 0307 	and.w	r3, r3, #7
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr
 8004e68:	e000ed00 	.word	0xe000ed00

08004e6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	4603      	mov	r3, r0
 8004e74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	db0b      	blt.n	8004e96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e7e:	79fb      	ldrb	r3, [r7, #7]
 8004e80:	f003 021f 	and.w	r2, r3, #31
 8004e84:	4907      	ldr	r1, [pc, #28]	@ (8004ea4 <__NVIC_EnableIRQ+0x38>)
 8004e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e8a:	095b      	lsrs	r3, r3, #5
 8004e8c:	2001      	movs	r0, #1
 8004e8e:	fa00 f202 	lsl.w	r2, r0, r2
 8004e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004e96:	bf00      	nop
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	e000e100 	.word	0xe000e100

08004ea8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	4603      	mov	r3, r0
 8004eb0:	6039      	str	r1, [r7, #0]
 8004eb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	db0a      	blt.n	8004ed2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	b2da      	uxtb	r2, r3
 8004ec0:	490c      	ldr	r1, [pc, #48]	@ (8004ef4 <__NVIC_SetPriority+0x4c>)
 8004ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ec6:	0112      	lsls	r2, r2, #4
 8004ec8:	b2d2      	uxtb	r2, r2
 8004eca:	440b      	add	r3, r1
 8004ecc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ed0:	e00a      	b.n	8004ee8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	b2da      	uxtb	r2, r3
 8004ed6:	4908      	ldr	r1, [pc, #32]	@ (8004ef8 <__NVIC_SetPriority+0x50>)
 8004ed8:	79fb      	ldrb	r3, [r7, #7]
 8004eda:	f003 030f 	and.w	r3, r3, #15
 8004ede:	3b04      	subs	r3, #4
 8004ee0:	0112      	lsls	r2, r2, #4
 8004ee2:	b2d2      	uxtb	r2, r2
 8004ee4:	440b      	add	r3, r1
 8004ee6:	761a      	strb	r2, [r3, #24]
}
 8004ee8:	bf00      	nop
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr
 8004ef4:	e000e100 	.word	0xe000e100
 8004ef8:	e000ed00 	.word	0xe000ed00

08004efc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b089      	sub	sp, #36	@ 0x24
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f003 0307 	and.w	r3, r3, #7
 8004f0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	f1c3 0307 	rsb	r3, r3, #7
 8004f16:	2b04      	cmp	r3, #4
 8004f18:	bf28      	it	cs
 8004f1a:	2304      	movcs	r3, #4
 8004f1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	3304      	adds	r3, #4
 8004f22:	2b06      	cmp	r3, #6
 8004f24:	d902      	bls.n	8004f2c <NVIC_EncodePriority+0x30>
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	3b03      	subs	r3, #3
 8004f2a:	e000      	b.n	8004f2e <NVIC_EncodePriority+0x32>
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f30:	f04f 32ff 	mov.w	r2, #4294967295
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3a:	43da      	mvns	r2, r3
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	401a      	ands	r2, r3
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f44:	f04f 31ff 	mov.w	r1, #4294967295
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f4e:	43d9      	mvns	r1, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f54:	4313      	orrs	r3, r2
         );
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3724      	adds	r7, #36	@ 0x24
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
	...

08004f64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f74:	d301      	bcc.n	8004f7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f76:	2301      	movs	r3, #1
 8004f78:	e00f      	b.n	8004f9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f7a:	4a0a      	ldr	r2, [pc, #40]	@ (8004fa4 <SysTick_Config+0x40>)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f82:	210f      	movs	r1, #15
 8004f84:	f04f 30ff 	mov.w	r0, #4294967295
 8004f88:	f7ff ff8e 	bl	8004ea8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f8c:	4b05      	ldr	r3, [pc, #20]	@ (8004fa4 <SysTick_Config+0x40>)
 8004f8e:	2200      	movs	r2, #0
 8004f90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f92:	4b04      	ldr	r3, [pc, #16]	@ (8004fa4 <SysTick_Config+0x40>)
 8004f94:	2207      	movs	r2, #7
 8004f96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3708      	adds	r7, #8
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	e000e010 	.word	0xe000e010

08004fa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f7ff ff29 	bl	8004e08 <__NVIC_SetPriorityGrouping>
}
 8004fb6:	bf00      	nop
 8004fb8:	3708      	adds	r7, #8
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b086      	sub	sp, #24
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	60b9      	str	r1, [r7, #8]
 8004fc8:	607a      	str	r2, [r7, #4]
 8004fca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004fd0:	f7ff ff3e 	bl	8004e50 <__NVIC_GetPriorityGrouping>
 8004fd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	68b9      	ldr	r1, [r7, #8]
 8004fda:	6978      	ldr	r0, [r7, #20]
 8004fdc:	f7ff ff8e 	bl	8004efc <NVIC_EncodePriority>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fe6:	4611      	mov	r1, r2
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f7ff ff5d 	bl	8004ea8 <__NVIC_SetPriority>
}
 8004fee:	bf00      	nop
 8004ff0:	3718      	adds	r7, #24
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	b082      	sub	sp, #8
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005004:	4618      	mov	r0, r3
 8005006:	f7ff ff31 	bl	8004e6c <__NVIC_EnableIRQ>
}
 800500a:	bf00      	nop
 800500c:	3708      	adds	r7, #8
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}

08005012 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005012:	b580      	push	{r7, lr}
 8005014:	b082      	sub	sp, #8
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f7ff ffa2 	bl	8004f64 <SysTick_Config>
 8005020:	4603      	mov	r3, r0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3708      	adds	r7, #8
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
	...

0800502c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005034:	2300      	movs	r3, #0
 8005036:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005038:	f7fe fee0 	bl	8003dfc <HAL_GetTick>
 800503c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d101      	bne.n	8005048 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e099      	b.n	800517c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2202      	movs	r2, #2
 800504c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f022 0201 	bic.w	r2, r2, #1
 8005066:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005068:	e00f      	b.n	800508a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800506a:	f7fe fec7 	bl	8003dfc <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	2b05      	cmp	r3, #5
 8005076:	d908      	bls.n	800508a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2220      	movs	r2, #32
 800507c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2203      	movs	r2, #3
 8005082:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e078      	b.n	800517c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0301 	and.w	r3, r3, #1
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1e8      	bne.n	800506a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	4b38      	ldr	r3, [pc, #224]	@ (8005184 <HAL_DMA_Init+0x158>)
 80050a4:	4013      	ands	r3, r2
 80050a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685a      	ldr	r2, [r3, #4]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80050b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a1b      	ldr	r3, [r3, #32]
 80050d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80050d6:	697a      	ldr	r2, [r7, #20]
 80050d8:	4313      	orrs	r3, r2
 80050da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e0:	2b04      	cmp	r3, #4
 80050e2:	d107      	bne.n	80050f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ec:	4313      	orrs	r3, r2
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	697a      	ldr	r2, [r7, #20]
 80050fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	f023 0307 	bic.w	r3, r3, #7
 800510a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	4313      	orrs	r3, r2
 8005114:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800511a:	2b04      	cmp	r3, #4
 800511c:	d117      	bne.n	800514e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	4313      	orrs	r3, r2
 8005126:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00e      	beq.n	800514e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 fb01 	bl	8005738 <DMA_CheckFifoParam>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d008      	beq.n	800514e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2240      	movs	r2, #64	@ 0x40
 8005140:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800514a:	2301      	movs	r3, #1
 800514c:	e016      	b.n	800517c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 fab8 	bl	80056cc <DMA_CalcBaseAndBitshift>
 800515c:	4603      	mov	r3, r0
 800515e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005164:	223f      	movs	r2, #63	@ 0x3f
 8005166:	409a      	lsls	r2, r3
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2201      	movs	r2, #1
 8005176:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3718      	adds	r7, #24
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	f010803f 	.word	0xf010803f

08005188 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b086      	sub	sp, #24
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
 8005194:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005196:	2300      	movs	r3, #0
 8005198:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800519e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d101      	bne.n	80051ae <HAL_DMA_Start_IT+0x26>
 80051aa:	2302      	movs	r3, #2
 80051ac:	e040      	b.n	8005230 <HAL_DMA_Start_IT+0xa8>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2201      	movs	r2, #1
 80051b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d12f      	bne.n	8005222 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2202      	movs	r2, #2
 80051c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	68b9      	ldr	r1, [r7, #8]
 80051d6:	68f8      	ldr	r0, [r7, #12]
 80051d8:	f000 fa4a 	bl	8005670 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051e0:	223f      	movs	r2, #63	@ 0x3f
 80051e2:	409a      	lsls	r2, r3
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f042 0216 	orr.w	r2, r2, #22
 80051f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d007      	beq.n	8005210 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f042 0208 	orr.w	r2, r2, #8
 800520e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f042 0201 	orr.w	r2, r2, #1
 800521e:	601a      	str	r2, [r3, #0]
 8005220:	e005      	b.n	800522e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800522a:	2302      	movs	r3, #2
 800522c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800522e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005230:	4618      	mov	r0, r3
 8005232:	3718      	adds	r7, #24
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005244:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005246:	f7fe fdd9 	bl	8003dfc <HAL_GetTick>
 800524a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005252:	b2db      	uxtb	r3, r3
 8005254:	2b02      	cmp	r3, #2
 8005256:	d008      	beq.n	800526a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2280      	movs	r2, #128	@ 0x80
 800525c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e052      	b.n	8005310 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f022 0216 	bic.w	r2, r2, #22
 8005278:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	695a      	ldr	r2, [r3, #20]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005288:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800528e:	2b00      	cmp	r3, #0
 8005290:	d103      	bne.n	800529a <HAL_DMA_Abort+0x62>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005296:	2b00      	cmp	r3, #0
 8005298:	d007      	beq.n	80052aa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f022 0208 	bic.w	r2, r2, #8
 80052a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f022 0201 	bic.w	r2, r2, #1
 80052b8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80052ba:	e013      	b.n	80052e4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80052bc:	f7fe fd9e 	bl	8003dfc <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	2b05      	cmp	r3, #5
 80052c8:	d90c      	bls.n	80052e4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2220      	movs	r2, #32
 80052ce:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2203      	movs	r2, #3
 80052d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	e015      	b.n	8005310 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1e4      	bne.n	80052bc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052f6:	223f      	movs	r2, #63	@ 0x3f
 80052f8:	409a      	lsls	r2, r3
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	3710      	adds	r7, #16
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005326:	b2db      	uxtb	r3, r3
 8005328:	2b02      	cmp	r3, #2
 800532a:	d004      	beq.n	8005336 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2280      	movs	r2, #128	@ 0x80
 8005330:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e00c      	b.n	8005350 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2205      	movs	r2, #5
 800533a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f022 0201 	bic.w	r2, r2, #1
 800534c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b086      	sub	sp, #24
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005364:	2300      	movs	r3, #0
 8005366:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005368:	4b8e      	ldr	r3, [pc, #568]	@ (80055a4 <HAL_DMA_IRQHandler+0x248>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a8e      	ldr	r2, [pc, #568]	@ (80055a8 <HAL_DMA_IRQHandler+0x24c>)
 800536e:	fba2 2303 	umull	r2, r3, r2, r3
 8005372:	0a9b      	lsrs	r3, r3, #10
 8005374:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800537a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005386:	2208      	movs	r2, #8
 8005388:	409a      	lsls	r2, r3
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	4013      	ands	r3, r2
 800538e:	2b00      	cmp	r3, #0
 8005390:	d01a      	beq.n	80053c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0304 	and.w	r3, r3, #4
 800539c:	2b00      	cmp	r3, #0
 800539e:	d013      	beq.n	80053c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f022 0204 	bic.w	r2, r2, #4
 80053ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053b4:	2208      	movs	r2, #8
 80053b6:	409a      	lsls	r2, r3
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053c0:	f043 0201 	orr.w	r2, r3, #1
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053cc:	2201      	movs	r2, #1
 80053ce:	409a      	lsls	r2, r3
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	4013      	ands	r3, r2
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d012      	beq.n	80053fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	695b      	ldr	r3, [r3, #20]
 80053de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00b      	beq.n	80053fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053ea:	2201      	movs	r2, #1
 80053ec:	409a      	lsls	r2, r3
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053f6:	f043 0202 	orr.w	r2, r3, #2
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005402:	2204      	movs	r2, #4
 8005404:	409a      	lsls	r2, r3
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	4013      	ands	r3, r2
 800540a:	2b00      	cmp	r3, #0
 800540c:	d012      	beq.n	8005434 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0302 	and.w	r3, r3, #2
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00b      	beq.n	8005434 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005420:	2204      	movs	r2, #4
 8005422:	409a      	lsls	r2, r3
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800542c:	f043 0204 	orr.w	r2, r3, #4
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005438:	2210      	movs	r2, #16
 800543a:	409a      	lsls	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	4013      	ands	r3, r2
 8005440:	2b00      	cmp	r3, #0
 8005442:	d043      	beq.n	80054cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0308 	and.w	r3, r3, #8
 800544e:	2b00      	cmp	r3, #0
 8005450:	d03c      	beq.n	80054cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005456:	2210      	movs	r2, #16
 8005458:	409a      	lsls	r2, r3
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005468:	2b00      	cmp	r3, #0
 800546a:	d018      	beq.n	800549e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d108      	bne.n	800548c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800547e:	2b00      	cmp	r3, #0
 8005480:	d024      	beq.n	80054cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	4798      	blx	r3
 800548a:	e01f      	b.n	80054cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005490:	2b00      	cmp	r3, #0
 8005492:	d01b      	beq.n	80054cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	4798      	blx	r3
 800549c:	e016      	b.n	80054cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d107      	bne.n	80054bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f022 0208 	bic.w	r2, r2, #8
 80054ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d003      	beq.n	80054cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054d0:	2220      	movs	r2, #32
 80054d2:	409a      	lsls	r2, r3
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	4013      	ands	r3, r2
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f000 808f 	beq.w	80055fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0310 	and.w	r3, r3, #16
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f000 8087 	beq.w	80055fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054f2:	2220      	movs	r2, #32
 80054f4:	409a      	lsls	r2, r3
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b05      	cmp	r3, #5
 8005504:	d136      	bne.n	8005574 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f022 0216 	bic.w	r2, r2, #22
 8005514:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	695a      	ldr	r2, [r3, #20]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005524:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800552a:	2b00      	cmp	r3, #0
 800552c:	d103      	bne.n	8005536 <HAL_DMA_IRQHandler+0x1da>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005532:	2b00      	cmp	r3, #0
 8005534:	d007      	beq.n	8005546 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f022 0208 	bic.w	r2, r2, #8
 8005544:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800554a:	223f      	movs	r2, #63	@ 0x3f
 800554c:	409a      	lsls	r2, r3
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005566:	2b00      	cmp	r3, #0
 8005568:	d07e      	beq.n	8005668 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	4798      	blx	r3
        }
        return;
 8005572:	e079      	b.n	8005668 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d01d      	beq.n	80055be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d10d      	bne.n	80055ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005594:	2b00      	cmp	r3, #0
 8005596:	d031      	beq.n	80055fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	4798      	blx	r3
 80055a0:	e02c      	b.n	80055fc <HAL_DMA_IRQHandler+0x2a0>
 80055a2:	bf00      	nop
 80055a4:	20000034 	.word	0x20000034
 80055a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d023      	beq.n	80055fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	4798      	blx	r3
 80055bc:	e01e      	b.n	80055fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d10f      	bne.n	80055ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f022 0210 	bic.w	r2, r2, #16
 80055da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d003      	beq.n	80055fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005600:	2b00      	cmp	r3, #0
 8005602:	d032      	beq.n	800566a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005608:	f003 0301 	and.w	r3, r3, #1
 800560c:	2b00      	cmp	r3, #0
 800560e:	d022      	beq.n	8005656 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2205      	movs	r2, #5
 8005614:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f022 0201 	bic.w	r2, r2, #1
 8005626:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	3301      	adds	r3, #1
 800562c:	60bb      	str	r3, [r7, #8]
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	429a      	cmp	r2, r3
 8005632:	d307      	bcc.n	8005644 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0301 	and.w	r3, r3, #1
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1f2      	bne.n	8005628 <HAL_DMA_IRQHandler+0x2cc>
 8005642:	e000      	b.n	8005646 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005644:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800565a:	2b00      	cmp	r3, #0
 800565c:	d005      	beq.n	800566a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	4798      	blx	r3
 8005666:	e000      	b.n	800566a <HAL_DMA_IRQHandler+0x30e>
        return;
 8005668:	bf00      	nop
    }
  }
}
 800566a:	3718      	adds	r7, #24
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	607a      	str	r2, [r7, #4]
 800567c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800568c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	683a      	ldr	r2, [r7, #0]
 8005694:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	2b40      	cmp	r3, #64	@ 0x40
 800569c:	d108      	bne.n	80056b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68ba      	ldr	r2, [r7, #8]
 80056ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80056ae:	e007      	b.n	80056c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68ba      	ldr	r2, [r7, #8]
 80056b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	60da      	str	r2, [r3, #12]
}
 80056c0:	bf00      	nop
 80056c2:	3714      	adds	r7, #20
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	3b10      	subs	r3, #16
 80056dc:	4a14      	ldr	r2, [pc, #80]	@ (8005730 <DMA_CalcBaseAndBitshift+0x64>)
 80056de:	fba2 2303 	umull	r2, r3, r2, r3
 80056e2:	091b      	lsrs	r3, r3, #4
 80056e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80056e6:	4a13      	ldr	r2, [pc, #76]	@ (8005734 <DMA_CalcBaseAndBitshift+0x68>)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	4413      	add	r3, r2
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	461a      	mov	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2b03      	cmp	r3, #3
 80056f8:	d909      	bls.n	800570e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005702:	f023 0303 	bic.w	r3, r3, #3
 8005706:	1d1a      	adds	r2, r3, #4
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	659a      	str	r2, [r3, #88]	@ 0x58
 800570c:	e007      	b.n	800571e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005716:	f023 0303 	bic.w	r3, r3, #3
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005722:	4618      	mov	r0, r3
 8005724:	3714      	adds	r7, #20
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	aaaaaaab 	.word	0xaaaaaaab
 8005734:	0800d5d4 	.word	0x0800d5d4

08005738 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005738:	b480      	push	{r7}
 800573a:	b085      	sub	sp, #20
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005740:	2300      	movs	r3, #0
 8005742:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005748:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d11f      	bne.n	8005792 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	2b03      	cmp	r3, #3
 8005756:	d856      	bhi.n	8005806 <DMA_CheckFifoParam+0xce>
 8005758:	a201      	add	r2, pc, #4	@ (adr r2, 8005760 <DMA_CheckFifoParam+0x28>)
 800575a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800575e:	bf00      	nop
 8005760:	08005771 	.word	0x08005771
 8005764:	08005783 	.word	0x08005783
 8005768:	08005771 	.word	0x08005771
 800576c:	08005807 	.word	0x08005807
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005774:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d046      	beq.n	800580a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005780:	e043      	b.n	800580a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005786:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800578a:	d140      	bne.n	800580e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005790:	e03d      	b.n	800580e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800579a:	d121      	bne.n	80057e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	2b03      	cmp	r3, #3
 80057a0:	d837      	bhi.n	8005812 <DMA_CheckFifoParam+0xda>
 80057a2:	a201      	add	r2, pc, #4	@ (adr r2, 80057a8 <DMA_CheckFifoParam+0x70>)
 80057a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a8:	080057b9 	.word	0x080057b9
 80057ac:	080057bf 	.word	0x080057bf
 80057b0:	080057b9 	.word	0x080057b9
 80057b4:	080057d1 	.word	0x080057d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	73fb      	strb	r3, [r7, #15]
      break;
 80057bc:	e030      	b.n	8005820 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d025      	beq.n	8005816 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057ce:	e022      	b.n	8005816 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80057d8:	d11f      	bne.n	800581a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80057de:	e01c      	b.n	800581a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d903      	bls.n	80057ee <DMA_CheckFifoParam+0xb6>
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	2b03      	cmp	r3, #3
 80057ea:	d003      	beq.n	80057f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80057ec:	e018      	b.n	8005820 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	73fb      	strb	r3, [r7, #15]
      break;
 80057f2:	e015      	b.n	8005820 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00e      	beq.n	800581e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	73fb      	strb	r3, [r7, #15]
      break;
 8005804:	e00b      	b.n	800581e <DMA_CheckFifoParam+0xe6>
      break;
 8005806:	bf00      	nop
 8005808:	e00a      	b.n	8005820 <DMA_CheckFifoParam+0xe8>
      break;
 800580a:	bf00      	nop
 800580c:	e008      	b.n	8005820 <DMA_CheckFifoParam+0xe8>
      break;
 800580e:	bf00      	nop
 8005810:	e006      	b.n	8005820 <DMA_CheckFifoParam+0xe8>
      break;
 8005812:	bf00      	nop
 8005814:	e004      	b.n	8005820 <DMA_CheckFifoParam+0xe8>
      break;
 8005816:	bf00      	nop
 8005818:	e002      	b.n	8005820 <DMA_CheckFifoParam+0xe8>
      break;   
 800581a:	bf00      	nop
 800581c:	e000      	b.n	8005820 <DMA_CheckFifoParam+0xe8>
      break;
 800581e:	bf00      	nop
    }
  } 
  
  return status; 
 8005820:	7bfb      	ldrb	r3, [r7, #15]
}
 8005822:	4618      	mov	r0, r3
 8005824:	3714      	adds	r7, #20
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop

08005830 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005830:	b480      	push	{r7}
 8005832:	b089      	sub	sp, #36	@ 0x24
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800583a:	2300      	movs	r3, #0
 800583c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800583e:	2300      	movs	r3, #0
 8005840:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005842:	2300      	movs	r3, #0
 8005844:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005846:	2300      	movs	r3, #0
 8005848:	61fb      	str	r3, [r7, #28]
 800584a:	e165      	b.n	8005b18 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800584c:	2201      	movs	r2, #1
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	fa02 f303 	lsl.w	r3, r2, r3
 8005854:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	4013      	ands	r3, r2
 800585e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	429a      	cmp	r2, r3
 8005866:	f040 8154 	bne.w	8005b12 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	f003 0303 	and.w	r3, r3, #3
 8005872:	2b01      	cmp	r3, #1
 8005874:	d005      	beq.n	8005882 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800587e:	2b02      	cmp	r3, #2
 8005880:	d130      	bne.n	80058e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	005b      	lsls	r3, r3, #1
 800588c:	2203      	movs	r2, #3
 800588e:	fa02 f303 	lsl.w	r3, r2, r3
 8005892:	43db      	mvns	r3, r3
 8005894:	69ba      	ldr	r2, [r7, #24]
 8005896:	4013      	ands	r3, r2
 8005898:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	68da      	ldr	r2, [r3, #12]
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	005b      	lsls	r3, r3, #1
 80058a2:	fa02 f303 	lsl.w	r3, r2, r3
 80058a6:	69ba      	ldr	r2, [r7, #24]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	69ba      	ldr	r2, [r7, #24]
 80058b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80058b8:	2201      	movs	r2, #1
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	fa02 f303 	lsl.w	r3, r2, r3
 80058c0:	43db      	mvns	r3, r3
 80058c2:	69ba      	ldr	r2, [r7, #24]
 80058c4:	4013      	ands	r3, r2
 80058c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	091b      	lsrs	r3, r3, #4
 80058ce:	f003 0201 	and.w	r2, r3, #1
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	fa02 f303 	lsl.w	r3, r2, r3
 80058d8:	69ba      	ldr	r2, [r7, #24]
 80058da:	4313      	orrs	r3, r2
 80058dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	69ba      	ldr	r2, [r7, #24]
 80058e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	f003 0303 	and.w	r3, r3, #3
 80058ec:	2b03      	cmp	r3, #3
 80058ee:	d017      	beq.n	8005920 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	005b      	lsls	r3, r3, #1
 80058fa:	2203      	movs	r2, #3
 80058fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005900:	43db      	mvns	r3, r3
 8005902:	69ba      	ldr	r2, [r7, #24]
 8005904:	4013      	ands	r3, r2
 8005906:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	689a      	ldr	r2, [r3, #8]
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	005b      	lsls	r3, r3, #1
 8005910:	fa02 f303 	lsl.w	r3, r2, r3
 8005914:	69ba      	ldr	r2, [r7, #24]
 8005916:	4313      	orrs	r3, r2
 8005918:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	69ba      	ldr	r2, [r7, #24]
 800591e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	f003 0303 	and.w	r3, r3, #3
 8005928:	2b02      	cmp	r3, #2
 800592a:	d123      	bne.n	8005974 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	08da      	lsrs	r2, r3, #3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	3208      	adds	r2, #8
 8005934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005938:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	f003 0307 	and.w	r3, r3, #7
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	220f      	movs	r2, #15
 8005944:	fa02 f303 	lsl.w	r3, r2, r3
 8005948:	43db      	mvns	r3, r3
 800594a:	69ba      	ldr	r2, [r7, #24]
 800594c:	4013      	ands	r3, r2
 800594e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	691a      	ldr	r2, [r3, #16]
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	f003 0307 	and.w	r3, r3, #7
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	fa02 f303 	lsl.w	r3, r2, r3
 8005960:	69ba      	ldr	r2, [r7, #24]
 8005962:	4313      	orrs	r3, r2
 8005964:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	08da      	lsrs	r2, r3, #3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	3208      	adds	r2, #8
 800596e:	69b9      	ldr	r1, [r7, #24]
 8005970:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	005b      	lsls	r3, r3, #1
 800597e:	2203      	movs	r2, #3
 8005980:	fa02 f303 	lsl.w	r3, r2, r3
 8005984:	43db      	mvns	r3, r3
 8005986:	69ba      	ldr	r2, [r7, #24]
 8005988:	4013      	ands	r3, r2
 800598a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f003 0203 	and.w	r2, r3, #3
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	005b      	lsls	r3, r3, #1
 8005998:	fa02 f303 	lsl.w	r3, r2, r3
 800599c:	69ba      	ldr	r2, [r7, #24]
 800599e:	4313      	orrs	r3, r2
 80059a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	69ba      	ldr	r2, [r7, #24]
 80059a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f000 80ae 	beq.w	8005b12 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059b6:	2300      	movs	r3, #0
 80059b8:	60fb      	str	r3, [r7, #12]
 80059ba:	4b5d      	ldr	r3, [pc, #372]	@ (8005b30 <HAL_GPIO_Init+0x300>)
 80059bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059be:	4a5c      	ldr	r2, [pc, #368]	@ (8005b30 <HAL_GPIO_Init+0x300>)
 80059c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80059c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80059c6:	4b5a      	ldr	r3, [pc, #360]	@ (8005b30 <HAL_GPIO_Init+0x300>)
 80059c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059ce:	60fb      	str	r3, [r7, #12]
 80059d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80059d2:	4a58      	ldr	r2, [pc, #352]	@ (8005b34 <HAL_GPIO_Init+0x304>)
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	089b      	lsrs	r3, r3, #2
 80059d8:	3302      	adds	r3, #2
 80059da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	f003 0303 	and.w	r3, r3, #3
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	220f      	movs	r2, #15
 80059ea:	fa02 f303 	lsl.w	r3, r2, r3
 80059ee:	43db      	mvns	r3, r3
 80059f0:	69ba      	ldr	r2, [r7, #24]
 80059f2:	4013      	ands	r3, r2
 80059f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a4f      	ldr	r2, [pc, #316]	@ (8005b38 <HAL_GPIO_Init+0x308>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d025      	beq.n	8005a4a <HAL_GPIO_Init+0x21a>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a4e      	ldr	r2, [pc, #312]	@ (8005b3c <HAL_GPIO_Init+0x30c>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d01f      	beq.n	8005a46 <HAL_GPIO_Init+0x216>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a4d      	ldr	r2, [pc, #308]	@ (8005b40 <HAL_GPIO_Init+0x310>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d019      	beq.n	8005a42 <HAL_GPIO_Init+0x212>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a4c      	ldr	r2, [pc, #304]	@ (8005b44 <HAL_GPIO_Init+0x314>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d013      	beq.n	8005a3e <HAL_GPIO_Init+0x20e>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a4b      	ldr	r2, [pc, #300]	@ (8005b48 <HAL_GPIO_Init+0x318>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d00d      	beq.n	8005a3a <HAL_GPIO_Init+0x20a>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a4a      	ldr	r2, [pc, #296]	@ (8005b4c <HAL_GPIO_Init+0x31c>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d007      	beq.n	8005a36 <HAL_GPIO_Init+0x206>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a49      	ldr	r2, [pc, #292]	@ (8005b50 <HAL_GPIO_Init+0x320>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d101      	bne.n	8005a32 <HAL_GPIO_Init+0x202>
 8005a2e:	2306      	movs	r3, #6
 8005a30:	e00c      	b.n	8005a4c <HAL_GPIO_Init+0x21c>
 8005a32:	2307      	movs	r3, #7
 8005a34:	e00a      	b.n	8005a4c <HAL_GPIO_Init+0x21c>
 8005a36:	2305      	movs	r3, #5
 8005a38:	e008      	b.n	8005a4c <HAL_GPIO_Init+0x21c>
 8005a3a:	2304      	movs	r3, #4
 8005a3c:	e006      	b.n	8005a4c <HAL_GPIO_Init+0x21c>
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e004      	b.n	8005a4c <HAL_GPIO_Init+0x21c>
 8005a42:	2302      	movs	r3, #2
 8005a44:	e002      	b.n	8005a4c <HAL_GPIO_Init+0x21c>
 8005a46:	2301      	movs	r3, #1
 8005a48:	e000      	b.n	8005a4c <HAL_GPIO_Init+0x21c>
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	69fa      	ldr	r2, [r7, #28]
 8005a4e:	f002 0203 	and.w	r2, r2, #3
 8005a52:	0092      	lsls	r2, r2, #2
 8005a54:	4093      	lsls	r3, r2
 8005a56:	69ba      	ldr	r2, [r7, #24]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a5c:	4935      	ldr	r1, [pc, #212]	@ (8005b34 <HAL_GPIO_Init+0x304>)
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	089b      	lsrs	r3, r3, #2
 8005a62:	3302      	adds	r3, #2
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a6a:	4b3a      	ldr	r3, [pc, #232]	@ (8005b54 <HAL_GPIO_Init+0x324>)
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	43db      	mvns	r3, r3
 8005a74:	69ba      	ldr	r2, [r7, #24]
 8005a76:	4013      	ands	r3, r2
 8005a78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d003      	beq.n	8005a8e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005a86:	69ba      	ldr	r2, [r7, #24]
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005a8e:	4a31      	ldr	r2, [pc, #196]	@ (8005b54 <HAL_GPIO_Init+0x324>)
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a94:	4b2f      	ldr	r3, [pc, #188]	@ (8005b54 <HAL_GPIO_Init+0x324>)
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	43db      	mvns	r3, r3
 8005a9e:	69ba      	ldr	r2, [r7, #24]
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d003      	beq.n	8005ab8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005ab0:	69ba      	ldr	r2, [r7, #24]
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005ab8:	4a26      	ldr	r2, [pc, #152]	@ (8005b54 <HAL_GPIO_Init+0x324>)
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005abe:	4b25      	ldr	r3, [pc, #148]	@ (8005b54 <HAL_GPIO_Init+0x324>)
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	43db      	mvns	r3, r3
 8005ac8:	69ba      	ldr	r2, [r7, #24]
 8005aca:	4013      	ands	r3, r2
 8005acc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d003      	beq.n	8005ae2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005ada:	69ba      	ldr	r2, [r7, #24]
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005ae2:	4a1c      	ldr	r2, [pc, #112]	@ (8005b54 <HAL_GPIO_Init+0x324>)
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005ae8:	4b1a      	ldr	r3, [pc, #104]	@ (8005b54 <HAL_GPIO_Init+0x324>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	43db      	mvns	r3, r3
 8005af2:	69ba      	ldr	r2, [r7, #24]
 8005af4:	4013      	ands	r3, r2
 8005af6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d003      	beq.n	8005b0c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005b04:	69ba      	ldr	r2, [r7, #24]
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005b0c:	4a11      	ldr	r2, [pc, #68]	@ (8005b54 <HAL_GPIO_Init+0x324>)
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	3301      	adds	r3, #1
 8005b16:	61fb      	str	r3, [r7, #28]
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	2b0f      	cmp	r3, #15
 8005b1c:	f67f ae96 	bls.w	800584c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005b20:	bf00      	nop
 8005b22:	bf00      	nop
 8005b24:	3724      	adds	r7, #36	@ 0x24
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	40023800 	.word	0x40023800
 8005b34:	40013800 	.word	0x40013800
 8005b38:	40020000 	.word	0x40020000
 8005b3c:	40020400 	.word	0x40020400
 8005b40:	40020800 	.word	0x40020800
 8005b44:	40020c00 	.word	0x40020c00
 8005b48:	40021000 	.word	0x40021000
 8005b4c:	40021400 	.word	0x40021400
 8005b50:	40021800 	.word	0x40021800
 8005b54:	40013c00 	.word	0x40013c00

08005b58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	460b      	mov	r3, r1
 8005b62:	807b      	strh	r3, [r7, #2]
 8005b64:	4613      	mov	r3, r2
 8005b66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005b68:	787b      	ldrb	r3, [r7, #1]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d003      	beq.n	8005b76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b6e:	887a      	ldrh	r2, [r7, #2]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005b74:	e003      	b.n	8005b7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005b76:	887b      	ldrh	r3, [r7, #2]
 8005b78:	041a      	lsls	r2, r3, #16
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	619a      	str	r2, [r3, #24]
}
 8005b7e:	bf00      	nop
 8005b80:	370c      	adds	r7, #12
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr
	...

08005b8c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005b92:	2300      	movs	r3, #0
 8005b94:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005b96:	2300      	movs	r3, #0
 8005b98:	603b      	str	r3, [r7, #0]
 8005b9a:	4b20      	ldr	r3, [pc, #128]	@ (8005c1c <HAL_PWREx_EnableOverDrive+0x90>)
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b9e:	4a1f      	ldr	r2, [pc, #124]	@ (8005c1c <HAL_PWREx_EnableOverDrive+0x90>)
 8005ba0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ba4:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8005c1c <HAL_PWREx_EnableOverDrive+0x90>)
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005baa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bae:	603b      	str	r3, [r7, #0]
 8005bb0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005bb2:	4b1b      	ldr	r3, [pc, #108]	@ (8005c20 <HAL_PWREx_EnableOverDrive+0x94>)
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005bb8:	f7fe f920 	bl	8003dfc <HAL_GetTick>
 8005bbc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005bbe:	e009      	b.n	8005bd4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005bc0:	f7fe f91c 	bl	8003dfc <HAL_GetTick>
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005bce:	d901      	bls.n	8005bd4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	e01f      	b.n	8005c14 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005bd4:	4b13      	ldr	r3, [pc, #76]	@ (8005c24 <HAL_PWREx_EnableOverDrive+0x98>)
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005bdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005be0:	d1ee      	bne.n	8005bc0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005be2:	4b11      	ldr	r3, [pc, #68]	@ (8005c28 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005be4:	2201      	movs	r2, #1
 8005be6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005be8:	f7fe f908 	bl	8003dfc <HAL_GetTick>
 8005bec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005bee:	e009      	b.n	8005c04 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005bf0:	f7fe f904 	bl	8003dfc <HAL_GetTick>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005bfe:	d901      	bls.n	8005c04 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005c00:	2303      	movs	r3, #3
 8005c02:	e007      	b.n	8005c14 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005c04:	4b07      	ldr	r3, [pc, #28]	@ (8005c24 <HAL_PWREx_EnableOverDrive+0x98>)
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c10:	d1ee      	bne.n	8005bf0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3708      	adds	r7, #8
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	40023800 	.word	0x40023800
 8005c20:	420e0040 	.word	0x420e0040
 8005c24:	40007000 	.word	0x40007000
 8005c28:	420e0044 	.word	0x420e0044

08005c2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d101      	bne.n	8005c40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e0cc      	b.n	8005dda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c40:	4b68      	ldr	r3, [pc, #416]	@ (8005de4 <HAL_RCC_ClockConfig+0x1b8>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 030f 	and.w	r3, r3, #15
 8005c48:	683a      	ldr	r2, [r7, #0]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d90c      	bls.n	8005c68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c4e:	4b65      	ldr	r3, [pc, #404]	@ (8005de4 <HAL_RCC_ClockConfig+0x1b8>)
 8005c50:	683a      	ldr	r2, [r7, #0]
 8005c52:	b2d2      	uxtb	r2, r2
 8005c54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c56:	4b63      	ldr	r3, [pc, #396]	@ (8005de4 <HAL_RCC_ClockConfig+0x1b8>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 030f 	and.w	r3, r3, #15
 8005c5e:	683a      	ldr	r2, [r7, #0]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d001      	beq.n	8005c68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e0b8      	b.n	8005dda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 0302 	and.w	r3, r3, #2
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d020      	beq.n	8005cb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0304 	and.w	r3, r3, #4
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d005      	beq.n	8005c8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c80:	4b59      	ldr	r3, [pc, #356]	@ (8005de8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	4a58      	ldr	r2, [pc, #352]	@ (8005de8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c86:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005c8a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 0308 	and.w	r3, r3, #8
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d005      	beq.n	8005ca4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c98:	4b53      	ldr	r3, [pc, #332]	@ (8005de8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	4a52      	ldr	r2, [pc, #328]	@ (8005de8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c9e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005ca2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ca4:	4b50      	ldr	r3, [pc, #320]	@ (8005de8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	494d      	ldr	r1, [pc, #308]	@ (8005de8 <HAL_RCC_ClockConfig+0x1bc>)
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d044      	beq.n	8005d4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d107      	bne.n	8005cda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cca:	4b47      	ldr	r3, [pc, #284]	@ (8005de8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d119      	bne.n	8005d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e07f      	b.n	8005dda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d003      	beq.n	8005cea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ce6:	2b03      	cmp	r3, #3
 8005ce8:	d107      	bne.n	8005cfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cea:	4b3f      	ldr	r3, [pc, #252]	@ (8005de8 <HAL_RCC_ClockConfig+0x1bc>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d109      	bne.n	8005d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e06f      	b.n	8005dda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cfa:	4b3b      	ldr	r3, [pc, #236]	@ (8005de8 <HAL_RCC_ClockConfig+0x1bc>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0302 	and.w	r3, r3, #2
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d101      	bne.n	8005d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e067      	b.n	8005dda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d0a:	4b37      	ldr	r3, [pc, #220]	@ (8005de8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	f023 0203 	bic.w	r2, r3, #3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	4934      	ldr	r1, [pc, #208]	@ (8005de8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d1c:	f7fe f86e 	bl	8003dfc <HAL_GetTick>
 8005d20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d22:	e00a      	b.n	8005d3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d24:	f7fe f86a 	bl	8003dfc <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d901      	bls.n	8005d3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e04f      	b.n	8005dda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d3a:	4b2b      	ldr	r3, [pc, #172]	@ (8005de8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f003 020c 	and.w	r2, r3, #12
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d1eb      	bne.n	8005d24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d4c:	4b25      	ldr	r3, [pc, #148]	@ (8005de4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 030f 	and.w	r3, r3, #15
 8005d54:	683a      	ldr	r2, [r7, #0]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d20c      	bcs.n	8005d74 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d5a:	4b22      	ldr	r3, [pc, #136]	@ (8005de4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d5c:	683a      	ldr	r2, [r7, #0]
 8005d5e:	b2d2      	uxtb	r2, r2
 8005d60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d62:	4b20      	ldr	r3, [pc, #128]	@ (8005de4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 030f 	and.w	r3, r3, #15
 8005d6a:	683a      	ldr	r2, [r7, #0]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d001      	beq.n	8005d74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e032      	b.n	8005dda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 0304 	and.w	r3, r3, #4
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d008      	beq.n	8005d92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d80:	4b19      	ldr	r3, [pc, #100]	@ (8005de8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	4916      	ldr	r1, [pc, #88]	@ (8005de8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 0308 	and.w	r3, r3, #8
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d009      	beq.n	8005db2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d9e:	4b12      	ldr	r3, [pc, #72]	@ (8005de8 <HAL_RCC_ClockConfig+0x1bc>)
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	00db      	lsls	r3, r3, #3
 8005dac:	490e      	ldr	r1, [pc, #56]	@ (8005de8 <HAL_RCC_ClockConfig+0x1bc>)
 8005dae:	4313      	orrs	r3, r2
 8005db0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005db2:	f000 f855 	bl	8005e60 <HAL_RCC_GetSysClockFreq>
 8005db6:	4602      	mov	r2, r0
 8005db8:	4b0b      	ldr	r3, [pc, #44]	@ (8005de8 <HAL_RCC_ClockConfig+0x1bc>)
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	091b      	lsrs	r3, r3, #4
 8005dbe:	f003 030f 	and.w	r3, r3, #15
 8005dc2:	490a      	ldr	r1, [pc, #40]	@ (8005dec <HAL_RCC_ClockConfig+0x1c0>)
 8005dc4:	5ccb      	ldrb	r3, [r1, r3]
 8005dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8005dca:	4a09      	ldr	r2, [pc, #36]	@ (8005df0 <HAL_RCC_ClockConfig+0x1c4>)
 8005dcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005dce:	4b09      	ldr	r3, [pc, #36]	@ (8005df4 <HAL_RCC_ClockConfig+0x1c8>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f7fd ffce 	bl	8003d74 <HAL_InitTick>

  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3710      	adds	r7, #16
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	40023c00 	.word	0x40023c00
 8005de8:	40023800 	.word	0x40023800
 8005dec:	0800d5bc 	.word	0x0800d5bc
 8005df0:	20000034 	.word	0x20000034
 8005df4:	20000038 	.word	0x20000038

08005df8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005dfc:	4b03      	ldr	r3, [pc, #12]	@ (8005e0c <HAL_RCC_GetHCLKFreq+0x14>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr
 8005e0a:	bf00      	nop
 8005e0c:	20000034 	.word	0x20000034

08005e10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005e14:	f7ff fff0 	bl	8005df8 <HAL_RCC_GetHCLKFreq>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	4b05      	ldr	r3, [pc, #20]	@ (8005e30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	0a9b      	lsrs	r3, r3, #10
 8005e20:	f003 0307 	and.w	r3, r3, #7
 8005e24:	4903      	ldr	r1, [pc, #12]	@ (8005e34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e26:	5ccb      	ldrb	r3, [r1, r3]
 8005e28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	40023800 	.word	0x40023800
 8005e34:	0800d5cc 	.word	0x0800d5cc

08005e38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005e3c:	f7ff ffdc 	bl	8005df8 <HAL_RCC_GetHCLKFreq>
 8005e40:	4602      	mov	r2, r0
 8005e42:	4b05      	ldr	r3, [pc, #20]	@ (8005e58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	0b5b      	lsrs	r3, r3, #13
 8005e48:	f003 0307 	and.w	r3, r3, #7
 8005e4c:	4903      	ldr	r1, [pc, #12]	@ (8005e5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e4e:	5ccb      	ldrb	r3, [r1, r3]
 8005e50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	40023800 	.word	0x40023800
 8005e5c:	0800d5cc 	.word	0x0800d5cc

08005e60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e64:	b0ae      	sub	sp, #184	@ 0xb8
 8005e66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8005e74:	2300      	movs	r3, #0
 8005e76:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8005e80:	2300      	movs	r3, #0
 8005e82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e86:	4bcb      	ldr	r3, [pc, #812]	@ (80061b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f003 030c 	and.w	r3, r3, #12
 8005e8e:	2b0c      	cmp	r3, #12
 8005e90:	f200 8206 	bhi.w	80062a0 <HAL_RCC_GetSysClockFreq+0x440>
 8005e94:	a201      	add	r2, pc, #4	@ (adr r2, 8005e9c <HAL_RCC_GetSysClockFreq+0x3c>)
 8005e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e9a:	bf00      	nop
 8005e9c:	08005ed1 	.word	0x08005ed1
 8005ea0:	080062a1 	.word	0x080062a1
 8005ea4:	080062a1 	.word	0x080062a1
 8005ea8:	080062a1 	.word	0x080062a1
 8005eac:	08005ed9 	.word	0x08005ed9
 8005eb0:	080062a1 	.word	0x080062a1
 8005eb4:	080062a1 	.word	0x080062a1
 8005eb8:	080062a1 	.word	0x080062a1
 8005ebc:	08005ee1 	.word	0x08005ee1
 8005ec0:	080062a1 	.word	0x080062a1
 8005ec4:	080062a1 	.word	0x080062a1
 8005ec8:	080062a1 	.word	0x080062a1
 8005ecc:	080060d1 	.word	0x080060d1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ed0:	4bb9      	ldr	r3, [pc, #740]	@ (80061b8 <HAL_RCC_GetSysClockFreq+0x358>)
 8005ed2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005ed6:	e1e7      	b.n	80062a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ed8:	4bb8      	ldr	r3, [pc, #736]	@ (80061bc <HAL_RCC_GetSysClockFreq+0x35c>)
 8005eda:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005ede:	e1e3      	b.n	80062a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ee0:	4bb4      	ldr	r3, [pc, #720]	@ (80061b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ee8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005eec:	4bb1      	ldr	r3, [pc, #708]	@ (80061b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d071      	beq.n	8005fdc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ef8:	4bae      	ldr	r3, [pc, #696]	@ (80061b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	099b      	lsrs	r3, r3, #6
 8005efe:	2200      	movs	r2, #0
 8005f00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005f04:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005f08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f10:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005f14:	2300      	movs	r3, #0
 8005f16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005f1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005f1e:	4622      	mov	r2, r4
 8005f20:	462b      	mov	r3, r5
 8005f22:	f04f 0000 	mov.w	r0, #0
 8005f26:	f04f 0100 	mov.w	r1, #0
 8005f2a:	0159      	lsls	r1, r3, #5
 8005f2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f30:	0150      	lsls	r0, r2, #5
 8005f32:	4602      	mov	r2, r0
 8005f34:	460b      	mov	r3, r1
 8005f36:	4621      	mov	r1, r4
 8005f38:	1a51      	subs	r1, r2, r1
 8005f3a:	6439      	str	r1, [r7, #64]	@ 0x40
 8005f3c:	4629      	mov	r1, r5
 8005f3e:	eb63 0301 	sbc.w	r3, r3, r1
 8005f42:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f44:	f04f 0200 	mov.w	r2, #0
 8005f48:	f04f 0300 	mov.w	r3, #0
 8005f4c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8005f50:	4649      	mov	r1, r9
 8005f52:	018b      	lsls	r3, r1, #6
 8005f54:	4641      	mov	r1, r8
 8005f56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005f5a:	4641      	mov	r1, r8
 8005f5c:	018a      	lsls	r2, r1, #6
 8005f5e:	4641      	mov	r1, r8
 8005f60:	1a51      	subs	r1, r2, r1
 8005f62:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005f64:	4649      	mov	r1, r9
 8005f66:	eb63 0301 	sbc.w	r3, r3, r1
 8005f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f6c:	f04f 0200 	mov.w	r2, #0
 8005f70:	f04f 0300 	mov.w	r3, #0
 8005f74:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8005f78:	4649      	mov	r1, r9
 8005f7a:	00cb      	lsls	r3, r1, #3
 8005f7c:	4641      	mov	r1, r8
 8005f7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f82:	4641      	mov	r1, r8
 8005f84:	00ca      	lsls	r2, r1, #3
 8005f86:	4610      	mov	r0, r2
 8005f88:	4619      	mov	r1, r3
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	4622      	mov	r2, r4
 8005f8e:	189b      	adds	r3, r3, r2
 8005f90:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f92:	462b      	mov	r3, r5
 8005f94:	460a      	mov	r2, r1
 8005f96:	eb42 0303 	adc.w	r3, r2, r3
 8005f9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f9c:	f04f 0200 	mov.w	r2, #0
 8005fa0:	f04f 0300 	mov.w	r3, #0
 8005fa4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005fa8:	4629      	mov	r1, r5
 8005faa:	024b      	lsls	r3, r1, #9
 8005fac:	4621      	mov	r1, r4
 8005fae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005fb2:	4621      	mov	r1, r4
 8005fb4:	024a      	lsls	r2, r1, #9
 8005fb6:	4610      	mov	r0, r2
 8005fb8:	4619      	mov	r1, r3
 8005fba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005fc4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005fc8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8005fcc:	f7fa fe7c 	bl	8000cc8 <__aeabi_uldivmod>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005fda:	e067      	b.n	80060ac <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fdc:	4b75      	ldr	r3, [pc, #468]	@ (80061b4 <HAL_RCC_GetSysClockFreq+0x354>)
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	099b      	lsrs	r3, r3, #6
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005fe8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8005fec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005ff0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ff4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005ffa:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8005ffe:	4622      	mov	r2, r4
 8006000:	462b      	mov	r3, r5
 8006002:	f04f 0000 	mov.w	r0, #0
 8006006:	f04f 0100 	mov.w	r1, #0
 800600a:	0159      	lsls	r1, r3, #5
 800600c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006010:	0150      	lsls	r0, r2, #5
 8006012:	4602      	mov	r2, r0
 8006014:	460b      	mov	r3, r1
 8006016:	4621      	mov	r1, r4
 8006018:	1a51      	subs	r1, r2, r1
 800601a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800601c:	4629      	mov	r1, r5
 800601e:	eb63 0301 	sbc.w	r3, r3, r1
 8006022:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006024:	f04f 0200 	mov.w	r2, #0
 8006028:	f04f 0300 	mov.w	r3, #0
 800602c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8006030:	4649      	mov	r1, r9
 8006032:	018b      	lsls	r3, r1, #6
 8006034:	4641      	mov	r1, r8
 8006036:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800603a:	4641      	mov	r1, r8
 800603c:	018a      	lsls	r2, r1, #6
 800603e:	4641      	mov	r1, r8
 8006040:	ebb2 0a01 	subs.w	sl, r2, r1
 8006044:	4649      	mov	r1, r9
 8006046:	eb63 0b01 	sbc.w	fp, r3, r1
 800604a:	f04f 0200 	mov.w	r2, #0
 800604e:	f04f 0300 	mov.w	r3, #0
 8006052:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006056:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800605a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800605e:	4692      	mov	sl, r2
 8006060:	469b      	mov	fp, r3
 8006062:	4623      	mov	r3, r4
 8006064:	eb1a 0303 	adds.w	r3, sl, r3
 8006068:	623b      	str	r3, [r7, #32]
 800606a:	462b      	mov	r3, r5
 800606c:	eb4b 0303 	adc.w	r3, fp, r3
 8006070:	627b      	str	r3, [r7, #36]	@ 0x24
 8006072:	f04f 0200 	mov.w	r2, #0
 8006076:	f04f 0300 	mov.w	r3, #0
 800607a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800607e:	4629      	mov	r1, r5
 8006080:	028b      	lsls	r3, r1, #10
 8006082:	4621      	mov	r1, r4
 8006084:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006088:	4621      	mov	r1, r4
 800608a:	028a      	lsls	r2, r1, #10
 800608c:	4610      	mov	r0, r2
 800608e:	4619      	mov	r1, r3
 8006090:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006094:	2200      	movs	r2, #0
 8006096:	673b      	str	r3, [r7, #112]	@ 0x70
 8006098:	677a      	str	r2, [r7, #116]	@ 0x74
 800609a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800609e:	f7fa fe13 	bl	8000cc8 <__aeabi_uldivmod>
 80060a2:	4602      	mov	r2, r0
 80060a4:	460b      	mov	r3, r1
 80060a6:	4613      	mov	r3, r2
 80060a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80060ac:	4b41      	ldr	r3, [pc, #260]	@ (80061b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	0c1b      	lsrs	r3, r3, #16
 80060b2:	f003 0303 	and.w	r3, r3, #3
 80060b6:	3301      	adds	r3, #1
 80060b8:	005b      	lsls	r3, r3, #1
 80060ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80060be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80060c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80060c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80060ce:	e0eb      	b.n	80062a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80060d0:	4b38      	ldr	r3, [pc, #224]	@ (80061b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80060d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80060dc:	4b35      	ldr	r3, [pc, #212]	@ (80061b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d06b      	beq.n	80061c0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060e8:	4b32      	ldr	r3, [pc, #200]	@ (80061b4 <HAL_RCC_GetSysClockFreq+0x354>)
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	099b      	lsrs	r3, r3, #6
 80060ee:	2200      	movs	r2, #0
 80060f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80060f2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80060f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80060f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80060fc:	2300      	movs	r3, #0
 80060fe:	667b      	str	r3, [r7, #100]	@ 0x64
 8006100:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8006104:	4622      	mov	r2, r4
 8006106:	462b      	mov	r3, r5
 8006108:	f04f 0000 	mov.w	r0, #0
 800610c:	f04f 0100 	mov.w	r1, #0
 8006110:	0159      	lsls	r1, r3, #5
 8006112:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006116:	0150      	lsls	r0, r2, #5
 8006118:	4602      	mov	r2, r0
 800611a:	460b      	mov	r3, r1
 800611c:	4621      	mov	r1, r4
 800611e:	1a51      	subs	r1, r2, r1
 8006120:	61b9      	str	r1, [r7, #24]
 8006122:	4629      	mov	r1, r5
 8006124:	eb63 0301 	sbc.w	r3, r3, r1
 8006128:	61fb      	str	r3, [r7, #28]
 800612a:	f04f 0200 	mov.w	r2, #0
 800612e:	f04f 0300 	mov.w	r3, #0
 8006132:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8006136:	4659      	mov	r1, fp
 8006138:	018b      	lsls	r3, r1, #6
 800613a:	4651      	mov	r1, sl
 800613c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006140:	4651      	mov	r1, sl
 8006142:	018a      	lsls	r2, r1, #6
 8006144:	4651      	mov	r1, sl
 8006146:	ebb2 0801 	subs.w	r8, r2, r1
 800614a:	4659      	mov	r1, fp
 800614c:	eb63 0901 	sbc.w	r9, r3, r1
 8006150:	f04f 0200 	mov.w	r2, #0
 8006154:	f04f 0300 	mov.w	r3, #0
 8006158:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800615c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006160:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006164:	4690      	mov	r8, r2
 8006166:	4699      	mov	r9, r3
 8006168:	4623      	mov	r3, r4
 800616a:	eb18 0303 	adds.w	r3, r8, r3
 800616e:	613b      	str	r3, [r7, #16]
 8006170:	462b      	mov	r3, r5
 8006172:	eb49 0303 	adc.w	r3, r9, r3
 8006176:	617b      	str	r3, [r7, #20]
 8006178:	f04f 0200 	mov.w	r2, #0
 800617c:	f04f 0300 	mov.w	r3, #0
 8006180:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006184:	4629      	mov	r1, r5
 8006186:	024b      	lsls	r3, r1, #9
 8006188:	4621      	mov	r1, r4
 800618a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800618e:	4621      	mov	r1, r4
 8006190:	024a      	lsls	r2, r1, #9
 8006192:	4610      	mov	r0, r2
 8006194:	4619      	mov	r1, r3
 8006196:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800619a:	2200      	movs	r2, #0
 800619c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800619e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80061a0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80061a4:	f7fa fd90 	bl	8000cc8 <__aeabi_uldivmod>
 80061a8:	4602      	mov	r2, r0
 80061aa:	460b      	mov	r3, r1
 80061ac:	4613      	mov	r3, r2
 80061ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80061b2:	e065      	b.n	8006280 <HAL_RCC_GetSysClockFreq+0x420>
 80061b4:	40023800 	.word	0x40023800
 80061b8:	00f42400 	.word	0x00f42400
 80061bc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061c0:	4b3d      	ldr	r3, [pc, #244]	@ (80062b8 <HAL_RCC_GetSysClockFreq+0x458>)
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	099b      	lsrs	r3, r3, #6
 80061c6:	2200      	movs	r2, #0
 80061c8:	4618      	mov	r0, r3
 80061ca:	4611      	mov	r1, r2
 80061cc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80061d0:	653b      	str	r3, [r7, #80]	@ 0x50
 80061d2:	2300      	movs	r3, #0
 80061d4:	657b      	str	r3, [r7, #84]	@ 0x54
 80061d6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80061da:	4642      	mov	r2, r8
 80061dc:	464b      	mov	r3, r9
 80061de:	f04f 0000 	mov.w	r0, #0
 80061e2:	f04f 0100 	mov.w	r1, #0
 80061e6:	0159      	lsls	r1, r3, #5
 80061e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80061ec:	0150      	lsls	r0, r2, #5
 80061ee:	4602      	mov	r2, r0
 80061f0:	460b      	mov	r3, r1
 80061f2:	4641      	mov	r1, r8
 80061f4:	1a51      	subs	r1, r2, r1
 80061f6:	60b9      	str	r1, [r7, #8]
 80061f8:	4649      	mov	r1, r9
 80061fa:	eb63 0301 	sbc.w	r3, r3, r1
 80061fe:	60fb      	str	r3, [r7, #12]
 8006200:	f04f 0200 	mov.w	r2, #0
 8006204:	f04f 0300 	mov.w	r3, #0
 8006208:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800620c:	4659      	mov	r1, fp
 800620e:	018b      	lsls	r3, r1, #6
 8006210:	4651      	mov	r1, sl
 8006212:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006216:	4651      	mov	r1, sl
 8006218:	018a      	lsls	r2, r1, #6
 800621a:	4651      	mov	r1, sl
 800621c:	1a54      	subs	r4, r2, r1
 800621e:	4659      	mov	r1, fp
 8006220:	eb63 0501 	sbc.w	r5, r3, r1
 8006224:	f04f 0200 	mov.w	r2, #0
 8006228:	f04f 0300 	mov.w	r3, #0
 800622c:	00eb      	lsls	r3, r5, #3
 800622e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006232:	00e2      	lsls	r2, r4, #3
 8006234:	4614      	mov	r4, r2
 8006236:	461d      	mov	r5, r3
 8006238:	4643      	mov	r3, r8
 800623a:	18e3      	adds	r3, r4, r3
 800623c:	603b      	str	r3, [r7, #0]
 800623e:	464b      	mov	r3, r9
 8006240:	eb45 0303 	adc.w	r3, r5, r3
 8006244:	607b      	str	r3, [r7, #4]
 8006246:	f04f 0200 	mov.w	r2, #0
 800624a:	f04f 0300 	mov.w	r3, #0
 800624e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006252:	4629      	mov	r1, r5
 8006254:	028b      	lsls	r3, r1, #10
 8006256:	4621      	mov	r1, r4
 8006258:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800625c:	4621      	mov	r1, r4
 800625e:	028a      	lsls	r2, r1, #10
 8006260:	4610      	mov	r0, r2
 8006262:	4619      	mov	r1, r3
 8006264:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006268:	2200      	movs	r2, #0
 800626a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800626c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800626e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006272:	f7fa fd29 	bl	8000cc8 <__aeabi_uldivmod>
 8006276:	4602      	mov	r2, r0
 8006278:	460b      	mov	r3, r1
 800627a:	4613      	mov	r3, r2
 800627c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006280:	4b0d      	ldr	r3, [pc, #52]	@ (80062b8 <HAL_RCC_GetSysClockFreq+0x458>)
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	0f1b      	lsrs	r3, r3, #28
 8006286:	f003 0307 	and.w	r3, r3, #7
 800628a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800628e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006292:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006296:	fbb2 f3f3 	udiv	r3, r2, r3
 800629a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800629e:	e003      	b.n	80062a8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80062a0:	4b06      	ldr	r3, [pc, #24]	@ (80062bc <HAL_RCC_GetSysClockFreq+0x45c>)
 80062a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80062a6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80062a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	37b8      	adds	r7, #184	@ 0xb8
 80062b0:	46bd      	mov	sp, r7
 80062b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062b6:	bf00      	nop
 80062b8:	40023800 	.word	0x40023800
 80062bc:	00f42400 	.word	0x00f42400

080062c0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b086      	sub	sp, #24
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d101      	bne.n	80062d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e28d      	b.n	80067ee <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 0301 	and.w	r3, r3, #1
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f000 8083 	beq.w	80063e6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80062e0:	4b94      	ldr	r3, [pc, #592]	@ (8006534 <HAL_RCC_OscConfig+0x274>)
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	f003 030c 	and.w	r3, r3, #12
 80062e8:	2b04      	cmp	r3, #4
 80062ea:	d019      	beq.n	8006320 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80062ec:	4b91      	ldr	r3, [pc, #580]	@ (8006534 <HAL_RCC_OscConfig+0x274>)
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	f003 030c 	and.w	r3, r3, #12
        || \
 80062f4:	2b08      	cmp	r3, #8
 80062f6:	d106      	bne.n	8006306 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80062f8:	4b8e      	ldr	r3, [pc, #568]	@ (8006534 <HAL_RCC_OscConfig+0x274>)
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006300:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006304:	d00c      	beq.n	8006320 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006306:	4b8b      	ldr	r3, [pc, #556]	@ (8006534 <HAL_RCC_OscConfig+0x274>)
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800630e:	2b0c      	cmp	r3, #12
 8006310:	d112      	bne.n	8006338 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006312:	4b88      	ldr	r3, [pc, #544]	@ (8006534 <HAL_RCC_OscConfig+0x274>)
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800631a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800631e:	d10b      	bne.n	8006338 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006320:	4b84      	ldr	r3, [pc, #528]	@ (8006534 <HAL_RCC_OscConfig+0x274>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006328:	2b00      	cmp	r3, #0
 800632a:	d05b      	beq.n	80063e4 <HAL_RCC_OscConfig+0x124>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d157      	bne.n	80063e4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e25a      	b.n	80067ee <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006340:	d106      	bne.n	8006350 <HAL_RCC_OscConfig+0x90>
 8006342:	4b7c      	ldr	r3, [pc, #496]	@ (8006534 <HAL_RCC_OscConfig+0x274>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a7b      	ldr	r2, [pc, #492]	@ (8006534 <HAL_RCC_OscConfig+0x274>)
 8006348:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800634c:	6013      	str	r3, [r2, #0]
 800634e:	e01d      	b.n	800638c <HAL_RCC_OscConfig+0xcc>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006358:	d10c      	bne.n	8006374 <HAL_RCC_OscConfig+0xb4>
 800635a:	4b76      	ldr	r3, [pc, #472]	@ (8006534 <HAL_RCC_OscConfig+0x274>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a75      	ldr	r2, [pc, #468]	@ (8006534 <HAL_RCC_OscConfig+0x274>)
 8006360:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006364:	6013      	str	r3, [r2, #0]
 8006366:	4b73      	ldr	r3, [pc, #460]	@ (8006534 <HAL_RCC_OscConfig+0x274>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a72      	ldr	r2, [pc, #456]	@ (8006534 <HAL_RCC_OscConfig+0x274>)
 800636c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006370:	6013      	str	r3, [r2, #0]
 8006372:	e00b      	b.n	800638c <HAL_RCC_OscConfig+0xcc>
 8006374:	4b6f      	ldr	r3, [pc, #444]	@ (8006534 <HAL_RCC_OscConfig+0x274>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a6e      	ldr	r2, [pc, #440]	@ (8006534 <HAL_RCC_OscConfig+0x274>)
 800637a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800637e:	6013      	str	r3, [r2, #0]
 8006380:	4b6c      	ldr	r3, [pc, #432]	@ (8006534 <HAL_RCC_OscConfig+0x274>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a6b      	ldr	r2, [pc, #428]	@ (8006534 <HAL_RCC_OscConfig+0x274>)
 8006386:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800638a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d013      	beq.n	80063bc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006394:	f7fd fd32 	bl	8003dfc <HAL_GetTick>
 8006398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800639a:	e008      	b.n	80063ae <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800639c:	f7fd fd2e 	bl	8003dfc <HAL_GetTick>
 80063a0:	4602      	mov	r2, r0
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	2b64      	cmp	r3, #100	@ 0x64
 80063a8:	d901      	bls.n	80063ae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e21f      	b.n	80067ee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063ae:	4b61      	ldr	r3, [pc, #388]	@ (8006534 <HAL_RCC_OscConfig+0x274>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d0f0      	beq.n	800639c <HAL_RCC_OscConfig+0xdc>
 80063ba:	e014      	b.n	80063e6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063bc:	f7fd fd1e 	bl	8003dfc <HAL_GetTick>
 80063c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063c2:	e008      	b.n	80063d6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063c4:	f7fd fd1a 	bl	8003dfc <HAL_GetTick>
 80063c8:	4602      	mov	r2, r0
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	2b64      	cmp	r3, #100	@ 0x64
 80063d0:	d901      	bls.n	80063d6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80063d2:	2303      	movs	r3, #3
 80063d4:	e20b      	b.n	80067ee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063d6:	4b57      	ldr	r3, [pc, #348]	@ (8006534 <HAL_RCC_OscConfig+0x274>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d1f0      	bne.n	80063c4 <HAL_RCC_OscConfig+0x104>
 80063e2:	e000      	b.n	80063e6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0302 	and.w	r3, r3, #2
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d06f      	beq.n	80064d2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80063f2:	4b50      	ldr	r3, [pc, #320]	@ (8006534 <HAL_RCC_OscConfig+0x274>)
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f003 030c 	and.w	r3, r3, #12
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d017      	beq.n	800642e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80063fe:	4b4d      	ldr	r3, [pc, #308]	@ (8006534 <HAL_RCC_OscConfig+0x274>)
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	f003 030c 	and.w	r3, r3, #12
        || \
 8006406:	2b08      	cmp	r3, #8
 8006408:	d105      	bne.n	8006416 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800640a:	4b4a      	ldr	r3, [pc, #296]	@ (8006534 <HAL_RCC_OscConfig+0x274>)
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00b      	beq.n	800642e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006416:	4b47      	ldr	r3, [pc, #284]	@ (8006534 <HAL_RCC_OscConfig+0x274>)
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800641e:	2b0c      	cmp	r3, #12
 8006420:	d11c      	bne.n	800645c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006422:	4b44      	ldr	r3, [pc, #272]	@ (8006534 <HAL_RCC_OscConfig+0x274>)
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800642a:	2b00      	cmp	r3, #0
 800642c:	d116      	bne.n	800645c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800642e:	4b41      	ldr	r3, [pc, #260]	@ (8006534 <HAL_RCC_OscConfig+0x274>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0302 	and.w	r3, r3, #2
 8006436:	2b00      	cmp	r3, #0
 8006438:	d005      	beq.n	8006446 <HAL_RCC_OscConfig+0x186>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	2b01      	cmp	r3, #1
 8006440:	d001      	beq.n	8006446 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e1d3      	b.n	80067ee <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006446:	4b3b      	ldr	r3, [pc, #236]	@ (8006534 <HAL_RCC_OscConfig+0x274>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	00db      	lsls	r3, r3, #3
 8006454:	4937      	ldr	r1, [pc, #220]	@ (8006534 <HAL_RCC_OscConfig+0x274>)
 8006456:	4313      	orrs	r3, r2
 8006458:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800645a:	e03a      	b.n	80064d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d020      	beq.n	80064a6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006464:	4b34      	ldr	r3, [pc, #208]	@ (8006538 <HAL_RCC_OscConfig+0x278>)
 8006466:	2201      	movs	r2, #1
 8006468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800646a:	f7fd fcc7 	bl	8003dfc <HAL_GetTick>
 800646e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006470:	e008      	b.n	8006484 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006472:	f7fd fcc3 	bl	8003dfc <HAL_GetTick>
 8006476:	4602      	mov	r2, r0
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	1ad3      	subs	r3, r2, r3
 800647c:	2b02      	cmp	r3, #2
 800647e:	d901      	bls.n	8006484 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006480:	2303      	movs	r3, #3
 8006482:	e1b4      	b.n	80067ee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006484:	4b2b      	ldr	r3, [pc, #172]	@ (8006534 <HAL_RCC_OscConfig+0x274>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 0302 	and.w	r3, r3, #2
 800648c:	2b00      	cmp	r3, #0
 800648e:	d0f0      	beq.n	8006472 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006490:	4b28      	ldr	r3, [pc, #160]	@ (8006534 <HAL_RCC_OscConfig+0x274>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	00db      	lsls	r3, r3, #3
 800649e:	4925      	ldr	r1, [pc, #148]	@ (8006534 <HAL_RCC_OscConfig+0x274>)
 80064a0:	4313      	orrs	r3, r2
 80064a2:	600b      	str	r3, [r1, #0]
 80064a4:	e015      	b.n	80064d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064a6:	4b24      	ldr	r3, [pc, #144]	@ (8006538 <HAL_RCC_OscConfig+0x278>)
 80064a8:	2200      	movs	r2, #0
 80064aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ac:	f7fd fca6 	bl	8003dfc <HAL_GetTick>
 80064b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064b2:	e008      	b.n	80064c6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064b4:	f7fd fca2 	bl	8003dfc <HAL_GetTick>
 80064b8:	4602      	mov	r2, r0
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d901      	bls.n	80064c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80064c2:	2303      	movs	r3, #3
 80064c4:	e193      	b.n	80067ee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064c6:	4b1b      	ldr	r3, [pc, #108]	@ (8006534 <HAL_RCC_OscConfig+0x274>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 0302 	and.w	r3, r3, #2
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1f0      	bne.n	80064b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f003 0308 	and.w	r3, r3, #8
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d036      	beq.n	800654c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	695b      	ldr	r3, [r3, #20]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d016      	beq.n	8006514 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064e6:	4b15      	ldr	r3, [pc, #84]	@ (800653c <HAL_RCC_OscConfig+0x27c>)
 80064e8:	2201      	movs	r2, #1
 80064ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064ec:	f7fd fc86 	bl	8003dfc <HAL_GetTick>
 80064f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064f2:	e008      	b.n	8006506 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064f4:	f7fd fc82 	bl	8003dfc <HAL_GetTick>
 80064f8:	4602      	mov	r2, r0
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	2b02      	cmp	r3, #2
 8006500:	d901      	bls.n	8006506 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	e173      	b.n	80067ee <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006506:	4b0b      	ldr	r3, [pc, #44]	@ (8006534 <HAL_RCC_OscConfig+0x274>)
 8006508:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800650a:	f003 0302 	and.w	r3, r3, #2
 800650e:	2b00      	cmp	r3, #0
 8006510:	d0f0      	beq.n	80064f4 <HAL_RCC_OscConfig+0x234>
 8006512:	e01b      	b.n	800654c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006514:	4b09      	ldr	r3, [pc, #36]	@ (800653c <HAL_RCC_OscConfig+0x27c>)
 8006516:	2200      	movs	r2, #0
 8006518:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800651a:	f7fd fc6f 	bl	8003dfc <HAL_GetTick>
 800651e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006520:	e00e      	b.n	8006540 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006522:	f7fd fc6b 	bl	8003dfc <HAL_GetTick>
 8006526:	4602      	mov	r2, r0
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	1ad3      	subs	r3, r2, r3
 800652c:	2b02      	cmp	r3, #2
 800652e:	d907      	bls.n	8006540 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006530:	2303      	movs	r3, #3
 8006532:	e15c      	b.n	80067ee <HAL_RCC_OscConfig+0x52e>
 8006534:	40023800 	.word	0x40023800
 8006538:	42470000 	.word	0x42470000
 800653c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006540:	4b8a      	ldr	r3, [pc, #552]	@ (800676c <HAL_RCC_OscConfig+0x4ac>)
 8006542:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006544:	f003 0302 	and.w	r3, r3, #2
 8006548:	2b00      	cmp	r3, #0
 800654a:	d1ea      	bne.n	8006522 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0304 	and.w	r3, r3, #4
 8006554:	2b00      	cmp	r3, #0
 8006556:	f000 8097 	beq.w	8006688 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800655a:	2300      	movs	r3, #0
 800655c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800655e:	4b83      	ldr	r3, [pc, #524]	@ (800676c <HAL_RCC_OscConfig+0x4ac>)
 8006560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006562:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006566:	2b00      	cmp	r3, #0
 8006568:	d10f      	bne.n	800658a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800656a:	2300      	movs	r3, #0
 800656c:	60bb      	str	r3, [r7, #8]
 800656e:	4b7f      	ldr	r3, [pc, #508]	@ (800676c <HAL_RCC_OscConfig+0x4ac>)
 8006570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006572:	4a7e      	ldr	r2, [pc, #504]	@ (800676c <HAL_RCC_OscConfig+0x4ac>)
 8006574:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006578:	6413      	str	r3, [r2, #64]	@ 0x40
 800657a:	4b7c      	ldr	r3, [pc, #496]	@ (800676c <HAL_RCC_OscConfig+0x4ac>)
 800657c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800657e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006582:	60bb      	str	r3, [r7, #8]
 8006584:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006586:	2301      	movs	r3, #1
 8006588:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800658a:	4b79      	ldr	r3, [pc, #484]	@ (8006770 <HAL_RCC_OscConfig+0x4b0>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006592:	2b00      	cmp	r3, #0
 8006594:	d118      	bne.n	80065c8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006596:	4b76      	ldr	r3, [pc, #472]	@ (8006770 <HAL_RCC_OscConfig+0x4b0>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a75      	ldr	r2, [pc, #468]	@ (8006770 <HAL_RCC_OscConfig+0x4b0>)
 800659c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065a2:	f7fd fc2b 	bl	8003dfc <HAL_GetTick>
 80065a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065a8:	e008      	b.n	80065bc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065aa:	f7fd fc27 	bl	8003dfc <HAL_GetTick>
 80065ae:	4602      	mov	r2, r0
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	1ad3      	subs	r3, r2, r3
 80065b4:	2b02      	cmp	r3, #2
 80065b6:	d901      	bls.n	80065bc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80065b8:	2303      	movs	r3, #3
 80065ba:	e118      	b.n	80067ee <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065bc:	4b6c      	ldr	r3, [pc, #432]	@ (8006770 <HAL_RCC_OscConfig+0x4b0>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d0f0      	beq.n	80065aa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d106      	bne.n	80065de <HAL_RCC_OscConfig+0x31e>
 80065d0:	4b66      	ldr	r3, [pc, #408]	@ (800676c <HAL_RCC_OscConfig+0x4ac>)
 80065d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065d4:	4a65      	ldr	r2, [pc, #404]	@ (800676c <HAL_RCC_OscConfig+0x4ac>)
 80065d6:	f043 0301 	orr.w	r3, r3, #1
 80065da:	6713      	str	r3, [r2, #112]	@ 0x70
 80065dc:	e01c      	b.n	8006618 <HAL_RCC_OscConfig+0x358>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	2b05      	cmp	r3, #5
 80065e4:	d10c      	bne.n	8006600 <HAL_RCC_OscConfig+0x340>
 80065e6:	4b61      	ldr	r3, [pc, #388]	@ (800676c <HAL_RCC_OscConfig+0x4ac>)
 80065e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065ea:	4a60      	ldr	r2, [pc, #384]	@ (800676c <HAL_RCC_OscConfig+0x4ac>)
 80065ec:	f043 0304 	orr.w	r3, r3, #4
 80065f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80065f2:	4b5e      	ldr	r3, [pc, #376]	@ (800676c <HAL_RCC_OscConfig+0x4ac>)
 80065f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065f6:	4a5d      	ldr	r2, [pc, #372]	@ (800676c <HAL_RCC_OscConfig+0x4ac>)
 80065f8:	f043 0301 	orr.w	r3, r3, #1
 80065fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80065fe:	e00b      	b.n	8006618 <HAL_RCC_OscConfig+0x358>
 8006600:	4b5a      	ldr	r3, [pc, #360]	@ (800676c <HAL_RCC_OscConfig+0x4ac>)
 8006602:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006604:	4a59      	ldr	r2, [pc, #356]	@ (800676c <HAL_RCC_OscConfig+0x4ac>)
 8006606:	f023 0301 	bic.w	r3, r3, #1
 800660a:	6713      	str	r3, [r2, #112]	@ 0x70
 800660c:	4b57      	ldr	r3, [pc, #348]	@ (800676c <HAL_RCC_OscConfig+0x4ac>)
 800660e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006610:	4a56      	ldr	r2, [pc, #344]	@ (800676c <HAL_RCC_OscConfig+0x4ac>)
 8006612:	f023 0304 	bic.w	r3, r3, #4
 8006616:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d015      	beq.n	800664c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006620:	f7fd fbec 	bl	8003dfc <HAL_GetTick>
 8006624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006626:	e00a      	b.n	800663e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006628:	f7fd fbe8 	bl	8003dfc <HAL_GetTick>
 800662c:	4602      	mov	r2, r0
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006636:	4293      	cmp	r3, r2
 8006638:	d901      	bls.n	800663e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e0d7      	b.n	80067ee <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800663e:	4b4b      	ldr	r3, [pc, #300]	@ (800676c <HAL_RCC_OscConfig+0x4ac>)
 8006640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006642:	f003 0302 	and.w	r3, r3, #2
 8006646:	2b00      	cmp	r3, #0
 8006648:	d0ee      	beq.n	8006628 <HAL_RCC_OscConfig+0x368>
 800664a:	e014      	b.n	8006676 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800664c:	f7fd fbd6 	bl	8003dfc <HAL_GetTick>
 8006650:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006652:	e00a      	b.n	800666a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006654:	f7fd fbd2 	bl	8003dfc <HAL_GetTick>
 8006658:	4602      	mov	r2, r0
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006662:	4293      	cmp	r3, r2
 8006664:	d901      	bls.n	800666a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e0c1      	b.n	80067ee <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800666a:	4b40      	ldr	r3, [pc, #256]	@ (800676c <HAL_RCC_OscConfig+0x4ac>)
 800666c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800666e:	f003 0302 	and.w	r3, r3, #2
 8006672:	2b00      	cmp	r3, #0
 8006674:	d1ee      	bne.n	8006654 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006676:	7dfb      	ldrb	r3, [r7, #23]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d105      	bne.n	8006688 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800667c:	4b3b      	ldr	r3, [pc, #236]	@ (800676c <HAL_RCC_OscConfig+0x4ac>)
 800667e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006680:	4a3a      	ldr	r2, [pc, #232]	@ (800676c <HAL_RCC_OscConfig+0x4ac>)
 8006682:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006686:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	699b      	ldr	r3, [r3, #24]
 800668c:	2b00      	cmp	r3, #0
 800668e:	f000 80ad 	beq.w	80067ec <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006692:	4b36      	ldr	r3, [pc, #216]	@ (800676c <HAL_RCC_OscConfig+0x4ac>)
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	f003 030c 	and.w	r3, r3, #12
 800669a:	2b08      	cmp	r3, #8
 800669c:	d060      	beq.n	8006760 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d145      	bne.n	8006732 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066a6:	4b33      	ldr	r3, [pc, #204]	@ (8006774 <HAL_RCC_OscConfig+0x4b4>)
 80066a8:	2200      	movs	r2, #0
 80066aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066ac:	f7fd fba6 	bl	8003dfc <HAL_GetTick>
 80066b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066b2:	e008      	b.n	80066c6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066b4:	f7fd fba2 	bl	8003dfc <HAL_GetTick>
 80066b8:	4602      	mov	r2, r0
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	1ad3      	subs	r3, r2, r3
 80066be:	2b02      	cmp	r3, #2
 80066c0:	d901      	bls.n	80066c6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80066c2:	2303      	movs	r3, #3
 80066c4:	e093      	b.n	80067ee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066c6:	4b29      	ldr	r3, [pc, #164]	@ (800676c <HAL_RCC_OscConfig+0x4ac>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d1f0      	bne.n	80066b4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	69da      	ldr	r2, [r3, #28]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a1b      	ldr	r3, [r3, #32]
 80066da:	431a      	orrs	r2, r3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066e0:	019b      	lsls	r3, r3, #6
 80066e2:	431a      	orrs	r2, r3
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066e8:	085b      	lsrs	r3, r3, #1
 80066ea:	3b01      	subs	r3, #1
 80066ec:	041b      	lsls	r3, r3, #16
 80066ee:	431a      	orrs	r2, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f4:	061b      	lsls	r3, r3, #24
 80066f6:	431a      	orrs	r2, r3
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066fc:	071b      	lsls	r3, r3, #28
 80066fe:	491b      	ldr	r1, [pc, #108]	@ (800676c <HAL_RCC_OscConfig+0x4ac>)
 8006700:	4313      	orrs	r3, r2
 8006702:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006704:	4b1b      	ldr	r3, [pc, #108]	@ (8006774 <HAL_RCC_OscConfig+0x4b4>)
 8006706:	2201      	movs	r2, #1
 8006708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800670a:	f7fd fb77 	bl	8003dfc <HAL_GetTick>
 800670e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006710:	e008      	b.n	8006724 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006712:	f7fd fb73 	bl	8003dfc <HAL_GetTick>
 8006716:	4602      	mov	r2, r0
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	1ad3      	subs	r3, r2, r3
 800671c:	2b02      	cmp	r3, #2
 800671e:	d901      	bls.n	8006724 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006720:	2303      	movs	r3, #3
 8006722:	e064      	b.n	80067ee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006724:	4b11      	ldr	r3, [pc, #68]	@ (800676c <HAL_RCC_OscConfig+0x4ac>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800672c:	2b00      	cmp	r3, #0
 800672e:	d0f0      	beq.n	8006712 <HAL_RCC_OscConfig+0x452>
 8006730:	e05c      	b.n	80067ec <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006732:	4b10      	ldr	r3, [pc, #64]	@ (8006774 <HAL_RCC_OscConfig+0x4b4>)
 8006734:	2200      	movs	r2, #0
 8006736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006738:	f7fd fb60 	bl	8003dfc <HAL_GetTick>
 800673c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800673e:	e008      	b.n	8006752 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006740:	f7fd fb5c 	bl	8003dfc <HAL_GetTick>
 8006744:	4602      	mov	r2, r0
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	2b02      	cmp	r3, #2
 800674c:	d901      	bls.n	8006752 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	e04d      	b.n	80067ee <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006752:	4b06      	ldr	r3, [pc, #24]	@ (800676c <HAL_RCC_OscConfig+0x4ac>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800675a:	2b00      	cmp	r3, #0
 800675c:	d1f0      	bne.n	8006740 <HAL_RCC_OscConfig+0x480>
 800675e:	e045      	b.n	80067ec <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	699b      	ldr	r3, [r3, #24]
 8006764:	2b01      	cmp	r3, #1
 8006766:	d107      	bne.n	8006778 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e040      	b.n	80067ee <HAL_RCC_OscConfig+0x52e>
 800676c:	40023800 	.word	0x40023800
 8006770:	40007000 	.word	0x40007000
 8006774:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006778:	4b1f      	ldr	r3, [pc, #124]	@ (80067f8 <HAL_RCC_OscConfig+0x538>)
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	699b      	ldr	r3, [r3, #24]
 8006782:	2b01      	cmp	r3, #1
 8006784:	d030      	beq.n	80067e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006790:	429a      	cmp	r2, r3
 8006792:	d129      	bne.n	80067e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800679e:	429a      	cmp	r2, r3
 80067a0:	d122      	bne.n	80067e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80067a2:	68fa      	ldr	r2, [r7, #12]
 80067a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80067a8:	4013      	ands	r3, r2
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80067ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d119      	bne.n	80067e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067be:	085b      	lsrs	r3, r3, #1
 80067c0:	3b01      	subs	r3, #1
 80067c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d10f      	bne.n	80067e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d107      	bne.n	80067e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067e2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d001      	beq.n	80067ec <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	e000      	b.n	80067ee <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80067ec:	2300      	movs	r3, #0
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3718      	adds	r7, #24
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	40023800 	.word	0x40023800

080067fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d101      	bne.n	800680e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e07b      	b.n	8006906 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006812:	2b00      	cmp	r3, #0
 8006814:	d108      	bne.n	8006828 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800681e:	d009      	beq.n	8006834 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	61da      	str	r2, [r3, #28]
 8006826:	e005      	b.n	8006834 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006840:	b2db      	uxtb	r3, r3
 8006842:	2b00      	cmp	r3, #0
 8006844:	d106      	bne.n	8006854 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f7fc ff52 	bl	80036f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2202      	movs	r2, #2
 8006858:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800686a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800687c:	431a      	orrs	r2, r3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006886:	431a      	orrs	r2, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	f003 0302 	and.w	r3, r3, #2
 8006890:	431a      	orrs	r2, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	695b      	ldr	r3, [r3, #20]
 8006896:	f003 0301 	and.w	r3, r3, #1
 800689a:	431a      	orrs	r2, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	699b      	ldr	r3, [r3, #24]
 80068a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80068a4:	431a      	orrs	r2, r3
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	69db      	ldr	r3, [r3, #28]
 80068aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80068ae:	431a      	orrs	r2, r3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6a1b      	ldr	r3, [r3, #32]
 80068b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068b8:	ea42 0103 	orr.w	r1, r2, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068c0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	430a      	orrs	r2, r1
 80068ca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	699b      	ldr	r3, [r3, #24]
 80068d0:	0c1b      	lsrs	r3, r3, #16
 80068d2:	f003 0104 	and.w	r1, r3, #4
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068da:	f003 0210 	and.w	r2, r3, #16
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	430a      	orrs	r2, r1
 80068e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	69da      	ldr	r2, [r3, #28]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80068f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3708      	adds	r7, #8
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}

0800690e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800690e:	b580      	push	{r7, lr}
 8006910:	b088      	sub	sp, #32
 8006912:	af00      	add	r7, sp, #0
 8006914:	60f8      	str	r0, [r7, #12]
 8006916:	60b9      	str	r1, [r7, #8]
 8006918:	603b      	str	r3, [r7, #0]
 800691a:	4613      	mov	r3, r2
 800691c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800691e:	f7fd fa6d 	bl	8003dfc <HAL_GetTick>
 8006922:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006924:	88fb      	ldrh	r3, [r7, #6]
 8006926:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800692e:	b2db      	uxtb	r3, r3
 8006930:	2b01      	cmp	r3, #1
 8006932:	d001      	beq.n	8006938 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006934:	2302      	movs	r3, #2
 8006936:	e12a      	b.n	8006b8e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d002      	beq.n	8006944 <HAL_SPI_Transmit+0x36>
 800693e:	88fb      	ldrh	r3, [r7, #6]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d101      	bne.n	8006948 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	e122      	b.n	8006b8e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800694e:	2b01      	cmp	r3, #1
 8006950:	d101      	bne.n	8006956 <HAL_SPI_Transmit+0x48>
 8006952:	2302      	movs	r3, #2
 8006954:	e11b      	b.n	8006b8e <HAL_SPI_Transmit+0x280>
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2201      	movs	r2, #1
 800695a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2203      	movs	r2, #3
 8006962:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2200      	movs	r2, #0
 800696a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	68ba      	ldr	r2, [r7, #8]
 8006970:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	88fa      	ldrh	r2, [r7, #6]
 8006976:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	88fa      	ldrh	r2, [r7, #6]
 800697c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2200      	movs	r2, #0
 8006988:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2200      	movs	r2, #0
 800698e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2200      	movs	r2, #0
 800699a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069a4:	d10f      	bne.n	80069c6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80069b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80069c4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069d0:	2b40      	cmp	r3, #64	@ 0x40
 80069d2:	d007      	beq.n	80069e4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80069e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069ec:	d152      	bne.n	8006a94 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d002      	beq.n	80069fc <HAL_SPI_Transmit+0xee>
 80069f6:	8b7b      	ldrh	r3, [r7, #26]
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d145      	bne.n	8006a88 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a00:	881a      	ldrh	r2, [r3, #0]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a0c:	1c9a      	adds	r2, r3, #2
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	3b01      	subs	r3, #1
 8006a1a:	b29a      	uxth	r2, r3
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006a20:	e032      	b.n	8006a88 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	f003 0302 	and.w	r3, r3, #2
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	d112      	bne.n	8006a56 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a34:	881a      	ldrh	r2, [r3, #0]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a40:	1c9a      	adds	r2, r3, #2
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006a54:	e018      	b.n	8006a88 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a56:	f7fd f9d1 	bl	8003dfc <HAL_GetTick>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	683a      	ldr	r2, [r7, #0]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d803      	bhi.n	8006a6e <HAL_SPI_Transmit+0x160>
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a6c:	d102      	bne.n	8006a74 <HAL_SPI_Transmit+0x166>
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d109      	bne.n	8006a88 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2201      	movs	r2, #1
 8006a78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006a84:	2303      	movs	r3, #3
 8006a86:	e082      	b.n	8006b8e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d1c7      	bne.n	8006a22 <HAL_SPI_Transmit+0x114>
 8006a92:	e053      	b.n	8006b3c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d002      	beq.n	8006aa2 <HAL_SPI_Transmit+0x194>
 8006a9c:	8b7b      	ldrh	r3, [r7, #26]
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d147      	bne.n	8006b32 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	330c      	adds	r3, #12
 8006aac:	7812      	ldrb	r2, [r2, #0]
 8006aae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ab4:	1c5a      	adds	r2, r3, #1
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006ac8:	e033      	b.n	8006b32 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	f003 0302 	and.w	r3, r3, #2
 8006ad4:	2b02      	cmp	r3, #2
 8006ad6:	d113      	bne.n	8006b00 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	330c      	adds	r3, #12
 8006ae2:	7812      	ldrb	r2, [r2, #0]
 8006ae4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aea:	1c5a      	adds	r2, r3, #1
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	3b01      	subs	r3, #1
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006afe:	e018      	b.n	8006b32 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b00:	f7fd f97c 	bl	8003dfc <HAL_GetTick>
 8006b04:	4602      	mov	r2, r0
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	1ad3      	subs	r3, r2, r3
 8006b0a:	683a      	ldr	r2, [r7, #0]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d803      	bhi.n	8006b18 <HAL_SPI_Transmit+0x20a>
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b16:	d102      	bne.n	8006b1e <HAL_SPI_Transmit+0x210>
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d109      	bne.n	8006b32 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2201      	movs	r2, #1
 8006b22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	e02d      	b.n	8006b8e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d1c6      	bne.n	8006aca <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b3c:	69fa      	ldr	r2, [r7, #28]
 8006b3e:	6839      	ldr	r1, [r7, #0]
 8006b40:	68f8      	ldr	r0, [r7, #12]
 8006b42:	f000 fb6b 	bl	800721c <SPI_EndRxTxTransaction>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d002      	beq.n	8006b52 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2220      	movs	r2, #32
 8006b50:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d10a      	bne.n	8006b70 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	617b      	str	r3, [r7, #20]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	617b      	str	r3, [r7, #20]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	617b      	str	r3, [r7, #20]
 8006b6e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d001      	beq.n	8006b8c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e000      	b.n	8006b8e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006b8c:	2300      	movs	r3, #0
  }
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3720      	adds	r7, #32
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}

08006b96 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006b96:	b580      	push	{r7, lr}
 8006b98:	b08a      	sub	sp, #40	@ 0x28
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	60f8      	str	r0, [r7, #12]
 8006b9e:	60b9      	str	r1, [r7, #8]
 8006ba0:	607a      	str	r2, [r7, #4]
 8006ba2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ba8:	f7fd f928 	bl	8003dfc <HAL_GetTick>
 8006bac:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006bb4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006bbc:	887b      	ldrh	r3, [r7, #2]
 8006bbe:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006bc0:	7ffb      	ldrb	r3, [r7, #31]
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d00c      	beq.n	8006be0 <HAL_SPI_TransmitReceive+0x4a>
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006bcc:	d106      	bne.n	8006bdc <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d102      	bne.n	8006bdc <HAL_SPI_TransmitReceive+0x46>
 8006bd6:	7ffb      	ldrb	r3, [r7, #31]
 8006bd8:	2b04      	cmp	r3, #4
 8006bda:	d001      	beq.n	8006be0 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8006bdc:	2302      	movs	r3, #2
 8006bde:	e17f      	b.n	8006ee0 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d005      	beq.n	8006bf2 <HAL_SPI_TransmitReceive+0x5c>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d002      	beq.n	8006bf2 <HAL_SPI_TransmitReceive+0x5c>
 8006bec:	887b      	ldrh	r3, [r7, #2]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d101      	bne.n	8006bf6 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e174      	b.n	8006ee0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d101      	bne.n	8006c04 <HAL_SPI_TransmitReceive+0x6e>
 8006c00:	2302      	movs	r3, #2
 8006c02:	e16d      	b.n	8006ee0 <HAL_SPI_TransmitReceive+0x34a>
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	2b04      	cmp	r3, #4
 8006c16:	d003      	beq.n	8006c20 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2205      	movs	r2, #5
 8006c1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2200      	movs	r2, #0
 8006c24:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	887a      	ldrh	r2, [r7, #2]
 8006c30:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	887a      	ldrh	r2, [r7, #2]
 8006c36:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	68ba      	ldr	r2, [r7, #8]
 8006c3c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	887a      	ldrh	r2, [r7, #2]
 8006c42:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	887a      	ldrh	r2, [r7, #2]
 8006c48:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2200      	movs	r2, #0
 8006c54:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c60:	2b40      	cmp	r3, #64	@ 0x40
 8006c62:	d007      	beq.n	8006c74 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c7c:	d17e      	bne.n	8006d7c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d002      	beq.n	8006c8c <HAL_SPI_TransmitReceive+0xf6>
 8006c86:	8afb      	ldrh	r3, [r7, #22]
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d16c      	bne.n	8006d66 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c90:	881a      	ldrh	r2, [r3, #0]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c9c:	1c9a      	adds	r2, r3, #2
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	b29a      	uxth	r2, r3
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006cb0:	e059      	b.n	8006d66 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	f003 0302 	and.w	r3, r3, #2
 8006cbc:	2b02      	cmp	r3, #2
 8006cbe:	d11b      	bne.n	8006cf8 <HAL_SPI_TransmitReceive+0x162>
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d016      	beq.n	8006cf8 <HAL_SPI_TransmitReceive+0x162>
 8006cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d113      	bne.n	8006cf8 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cd4:	881a      	ldrh	r2, [r3, #0]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ce0:	1c9a      	adds	r2, r3, #2
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	3b01      	subs	r3, #1
 8006cee:	b29a      	uxth	r2, r3
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	f003 0301 	and.w	r3, r3, #1
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d119      	bne.n	8006d3a <HAL_SPI_TransmitReceive+0x1a4>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d014      	beq.n	8006d3a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	68da      	ldr	r2, [r3, #12]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d1a:	b292      	uxth	r2, r2
 8006d1c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d22:	1c9a      	adds	r2, r3, #2
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	b29a      	uxth	r2, r3
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006d36:	2301      	movs	r3, #1
 8006d38:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006d3a:	f7fd f85f 	bl	8003dfc <HAL_GetTick>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	6a3b      	ldr	r3, [r7, #32]
 8006d42:	1ad3      	subs	r3, r2, r3
 8006d44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d80d      	bhi.n	8006d66 <HAL_SPI_TransmitReceive+0x1d0>
 8006d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d50:	d009      	beq.n	8006d66 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2201      	movs	r2, #1
 8006d56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006d62:	2303      	movs	r3, #3
 8006d64:	e0bc      	b.n	8006ee0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d1a0      	bne.n	8006cb2 <HAL_SPI_TransmitReceive+0x11c>
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d19b      	bne.n	8006cb2 <HAL_SPI_TransmitReceive+0x11c>
 8006d7a:	e082      	b.n	8006e82 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d002      	beq.n	8006d8a <HAL_SPI_TransmitReceive+0x1f4>
 8006d84:	8afb      	ldrh	r3, [r7, #22]
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d171      	bne.n	8006e6e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	330c      	adds	r3, #12
 8006d94:	7812      	ldrb	r2, [r2, #0]
 8006d96:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d9c:	1c5a      	adds	r2, r3, #1
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	3b01      	subs	r3, #1
 8006daa:	b29a      	uxth	r2, r3
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006db0:	e05d      	b.n	8006e6e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	f003 0302 	and.w	r3, r3, #2
 8006dbc:	2b02      	cmp	r3, #2
 8006dbe:	d11c      	bne.n	8006dfa <HAL_SPI_TransmitReceive+0x264>
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d017      	beq.n	8006dfa <HAL_SPI_TransmitReceive+0x264>
 8006dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d114      	bne.n	8006dfa <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	330c      	adds	r3, #12
 8006dda:	7812      	ldrb	r2, [r2, #0]
 8006ddc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006de2:	1c5a      	adds	r2, r3, #1
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	3b01      	subs	r3, #1
 8006df0:	b29a      	uxth	r2, r3
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006df6:	2300      	movs	r3, #0
 8006df8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	f003 0301 	and.w	r3, r3, #1
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d119      	bne.n	8006e3c <HAL_SPI_TransmitReceive+0x2a6>
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d014      	beq.n	8006e3c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	68da      	ldr	r2, [r3, #12]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e1c:	b2d2      	uxtb	r2, r2
 8006e1e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e24:	1c5a      	adds	r2, r3, #1
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	3b01      	subs	r3, #1
 8006e32:	b29a      	uxth	r2, r3
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006e3c:	f7fc ffde 	bl	8003dfc <HAL_GetTick>
 8006e40:	4602      	mov	r2, r0
 8006e42:	6a3b      	ldr	r3, [r7, #32]
 8006e44:	1ad3      	subs	r3, r2, r3
 8006e46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d803      	bhi.n	8006e54 <HAL_SPI_TransmitReceive+0x2be>
 8006e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e52:	d102      	bne.n	8006e5a <HAL_SPI_TransmitReceive+0x2c4>
 8006e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d109      	bne.n	8006e6e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	e038      	b.n	8006ee0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d19c      	bne.n	8006db2 <HAL_SPI_TransmitReceive+0x21c>
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d197      	bne.n	8006db2 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e82:	6a3a      	ldr	r2, [r7, #32]
 8006e84:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006e86:	68f8      	ldr	r0, [r7, #12]
 8006e88:	f000 f9c8 	bl	800721c <SPI_EndRxTxTransaction>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d008      	beq.n	8006ea4 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2220      	movs	r2, #32
 8006e96:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	e01d      	b.n	8006ee0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d10a      	bne.n	8006ec2 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006eac:	2300      	movs	r3, #0
 8006eae:	613b      	str	r3, [r7, #16]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	613b      	str	r3, [r7, #16]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	613b      	str	r3, [r7, #16]
 8006ec0:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d001      	beq.n	8006ede <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e000      	b.n	8006ee0 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006ede:	2300      	movs	r3, #0
  }
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3728      	adds	r7, #40	@ 0x28
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b088      	sub	sp, #32
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d10e      	bne.n	8006f28 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d009      	beq.n	8006f28 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d004      	beq.n	8006f28 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	4798      	blx	r3
    return;
 8006f26:	e0ce      	b.n	80070c6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	f003 0302 	and.w	r3, r3, #2
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d009      	beq.n	8006f46 <HAL_SPI_IRQHandler+0x5e>
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d004      	beq.n	8006f46 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	4798      	blx	r3
    return;
 8006f44:	e0bf      	b.n	80070c6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	f003 0320 	and.w	r3, r3, #32
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d10a      	bne.n	8006f66 <HAL_SPI_IRQHandler+0x7e>
 8006f50:	69bb      	ldr	r3, [r7, #24]
 8006f52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d105      	bne.n	8006f66 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	f000 80b0 	beq.w	80070c6 <HAL_SPI_IRQHandler+0x1de>
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	f003 0320 	and.w	r3, r3, #32
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f000 80aa 	beq.w	80070c6 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d023      	beq.n	8006fc4 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	2b03      	cmp	r3, #3
 8006f86:	d011      	beq.n	8006fac <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f8c:	f043 0204 	orr.w	r2, r3, #4
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f94:	2300      	movs	r3, #0
 8006f96:	617b      	str	r3, [r7, #20]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	617b      	str	r3, [r7, #20]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	617b      	str	r3, [r7, #20]
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	e00b      	b.n	8006fc4 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006fac:	2300      	movs	r3, #0
 8006fae:	613b      	str	r3, [r7, #16]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	613b      	str	r3, [r7, #16]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	613b      	str	r3, [r7, #16]
 8006fc0:	693b      	ldr	r3, [r7, #16]
        return;
 8006fc2:	e080      	b.n	80070c6 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	f003 0320 	and.w	r3, r3, #32
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d014      	beq.n	8006ff8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fd2:	f043 0201 	orr.w	r2, r3, #1
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006fda:	2300      	movs	r3, #0
 8006fdc:	60fb      	str	r3, [r7, #12]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	60fb      	str	r3, [r7, #12]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ff4:	601a      	str	r2, [r3, #0]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d00c      	beq.n	800701c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007006:	f043 0208 	orr.w	r2, r3, #8
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800700e:	2300      	movs	r3, #0
 8007010:	60bb      	str	r3, [r7, #8]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	60bb      	str	r3, [r7, #8]
 800701a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007020:	2b00      	cmp	r3, #0
 8007022:	d04f      	beq.n	80070c4 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	685a      	ldr	r2, [r3, #4]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007032:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	f003 0302 	and.w	r3, r3, #2
 8007042:	2b00      	cmp	r3, #0
 8007044:	d104      	bne.n	8007050 <HAL_SPI_IRQHandler+0x168>
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	f003 0301 	and.w	r3, r3, #1
 800704c:	2b00      	cmp	r3, #0
 800704e:	d034      	beq.n	80070ba <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	685a      	ldr	r2, [r3, #4]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f022 0203 	bic.w	r2, r2, #3
 800705e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007064:	2b00      	cmp	r3, #0
 8007066:	d011      	beq.n	800708c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800706c:	4a17      	ldr	r2, [pc, #92]	@ (80070cc <HAL_SPI_IRQHandler+0x1e4>)
 800706e:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007074:	4618      	mov	r0, r3
 8007076:	f7fe f94f 	bl	8005318 <HAL_DMA_Abort_IT>
 800707a:	4603      	mov	r3, r0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d005      	beq.n	800708c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007084:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007090:	2b00      	cmp	r3, #0
 8007092:	d016      	beq.n	80070c2 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007098:	4a0c      	ldr	r2, [pc, #48]	@ (80070cc <HAL_SPI_IRQHandler+0x1e4>)
 800709a:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070a0:	4618      	mov	r0, r3
 80070a2:	f7fe f939 	bl	8005318 <HAL_DMA_Abort_IT>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d00a      	beq.n	80070c2 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070b0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80070b8:	e003      	b.n	80070c2 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 f808 	bl	80070d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80070c0:	e000      	b.n	80070c4 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80070c2:	bf00      	nop
    return;
 80070c4:	bf00      	nop
  }
}
 80070c6:	3720      	adds	r7, #32
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	080070e5 	.word	0x080070e5

080070d0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80070d8:	bf00      	nop
 80070da:	370c      	adds	r7, #12
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070f0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2200      	movs	r2, #0
 80070f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2200      	movs	r2, #0
 80070fc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80070fe:	68f8      	ldr	r0, [r7, #12]
 8007100:	f7ff ffe6 	bl	80070d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007104:	bf00      	nop
 8007106:	3710      	adds	r7, #16
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b088      	sub	sp, #32
 8007110:	af00      	add	r7, sp, #0
 8007112:	60f8      	str	r0, [r7, #12]
 8007114:	60b9      	str	r1, [r7, #8]
 8007116:	603b      	str	r3, [r7, #0]
 8007118:	4613      	mov	r3, r2
 800711a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800711c:	f7fc fe6e 	bl	8003dfc <HAL_GetTick>
 8007120:	4602      	mov	r2, r0
 8007122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007124:	1a9b      	subs	r3, r3, r2
 8007126:	683a      	ldr	r2, [r7, #0]
 8007128:	4413      	add	r3, r2
 800712a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800712c:	f7fc fe66 	bl	8003dfc <HAL_GetTick>
 8007130:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007132:	4b39      	ldr	r3, [pc, #228]	@ (8007218 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	015b      	lsls	r3, r3, #5
 8007138:	0d1b      	lsrs	r3, r3, #20
 800713a:	69fa      	ldr	r2, [r7, #28]
 800713c:	fb02 f303 	mul.w	r3, r2, r3
 8007140:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007142:	e054      	b.n	80071ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800714a:	d050      	beq.n	80071ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800714c:	f7fc fe56 	bl	8003dfc <HAL_GetTick>
 8007150:	4602      	mov	r2, r0
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	1ad3      	subs	r3, r2, r3
 8007156:	69fa      	ldr	r2, [r7, #28]
 8007158:	429a      	cmp	r2, r3
 800715a:	d902      	bls.n	8007162 <SPI_WaitFlagStateUntilTimeout+0x56>
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d13d      	bne.n	80071de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	685a      	ldr	r2, [r3, #4]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007170:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800717a:	d111      	bne.n	80071a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007184:	d004      	beq.n	8007190 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800718e:	d107      	bne.n	80071a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800719e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071a8:	d10f      	bne.n	80071ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80071b8:	601a      	str	r2, [r3, #0]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80071c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2201      	movs	r2, #1
 80071ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80071da:	2303      	movs	r3, #3
 80071dc:	e017      	b.n	800720e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d101      	bne.n	80071e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80071e4:	2300      	movs	r3, #0
 80071e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	3b01      	subs	r3, #1
 80071ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	689a      	ldr	r2, [r3, #8]
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	4013      	ands	r3, r2
 80071f8:	68ba      	ldr	r2, [r7, #8]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	bf0c      	ite	eq
 80071fe:	2301      	moveq	r3, #1
 8007200:	2300      	movne	r3, #0
 8007202:	b2db      	uxtb	r3, r3
 8007204:	461a      	mov	r2, r3
 8007206:	79fb      	ldrb	r3, [r7, #7]
 8007208:	429a      	cmp	r2, r3
 800720a:	d19b      	bne.n	8007144 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800720c:	2300      	movs	r3, #0
}
 800720e:	4618      	mov	r0, r3
 8007210:	3720      	adds	r7, #32
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	20000034 	.word	0x20000034

0800721c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b088      	sub	sp, #32
 8007220:	af02      	add	r7, sp, #8
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	9300      	str	r3, [sp, #0]
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	2201      	movs	r2, #1
 8007230:	2102      	movs	r1, #2
 8007232:	68f8      	ldr	r0, [r7, #12]
 8007234:	f7ff ff6a 	bl	800710c <SPI_WaitFlagStateUntilTimeout>
 8007238:	4603      	mov	r3, r0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d007      	beq.n	800724e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007242:	f043 0220 	orr.w	r2, r3, #32
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800724a:	2303      	movs	r3, #3
 800724c:	e032      	b.n	80072b4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800724e:	4b1b      	ldr	r3, [pc, #108]	@ (80072bc <SPI_EndRxTxTransaction+0xa0>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a1b      	ldr	r2, [pc, #108]	@ (80072c0 <SPI_EndRxTxTransaction+0xa4>)
 8007254:	fba2 2303 	umull	r2, r3, r2, r3
 8007258:	0d5b      	lsrs	r3, r3, #21
 800725a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800725e:	fb02 f303 	mul.w	r3, r2, r3
 8007262:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800726c:	d112      	bne.n	8007294 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	9300      	str	r3, [sp, #0]
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	2200      	movs	r2, #0
 8007276:	2180      	movs	r1, #128	@ 0x80
 8007278:	68f8      	ldr	r0, [r7, #12]
 800727a:	f7ff ff47 	bl	800710c <SPI_WaitFlagStateUntilTimeout>
 800727e:	4603      	mov	r3, r0
 8007280:	2b00      	cmp	r3, #0
 8007282:	d016      	beq.n	80072b2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007288:	f043 0220 	orr.w	r2, r3, #32
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007290:	2303      	movs	r3, #3
 8007292:	e00f      	b.n	80072b4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d00a      	beq.n	80072b0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	3b01      	subs	r3, #1
 800729e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072aa:	2b80      	cmp	r3, #128	@ 0x80
 80072ac:	d0f2      	beq.n	8007294 <SPI_EndRxTxTransaction+0x78>
 80072ae:	e000      	b.n	80072b2 <SPI_EndRxTxTransaction+0x96>
        break;
 80072b0:	bf00      	nop
  }

  return HAL_OK;
 80072b2:	2300      	movs	r3, #0
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3718      	adds	r7, #24
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	20000034 	.word	0x20000034
 80072c0:	165e9f81 	.word	0x165e9f81

080072c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d101      	bne.n	80072d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	e041      	b.n	800735a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d106      	bne.n	80072f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f7fc fa54 	bl	8003798 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2202      	movs	r2, #2
 80072f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	3304      	adds	r3, #4
 8007300:	4619      	mov	r1, r3
 8007302:	4610      	mov	r0, r2
 8007304:	f000 fcca 	bl	8007c9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2201      	movs	r2, #1
 800730c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2201      	movs	r2, #1
 800731c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2201      	movs	r2, #1
 8007344:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2201      	movs	r2, #1
 8007354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007358:	2300      	movs	r3, #0
}
 800735a:	4618      	mov	r0, r3
 800735c:	3708      	adds	r7, #8
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
	...

08007364 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007364:	b480      	push	{r7}
 8007366:	b085      	sub	sp, #20
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007372:	b2db      	uxtb	r3, r3
 8007374:	2b01      	cmp	r3, #1
 8007376:	d001      	beq.n	800737c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	e046      	b.n	800740a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2202      	movs	r2, #2
 8007380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a23      	ldr	r2, [pc, #140]	@ (8007418 <HAL_TIM_Base_Start+0xb4>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d022      	beq.n	80073d4 <HAL_TIM_Base_Start+0x70>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007396:	d01d      	beq.n	80073d4 <HAL_TIM_Base_Start+0x70>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a1f      	ldr	r2, [pc, #124]	@ (800741c <HAL_TIM_Base_Start+0xb8>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d018      	beq.n	80073d4 <HAL_TIM_Base_Start+0x70>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a1e      	ldr	r2, [pc, #120]	@ (8007420 <HAL_TIM_Base_Start+0xbc>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d013      	beq.n	80073d4 <HAL_TIM_Base_Start+0x70>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a1c      	ldr	r2, [pc, #112]	@ (8007424 <HAL_TIM_Base_Start+0xc0>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d00e      	beq.n	80073d4 <HAL_TIM_Base_Start+0x70>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a1b      	ldr	r2, [pc, #108]	@ (8007428 <HAL_TIM_Base_Start+0xc4>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d009      	beq.n	80073d4 <HAL_TIM_Base_Start+0x70>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a19      	ldr	r2, [pc, #100]	@ (800742c <HAL_TIM_Base_Start+0xc8>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d004      	beq.n	80073d4 <HAL_TIM_Base_Start+0x70>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a18      	ldr	r2, [pc, #96]	@ (8007430 <HAL_TIM_Base_Start+0xcc>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d111      	bne.n	80073f8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	f003 0307 	and.w	r3, r3, #7
 80073de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2b06      	cmp	r3, #6
 80073e4:	d010      	beq.n	8007408 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f042 0201 	orr.w	r2, r2, #1
 80073f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073f6:	e007      	b.n	8007408 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f042 0201 	orr.w	r2, r2, #1
 8007406:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007408:	2300      	movs	r3, #0
}
 800740a:	4618      	mov	r0, r3
 800740c:	3714      	adds	r7, #20
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr
 8007416:	bf00      	nop
 8007418:	40010000 	.word	0x40010000
 800741c:	40000400 	.word	0x40000400
 8007420:	40000800 	.word	0x40000800
 8007424:	40000c00 	.word	0x40000c00
 8007428:	40010400 	.word	0x40010400
 800742c:	40014000 	.word	0x40014000
 8007430:	40001800 	.word	0x40001800

08007434 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007434:	b480      	push	{r7}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007442:	b2db      	uxtb	r3, r3
 8007444:	2b01      	cmp	r3, #1
 8007446:	d001      	beq.n	800744c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	e04e      	b.n	80074ea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2202      	movs	r2, #2
 8007450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	68da      	ldr	r2, [r3, #12]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f042 0201 	orr.w	r2, r2, #1
 8007462:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a23      	ldr	r2, [pc, #140]	@ (80074f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d022      	beq.n	80074b4 <HAL_TIM_Base_Start_IT+0x80>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007476:	d01d      	beq.n	80074b4 <HAL_TIM_Base_Start_IT+0x80>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a1f      	ldr	r2, [pc, #124]	@ (80074fc <HAL_TIM_Base_Start_IT+0xc8>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d018      	beq.n	80074b4 <HAL_TIM_Base_Start_IT+0x80>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a1e      	ldr	r2, [pc, #120]	@ (8007500 <HAL_TIM_Base_Start_IT+0xcc>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d013      	beq.n	80074b4 <HAL_TIM_Base_Start_IT+0x80>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a1c      	ldr	r2, [pc, #112]	@ (8007504 <HAL_TIM_Base_Start_IT+0xd0>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d00e      	beq.n	80074b4 <HAL_TIM_Base_Start_IT+0x80>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a1b      	ldr	r2, [pc, #108]	@ (8007508 <HAL_TIM_Base_Start_IT+0xd4>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d009      	beq.n	80074b4 <HAL_TIM_Base_Start_IT+0x80>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a19      	ldr	r2, [pc, #100]	@ (800750c <HAL_TIM_Base_Start_IT+0xd8>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d004      	beq.n	80074b4 <HAL_TIM_Base_Start_IT+0x80>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a18      	ldr	r2, [pc, #96]	@ (8007510 <HAL_TIM_Base_Start_IT+0xdc>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d111      	bne.n	80074d8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	f003 0307 	and.w	r3, r3, #7
 80074be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2b06      	cmp	r3, #6
 80074c4:	d010      	beq.n	80074e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f042 0201 	orr.w	r2, r2, #1
 80074d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074d6:	e007      	b.n	80074e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f042 0201 	orr.w	r2, r2, #1
 80074e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3714      	adds	r7, #20
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr
 80074f6:	bf00      	nop
 80074f8:	40010000 	.word	0x40010000
 80074fc:	40000400 	.word	0x40000400
 8007500:	40000800 	.word	0x40000800
 8007504:	40000c00 	.word	0x40000c00
 8007508:	40010400 	.word	0x40010400
 800750c:	40014000 	.word	0x40014000
 8007510:	40001800 	.word	0x40001800

08007514 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d101      	bne.n	8007526 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	e041      	b.n	80075aa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800752c:	b2db      	uxtb	r3, r3
 800752e:	2b00      	cmp	r3, #0
 8007530:	d106      	bne.n	8007540 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 f839 	bl	80075b2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2202      	movs	r2, #2
 8007544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	3304      	adds	r3, #4
 8007550:	4619      	mov	r1, r3
 8007552:	4610      	mov	r0, r2
 8007554:	f000 fba2 	bl	8007c9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2201      	movs	r2, #1
 800755c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2201      	movs	r2, #1
 8007564:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2201      	movs	r2, #1
 8007574:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2201      	movs	r2, #1
 800758c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2201      	movs	r2, #1
 8007594:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2201      	movs	r2, #1
 80075a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3708      	adds	r7, #8
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80075b2:	b480      	push	{r7}
 80075b4:	b083      	sub	sp, #12
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80075ba:	bf00      	nop
 80075bc:	370c      	adds	r7, #12
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr
	...

080075c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d109      	bne.n	80075ec <HAL_TIM_PWM_Start+0x24>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	bf14      	ite	ne
 80075e4:	2301      	movne	r3, #1
 80075e6:	2300      	moveq	r3, #0
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	e022      	b.n	8007632 <HAL_TIM_PWM_Start+0x6a>
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	2b04      	cmp	r3, #4
 80075f0:	d109      	bne.n	8007606 <HAL_TIM_PWM_Start+0x3e>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	bf14      	ite	ne
 80075fe:	2301      	movne	r3, #1
 8007600:	2300      	moveq	r3, #0
 8007602:	b2db      	uxtb	r3, r3
 8007604:	e015      	b.n	8007632 <HAL_TIM_PWM_Start+0x6a>
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	2b08      	cmp	r3, #8
 800760a:	d109      	bne.n	8007620 <HAL_TIM_PWM_Start+0x58>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007612:	b2db      	uxtb	r3, r3
 8007614:	2b01      	cmp	r3, #1
 8007616:	bf14      	ite	ne
 8007618:	2301      	movne	r3, #1
 800761a:	2300      	moveq	r3, #0
 800761c:	b2db      	uxtb	r3, r3
 800761e:	e008      	b.n	8007632 <HAL_TIM_PWM_Start+0x6a>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007626:	b2db      	uxtb	r3, r3
 8007628:	2b01      	cmp	r3, #1
 800762a:	bf14      	ite	ne
 800762c:	2301      	movne	r3, #1
 800762e:	2300      	moveq	r3, #0
 8007630:	b2db      	uxtb	r3, r3
 8007632:	2b00      	cmp	r3, #0
 8007634:	d001      	beq.n	800763a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	e07c      	b.n	8007734 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d104      	bne.n	800764a <HAL_TIM_PWM_Start+0x82>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2202      	movs	r2, #2
 8007644:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007648:	e013      	b.n	8007672 <HAL_TIM_PWM_Start+0xaa>
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	2b04      	cmp	r3, #4
 800764e:	d104      	bne.n	800765a <HAL_TIM_PWM_Start+0x92>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2202      	movs	r2, #2
 8007654:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007658:	e00b      	b.n	8007672 <HAL_TIM_PWM_Start+0xaa>
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	2b08      	cmp	r3, #8
 800765e:	d104      	bne.n	800766a <HAL_TIM_PWM_Start+0xa2>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2202      	movs	r2, #2
 8007664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007668:	e003      	b.n	8007672 <HAL_TIM_PWM_Start+0xaa>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2202      	movs	r2, #2
 800766e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	2201      	movs	r2, #1
 8007678:	6839      	ldr	r1, [r7, #0]
 800767a:	4618      	mov	r0, r3
 800767c:	f000 fe04 	bl	8008288 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a2d      	ldr	r2, [pc, #180]	@ (800773c <HAL_TIM_PWM_Start+0x174>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d004      	beq.n	8007694 <HAL_TIM_PWM_Start+0xcc>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a2c      	ldr	r2, [pc, #176]	@ (8007740 <HAL_TIM_PWM_Start+0x178>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d101      	bne.n	8007698 <HAL_TIM_PWM_Start+0xd0>
 8007694:	2301      	movs	r3, #1
 8007696:	e000      	b.n	800769a <HAL_TIM_PWM_Start+0xd2>
 8007698:	2300      	movs	r3, #0
 800769a:	2b00      	cmp	r3, #0
 800769c:	d007      	beq.n	80076ae <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80076ac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a22      	ldr	r2, [pc, #136]	@ (800773c <HAL_TIM_PWM_Start+0x174>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d022      	beq.n	80076fe <HAL_TIM_PWM_Start+0x136>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076c0:	d01d      	beq.n	80076fe <HAL_TIM_PWM_Start+0x136>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a1f      	ldr	r2, [pc, #124]	@ (8007744 <HAL_TIM_PWM_Start+0x17c>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d018      	beq.n	80076fe <HAL_TIM_PWM_Start+0x136>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a1d      	ldr	r2, [pc, #116]	@ (8007748 <HAL_TIM_PWM_Start+0x180>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d013      	beq.n	80076fe <HAL_TIM_PWM_Start+0x136>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a1c      	ldr	r2, [pc, #112]	@ (800774c <HAL_TIM_PWM_Start+0x184>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d00e      	beq.n	80076fe <HAL_TIM_PWM_Start+0x136>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a16      	ldr	r2, [pc, #88]	@ (8007740 <HAL_TIM_PWM_Start+0x178>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d009      	beq.n	80076fe <HAL_TIM_PWM_Start+0x136>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a18      	ldr	r2, [pc, #96]	@ (8007750 <HAL_TIM_PWM_Start+0x188>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d004      	beq.n	80076fe <HAL_TIM_PWM_Start+0x136>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a16      	ldr	r2, [pc, #88]	@ (8007754 <HAL_TIM_PWM_Start+0x18c>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d111      	bne.n	8007722 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	f003 0307 	and.w	r3, r3, #7
 8007708:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2b06      	cmp	r3, #6
 800770e:	d010      	beq.n	8007732 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f042 0201 	orr.w	r2, r2, #1
 800771e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007720:	e007      	b.n	8007732 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f042 0201 	orr.w	r2, r2, #1
 8007730:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007732:	2300      	movs	r3, #0
}
 8007734:	4618      	mov	r0, r3
 8007736:	3710      	adds	r7, #16
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}
 800773c:	40010000 	.word	0x40010000
 8007740:	40010400 	.word	0x40010400
 8007744:	40000400 	.word	0x40000400
 8007748:	40000800 	.word	0x40000800
 800774c:	40000c00 	.word	0x40000c00
 8007750:	40014000 	.word	0x40014000
 8007754:	40001800 	.word	0x40001800

08007758 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	691b      	ldr	r3, [r3, #16]
 800776e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	f003 0302 	and.w	r3, r3, #2
 8007776:	2b00      	cmp	r3, #0
 8007778:	d020      	beq.n	80077bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f003 0302 	and.w	r3, r3, #2
 8007780:	2b00      	cmp	r3, #0
 8007782:	d01b      	beq.n	80077bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f06f 0202 	mvn.w	r2, #2
 800778c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2201      	movs	r2, #1
 8007792:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	699b      	ldr	r3, [r3, #24]
 800779a:	f003 0303 	and.w	r3, r3, #3
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d003      	beq.n	80077aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 fa5b 	bl	8007c5e <HAL_TIM_IC_CaptureCallback>
 80077a8:	e005      	b.n	80077b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 fa4d 	bl	8007c4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 fa5e 	bl	8007c72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	f003 0304 	and.w	r3, r3, #4
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d020      	beq.n	8007808 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f003 0304 	and.w	r3, r3, #4
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d01b      	beq.n	8007808 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f06f 0204 	mvn.w	r2, #4
 80077d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2202      	movs	r2, #2
 80077de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	699b      	ldr	r3, [r3, #24]
 80077e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d003      	beq.n	80077f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 fa35 	bl	8007c5e <HAL_TIM_IC_CaptureCallback>
 80077f4:	e005      	b.n	8007802 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 fa27 	bl	8007c4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 fa38 	bl	8007c72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	f003 0308 	and.w	r3, r3, #8
 800780e:	2b00      	cmp	r3, #0
 8007810:	d020      	beq.n	8007854 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	f003 0308 	and.w	r3, r3, #8
 8007818:	2b00      	cmp	r3, #0
 800781a:	d01b      	beq.n	8007854 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f06f 0208 	mvn.w	r2, #8
 8007824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2204      	movs	r2, #4
 800782a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	69db      	ldr	r3, [r3, #28]
 8007832:	f003 0303 	and.w	r3, r3, #3
 8007836:	2b00      	cmp	r3, #0
 8007838:	d003      	beq.n	8007842 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 fa0f 	bl	8007c5e <HAL_TIM_IC_CaptureCallback>
 8007840:	e005      	b.n	800784e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 fa01 	bl	8007c4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 fa12 	bl	8007c72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	f003 0310 	and.w	r3, r3, #16
 800785a:	2b00      	cmp	r3, #0
 800785c:	d020      	beq.n	80078a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f003 0310 	and.w	r3, r3, #16
 8007864:	2b00      	cmp	r3, #0
 8007866:	d01b      	beq.n	80078a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f06f 0210 	mvn.w	r2, #16
 8007870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2208      	movs	r2, #8
 8007876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	69db      	ldr	r3, [r3, #28]
 800787e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007882:	2b00      	cmp	r3, #0
 8007884:	d003      	beq.n	800788e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 f9e9 	bl	8007c5e <HAL_TIM_IC_CaptureCallback>
 800788c:	e005      	b.n	800789a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 f9db 	bl	8007c4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 f9ec 	bl	8007c72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	f003 0301 	and.w	r3, r3, #1
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d00c      	beq.n	80078c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f003 0301 	and.w	r3, r3, #1
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d007      	beq.n	80078c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f06f 0201 	mvn.w	r2, #1
 80078bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f7fb fdce 	bl	8003460 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d00c      	beq.n	80078e8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d007      	beq.n	80078e8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80078e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 fdce 	bl	8008484 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d00c      	beq.n	800790c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d007      	beq.n	800790c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 f9bd 	bl	8007c86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	f003 0320 	and.w	r3, r3, #32
 8007912:	2b00      	cmp	r3, #0
 8007914:	d00c      	beq.n	8007930 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f003 0320 	and.w	r3, r3, #32
 800791c:	2b00      	cmp	r3, #0
 800791e:	d007      	beq.n	8007930 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f06f 0220 	mvn.w	r2, #32
 8007928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 fda0 	bl	8008470 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007930:	bf00      	nop
 8007932:	3710      	adds	r7, #16
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}

08007938 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b086      	sub	sp, #24
 800793c:	af00      	add	r7, sp, #0
 800793e:	60f8      	str	r0, [r7, #12]
 8007940:	60b9      	str	r1, [r7, #8]
 8007942:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007944:	2300      	movs	r3, #0
 8007946:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800794e:	2b01      	cmp	r3, #1
 8007950:	d101      	bne.n	8007956 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007952:	2302      	movs	r3, #2
 8007954:	e0ae      	b.n	8007ab4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2201      	movs	r2, #1
 800795a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2b0c      	cmp	r3, #12
 8007962:	f200 809f 	bhi.w	8007aa4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007966:	a201      	add	r2, pc, #4	@ (adr r2, 800796c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800796c:	080079a1 	.word	0x080079a1
 8007970:	08007aa5 	.word	0x08007aa5
 8007974:	08007aa5 	.word	0x08007aa5
 8007978:	08007aa5 	.word	0x08007aa5
 800797c:	080079e1 	.word	0x080079e1
 8007980:	08007aa5 	.word	0x08007aa5
 8007984:	08007aa5 	.word	0x08007aa5
 8007988:	08007aa5 	.word	0x08007aa5
 800798c:	08007a23 	.word	0x08007a23
 8007990:	08007aa5 	.word	0x08007aa5
 8007994:	08007aa5 	.word	0x08007aa5
 8007998:	08007aa5 	.word	0x08007aa5
 800799c:	08007a63 	.word	0x08007a63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	68b9      	ldr	r1, [r7, #8]
 80079a6:	4618      	mov	r0, r3
 80079a8:	f000 fa24 	bl	8007df4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	699a      	ldr	r2, [r3, #24]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f042 0208 	orr.w	r2, r2, #8
 80079ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	699a      	ldr	r2, [r3, #24]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f022 0204 	bic.w	r2, r2, #4
 80079ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	6999      	ldr	r1, [r3, #24]
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	691a      	ldr	r2, [r3, #16]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	430a      	orrs	r2, r1
 80079dc:	619a      	str	r2, [r3, #24]
      break;
 80079de:	e064      	b.n	8007aaa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	68b9      	ldr	r1, [r7, #8]
 80079e6:	4618      	mov	r0, r3
 80079e8:	f000 fa74 	bl	8007ed4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	699a      	ldr	r2, [r3, #24]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80079fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	699a      	ldr	r2, [r3, #24]
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	6999      	ldr	r1, [r3, #24]
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	691b      	ldr	r3, [r3, #16]
 8007a16:	021a      	lsls	r2, r3, #8
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	430a      	orrs	r2, r1
 8007a1e:	619a      	str	r2, [r3, #24]
      break;
 8007a20:	e043      	b.n	8007aaa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	68b9      	ldr	r1, [r7, #8]
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f000 fac9 	bl	8007fc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	69da      	ldr	r2, [r3, #28]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f042 0208 	orr.w	r2, r2, #8
 8007a3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	69da      	ldr	r2, [r3, #28]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f022 0204 	bic.w	r2, r2, #4
 8007a4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	69d9      	ldr	r1, [r3, #28]
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	691a      	ldr	r2, [r3, #16]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	430a      	orrs	r2, r1
 8007a5e:	61da      	str	r2, [r3, #28]
      break;
 8007a60:	e023      	b.n	8007aaa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	68b9      	ldr	r1, [r7, #8]
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f000 fb1d 	bl	80080a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	69da      	ldr	r2, [r3, #28]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	69da      	ldr	r2, [r3, #28]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	69d9      	ldr	r1, [r3, #28]
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	691b      	ldr	r3, [r3, #16]
 8007a98:	021a      	lsls	r2, r3, #8
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	430a      	orrs	r2, r1
 8007aa0:	61da      	str	r2, [r3, #28]
      break;
 8007aa2:	e002      	b.n	8007aaa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	75fb      	strb	r3, [r7, #23]
      break;
 8007aa8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2200      	movs	r2, #0
 8007aae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007ab2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3718      	adds	r7, #24
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d101      	bne.n	8007ad8 <HAL_TIM_ConfigClockSource+0x1c>
 8007ad4:	2302      	movs	r3, #2
 8007ad6:	e0b4      	b.n	8007c42 <HAL_TIM_ConfigClockSource+0x186>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2201      	movs	r2, #1
 8007adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2202      	movs	r2, #2
 8007ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007af6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007afe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	68ba      	ldr	r2, [r7, #8]
 8007b06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b10:	d03e      	beq.n	8007b90 <HAL_TIM_ConfigClockSource+0xd4>
 8007b12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b16:	f200 8087 	bhi.w	8007c28 <HAL_TIM_ConfigClockSource+0x16c>
 8007b1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b1e:	f000 8086 	beq.w	8007c2e <HAL_TIM_ConfigClockSource+0x172>
 8007b22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b26:	d87f      	bhi.n	8007c28 <HAL_TIM_ConfigClockSource+0x16c>
 8007b28:	2b70      	cmp	r3, #112	@ 0x70
 8007b2a:	d01a      	beq.n	8007b62 <HAL_TIM_ConfigClockSource+0xa6>
 8007b2c:	2b70      	cmp	r3, #112	@ 0x70
 8007b2e:	d87b      	bhi.n	8007c28 <HAL_TIM_ConfigClockSource+0x16c>
 8007b30:	2b60      	cmp	r3, #96	@ 0x60
 8007b32:	d050      	beq.n	8007bd6 <HAL_TIM_ConfigClockSource+0x11a>
 8007b34:	2b60      	cmp	r3, #96	@ 0x60
 8007b36:	d877      	bhi.n	8007c28 <HAL_TIM_ConfigClockSource+0x16c>
 8007b38:	2b50      	cmp	r3, #80	@ 0x50
 8007b3a:	d03c      	beq.n	8007bb6 <HAL_TIM_ConfigClockSource+0xfa>
 8007b3c:	2b50      	cmp	r3, #80	@ 0x50
 8007b3e:	d873      	bhi.n	8007c28 <HAL_TIM_ConfigClockSource+0x16c>
 8007b40:	2b40      	cmp	r3, #64	@ 0x40
 8007b42:	d058      	beq.n	8007bf6 <HAL_TIM_ConfigClockSource+0x13a>
 8007b44:	2b40      	cmp	r3, #64	@ 0x40
 8007b46:	d86f      	bhi.n	8007c28 <HAL_TIM_ConfigClockSource+0x16c>
 8007b48:	2b30      	cmp	r3, #48	@ 0x30
 8007b4a:	d064      	beq.n	8007c16 <HAL_TIM_ConfigClockSource+0x15a>
 8007b4c:	2b30      	cmp	r3, #48	@ 0x30
 8007b4e:	d86b      	bhi.n	8007c28 <HAL_TIM_ConfigClockSource+0x16c>
 8007b50:	2b20      	cmp	r3, #32
 8007b52:	d060      	beq.n	8007c16 <HAL_TIM_ConfigClockSource+0x15a>
 8007b54:	2b20      	cmp	r3, #32
 8007b56:	d867      	bhi.n	8007c28 <HAL_TIM_ConfigClockSource+0x16c>
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d05c      	beq.n	8007c16 <HAL_TIM_ConfigClockSource+0x15a>
 8007b5c:	2b10      	cmp	r3, #16
 8007b5e:	d05a      	beq.n	8007c16 <HAL_TIM_ConfigClockSource+0x15a>
 8007b60:	e062      	b.n	8007c28 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007b72:	f000 fb69 	bl	8008248 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007b84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	68ba      	ldr	r2, [r7, #8]
 8007b8c:	609a      	str	r2, [r3, #8]
      break;
 8007b8e:	e04f      	b.n	8007c30 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007ba0:	f000 fb52 	bl	8008248 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	689a      	ldr	r2, [r3, #8]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007bb2:	609a      	str	r2, [r3, #8]
      break;
 8007bb4:	e03c      	b.n	8007c30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	f000 fac6 	bl	8008154 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2150      	movs	r1, #80	@ 0x50
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f000 fb1f 	bl	8008212 <TIM_ITRx_SetConfig>
      break;
 8007bd4:	e02c      	b.n	8007c30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007be2:	461a      	mov	r2, r3
 8007be4:	f000 fae5 	bl	80081b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	2160      	movs	r1, #96	@ 0x60
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f000 fb0f 	bl	8008212 <TIM_ITRx_SetConfig>
      break;
 8007bf4:	e01c      	b.n	8007c30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c02:	461a      	mov	r2, r3
 8007c04:	f000 faa6 	bl	8008154 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	2140      	movs	r1, #64	@ 0x40
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f000 faff 	bl	8008212 <TIM_ITRx_SetConfig>
      break;
 8007c14:	e00c      	b.n	8007c30 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4619      	mov	r1, r3
 8007c20:	4610      	mov	r0, r2
 8007c22:	f000 faf6 	bl	8008212 <TIM_ITRx_SetConfig>
      break;
 8007c26:	e003      	b.n	8007c30 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	73fb      	strb	r3, [r7, #15]
      break;
 8007c2c:	e000      	b.n	8007c30 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007c2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2201      	movs	r2, #1
 8007c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3710      	adds	r7, #16
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c4a:	b480      	push	{r7}
 8007c4c:	b083      	sub	sp, #12
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c52:	bf00      	nop
 8007c54:	370c      	adds	r7, #12
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr

08007c5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c5e:	b480      	push	{r7}
 8007c60:	b083      	sub	sp, #12
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c66:	bf00      	nop
 8007c68:	370c      	adds	r7, #12
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr

08007c72 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c72:	b480      	push	{r7}
 8007c74:	b083      	sub	sp, #12
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c7a:	bf00      	nop
 8007c7c:	370c      	adds	r7, #12
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr

08007c86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c86:	b480      	push	{r7}
 8007c88:	b083      	sub	sp, #12
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c8e:	bf00      	nop
 8007c90:	370c      	adds	r7, #12
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr
	...

08007c9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b085      	sub	sp, #20
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	4a46      	ldr	r2, [pc, #280]	@ (8007dc8 <TIM_Base_SetConfig+0x12c>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d013      	beq.n	8007cdc <TIM_Base_SetConfig+0x40>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cba:	d00f      	beq.n	8007cdc <TIM_Base_SetConfig+0x40>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	4a43      	ldr	r2, [pc, #268]	@ (8007dcc <TIM_Base_SetConfig+0x130>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d00b      	beq.n	8007cdc <TIM_Base_SetConfig+0x40>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	4a42      	ldr	r2, [pc, #264]	@ (8007dd0 <TIM_Base_SetConfig+0x134>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d007      	beq.n	8007cdc <TIM_Base_SetConfig+0x40>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	4a41      	ldr	r2, [pc, #260]	@ (8007dd4 <TIM_Base_SetConfig+0x138>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d003      	beq.n	8007cdc <TIM_Base_SetConfig+0x40>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	4a40      	ldr	r2, [pc, #256]	@ (8007dd8 <TIM_Base_SetConfig+0x13c>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d108      	bne.n	8007cee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ce2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	68fa      	ldr	r2, [r7, #12]
 8007cea:	4313      	orrs	r3, r2
 8007cec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4a35      	ldr	r2, [pc, #212]	@ (8007dc8 <TIM_Base_SetConfig+0x12c>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d02b      	beq.n	8007d4e <TIM_Base_SetConfig+0xb2>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cfc:	d027      	beq.n	8007d4e <TIM_Base_SetConfig+0xb2>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	4a32      	ldr	r2, [pc, #200]	@ (8007dcc <TIM_Base_SetConfig+0x130>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d023      	beq.n	8007d4e <TIM_Base_SetConfig+0xb2>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	4a31      	ldr	r2, [pc, #196]	@ (8007dd0 <TIM_Base_SetConfig+0x134>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d01f      	beq.n	8007d4e <TIM_Base_SetConfig+0xb2>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	4a30      	ldr	r2, [pc, #192]	@ (8007dd4 <TIM_Base_SetConfig+0x138>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d01b      	beq.n	8007d4e <TIM_Base_SetConfig+0xb2>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	4a2f      	ldr	r2, [pc, #188]	@ (8007dd8 <TIM_Base_SetConfig+0x13c>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d017      	beq.n	8007d4e <TIM_Base_SetConfig+0xb2>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	4a2e      	ldr	r2, [pc, #184]	@ (8007ddc <TIM_Base_SetConfig+0x140>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d013      	beq.n	8007d4e <TIM_Base_SetConfig+0xb2>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	4a2d      	ldr	r2, [pc, #180]	@ (8007de0 <TIM_Base_SetConfig+0x144>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d00f      	beq.n	8007d4e <TIM_Base_SetConfig+0xb2>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	4a2c      	ldr	r2, [pc, #176]	@ (8007de4 <TIM_Base_SetConfig+0x148>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d00b      	beq.n	8007d4e <TIM_Base_SetConfig+0xb2>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	4a2b      	ldr	r2, [pc, #172]	@ (8007de8 <TIM_Base_SetConfig+0x14c>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d007      	beq.n	8007d4e <TIM_Base_SetConfig+0xb2>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	4a2a      	ldr	r2, [pc, #168]	@ (8007dec <TIM_Base_SetConfig+0x150>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d003      	beq.n	8007d4e <TIM_Base_SetConfig+0xb2>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	4a29      	ldr	r2, [pc, #164]	@ (8007df0 <TIM_Base_SetConfig+0x154>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d108      	bne.n	8007d60 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	68db      	ldr	r3, [r3, #12]
 8007d5a:	68fa      	ldr	r2, [r7, #12]
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	695b      	ldr	r3, [r3, #20]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	68fa      	ldr	r2, [r7, #12]
 8007d72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	689a      	ldr	r2, [r3, #8]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	4a10      	ldr	r2, [pc, #64]	@ (8007dc8 <TIM_Base_SetConfig+0x12c>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d003      	beq.n	8007d94 <TIM_Base_SetConfig+0xf8>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	4a12      	ldr	r2, [pc, #72]	@ (8007dd8 <TIM_Base_SetConfig+0x13c>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d103      	bne.n	8007d9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	691a      	ldr	r2, [r3, #16]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	691b      	ldr	r3, [r3, #16]
 8007da6:	f003 0301 	and.w	r3, r3, #1
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d105      	bne.n	8007dba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	691b      	ldr	r3, [r3, #16]
 8007db2:	f023 0201 	bic.w	r2, r3, #1
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	611a      	str	r2, [r3, #16]
  }
}
 8007dba:	bf00      	nop
 8007dbc:	3714      	adds	r7, #20
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr
 8007dc6:	bf00      	nop
 8007dc8:	40010000 	.word	0x40010000
 8007dcc:	40000400 	.word	0x40000400
 8007dd0:	40000800 	.word	0x40000800
 8007dd4:	40000c00 	.word	0x40000c00
 8007dd8:	40010400 	.word	0x40010400
 8007ddc:	40014000 	.word	0x40014000
 8007de0:	40014400 	.word	0x40014400
 8007de4:	40014800 	.word	0x40014800
 8007de8:	40001800 	.word	0x40001800
 8007dec:	40001c00 	.word	0x40001c00
 8007df0:	40002000 	.word	0x40002000

08007df4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b087      	sub	sp, #28
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6a1b      	ldr	r3, [r3, #32]
 8007e02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6a1b      	ldr	r3, [r3, #32]
 8007e08:	f023 0201 	bic.w	r2, r3, #1
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	699b      	ldr	r3, [r3, #24]
 8007e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f023 0303 	bic.w	r3, r3, #3
 8007e2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68fa      	ldr	r2, [r7, #12]
 8007e32:	4313      	orrs	r3, r2
 8007e34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	f023 0302 	bic.w	r3, r3, #2
 8007e3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	697a      	ldr	r2, [r7, #20]
 8007e44:	4313      	orrs	r3, r2
 8007e46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	4a20      	ldr	r2, [pc, #128]	@ (8007ecc <TIM_OC1_SetConfig+0xd8>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d003      	beq.n	8007e58 <TIM_OC1_SetConfig+0x64>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	4a1f      	ldr	r2, [pc, #124]	@ (8007ed0 <TIM_OC1_SetConfig+0xdc>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d10c      	bne.n	8007e72 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	f023 0308 	bic.w	r3, r3, #8
 8007e5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	68db      	ldr	r3, [r3, #12]
 8007e64:	697a      	ldr	r2, [r7, #20]
 8007e66:	4313      	orrs	r3, r2
 8007e68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	f023 0304 	bic.w	r3, r3, #4
 8007e70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	4a15      	ldr	r2, [pc, #84]	@ (8007ecc <TIM_OC1_SetConfig+0xd8>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d003      	beq.n	8007e82 <TIM_OC1_SetConfig+0x8e>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a14      	ldr	r2, [pc, #80]	@ (8007ed0 <TIM_OC1_SetConfig+0xdc>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d111      	bne.n	8007ea6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007e90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	695b      	ldr	r3, [r3, #20]
 8007e96:	693a      	ldr	r2, [r7, #16]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	699b      	ldr	r3, [r3, #24]
 8007ea0:	693a      	ldr	r2, [r7, #16]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	693a      	ldr	r2, [r7, #16]
 8007eaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	68fa      	ldr	r2, [r7, #12]
 8007eb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	685a      	ldr	r2, [r3, #4]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	697a      	ldr	r2, [r7, #20]
 8007ebe:	621a      	str	r2, [r3, #32]
}
 8007ec0:	bf00      	nop
 8007ec2:	371c      	adds	r7, #28
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr
 8007ecc:	40010000 	.word	0x40010000
 8007ed0:	40010400 	.word	0x40010400

08007ed4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b087      	sub	sp, #28
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a1b      	ldr	r3, [r3, #32]
 8007ee2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6a1b      	ldr	r3, [r3, #32]
 8007ee8:	f023 0210 	bic.w	r2, r3, #16
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	699b      	ldr	r3, [r3, #24]
 8007efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	021b      	lsls	r3, r3, #8
 8007f12:	68fa      	ldr	r2, [r7, #12]
 8007f14:	4313      	orrs	r3, r2
 8007f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	f023 0320 	bic.w	r3, r3, #32
 8007f1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	011b      	lsls	r3, r3, #4
 8007f26:	697a      	ldr	r2, [r7, #20]
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4a22      	ldr	r2, [pc, #136]	@ (8007fb8 <TIM_OC2_SetConfig+0xe4>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d003      	beq.n	8007f3c <TIM_OC2_SetConfig+0x68>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	4a21      	ldr	r2, [pc, #132]	@ (8007fbc <TIM_OC2_SetConfig+0xe8>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d10d      	bne.n	8007f58 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	011b      	lsls	r3, r3, #4
 8007f4a:	697a      	ldr	r2, [r7, #20]
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f56:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	4a17      	ldr	r2, [pc, #92]	@ (8007fb8 <TIM_OC2_SetConfig+0xe4>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d003      	beq.n	8007f68 <TIM_OC2_SetConfig+0x94>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	4a16      	ldr	r2, [pc, #88]	@ (8007fbc <TIM_OC2_SetConfig+0xe8>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d113      	bne.n	8007f90 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007f6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007f76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	695b      	ldr	r3, [r3, #20]
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	693a      	ldr	r2, [r7, #16]
 8007f80:	4313      	orrs	r3, r2
 8007f82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	699b      	ldr	r3, [r3, #24]
 8007f88:	009b      	lsls	r3, r3, #2
 8007f8a:	693a      	ldr	r2, [r7, #16]
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	693a      	ldr	r2, [r7, #16]
 8007f94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	68fa      	ldr	r2, [r7, #12]
 8007f9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	685a      	ldr	r2, [r3, #4]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	697a      	ldr	r2, [r7, #20]
 8007fa8:	621a      	str	r2, [r3, #32]
}
 8007faa:	bf00      	nop
 8007fac:	371c      	adds	r7, #28
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr
 8007fb6:	bf00      	nop
 8007fb8:	40010000 	.word	0x40010000
 8007fbc:	40010400 	.word	0x40010400

08007fc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b087      	sub	sp, #28
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6a1b      	ldr	r3, [r3, #32]
 8007fce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6a1b      	ldr	r3, [r3, #32]
 8007fd4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	69db      	ldr	r3, [r3, #28]
 8007fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f023 0303 	bic.w	r3, r3, #3
 8007ff6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	68fa      	ldr	r2, [r7, #12]
 8007ffe:	4313      	orrs	r3, r2
 8008000:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008008:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	021b      	lsls	r3, r3, #8
 8008010:	697a      	ldr	r2, [r7, #20]
 8008012:	4313      	orrs	r3, r2
 8008014:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4a21      	ldr	r2, [pc, #132]	@ (80080a0 <TIM_OC3_SetConfig+0xe0>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d003      	beq.n	8008026 <TIM_OC3_SetConfig+0x66>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	4a20      	ldr	r2, [pc, #128]	@ (80080a4 <TIM_OC3_SetConfig+0xe4>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d10d      	bne.n	8008042 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800802c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	68db      	ldr	r3, [r3, #12]
 8008032:	021b      	lsls	r3, r3, #8
 8008034:	697a      	ldr	r2, [r7, #20]
 8008036:	4313      	orrs	r3, r2
 8008038:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008040:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	4a16      	ldr	r2, [pc, #88]	@ (80080a0 <TIM_OC3_SetConfig+0xe0>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d003      	beq.n	8008052 <TIM_OC3_SetConfig+0x92>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	4a15      	ldr	r2, [pc, #84]	@ (80080a4 <TIM_OC3_SetConfig+0xe4>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d113      	bne.n	800807a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008058:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008060:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	695b      	ldr	r3, [r3, #20]
 8008066:	011b      	lsls	r3, r3, #4
 8008068:	693a      	ldr	r2, [r7, #16]
 800806a:	4313      	orrs	r3, r2
 800806c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	699b      	ldr	r3, [r3, #24]
 8008072:	011b      	lsls	r3, r3, #4
 8008074:	693a      	ldr	r2, [r7, #16]
 8008076:	4313      	orrs	r3, r2
 8008078:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	693a      	ldr	r2, [r7, #16]
 800807e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	68fa      	ldr	r2, [r7, #12]
 8008084:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	685a      	ldr	r2, [r3, #4]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	697a      	ldr	r2, [r7, #20]
 8008092:	621a      	str	r2, [r3, #32]
}
 8008094:	bf00      	nop
 8008096:	371c      	adds	r7, #28
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr
 80080a0:	40010000 	.word	0x40010000
 80080a4:	40010400 	.word	0x40010400

080080a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b087      	sub	sp, #28
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6a1b      	ldr	r3, [r3, #32]
 80080b6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6a1b      	ldr	r3, [r3, #32]
 80080bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	69db      	ldr	r3, [r3, #28]
 80080ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80080de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	021b      	lsls	r3, r3, #8
 80080e6:	68fa      	ldr	r2, [r7, #12]
 80080e8:	4313      	orrs	r3, r2
 80080ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80080f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	031b      	lsls	r3, r3, #12
 80080fa:	693a      	ldr	r2, [r7, #16]
 80080fc:	4313      	orrs	r3, r2
 80080fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	4a12      	ldr	r2, [pc, #72]	@ (800814c <TIM_OC4_SetConfig+0xa4>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d003      	beq.n	8008110 <TIM_OC4_SetConfig+0x68>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	4a11      	ldr	r2, [pc, #68]	@ (8008150 <TIM_OC4_SetConfig+0xa8>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d109      	bne.n	8008124 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008116:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	695b      	ldr	r3, [r3, #20]
 800811c:	019b      	lsls	r3, r3, #6
 800811e:	697a      	ldr	r2, [r7, #20]
 8008120:	4313      	orrs	r3, r2
 8008122:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	697a      	ldr	r2, [r7, #20]
 8008128:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	68fa      	ldr	r2, [r7, #12]
 800812e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	685a      	ldr	r2, [r3, #4]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	693a      	ldr	r2, [r7, #16]
 800813c:	621a      	str	r2, [r3, #32]
}
 800813e:	bf00      	nop
 8008140:	371c      	adds	r7, #28
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr
 800814a:	bf00      	nop
 800814c:	40010000 	.word	0x40010000
 8008150:	40010400 	.word	0x40010400

08008154 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008154:	b480      	push	{r7}
 8008156:	b087      	sub	sp, #28
 8008158:	af00      	add	r7, sp, #0
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	60b9      	str	r1, [r7, #8]
 800815e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	6a1b      	ldr	r3, [r3, #32]
 8008164:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	6a1b      	ldr	r3, [r3, #32]
 800816a:	f023 0201 	bic.w	r2, r3, #1
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	699b      	ldr	r3, [r3, #24]
 8008176:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800817e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	011b      	lsls	r3, r3, #4
 8008184:	693a      	ldr	r2, [r7, #16]
 8008186:	4313      	orrs	r3, r2
 8008188:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	f023 030a 	bic.w	r3, r3, #10
 8008190:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008192:	697a      	ldr	r2, [r7, #20]
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	4313      	orrs	r3, r2
 8008198:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	693a      	ldr	r2, [r7, #16]
 800819e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	697a      	ldr	r2, [r7, #20]
 80081a4:	621a      	str	r2, [r3, #32]
}
 80081a6:	bf00      	nop
 80081a8:	371c      	adds	r7, #28
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr

080081b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081b2:	b480      	push	{r7}
 80081b4:	b087      	sub	sp, #28
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	60f8      	str	r0, [r7, #12]
 80081ba:	60b9      	str	r1, [r7, #8]
 80081bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	6a1b      	ldr	r3, [r3, #32]
 80081c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	6a1b      	ldr	r3, [r3, #32]
 80081c8:	f023 0210 	bic.w	r2, r3, #16
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	699b      	ldr	r3, [r3, #24]
 80081d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80081dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	031b      	lsls	r3, r3, #12
 80081e2:	693a      	ldr	r2, [r7, #16]
 80081e4:	4313      	orrs	r3, r2
 80081e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80081ee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	011b      	lsls	r3, r3, #4
 80081f4:	697a      	ldr	r2, [r7, #20]
 80081f6:	4313      	orrs	r3, r2
 80081f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	693a      	ldr	r2, [r7, #16]
 80081fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	697a      	ldr	r2, [r7, #20]
 8008204:	621a      	str	r2, [r3, #32]
}
 8008206:	bf00      	nop
 8008208:	371c      	adds	r7, #28
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr

08008212 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008212:	b480      	push	{r7}
 8008214:	b085      	sub	sp, #20
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
 800821a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008228:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800822a:	683a      	ldr	r2, [r7, #0]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	4313      	orrs	r3, r2
 8008230:	f043 0307 	orr.w	r3, r3, #7
 8008234:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	68fa      	ldr	r2, [r7, #12]
 800823a:	609a      	str	r2, [r3, #8]
}
 800823c:	bf00      	nop
 800823e:	3714      	adds	r7, #20
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr

08008248 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008248:	b480      	push	{r7}
 800824a:	b087      	sub	sp, #28
 800824c:	af00      	add	r7, sp, #0
 800824e:	60f8      	str	r0, [r7, #12]
 8008250:	60b9      	str	r1, [r7, #8]
 8008252:	607a      	str	r2, [r7, #4]
 8008254:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008262:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	021a      	lsls	r2, r3, #8
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	431a      	orrs	r2, r3
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	4313      	orrs	r3, r2
 8008270:	697a      	ldr	r2, [r7, #20]
 8008272:	4313      	orrs	r3, r2
 8008274:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	697a      	ldr	r2, [r7, #20]
 800827a:	609a      	str	r2, [r3, #8]
}
 800827c:	bf00      	nop
 800827e:	371c      	adds	r7, #28
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr

08008288 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008288:	b480      	push	{r7}
 800828a:	b087      	sub	sp, #28
 800828c:	af00      	add	r7, sp, #0
 800828e:	60f8      	str	r0, [r7, #12]
 8008290:	60b9      	str	r1, [r7, #8]
 8008292:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	f003 031f 	and.w	r3, r3, #31
 800829a:	2201      	movs	r2, #1
 800829c:	fa02 f303 	lsl.w	r3, r2, r3
 80082a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	6a1a      	ldr	r2, [r3, #32]
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	43db      	mvns	r3, r3
 80082aa:	401a      	ands	r2, r3
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	6a1a      	ldr	r2, [r3, #32]
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	f003 031f 	and.w	r3, r3, #31
 80082ba:	6879      	ldr	r1, [r7, #4]
 80082bc:	fa01 f303 	lsl.w	r3, r1, r3
 80082c0:	431a      	orrs	r2, r3
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	621a      	str	r2, [r3, #32]
}
 80082c6:	bf00      	nop
 80082c8:	371c      	adds	r7, #28
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr
	...

080082d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b085      	sub	sp, #20
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d101      	bne.n	80082ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80082e8:	2302      	movs	r3, #2
 80082ea:	e05a      	b.n	80083a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2201      	movs	r2, #1
 80082f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2202      	movs	r2, #2
 80082f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008312:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	68fa      	ldr	r2, [r7, #12]
 800831a:	4313      	orrs	r3, r2
 800831c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	68fa      	ldr	r2, [r7, #12]
 8008324:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a21      	ldr	r2, [pc, #132]	@ (80083b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d022      	beq.n	8008376 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008338:	d01d      	beq.n	8008376 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a1d      	ldr	r2, [pc, #116]	@ (80083b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d018      	beq.n	8008376 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a1b      	ldr	r2, [pc, #108]	@ (80083b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d013      	beq.n	8008376 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a1a      	ldr	r2, [pc, #104]	@ (80083bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d00e      	beq.n	8008376 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a18      	ldr	r2, [pc, #96]	@ (80083c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d009      	beq.n	8008376 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a17      	ldr	r2, [pc, #92]	@ (80083c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d004      	beq.n	8008376 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a15      	ldr	r2, [pc, #84]	@ (80083c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d10c      	bne.n	8008390 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800837c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	68ba      	ldr	r2, [r7, #8]
 8008384:	4313      	orrs	r3, r2
 8008386:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	68ba      	ldr	r2, [r7, #8]
 800838e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3714      	adds	r7, #20
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop
 80083b0:	40010000 	.word	0x40010000
 80083b4:	40000400 	.word	0x40000400
 80083b8:	40000800 	.word	0x40000800
 80083bc:	40000c00 	.word	0x40000c00
 80083c0:	40010400 	.word	0x40010400
 80083c4:	40014000 	.word	0x40014000
 80083c8:	40001800 	.word	0x40001800

080083cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b085      	sub	sp, #20
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80083d6:	2300      	movs	r3, #0
 80083d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d101      	bne.n	80083e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80083e4:	2302      	movs	r3, #2
 80083e6:	e03d      	b.n	8008464 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2201      	movs	r2, #1
 80083ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	68db      	ldr	r3, [r3, #12]
 80083fa:	4313      	orrs	r3, r2
 80083fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	4313      	orrs	r3, r2
 800840a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	4313      	orrs	r3, r2
 8008418:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4313      	orrs	r3, r2
 8008426:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	691b      	ldr	r3, [r3, #16]
 8008432:	4313      	orrs	r3, r2
 8008434:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	695b      	ldr	r3, [r3, #20]
 8008440:	4313      	orrs	r3, r2
 8008442:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	69db      	ldr	r3, [r3, #28]
 800844e:	4313      	orrs	r3, r2
 8008450:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	68fa      	ldr	r2, [r7, #12]
 8008458:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2200      	movs	r2, #0
 800845e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008462:	2300      	movs	r3, #0
}
 8008464:	4618      	mov	r0, r3
 8008466:	3714      	adds	r7, #20
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr

08008470 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008470:	b480      	push	{r7}
 8008472:	b083      	sub	sp, #12
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008478:	bf00      	nop
 800847a:	370c      	adds	r7, #12
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008484:	b480      	push	{r7}
 8008486:	b083      	sub	sp, #12
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800848c:	bf00      	nop
 800848e:	370c      	adds	r7, #12
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr

08008498 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b082      	sub	sp, #8
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d101      	bne.n	80084aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80084a6:	2301      	movs	r3, #1
 80084a8:	e042      	b.n	8008530 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d106      	bne.n	80084c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2200      	movs	r2, #0
 80084ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f7fb fa0c 	bl	80038dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2224      	movs	r2, #36	@ 0x24
 80084c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	68da      	ldr	r2, [r3, #12]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80084da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 fdc1 	bl	8009064 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	691a      	ldr	r2, [r3, #16]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80084f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	695a      	ldr	r2, [r3, #20]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008500:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	68da      	ldr	r2, [r3, #12]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008510:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2220      	movs	r2, #32
 800851c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2220      	movs	r2, #32
 8008524:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2200      	movs	r2, #0
 800852c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800852e:	2300      	movs	r3, #0
}
 8008530:	4618      	mov	r0, r3
 8008532:	3708      	adds	r7, #8
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b08c      	sub	sp, #48	@ 0x30
 800853c:	af00      	add	r7, sp, #0
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	60b9      	str	r1, [r7, #8]
 8008542:	4613      	mov	r3, r2
 8008544:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800854c:	b2db      	uxtb	r3, r3
 800854e:	2b20      	cmp	r3, #32
 8008550:	d156      	bne.n	8008600 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d002      	beq.n	800855e <HAL_UART_Transmit_DMA+0x26>
 8008558:	88fb      	ldrh	r3, [r7, #6]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d101      	bne.n	8008562 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800855e:	2301      	movs	r3, #1
 8008560:	e04f      	b.n	8008602 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8008562:	68ba      	ldr	r2, [r7, #8]
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	88fa      	ldrh	r2, [r7, #6]
 800856c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	88fa      	ldrh	r2, [r7, #6]
 8008572:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2200      	movs	r2, #0
 8008578:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2221      	movs	r2, #33	@ 0x21
 800857e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008586:	4a21      	ldr	r2, [pc, #132]	@ (800860c <HAL_UART_Transmit_DMA+0xd4>)
 8008588:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800858e:	4a20      	ldr	r2, [pc, #128]	@ (8008610 <HAL_UART_Transmit_DMA+0xd8>)
 8008590:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008596:	4a1f      	ldr	r2, [pc, #124]	@ (8008614 <HAL_UART_Transmit_DMA+0xdc>)
 8008598:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800859e:	2200      	movs	r2, #0
 80085a0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80085a2:	f107 0308 	add.w	r3, r7, #8
 80085a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80085ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085ae:	6819      	ldr	r1, [r3, #0]
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	3304      	adds	r3, #4
 80085b6:	461a      	mov	r2, r3
 80085b8:	88fb      	ldrh	r3, [r7, #6]
 80085ba:	f7fc fde5 	bl	8005188 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80085c6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	3314      	adds	r3, #20
 80085ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d0:	69bb      	ldr	r3, [r7, #24]
 80085d2:	e853 3f00 	ldrex	r3, [r3]
 80085d6:	617b      	str	r3, [r7, #20]
   return(result);
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	3314      	adds	r3, #20
 80085e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80085e8:	627a      	str	r2, [r7, #36]	@ 0x24
 80085ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ec:	6a39      	ldr	r1, [r7, #32]
 80085ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085f0:	e841 2300 	strex	r3, r2, [r1]
 80085f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80085f6:	69fb      	ldr	r3, [r7, #28]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d1e5      	bne.n	80085c8 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80085fc:	2300      	movs	r3, #0
 80085fe:	e000      	b.n	8008602 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8008600:	2302      	movs	r3, #2
  }
}
 8008602:	4618      	mov	r0, r3
 8008604:	3730      	adds	r7, #48	@ 0x30
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
 800860a:	bf00      	nop
 800860c:	08008b91 	.word	0x08008b91
 8008610:	08008c2b 	.word	0x08008c2b
 8008614:	08008c47 	.word	0x08008c47

08008618 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b0ba      	sub	sp, #232	@ 0xe8
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	68db      	ldr	r3, [r3, #12]
 8008630:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	695b      	ldr	r3, [r3, #20]
 800863a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800863e:	2300      	movs	r3, #0
 8008640:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008644:	2300      	movs	r3, #0
 8008646:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800864a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800864e:	f003 030f 	and.w	r3, r3, #15
 8008652:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008656:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800865a:	2b00      	cmp	r3, #0
 800865c:	d10f      	bne.n	800867e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800865e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008662:	f003 0320 	and.w	r3, r3, #32
 8008666:	2b00      	cmp	r3, #0
 8008668:	d009      	beq.n	800867e <HAL_UART_IRQHandler+0x66>
 800866a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800866e:	f003 0320 	and.w	r3, r3, #32
 8008672:	2b00      	cmp	r3, #0
 8008674:	d003      	beq.n	800867e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 fc36 	bl	8008ee8 <UART_Receive_IT>
      return;
 800867c:	e25b      	b.n	8008b36 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800867e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008682:	2b00      	cmp	r3, #0
 8008684:	f000 80de 	beq.w	8008844 <HAL_UART_IRQHandler+0x22c>
 8008688:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800868c:	f003 0301 	and.w	r3, r3, #1
 8008690:	2b00      	cmp	r3, #0
 8008692:	d106      	bne.n	80086a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008698:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800869c:	2b00      	cmp	r3, #0
 800869e:	f000 80d1 	beq.w	8008844 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80086a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086a6:	f003 0301 	and.w	r3, r3, #1
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d00b      	beq.n	80086c6 <HAL_UART_IRQHandler+0xae>
 80086ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d005      	beq.n	80086c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086be:	f043 0201 	orr.w	r2, r3, #1
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80086c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086ca:	f003 0304 	and.w	r3, r3, #4
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d00b      	beq.n	80086ea <HAL_UART_IRQHandler+0xd2>
 80086d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086d6:	f003 0301 	and.w	r3, r3, #1
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d005      	beq.n	80086ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086e2:	f043 0202 	orr.w	r2, r3, #2
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80086ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086ee:	f003 0302 	and.w	r3, r3, #2
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d00b      	beq.n	800870e <HAL_UART_IRQHandler+0xf6>
 80086f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80086fa:	f003 0301 	and.w	r3, r3, #1
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d005      	beq.n	800870e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008706:	f043 0204 	orr.w	r2, r3, #4
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800870e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008712:	f003 0308 	and.w	r3, r3, #8
 8008716:	2b00      	cmp	r3, #0
 8008718:	d011      	beq.n	800873e <HAL_UART_IRQHandler+0x126>
 800871a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800871e:	f003 0320 	and.w	r3, r3, #32
 8008722:	2b00      	cmp	r3, #0
 8008724:	d105      	bne.n	8008732 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008726:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800872a:	f003 0301 	and.w	r3, r3, #1
 800872e:	2b00      	cmp	r3, #0
 8008730:	d005      	beq.n	800873e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008736:	f043 0208 	orr.w	r2, r3, #8
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008742:	2b00      	cmp	r3, #0
 8008744:	f000 81f2 	beq.w	8008b2c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800874c:	f003 0320 	and.w	r3, r3, #32
 8008750:	2b00      	cmp	r3, #0
 8008752:	d008      	beq.n	8008766 <HAL_UART_IRQHandler+0x14e>
 8008754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008758:	f003 0320 	and.w	r3, r3, #32
 800875c:	2b00      	cmp	r3, #0
 800875e:	d002      	beq.n	8008766 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f000 fbc1 	bl	8008ee8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	695b      	ldr	r3, [r3, #20]
 800876c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008770:	2b40      	cmp	r3, #64	@ 0x40
 8008772:	bf0c      	ite	eq
 8008774:	2301      	moveq	r3, #1
 8008776:	2300      	movne	r3, #0
 8008778:	b2db      	uxtb	r3, r3
 800877a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008782:	f003 0308 	and.w	r3, r3, #8
 8008786:	2b00      	cmp	r3, #0
 8008788:	d103      	bne.n	8008792 <HAL_UART_IRQHandler+0x17a>
 800878a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800878e:	2b00      	cmp	r3, #0
 8008790:	d04f      	beq.n	8008832 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 fac9 	bl	8008d2a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	695b      	ldr	r3, [r3, #20]
 800879e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087a2:	2b40      	cmp	r3, #64	@ 0x40
 80087a4:	d141      	bne.n	800882a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	3314      	adds	r3, #20
 80087ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80087b4:	e853 3f00 	ldrex	r3, [r3]
 80087b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80087bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80087c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80087c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	3314      	adds	r3, #20
 80087ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80087d2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80087d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80087de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80087e2:	e841 2300 	strex	r3, r2, [r1]
 80087e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80087ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d1d9      	bne.n	80087a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d013      	beq.n	8008822 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087fe:	4a7e      	ldr	r2, [pc, #504]	@ (80089f8 <HAL_UART_IRQHandler+0x3e0>)
 8008800:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008806:	4618      	mov	r0, r3
 8008808:	f7fc fd86 	bl	8005318 <HAL_DMA_Abort_IT>
 800880c:	4603      	mov	r3, r0
 800880e:	2b00      	cmp	r3, #0
 8008810:	d016      	beq.n	8008840 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008816:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800881c:	4610      	mov	r0, r2
 800881e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008820:	e00e      	b.n	8008840 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 f99e 	bl	8008b64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008828:	e00a      	b.n	8008840 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 f99a 	bl	8008b64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008830:	e006      	b.n	8008840 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 f996 	bl	8008b64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2200      	movs	r2, #0
 800883c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800883e:	e175      	b.n	8008b2c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008840:	bf00      	nop
    return;
 8008842:	e173      	b.n	8008b2c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008848:	2b01      	cmp	r3, #1
 800884a:	f040 814f 	bne.w	8008aec <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800884e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008852:	f003 0310 	and.w	r3, r3, #16
 8008856:	2b00      	cmp	r3, #0
 8008858:	f000 8148 	beq.w	8008aec <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800885c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008860:	f003 0310 	and.w	r3, r3, #16
 8008864:	2b00      	cmp	r3, #0
 8008866:	f000 8141 	beq.w	8008aec <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800886a:	2300      	movs	r3, #0
 800886c:	60bb      	str	r3, [r7, #8]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	60bb      	str	r3, [r7, #8]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	60bb      	str	r3, [r7, #8]
 800887e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	695b      	ldr	r3, [r3, #20]
 8008886:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800888a:	2b40      	cmp	r3, #64	@ 0x40
 800888c:	f040 80b6 	bne.w	80089fc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800889c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	f000 8145 	beq.w	8008b30 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80088aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80088ae:	429a      	cmp	r2, r3
 80088b0:	f080 813e 	bcs.w	8008b30 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80088ba:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088c0:	69db      	ldr	r3, [r3, #28]
 80088c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088c6:	f000 8088 	beq.w	80089da <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	330c      	adds	r3, #12
 80088d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80088d8:	e853 3f00 	ldrex	r3, [r3]
 80088dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80088e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80088e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80088e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	330c      	adds	r3, #12
 80088f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80088f6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80088fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008902:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008906:	e841 2300 	strex	r3, r2, [r1]
 800890a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800890e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008912:	2b00      	cmp	r3, #0
 8008914:	d1d9      	bne.n	80088ca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	3314      	adds	r3, #20
 800891c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800891e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008920:	e853 3f00 	ldrex	r3, [r3]
 8008924:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008926:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008928:	f023 0301 	bic.w	r3, r3, #1
 800892c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	3314      	adds	r3, #20
 8008936:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800893a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800893e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008940:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008942:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008946:	e841 2300 	strex	r3, r2, [r1]
 800894a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800894c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800894e:	2b00      	cmp	r3, #0
 8008950:	d1e1      	bne.n	8008916 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	3314      	adds	r3, #20
 8008958:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800895a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800895c:	e853 3f00 	ldrex	r3, [r3]
 8008960:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008962:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008964:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008968:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	3314      	adds	r3, #20
 8008972:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008976:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008978:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800897a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800897c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800897e:	e841 2300 	strex	r3, r2, [r1]
 8008982:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008984:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008986:	2b00      	cmp	r3, #0
 8008988:	d1e3      	bne.n	8008952 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2220      	movs	r2, #32
 800898e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2200      	movs	r2, #0
 8008996:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	330c      	adds	r3, #12
 800899e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089a2:	e853 3f00 	ldrex	r3, [r3]
 80089a6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80089a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80089aa:	f023 0310 	bic.w	r3, r3, #16
 80089ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	330c      	adds	r3, #12
 80089b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80089bc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80089be:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80089c2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80089c4:	e841 2300 	strex	r3, r2, [r1]
 80089c8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80089ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d1e3      	bne.n	8008998 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089d4:	4618      	mov	r0, r3
 80089d6:	f7fc fc2f 	bl	8005238 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2202      	movs	r2, #2
 80089de:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	1ad3      	subs	r3, r2, r3
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	4619      	mov	r1, r3
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 f8c1 	bl	8008b78 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80089f6:	e09b      	b.n	8008b30 <HAL_UART_IRQHandler+0x518>
 80089f8:	08008df1 	.word	0x08008df1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	1ad3      	subs	r3, r2, r3
 8008a08:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	f000 808e 	beq.w	8008b34 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008a18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	f000 8089 	beq.w	8008b34 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	330c      	adds	r3, #12
 8008a28:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a2c:	e853 3f00 	ldrex	r3, [r3]
 8008a30:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a38:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	330c      	adds	r3, #12
 8008a42:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008a46:	647a      	str	r2, [r7, #68]	@ 0x44
 8008a48:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008a4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a4e:	e841 2300 	strex	r3, r2, [r1]
 8008a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008a54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d1e3      	bne.n	8008a22 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	3314      	adds	r3, #20
 8008a60:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a64:	e853 3f00 	ldrex	r3, [r3]
 8008a68:	623b      	str	r3, [r7, #32]
   return(result);
 8008a6a:	6a3b      	ldr	r3, [r7, #32]
 8008a6c:	f023 0301 	bic.w	r3, r3, #1
 8008a70:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	3314      	adds	r3, #20
 8008a7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008a7e:	633a      	str	r2, [r7, #48]	@ 0x30
 8008a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a86:	e841 2300 	strex	r3, r2, [r1]
 8008a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d1e3      	bne.n	8008a5a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2220      	movs	r2, #32
 8008a96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	330c      	adds	r3, #12
 8008aa6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	e853 3f00 	ldrex	r3, [r3]
 8008aae:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f023 0310 	bic.w	r3, r3, #16
 8008ab6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	330c      	adds	r3, #12
 8008ac0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008ac4:	61fa      	str	r2, [r7, #28]
 8008ac6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac8:	69b9      	ldr	r1, [r7, #24]
 8008aca:	69fa      	ldr	r2, [r7, #28]
 8008acc:	e841 2300 	strex	r3, r2, [r1]
 8008ad0:	617b      	str	r3, [r7, #20]
   return(result);
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d1e3      	bne.n	8008aa0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2202      	movs	r2, #2
 8008adc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008ade:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 f847 	bl	8008b78 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008aea:	e023      	b.n	8008b34 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008af0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d009      	beq.n	8008b0c <HAL_UART_IRQHandler+0x4f4>
 8008af8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008afc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d003      	beq.n	8008b0c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 f987 	bl	8008e18 <UART_Transmit_IT>
    return;
 8008b0a:	e014      	b.n	8008b36 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d00e      	beq.n	8008b36 <HAL_UART_IRQHandler+0x51e>
 8008b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d008      	beq.n	8008b36 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f000 f9c7 	bl	8008eb8 <UART_EndTransmit_IT>
    return;
 8008b2a:	e004      	b.n	8008b36 <HAL_UART_IRQHandler+0x51e>
    return;
 8008b2c:	bf00      	nop
 8008b2e:	e002      	b.n	8008b36 <HAL_UART_IRQHandler+0x51e>
      return;
 8008b30:	bf00      	nop
 8008b32:	e000      	b.n	8008b36 <HAL_UART_IRQHandler+0x51e>
      return;
 8008b34:	bf00      	nop
  }
}
 8008b36:	37e8      	adds	r7, #232	@ 0xe8
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b083      	sub	sp, #12
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008b44:	bf00      	nop
 8008b46:	370c      	adds	r7, #12
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b083      	sub	sp, #12
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008b58:	bf00      	nop
 8008b5a:	370c      	adds	r7, #12
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr

08008b64 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b083      	sub	sp, #12
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008b6c:	bf00      	nop
 8008b6e:	370c      	adds	r7, #12
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr

08008b78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b083      	sub	sp, #12
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	460b      	mov	r3, r1
 8008b82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008b84:	bf00      	nop
 8008b86:	370c      	adds	r7, #12
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr

08008b90 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b090      	sub	sp, #64	@ 0x40
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d137      	bne.n	8008c1c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008bac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bae:	2200      	movs	r2, #0
 8008bb0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008bb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	3314      	adds	r3, #20
 8008bb8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bbc:	e853 3f00 	ldrex	r3, [r3]
 8008bc0:	623b      	str	r3, [r7, #32]
   return(result);
 8008bc2:	6a3b      	ldr	r3, [r7, #32]
 8008bc4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008bc8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008bca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	3314      	adds	r3, #20
 8008bd0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008bd2:	633a      	str	r2, [r7, #48]	@ 0x30
 8008bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008bd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bda:	e841 2300 	strex	r3, r2, [r1]
 8008bde:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d1e5      	bne.n	8008bb2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008be6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	330c      	adds	r3, #12
 8008bec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	e853 3f00 	ldrex	r3, [r3]
 8008bf4:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008bfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	330c      	adds	r3, #12
 8008c04:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008c06:	61fa      	str	r2, [r7, #28]
 8008c08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c0a:	69b9      	ldr	r1, [r7, #24]
 8008c0c:	69fa      	ldr	r2, [r7, #28]
 8008c0e:	e841 2300 	strex	r3, r2, [r1]
 8008c12:	617b      	str	r3, [r7, #20]
   return(result);
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d1e5      	bne.n	8008be6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008c1a:	e002      	b.n	8008c22 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008c1c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008c1e:	f7fa fc35 	bl	800348c <HAL_UART_TxCpltCallback>
}
 8008c22:	bf00      	nop
 8008c24:	3740      	adds	r7, #64	@ 0x40
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}

08008c2a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008c2a:	b580      	push	{r7, lr}
 8008c2c:	b084      	sub	sp, #16
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c36:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008c38:	68f8      	ldr	r0, [r7, #12]
 8008c3a:	f7ff ff7f 	bl	8008b3c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c3e:	bf00      	nop
 8008c40:	3710      	adds	r7, #16
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}

08008c46 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008c46:	b580      	push	{r7, lr}
 8008c48:	b084      	sub	sp, #16
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c56:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	695b      	ldr	r3, [r3, #20]
 8008c5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c62:	2b80      	cmp	r3, #128	@ 0x80
 8008c64:	bf0c      	ite	eq
 8008c66:	2301      	moveq	r3, #1
 8008c68:	2300      	movne	r3, #0
 8008c6a:	b2db      	uxtb	r3, r3
 8008c6c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	2b21      	cmp	r3, #33	@ 0x21
 8008c78:	d108      	bne.n	8008c8c <UART_DMAError+0x46>
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d005      	beq.n	8008c8c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	2200      	movs	r2, #0
 8008c84:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8008c86:	68b8      	ldr	r0, [r7, #8]
 8008c88:	f000 f827 	bl	8008cda <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	695b      	ldr	r3, [r3, #20]
 8008c92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c96:	2b40      	cmp	r3, #64	@ 0x40
 8008c98:	bf0c      	ite	eq
 8008c9a:	2301      	moveq	r3, #1
 8008c9c:	2300      	movne	r3, #0
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008ca8:	b2db      	uxtb	r3, r3
 8008caa:	2b22      	cmp	r3, #34	@ 0x22
 8008cac:	d108      	bne.n	8008cc0 <UART_DMAError+0x7a>
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d005      	beq.n	8008cc0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8008cba:	68b8      	ldr	r0, [r7, #8]
 8008cbc:	f000 f835 	bl	8008d2a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cc4:	f043 0210 	orr.w	r2, r3, #16
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ccc:	68b8      	ldr	r0, [r7, #8]
 8008cce:	f7ff ff49 	bl	8008b64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008cd2:	bf00      	nop
 8008cd4:	3710      	adds	r7, #16
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}

08008cda <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008cda:	b480      	push	{r7}
 8008cdc:	b089      	sub	sp, #36	@ 0x24
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	330c      	adds	r3, #12
 8008ce8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	e853 3f00 	ldrex	r3, [r3]
 8008cf0:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008cf8:	61fb      	str	r3, [r7, #28]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	330c      	adds	r3, #12
 8008d00:	69fa      	ldr	r2, [r7, #28]
 8008d02:	61ba      	str	r2, [r7, #24]
 8008d04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d06:	6979      	ldr	r1, [r7, #20]
 8008d08:	69ba      	ldr	r2, [r7, #24]
 8008d0a:	e841 2300 	strex	r3, r2, [r1]
 8008d0e:	613b      	str	r3, [r7, #16]
   return(result);
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d1e5      	bne.n	8008ce2 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2220      	movs	r2, #32
 8008d1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8008d1e:	bf00      	nop
 8008d20:	3724      	adds	r7, #36	@ 0x24
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr

08008d2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d2a:	b480      	push	{r7}
 8008d2c:	b095      	sub	sp, #84	@ 0x54
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	330c      	adds	r3, #12
 8008d38:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d3c:	e853 3f00 	ldrex	r3, [r3]
 8008d40:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	330c      	adds	r3, #12
 8008d50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008d52:	643a      	str	r2, [r7, #64]	@ 0x40
 8008d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d56:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008d58:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008d5a:	e841 2300 	strex	r3, r2, [r1]
 8008d5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d1e5      	bne.n	8008d32 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	3314      	adds	r3, #20
 8008d6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d6e:	6a3b      	ldr	r3, [r7, #32]
 8008d70:	e853 3f00 	ldrex	r3, [r3]
 8008d74:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d76:	69fb      	ldr	r3, [r7, #28]
 8008d78:	f023 0301 	bic.w	r3, r3, #1
 8008d7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	3314      	adds	r3, #20
 8008d84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008d88:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d8e:	e841 2300 	strex	r3, r2, [r1]
 8008d92:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d1e5      	bne.n	8008d66 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d9e:	2b01      	cmp	r3, #1
 8008da0:	d119      	bne.n	8008dd6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	330c      	adds	r3, #12
 8008da8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	e853 3f00 	ldrex	r3, [r3]
 8008db0:	60bb      	str	r3, [r7, #8]
   return(result);
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	f023 0310 	bic.w	r3, r3, #16
 8008db8:	647b      	str	r3, [r7, #68]	@ 0x44
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	330c      	adds	r3, #12
 8008dc0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008dc2:	61ba      	str	r2, [r7, #24]
 8008dc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc6:	6979      	ldr	r1, [r7, #20]
 8008dc8:	69ba      	ldr	r2, [r7, #24]
 8008dca:	e841 2300 	strex	r3, r2, [r1]
 8008dce:	613b      	str	r3, [r7, #16]
   return(result);
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d1e5      	bne.n	8008da2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2220      	movs	r2, #32
 8008dda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2200      	movs	r2, #0
 8008de2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008de4:	bf00      	nop
 8008de6:	3754      	adds	r7, #84	@ 0x54
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr

08008df0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dfc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2200      	movs	r2, #0
 8008e02:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2200      	movs	r2, #0
 8008e08:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e0a:	68f8      	ldr	r0, [r7, #12]
 8008e0c:	f7ff feaa 	bl	8008b64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e10:	bf00      	nop
 8008e12:	3710      	adds	r7, #16
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b085      	sub	sp, #20
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e26:	b2db      	uxtb	r3, r3
 8008e28:	2b21      	cmp	r3, #33	@ 0x21
 8008e2a:	d13e      	bne.n	8008eaa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	689b      	ldr	r3, [r3, #8]
 8008e30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e34:	d114      	bne.n	8008e60 <UART_Transmit_IT+0x48>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	691b      	ldr	r3, [r3, #16]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d110      	bne.n	8008e60 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6a1b      	ldr	r3, [r3, #32]
 8008e42:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	881b      	ldrh	r3, [r3, #0]
 8008e48:	461a      	mov	r2, r3
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e52:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6a1b      	ldr	r3, [r3, #32]
 8008e58:	1c9a      	adds	r2, r3, #2
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	621a      	str	r2, [r3, #32]
 8008e5e:	e008      	b.n	8008e72 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6a1b      	ldr	r3, [r3, #32]
 8008e64:	1c59      	adds	r1, r3, #1
 8008e66:	687a      	ldr	r2, [r7, #4]
 8008e68:	6211      	str	r1, [r2, #32]
 8008e6a:	781a      	ldrb	r2, [r3, #0]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	3b01      	subs	r3, #1
 8008e7a:	b29b      	uxth	r3, r3
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	4619      	mov	r1, r3
 8008e80:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d10f      	bne.n	8008ea6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	68da      	ldr	r2, [r3, #12]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008e94:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	68da      	ldr	r2, [r3, #12]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008ea4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	e000      	b.n	8008eac <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008eaa:	2302      	movs	r3, #2
  }
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3714      	adds	r7, #20
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr

08008eb8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b082      	sub	sp, #8
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	68da      	ldr	r2, [r3, #12]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008ece:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2220      	movs	r2, #32
 8008ed4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f7fa fad7 	bl	800348c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008ede:	2300      	movs	r3, #0
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3708      	adds	r7, #8
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b08c      	sub	sp, #48	@ 0x30
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008ef6:	b2db      	uxtb	r3, r3
 8008ef8:	2b22      	cmp	r3, #34	@ 0x22
 8008efa:	f040 80ae 	bne.w	800905a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	689b      	ldr	r3, [r3, #8]
 8008f02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f06:	d117      	bne.n	8008f38 <UART_Receive_IT+0x50>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	691b      	ldr	r3, [r3, #16]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d113      	bne.n	8008f38 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008f10:	2300      	movs	r3, #0
 8008f12:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f18:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	b29b      	uxth	r3, r3
 8008f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f26:	b29a      	uxth	r2, r3
 8008f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f2a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f30:	1c9a      	adds	r2, r3, #2
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	629a      	str	r2, [r3, #40]	@ 0x28
 8008f36:	e026      	b.n	8008f86 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	689b      	ldr	r3, [r3, #8]
 8008f46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f4a:	d007      	beq.n	8008f5c <UART_Receive_IT+0x74>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	689b      	ldr	r3, [r3, #8]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d10a      	bne.n	8008f6a <UART_Receive_IT+0x82>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	691b      	ldr	r3, [r3, #16]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d106      	bne.n	8008f6a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	b2da      	uxtb	r2, r3
 8008f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f66:	701a      	strb	r2, [r3, #0]
 8008f68:	e008      	b.n	8008f7c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	b2db      	uxtb	r3, r3
 8008f72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f76:	b2da      	uxtb	r2, r3
 8008f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f7a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f80:	1c5a      	adds	r2, r3, #1
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	3b01      	subs	r3, #1
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	687a      	ldr	r2, [r7, #4]
 8008f92:	4619      	mov	r1, r3
 8008f94:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d15d      	bne.n	8009056 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	68da      	ldr	r2, [r3, #12]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f022 0220 	bic.w	r2, r2, #32
 8008fa8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	68da      	ldr	r2, [r3, #12]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008fb8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	695a      	ldr	r2, [r3, #20]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f022 0201 	bic.w	r2, r2, #1
 8008fc8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2220      	movs	r2, #32
 8008fce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	d135      	bne.n	800904c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	330c      	adds	r3, #12
 8008fec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	e853 3f00 	ldrex	r3, [r3]
 8008ff4:	613b      	str	r3, [r7, #16]
   return(result);
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	f023 0310 	bic.w	r3, r3, #16
 8008ffc:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	330c      	adds	r3, #12
 8009004:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009006:	623a      	str	r2, [r7, #32]
 8009008:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800900a:	69f9      	ldr	r1, [r7, #28]
 800900c:	6a3a      	ldr	r2, [r7, #32]
 800900e:	e841 2300 	strex	r3, r2, [r1]
 8009012:	61bb      	str	r3, [r7, #24]
   return(result);
 8009014:	69bb      	ldr	r3, [r7, #24]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d1e5      	bne.n	8008fe6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f003 0310 	and.w	r3, r3, #16
 8009024:	2b10      	cmp	r3, #16
 8009026:	d10a      	bne.n	800903e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009028:	2300      	movs	r3, #0
 800902a:	60fb      	str	r3, [r7, #12]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	60fb      	str	r3, [r7, #12]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	60fb      	str	r3, [r7, #12]
 800903c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009042:	4619      	mov	r1, r3
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f7ff fd97 	bl	8008b78 <HAL_UARTEx_RxEventCallback>
 800904a:	e002      	b.n	8009052 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f7ff fd7f 	bl	8008b50 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009052:	2300      	movs	r3, #0
 8009054:	e002      	b.n	800905c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009056:	2300      	movs	r3, #0
 8009058:	e000      	b.n	800905c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800905a:	2302      	movs	r3, #2
  }
}
 800905c:	4618      	mov	r0, r3
 800905e:	3730      	adds	r7, #48	@ 0x30
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009064:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009068:	b0c0      	sub	sp, #256	@ 0x100
 800906a:	af00      	add	r7, sp, #0
 800906c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	691b      	ldr	r3, [r3, #16]
 8009078:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800907c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009080:	68d9      	ldr	r1, [r3, #12]
 8009082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009086:	681a      	ldr	r2, [r3, #0]
 8009088:	ea40 0301 	orr.w	r3, r0, r1
 800908c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800908e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009092:	689a      	ldr	r2, [r3, #8]
 8009094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009098:	691b      	ldr	r3, [r3, #16]
 800909a:	431a      	orrs	r2, r3
 800909c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090a0:	695b      	ldr	r3, [r3, #20]
 80090a2:	431a      	orrs	r2, r3
 80090a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090a8:	69db      	ldr	r3, [r3, #28]
 80090aa:	4313      	orrs	r3, r2
 80090ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80090b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80090bc:	f021 010c 	bic.w	r1, r1, #12
 80090c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090c4:	681a      	ldr	r2, [r3, #0]
 80090c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80090ca:	430b      	orrs	r3, r1
 80090cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80090ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	695b      	ldr	r3, [r3, #20]
 80090d6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80090da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090de:	6999      	ldr	r1, [r3, #24]
 80090e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090e4:	681a      	ldr	r2, [r3, #0]
 80090e6:	ea40 0301 	orr.w	r3, r0, r1
 80090ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80090ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090f0:	681a      	ldr	r2, [r3, #0]
 80090f2:	4b8f      	ldr	r3, [pc, #572]	@ (8009330 <UART_SetConfig+0x2cc>)
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d005      	beq.n	8009104 <UART_SetConfig+0xa0>
 80090f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090fc:	681a      	ldr	r2, [r3, #0]
 80090fe:	4b8d      	ldr	r3, [pc, #564]	@ (8009334 <UART_SetConfig+0x2d0>)
 8009100:	429a      	cmp	r2, r3
 8009102:	d104      	bne.n	800910e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009104:	f7fc fe98 	bl	8005e38 <HAL_RCC_GetPCLK2Freq>
 8009108:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800910c:	e003      	b.n	8009116 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800910e:	f7fc fe7f 	bl	8005e10 <HAL_RCC_GetPCLK1Freq>
 8009112:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800911a:	69db      	ldr	r3, [r3, #28]
 800911c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009120:	f040 810c 	bne.w	800933c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009124:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009128:	2200      	movs	r2, #0
 800912a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800912e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009132:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009136:	4622      	mov	r2, r4
 8009138:	462b      	mov	r3, r5
 800913a:	1891      	adds	r1, r2, r2
 800913c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800913e:	415b      	adcs	r3, r3
 8009140:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009142:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009146:	4621      	mov	r1, r4
 8009148:	eb12 0801 	adds.w	r8, r2, r1
 800914c:	4629      	mov	r1, r5
 800914e:	eb43 0901 	adc.w	r9, r3, r1
 8009152:	f04f 0200 	mov.w	r2, #0
 8009156:	f04f 0300 	mov.w	r3, #0
 800915a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800915e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009162:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009166:	4690      	mov	r8, r2
 8009168:	4699      	mov	r9, r3
 800916a:	4623      	mov	r3, r4
 800916c:	eb18 0303 	adds.w	r3, r8, r3
 8009170:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009174:	462b      	mov	r3, r5
 8009176:	eb49 0303 	adc.w	r3, r9, r3
 800917a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800917e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	2200      	movs	r2, #0
 8009186:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800918a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800918e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009192:	460b      	mov	r3, r1
 8009194:	18db      	adds	r3, r3, r3
 8009196:	653b      	str	r3, [r7, #80]	@ 0x50
 8009198:	4613      	mov	r3, r2
 800919a:	eb42 0303 	adc.w	r3, r2, r3
 800919e:	657b      	str	r3, [r7, #84]	@ 0x54
 80091a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80091a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80091a8:	f7f7 fd8e 	bl	8000cc8 <__aeabi_uldivmod>
 80091ac:	4602      	mov	r2, r0
 80091ae:	460b      	mov	r3, r1
 80091b0:	4b61      	ldr	r3, [pc, #388]	@ (8009338 <UART_SetConfig+0x2d4>)
 80091b2:	fba3 2302 	umull	r2, r3, r3, r2
 80091b6:	095b      	lsrs	r3, r3, #5
 80091b8:	011c      	lsls	r4, r3, #4
 80091ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80091be:	2200      	movs	r2, #0
 80091c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80091c4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80091c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80091cc:	4642      	mov	r2, r8
 80091ce:	464b      	mov	r3, r9
 80091d0:	1891      	adds	r1, r2, r2
 80091d2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80091d4:	415b      	adcs	r3, r3
 80091d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80091d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80091dc:	4641      	mov	r1, r8
 80091de:	eb12 0a01 	adds.w	sl, r2, r1
 80091e2:	4649      	mov	r1, r9
 80091e4:	eb43 0b01 	adc.w	fp, r3, r1
 80091e8:	f04f 0200 	mov.w	r2, #0
 80091ec:	f04f 0300 	mov.w	r3, #0
 80091f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80091f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80091f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80091fc:	4692      	mov	sl, r2
 80091fe:	469b      	mov	fp, r3
 8009200:	4643      	mov	r3, r8
 8009202:	eb1a 0303 	adds.w	r3, sl, r3
 8009206:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800920a:	464b      	mov	r3, r9
 800920c:	eb4b 0303 	adc.w	r3, fp, r3
 8009210:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	2200      	movs	r2, #0
 800921c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009220:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009224:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009228:	460b      	mov	r3, r1
 800922a:	18db      	adds	r3, r3, r3
 800922c:	643b      	str	r3, [r7, #64]	@ 0x40
 800922e:	4613      	mov	r3, r2
 8009230:	eb42 0303 	adc.w	r3, r2, r3
 8009234:	647b      	str	r3, [r7, #68]	@ 0x44
 8009236:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800923a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800923e:	f7f7 fd43 	bl	8000cc8 <__aeabi_uldivmod>
 8009242:	4602      	mov	r2, r0
 8009244:	460b      	mov	r3, r1
 8009246:	4611      	mov	r1, r2
 8009248:	4b3b      	ldr	r3, [pc, #236]	@ (8009338 <UART_SetConfig+0x2d4>)
 800924a:	fba3 2301 	umull	r2, r3, r3, r1
 800924e:	095b      	lsrs	r3, r3, #5
 8009250:	2264      	movs	r2, #100	@ 0x64
 8009252:	fb02 f303 	mul.w	r3, r2, r3
 8009256:	1acb      	subs	r3, r1, r3
 8009258:	00db      	lsls	r3, r3, #3
 800925a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800925e:	4b36      	ldr	r3, [pc, #216]	@ (8009338 <UART_SetConfig+0x2d4>)
 8009260:	fba3 2302 	umull	r2, r3, r3, r2
 8009264:	095b      	lsrs	r3, r3, #5
 8009266:	005b      	lsls	r3, r3, #1
 8009268:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800926c:	441c      	add	r4, r3
 800926e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009272:	2200      	movs	r2, #0
 8009274:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009278:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800927c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009280:	4642      	mov	r2, r8
 8009282:	464b      	mov	r3, r9
 8009284:	1891      	adds	r1, r2, r2
 8009286:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009288:	415b      	adcs	r3, r3
 800928a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800928c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009290:	4641      	mov	r1, r8
 8009292:	1851      	adds	r1, r2, r1
 8009294:	6339      	str	r1, [r7, #48]	@ 0x30
 8009296:	4649      	mov	r1, r9
 8009298:	414b      	adcs	r3, r1
 800929a:	637b      	str	r3, [r7, #52]	@ 0x34
 800929c:	f04f 0200 	mov.w	r2, #0
 80092a0:	f04f 0300 	mov.w	r3, #0
 80092a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80092a8:	4659      	mov	r1, fp
 80092aa:	00cb      	lsls	r3, r1, #3
 80092ac:	4651      	mov	r1, sl
 80092ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80092b2:	4651      	mov	r1, sl
 80092b4:	00ca      	lsls	r2, r1, #3
 80092b6:	4610      	mov	r0, r2
 80092b8:	4619      	mov	r1, r3
 80092ba:	4603      	mov	r3, r0
 80092bc:	4642      	mov	r2, r8
 80092be:	189b      	adds	r3, r3, r2
 80092c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80092c4:	464b      	mov	r3, r9
 80092c6:	460a      	mov	r2, r1
 80092c8:	eb42 0303 	adc.w	r3, r2, r3
 80092cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80092d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	2200      	movs	r2, #0
 80092d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80092dc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80092e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80092e4:	460b      	mov	r3, r1
 80092e6:	18db      	adds	r3, r3, r3
 80092e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80092ea:	4613      	mov	r3, r2
 80092ec:	eb42 0303 	adc.w	r3, r2, r3
 80092f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80092f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80092f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80092fa:	f7f7 fce5 	bl	8000cc8 <__aeabi_uldivmod>
 80092fe:	4602      	mov	r2, r0
 8009300:	460b      	mov	r3, r1
 8009302:	4b0d      	ldr	r3, [pc, #52]	@ (8009338 <UART_SetConfig+0x2d4>)
 8009304:	fba3 1302 	umull	r1, r3, r3, r2
 8009308:	095b      	lsrs	r3, r3, #5
 800930a:	2164      	movs	r1, #100	@ 0x64
 800930c:	fb01 f303 	mul.w	r3, r1, r3
 8009310:	1ad3      	subs	r3, r2, r3
 8009312:	00db      	lsls	r3, r3, #3
 8009314:	3332      	adds	r3, #50	@ 0x32
 8009316:	4a08      	ldr	r2, [pc, #32]	@ (8009338 <UART_SetConfig+0x2d4>)
 8009318:	fba2 2303 	umull	r2, r3, r2, r3
 800931c:	095b      	lsrs	r3, r3, #5
 800931e:	f003 0207 	and.w	r2, r3, #7
 8009322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4422      	add	r2, r4
 800932a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800932c:	e106      	b.n	800953c <UART_SetConfig+0x4d8>
 800932e:	bf00      	nop
 8009330:	40011000 	.word	0x40011000
 8009334:	40011400 	.word	0x40011400
 8009338:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800933c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009340:	2200      	movs	r2, #0
 8009342:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009346:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800934a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800934e:	4642      	mov	r2, r8
 8009350:	464b      	mov	r3, r9
 8009352:	1891      	adds	r1, r2, r2
 8009354:	6239      	str	r1, [r7, #32]
 8009356:	415b      	adcs	r3, r3
 8009358:	627b      	str	r3, [r7, #36]	@ 0x24
 800935a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800935e:	4641      	mov	r1, r8
 8009360:	1854      	adds	r4, r2, r1
 8009362:	4649      	mov	r1, r9
 8009364:	eb43 0501 	adc.w	r5, r3, r1
 8009368:	f04f 0200 	mov.w	r2, #0
 800936c:	f04f 0300 	mov.w	r3, #0
 8009370:	00eb      	lsls	r3, r5, #3
 8009372:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009376:	00e2      	lsls	r2, r4, #3
 8009378:	4614      	mov	r4, r2
 800937a:	461d      	mov	r5, r3
 800937c:	4643      	mov	r3, r8
 800937e:	18e3      	adds	r3, r4, r3
 8009380:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009384:	464b      	mov	r3, r9
 8009386:	eb45 0303 	adc.w	r3, r5, r3
 800938a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800938e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	2200      	movs	r2, #0
 8009396:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800939a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800939e:	f04f 0200 	mov.w	r2, #0
 80093a2:	f04f 0300 	mov.w	r3, #0
 80093a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80093aa:	4629      	mov	r1, r5
 80093ac:	008b      	lsls	r3, r1, #2
 80093ae:	4621      	mov	r1, r4
 80093b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80093b4:	4621      	mov	r1, r4
 80093b6:	008a      	lsls	r2, r1, #2
 80093b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80093bc:	f7f7 fc84 	bl	8000cc8 <__aeabi_uldivmod>
 80093c0:	4602      	mov	r2, r0
 80093c2:	460b      	mov	r3, r1
 80093c4:	4b60      	ldr	r3, [pc, #384]	@ (8009548 <UART_SetConfig+0x4e4>)
 80093c6:	fba3 2302 	umull	r2, r3, r3, r2
 80093ca:	095b      	lsrs	r3, r3, #5
 80093cc:	011c      	lsls	r4, r3, #4
 80093ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80093d2:	2200      	movs	r2, #0
 80093d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80093d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80093dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80093e0:	4642      	mov	r2, r8
 80093e2:	464b      	mov	r3, r9
 80093e4:	1891      	adds	r1, r2, r2
 80093e6:	61b9      	str	r1, [r7, #24]
 80093e8:	415b      	adcs	r3, r3
 80093ea:	61fb      	str	r3, [r7, #28]
 80093ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80093f0:	4641      	mov	r1, r8
 80093f2:	1851      	adds	r1, r2, r1
 80093f4:	6139      	str	r1, [r7, #16]
 80093f6:	4649      	mov	r1, r9
 80093f8:	414b      	adcs	r3, r1
 80093fa:	617b      	str	r3, [r7, #20]
 80093fc:	f04f 0200 	mov.w	r2, #0
 8009400:	f04f 0300 	mov.w	r3, #0
 8009404:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009408:	4659      	mov	r1, fp
 800940a:	00cb      	lsls	r3, r1, #3
 800940c:	4651      	mov	r1, sl
 800940e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009412:	4651      	mov	r1, sl
 8009414:	00ca      	lsls	r2, r1, #3
 8009416:	4610      	mov	r0, r2
 8009418:	4619      	mov	r1, r3
 800941a:	4603      	mov	r3, r0
 800941c:	4642      	mov	r2, r8
 800941e:	189b      	adds	r3, r3, r2
 8009420:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009424:	464b      	mov	r3, r9
 8009426:	460a      	mov	r2, r1
 8009428:	eb42 0303 	adc.w	r3, r2, r3
 800942c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	2200      	movs	r2, #0
 8009438:	67bb      	str	r3, [r7, #120]	@ 0x78
 800943a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800943c:	f04f 0200 	mov.w	r2, #0
 8009440:	f04f 0300 	mov.w	r3, #0
 8009444:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009448:	4649      	mov	r1, r9
 800944a:	008b      	lsls	r3, r1, #2
 800944c:	4641      	mov	r1, r8
 800944e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009452:	4641      	mov	r1, r8
 8009454:	008a      	lsls	r2, r1, #2
 8009456:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800945a:	f7f7 fc35 	bl	8000cc8 <__aeabi_uldivmod>
 800945e:	4602      	mov	r2, r0
 8009460:	460b      	mov	r3, r1
 8009462:	4611      	mov	r1, r2
 8009464:	4b38      	ldr	r3, [pc, #224]	@ (8009548 <UART_SetConfig+0x4e4>)
 8009466:	fba3 2301 	umull	r2, r3, r3, r1
 800946a:	095b      	lsrs	r3, r3, #5
 800946c:	2264      	movs	r2, #100	@ 0x64
 800946e:	fb02 f303 	mul.w	r3, r2, r3
 8009472:	1acb      	subs	r3, r1, r3
 8009474:	011b      	lsls	r3, r3, #4
 8009476:	3332      	adds	r3, #50	@ 0x32
 8009478:	4a33      	ldr	r2, [pc, #204]	@ (8009548 <UART_SetConfig+0x4e4>)
 800947a:	fba2 2303 	umull	r2, r3, r2, r3
 800947e:	095b      	lsrs	r3, r3, #5
 8009480:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009484:	441c      	add	r4, r3
 8009486:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800948a:	2200      	movs	r2, #0
 800948c:	673b      	str	r3, [r7, #112]	@ 0x70
 800948e:	677a      	str	r2, [r7, #116]	@ 0x74
 8009490:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009494:	4642      	mov	r2, r8
 8009496:	464b      	mov	r3, r9
 8009498:	1891      	adds	r1, r2, r2
 800949a:	60b9      	str	r1, [r7, #8]
 800949c:	415b      	adcs	r3, r3
 800949e:	60fb      	str	r3, [r7, #12]
 80094a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80094a4:	4641      	mov	r1, r8
 80094a6:	1851      	adds	r1, r2, r1
 80094a8:	6039      	str	r1, [r7, #0]
 80094aa:	4649      	mov	r1, r9
 80094ac:	414b      	adcs	r3, r1
 80094ae:	607b      	str	r3, [r7, #4]
 80094b0:	f04f 0200 	mov.w	r2, #0
 80094b4:	f04f 0300 	mov.w	r3, #0
 80094b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80094bc:	4659      	mov	r1, fp
 80094be:	00cb      	lsls	r3, r1, #3
 80094c0:	4651      	mov	r1, sl
 80094c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80094c6:	4651      	mov	r1, sl
 80094c8:	00ca      	lsls	r2, r1, #3
 80094ca:	4610      	mov	r0, r2
 80094cc:	4619      	mov	r1, r3
 80094ce:	4603      	mov	r3, r0
 80094d0:	4642      	mov	r2, r8
 80094d2:	189b      	adds	r3, r3, r2
 80094d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80094d6:	464b      	mov	r3, r9
 80094d8:	460a      	mov	r2, r1
 80094da:	eb42 0303 	adc.w	r3, r2, r3
 80094de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80094e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	2200      	movs	r2, #0
 80094e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80094ea:	667a      	str	r2, [r7, #100]	@ 0x64
 80094ec:	f04f 0200 	mov.w	r2, #0
 80094f0:	f04f 0300 	mov.w	r3, #0
 80094f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80094f8:	4649      	mov	r1, r9
 80094fa:	008b      	lsls	r3, r1, #2
 80094fc:	4641      	mov	r1, r8
 80094fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009502:	4641      	mov	r1, r8
 8009504:	008a      	lsls	r2, r1, #2
 8009506:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800950a:	f7f7 fbdd 	bl	8000cc8 <__aeabi_uldivmod>
 800950e:	4602      	mov	r2, r0
 8009510:	460b      	mov	r3, r1
 8009512:	4b0d      	ldr	r3, [pc, #52]	@ (8009548 <UART_SetConfig+0x4e4>)
 8009514:	fba3 1302 	umull	r1, r3, r3, r2
 8009518:	095b      	lsrs	r3, r3, #5
 800951a:	2164      	movs	r1, #100	@ 0x64
 800951c:	fb01 f303 	mul.w	r3, r1, r3
 8009520:	1ad3      	subs	r3, r2, r3
 8009522:	011b      	lsls	r3, r3, #4
 8009524:	3332      	adds	r3, #50	@ 0x32
 8009526:	4a08      	ldr	r2, [pc, #32]	@ (8009548 <UART_SetConfig+0x4e4>)
 8009528:	fba2 2303 	umull	r2, r3, r2, r3
 800952c:	095b      	lsrs	r3, r3, #5
 800952e:	f003 020f 	and.w	r2, r3, #15
 8009532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4422      	add	r2, r4
 800953a:	609a      	str	r2, [r3, #8]
}
 800953c:	bf00      	nop
 800953e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009542:	46bd      	mov	sp, r7
 8009544:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009548:	51eb851f 	.word	0x51eb851f

0800954c <__cvt>:
 800954c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009550:	ec57 6b10 	vmov	r6, r7, d0
 8009554:	2f00      	cmp	r7, #0
 8009556:	460c      	mov	r4, r1
 8009558:	4619      	mov	r1, r3
 800955a:	463b      	mov	r3, r7
 800955c:	bfbb      	ittet	lt
 800955e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009562:	461f      	movlt	r7, r3
 8009564:	2300      	movge	r3, #0
 8009566:	232d      	movlt	r3, #45	@ 0x2d
 8009568:	700b      	strb	r3, [r1, #0]
 800956a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800956c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009570:	4691      	mov	r9, r2
 8009572:	f023 0820 	bic.w	r8, r3, #32
 8009576:	bfbc      	itt	lt
 8009578:	4632      	movlt	r2, r6
 800957a:	4616      	movlt	r6, r2
 800957c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009580:	d005      	beq.n	800958e <__cvt+0x42>
 8009582:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009586:	d100      	bne.n	800958a <__cvt+0x3e>
 8009588:	3401      	adds	r4, #1
 800958a:	2102      	movs	r1, #2
 800958c:	e000      	b.n	8009590 <__cvt+0x44>
 800958e:	2103      	movs	r1, #3
 8009590:	ab03      	add	r3, sp, #12
 8009592:	9301      	str	r3, [sp, #4]
 8009594:	ab02      	add	r3, sp, #8
 8009596:	9300      	str	r3, [sp, #0]
 8009598:	ec47 6b10 	vmov	d0, r6, r7
 800959c:	4653      	mov	r3, sl
 800959e:	4622      	mov	r2, r4
 80095a0:	f000 fe5a 	bl	800a258 <_dtoa_r>
 80095a4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80095a8:	4605      	mov	r5, r0
 80095aa:	d119      	bne.n	80095e0 <__cvt+0x94>
 80095ac:	f019 0f01 	tst.w	r9, #1
 80095b0:	d00e      	beq.n	80095d0 <__cvt+0x84>
 80095b2:	eb00 0904 	add.w	r9, r0, r4
 80095b6:	2200      	movs	r2, #0
 80095b8:	2300      	movs	r3, #0
 80095ba:	4630      	mov	r0, r6
 80095bc:	4639      	mov	r1, r7
 80095be:	f7f7 faa3 	bl	8000b08 <__aeabi_dcmpeq>
 80095c2:	b108      	cbz	r0, 80095c8 <__cvt+0x7c>
 80095c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80095c8:	2230      	movs	r2, #48	@ 0x30
 80095ca:	9b03      	ldr	r3, [sp, #12]
 80095cc:	454b      	cmp	r3, r9
 80095ce:	d31e      	bcc.n	800960e <__cvt+0xc2>
 80095d0:	9b03      	ldr	r3, [sp, #12]
 80095d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80095d4:	1b5b      	subs	r3, r3, r5
 80095d6:	4628      	mov	r0, r5
 80095d8:	6013      	str	r3, [r2, #0]
 80095da:	b004      	add	sp, #16
 80095dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80095e4:	eb00 0904 	add.w	r9, r0, r4
 80095e8:	d1e5      	bne.n	80095b6 <__cvt+0x6a>
 80095ea:	7803      	ldrb	r3, [r0, #0]
 80095ec:	2b30      	cmp	r3, #48	@ 0x30
 80095ee:	d10a      	bne.n	8009606 <__cvt+0xba>
 80095f0:	2200      	movs	r2, #0
 80095f2:	2300      	movs	r3, #0
 80095f4:	4630      	mov	r0, r6
 80095f6:	4639      	mov	r1, r7
 80095f8:	f7f7 fa86 	bl	8000b08 <__aeabi_dcmpeq>
 80095fc:	b918      	cbnz	r0, 8009606 <__cvt+0xba>
 80095fe:	f1c4 0401 	rsb	r4, r4, #1
 8009602:	f8ca 4000 	str.w	r4, [sl]
 8009606:	f8da 3000 	ldr.w	r3, [sl]
 800960a:	4499      	add	r9, r3
 800960c:	e7d3      	b.n	80095b6 <__cvt+0x6a>
 800960e:	1c59      	adds	r1, r3, #1
 8009610:	9103      	str	r1, [sp, #12]
 8009612:	701a      	strb	r2, [r3, #0]
 8009614:	e7d9      	b.n	80095ca <__cvt+0x7e>

08009616 <__exponent>:
 8009616:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009618:	2900      	cmp	r1, #0
 800961a:	bfba      	itte	lt
 800961c:	4249      	neglt	r1, r1
 800961e:	232d      	movlt	r3, #45	@ 0x2d
 8009620:	232b      	movge	r3, #43	@ 0x2b
 8009622:	2909      	cmp	r1, #9
 8009624:	7002      	strb	r2, [r0, #0]
 8009626:	7043      	strb	r3, [r0, #1]
 8009628:	dd29      	ble.n	800967e <__exponent+0x68>
 800962a:	f10d 0307 	add.w	r3, sp, #7
 800962e:	461d      	mov	r5, r3
 8009630:	270a      	movs	r7, #10
 8009632:	461a      	mov	r2, r3
 8009634:	fbb1 f6f7 	udiv	r6, r1, r7
 8009638:	fb07 1416 	mls	r4, r7, r6, r1
 800963c:	3430      	adds	r4, #48	@ 0x30
 800963e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009642:	460c      	mov	r4, r1
 8009644:	2c63      	cmp	r4, #99	@ 0x63
 8009646:	f103 33ff 	add.w	r3, r3, #4294967295
 800964a:	4631      	mov	r1, r6
 800964c:	dcf1      	bgt.n	8009632 <__exponent+0x1c>
 800964e:	3130      	adds	r1, #48	@ 0x30
 8009650:	1e94      	subs	r4, r2, #2
 8009652:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009656:	1c41      	adds	r1, r0, #1
 8009658:	4623      	mov	r3, r4
 800965a:	42ab      	cmp	r3, r5
 800965c:	d30a      	bcc.n	8009674 <__exponent+0x5e>
 800965e:	f10d 0309 	add.w	r3, sp, #9
 8009662:	1a9b      	subs	r3, r3, r2
 8009664:	42ac      	cmp	r4, r5
 8009666:	bf88      	it	hi
 8009668:	2300      	movhi	r3, #0
 800966a:	3302      	adds	r3, #2
 800966c:	4403      	add	r3, r0
 800966e:	1a18      	subs	r0, r3, r0
 8009670:	b003      	add	sp, #12
 8009672:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009674:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009678:	f801 6f01 	strb.w	r6, [r1, #1]!
 800967c:	e7ed      	b.n	800965a <__exponent+0x44>
 800967e:	2330      	movs	r3, #48	@ 0x30
 8009680:	3130      	adds	r1, #48	@ 0x30
 8009682:	7083      	strb	r3, [r0, #2]
 8009684:	70c1      	strb	r1, [r0, #3]
 8009686:	1d03      	adds	r3, r0, #4
 8009688:	e7f1      	b.n	800966e <__exponent+0x58>
	...

0800968c <_printf_float>:
 800968c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009690:	b08d      	sub	sp, #52	@ 0x34
 8009692:	460c      	mov	r4, r1
 8009694:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009698:	4616      	mov	r6, r2
 800969a:	461f      	mov	r7, r3
 800969c:	4605      	mov	r5, r0
 800969e:	f000 fcdb 	bl	800a058 <_localeconv_r>
 80096a2:	6803      	ldr	r3, [r0, #0]
 80096a4:	9304      	str	r3, [sp, #16]
 80096a6:	4618      	mov	r0, r3
 80096a8:	f7f6 fe02 	bl	80002b0 <strlen>
 80096ac:	2300      	movs	r3, #0
 80096ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80096b0:	f8d8 3000 	ldr.w	r3, [r8]
 80096b4:	9005      	str	r0, [sp, #20]
 80096b6:	3307      	adds	r3, #7
 80096b8:	f023 0307 	bic.w	r3, r3, #7
 80096bc:	f103 0208 	add.w	r2, r3, #8
 80096c0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80096c4:	f8d4 b000 	ldr.w	fp, [r4]
 80096c8:	f8c8 2000 	str.w	r2, [r8]
 80096cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80096d0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80096d4:	9307      	str	r3, [sp, #28]
 80096d6:	f8cd 8018 	str.w	r8, [sp, #24]
 80096da:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80096de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80096e2:	4b9c      	ldr	r3, [pc, #624]	@ (8009954 <_printf_float+0x2c8>)
 80096e4:	f04f 32ff 	mov.w	r2, #4294967295
 80096e8:	f7f7 fa40 	bl	8000b6c <__aeabi_dcmpun>
 80096ec:	bb70      	cbnz	r0, 800974c <_printf_float+0xc0>
 80096ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80096f2:	4b98      	ldr	r3, [pc, #608]	@ (8009954 <_printf_float+0x2c8>)
 80096f4:	f04f 32ff 	mov.w	r2, #4294967295
 80096f8:	f7f7 fa1a 	bl	8000b30 <__aeabi_dcmple>
 80096fc:	bb30      	cbnz	r0, 800974c <_printf_float+0xc0>
 80096fe:	2200      	movs	r2, #0
 8009700:	2300      	movs	r3, #0
 8009702:	4640      	mov	r0, r8
 8009704:	4649      	mov	r1, r9
 8009706:	f7f7 fa09 	bl	8000b1c <__aeabi_dcmplt>
 800970a:	b110      	cbz	r0, 8009712 <_printf_float+0x86>
 800970c:	232d      	movs	r3, #45	@ 0x2d
 800970e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009712:	4a91      	ldr	r2, [pc, #580]	@ (8009958 <_printf_float+0x2cc>)
 8009714:	4b91      	ldr	r3, [pc, #580]	@ (800995c <_printf_float+0x2d0>)
 8009716:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800971a:	bf94      	ite	ls
 800971c:	4690      	movls	r8, r2
 800971e:	4698      	movhi	r8, r3
 8009720:	2303      	movs	r3, #3
 8009722:	6123      	str	r3, [r4, #16]
 8009724:	f02b 0304 	bic.w	r3, fp, #4
 8009728:	6023      	str	r3, [r4, #0]
 800972a:	f04f 0900 	mov.w	r9, #0
 800972e:	9700      	str	r7, [sp, #0]
 8009730:	4633      	mov	r3, r6
 8009732:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009734:	4621      	mov	r1, r4
 8009736:	4628      	mov	r0, r5
 8009738:	f000 f9d2 	bl	8009ae0 <_printf_common>
 800973c:	3001      	adds	r0, #1
 800973e:	f040 808d 	bne.w	800985c <_printf_float+0x1d0>
 8009742:	f04f 30ff 	mov.w	r0, #4294967295
 8009746:	b00d      	add	sp, #52	@ 0x34
 8009748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800974c:	4642      	mov	r2, r8
 800974e:	464b      	mov	r3, r9
 8009750:	4640      	mov	r0, r8
 8009752:	4649      	mov	r1, r9
 8009754:	f7f7 fa0a 	bl	8000b6c <__aeabi_dcmpun>
 8009758:	b140      	cbz	r0, 800976c <_printf_float+0xe0>
 800975a:	464b      	mov	r3, r9
 800975c:	2b00      	cmp	r3, #0
 800975e:	bfbc      	itt	lt
 8009760:	232d      	movlt	r3, #45	@ 0x2d
 8009762:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009766:	4a7e      	ldr	r2, [pc, #504]	@ (8009960 <_printf_float+0x2d4>)
 8009768:	4b7e      	ldr	r3, [pc, #504]	@ (8009964 <_printf_float+0x2d8>)
 800976a:	e7d4      	b.n	8009716 <_printf_float+0x8a>
 800976c:	6863      	ldr	r3, [r4, #4]
 800976e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009772:	9206      	str	r2, [sp, #24]
 8009774:	1c5a      	adds	r2, r3, #1
 8009776:	d13b      	bne.n	80097f0 <_printf_float+0x164>
 8009778:	2306      	movs	r3, #6
 800977a:	6063      	str	r3, [r4, #4]
 800977c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009780:	2300      	movs	r3, #0
 8009782:	6022      	str	r2, [r4, #0]
 8009784:	9303      	str	r3, [sp, #12]
 8009786:	ab0a      	add	r3, sp, #40	@ 0x28
 8009788:	e9cd a301 	strd	sl, r3, [sp, #4]
 800978c:	ab09      	add	r3, sp, #36	@ 0x24
 800978e:	9300      	str	r3, [sp, #0]
 8009790:	6861      	ldr	r1, [r4, #4]
 8009792:	ec49 8b10 	vmov	d0, r8, r9
 8009796:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800979a:	4628      	mov	r0, r5
 800979c:	f7ff fed6 	bl	800954c <__cvt>
 80097a0:	9b06      	ldr	r3, [sp, #24]
 80097a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80097a4:	2b47      	cmp	r3, #71	@ 0x47
 80097a6:	4680      	mov	r8, r0
 80097a8:	d129      	bne.n	80097fe <_printf_float+0x172>
 80097aa:	1cc8      	adds	r0, r1, #3
 80097ac:	db02      	blt.n	80097b4 <_printf_float+0x128>
 80097ae:	6863      	ldr	r3, [r4, #4]
 80097b0:	4299      	cmp	r1, r3
 80097b2:	dd41      	ble.n	8009838 <_printf_float+0x1ac>
 80097b4:	f1aa 0a02 	sub.w	sl, sl, #2
 80097b8:	fa5f fa8a 	uxtb.w	sl, sl
 80097bc:	3901      	subs	r1, #1
 80097be:	4652      	mov	r2, sl
 80097c0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80097c4:	9109      	str	r1, [sp, #36]	@ 0x24
 80097c6:	f7ff ff26 	bl	8009616 <__exponent>
 80097ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80097cc:	1813      	adds	r3, r2, r0
 80097ce:	2a01      	cmp	r2, #1
 80097d0:	4681      	mov	r9, r0
 80097d2:	6123      	str	r3, [r4, #16]
 80097d4:	dc02      	bgt.n	80097dc <_printf_float+0x150>
 80097d6:	6822      	ldr	r2, [r4, #0]
 80097d8:	07d2      	lsls	r2, r2, #31
 80097da:	d501      	bpl.n	80097e0 <_printf_float+0x154>
 80097dc:	3301      	adds	r3, #1
 80097de:	6123      	str	r3, [r4, #16]
 80097e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d0a2      	beq.n	800972e <_printf_float+0xa2>
 80097e8:	232d      	movs	r3, #45	@ 0x2d
 80097ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80097ee:	e79e      	b.n	800972e <_printf_float+0xa2>
 80097f0:	9a06      	ldr	r2, [sp, #24]
 80097f2:	2a47      	cmp	r2, #71	@ 0x47
 80097f4:	d1c2      	bne.n	800977c <_printf_float+0xf0>
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d1c0      	bne.n	800977c <_printf_float+0xf0>
 80097fa:	2301      	movs	r3, #1
 80097fc:	e7bd      	b.n	800977a <_printf_float+0xee>
 80097fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009802:	d9db      	bls.n	80097bc <_printf_float+0x130>
 8009804:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009808:	d118      	bne.n	800983c <_printf_float+0x1b0>
 800980a:	2900      	cmp	r1, #0
 800980c:	6863      	ldr	r3, [r4, #4]
 800980e:	dd0b      	ble.n	8009828 <_printf_float+0x19c>
 8009810:	6121      	str	r1, [r4, #16]
 8009812:	b913      	cbnz	r3, 800981a <_printf_float+0x18e>
 8009814:	6822      	ldr	r2, [r4, #0]
 8009816:	07d0      	lsls	r0, r2, #31
 8009818:	d502      	bpl.n	8009820 <_printf_float+0x194>
 800981a:	3301      	adds	r3, #1
 800981c:	440b      	add	r3, r1
 800981e:	6123      	str	r3, [r4, #16]
 8009820:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009822:	f04f 0900 	mov.w	r9, #0
 8009826:	e7db      	b.n	80097e0 <_printf_float+0x154>
 8009828:	b913      	cbnz	r3, 8009830 <_printf_float+0x1a4>
 800982a:	6822      	ldr	r2, [r4, #0]
 800982c:	07d2      	lsls	r2, r2, #31
 800982e:	d501      	bpl.n	8009834 <_printf_float+0x1a8>
 8009830:	3302      	adds	r3, #2
 8009832:	e7f4      	b.n	800981e <_printf_float+0x192>
 8009834:	2301      	movs	r3, #1
 8009836:	e7f2      	b.n	800981e <_printf_float+0x192>
 8009838:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800983c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800983e:	4299      	cmp	r1, r3
 8009840:	db05      	blt.n	800984e <_printf_float+0x1c2>
 8009842:	6823      	ldr	r3, [r4, #0]
 8009844:	6121      	str	r1, [r4, #16]
 8009846:	07d8      	lsls	r0, r3, #31
 8009848:	d5ea      	bpl.n	8009820 <_printf_float+0x194>
 800984a:	1c4b      	adds	r3, r1, #1
 800984c:	e7e7      	b.n	800981e <_printf_float+0x192>
 800984e:	2900      	cmp	r1, #0
 8009850:	bfd4      	ite	le
 8009852:	f1c1 0202 	rsble	r2, r1, #2
 8009856:	2201      	movgt	r2, #1
 8009858:	4413      	add	r3, r2
 800985a:	e7e0      	b.n	800981e <_printf_float+0x192>
 800985c:	6823      	ldr	r3, [r4, #0]
 800985e:	055a      	lsls	r2, r3, #21
 8009860:	d407      	bmi.n	8009872 <_printf_float+0x1e6>
 8009862:	6923      	ldr	r3, [r4, #16]
 8009864:	4642      	mov	r2, r8
 8009866:	4631      	mov	r1, r6
 8009868:	4628      	mov	r0, r5
 800986a:	47b8      	blx	r7
 800986c:	3001      	adds	r0, #1
 800986e:	d12b      	bne.n	80098c8 <_printf_float+0x23c>
 8009870:	e767      	b.n	8009742 <_printf_float+0xb6>
 8009872:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009876:	f240 80dd 	bls.w	8009a34 <_printf_float+0x3a8>
 800987a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800987e:	2200      	movs	r2, #0
 8009880:	2300      	movs	r3, #0
 8009882:	f7f7 f941 	bl	8000b08 <__aeabi_dcmpeq>
 8009886:	2800      	cmp	r0, #0
 8009888:	d033      	beq.n	80098f2 <_printf_float+0x266>
 800988a:	4a37      	ldr	r2, [pc, #220]	@ (8009968 <_printf_float+0x2dc>)
 800988c:	2301      	movs	r3, #1
 800988e:	4631      	mov	r1, r6
 8009890:	4628      	mov	r0, r5
 8009892:	47b8      	blx	r7
 8009894:	3001      	adds	r0, #1
 8009896:	f43f af54 	beq.w	8009742 <_printf_float+0xb6>
 800989a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800989e:	4543      	cmp	r3, r8
 80098a0:	db02      	blt.n	80098a8 <_printf_float+0x21c>
 80098a2:	6823      	ldr	r3, [r4, #0]
 80098a4:	07d8      	lsls	r0, r3, #31
 80098a6:	d50f      	bpl.n	80098c8 <_printf_float+0x23c>
 80098a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80098ac:	4631      	mov	r1, r6
 80098ae:	4628      	mov	r0, r5
 80098b0:	47b8      	blx	r7
 80098b2:	3001      	adds	r0, #1
 80098b4:	f43f af45 	beq.w	8009742 <_printf_float+0xb6>
 80098b8:	f04f 0900 	mov.w	r9, #0
 80098bc:	f108 38ff 	add.w	r8, r8, #4294967295
 80098c0:	f104 0a1a 	add.w	sl, r4, #26
 80098c4:	45c8      	cmp	r8, r9
 80098c6:	dc09      	bgt.n	80098dc <_printf_float+0x250>
 80098c8:	6823      	ldr	r3, [r4, #0]
 80098ca:	079b      	lsls	r3, r3, #30
 80098cc:	f100 8103 	bmi.w	8009ad6 <_printf_float+0x44a>
 80098d0:	68e0      	ldr	r0, [r4, #12]
 80098d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80098d4:	4298      	cmp	r0, r3
 80098d6:	bfb8      	it	lt
 80098d8:	4618      	movlt	r0, r3
 80098da:	e734      	b.n	8009746 <_printf_float+0xba>
 80098dc:	2301      	movs	r3, #1
 80098de:	4652      	mov	r2, sl
 80098e0:	4631      	mov	r1, r6
 80098e2:	4628      	mov	r0, r5
 80098e4:	47b8      	blx	r7
 80098e6:	3001      	adds	r0, #1
 80098e8:	f43f af2b 	beq.w	8009742 <_printf_float+0xb6>
 80098ec:	f109 0901 	add.w	r9, r9, #1
 80098f0:	e7e8      	b.n	80098c4 <_printf_float+0x238>
 80098f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	dc39      	bgt.n	800996c <_printf_float+0x2e0>
 80098f8:	4a1b      	ldr	r2, [pc, #108]	@ (8009968 <_printf_float+0x2dc>)
 80098fa:	2301      	movs	r3, #1
 80098fc:	4631      	mov	r1, r6
 80098fe:	4628      	mov	r0, r5
 8009900:	47b8      	blx	r7
 8009902:	3001      	adds	r0, #1
 8009904:	f43f af1d 	beq.w	8009742 <_printf_float+0xb6>
 8009908:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800990c:	ea59 0303 	orrs.w	r3, r9, r3
 8009910:	d102      	bne.n	8009918 <_printf_float+0x28c>
 8009912:	6823      	ldr	r3, [r4, #0]
 8009914:	07d9      	lsls	r1, r3, #31
 8009916:	d5d7      	bpl.n	80098c8 <_printf_float+0x23c>
 8009918:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800991c:	4631      	mov	r1, r6
 800991e:	4628      	mov	r0, r5
 8009920:	47b8      	blx	r7
 8009922:	3001      	adds	r0, #1
 8009924:	f43f af0d 	beq.w	8009742 <_printf_float+0xb6>
 8009928:	f04f 0a00 	mov.w	sl, #0
 800992c:	f104 0b1a 	add.w	fp, r4, #26
 8009930:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009932:	425b      	negs	r3, r3
 8009934:	4553      	cmp	r3, sl
 8009936:	dc01      	bgt.n	800993c <_printf_float+0x2b0>
 8009938:	464b      	mov	r3, r9
 800993a:	e793      	b.n	8009864 <_printf_float+0x1d8>
 800993c:	2301      	movs	r3, #1
 800993e:	465a      	mov	r2, fp
 8009940:	4631      	mov	r1, r6
 8009942:	4628      	mov	r0, r5
 8009944:	47b8      	blx	r7
 8009946:	3001      	adds	r0, #1
 8009948:	f43f aefb 	beq.w	8009742 <_printf_float+0xb6>
 800994c:	f10a 0a01 	add.w	sl, sl, #1
 8009950:	e7ee      	b.n	8009930 <_printf_float+0x2a4>
 8009952:	bf00      	nop
 8009954:	7fefffff 	.word	0x7fefffff
 8009958:	0800d5dc 	.word	0x0800d5dc
 800995c:	0800d5e0 	.word	0x0800d5e0
 8009960:	0800d5e4 	.word	0x0800d5e4
 8009964:	0800d5e8 	.word	0x0800d5e8
 8009968:	0800d5ec 	.word	0x0800d5ec
 800996c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800996e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009972:	4553      	cmp	r3, sl
 8009974:	bfa8      	it	ge
 8009976:	4653      	movge	r3, sl
 8009978:	2b00      	cmp	r3, #0
 800997a:	4699      	mov	r9, r3
 800997c:	dc36      	bgt.n	80099ec <_printf_float+0x360>
 800997e:	f04f 0b00 	mov.w	fp, #0
 8009982:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009986:	f104 021a 	add.w	r2, r4, #26
 800998a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800998c:	9306      	str	r3, [sp, #24]
 800998e:	eba3 0309 	sub.w	r3, r3, r9
 8009992:	455b      	cmp	r3, fp
 8009994:	dc31      	bgt.n	80099fa <_printf_float+0x36e>
 8009996:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009998:	459a      	cmp	sl, r3
 800999a:	dc3a      	bgt.n	8009a12 <_printf_float+0x386>
 800999c:	6823      	ldr	r3, [r4, #0]
 800999e:	07da      	lsls	r2, r3, #31
 80099a0:	d437      	bmi.n	8009a12 <_printf_float+0x386>
 80099a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099a4:	ebaa 0903 	sub.w	r9, sl, r3
 80099a8:	9b06      	ldr	r3, [sp, #24]
 80099aa:	ebaa 0303 	sub.w	r3, sl, r3
 80099ae:	4599      	cmp	r9, r3
 80099b0:	bfa8      	it	ge
 80099b2:	4699      	movge	r9, r3
 80099b4:	f1b9 0f00 	cmp.w	r9, #0
 80099b8:	dc33      	bgt.n	8009a22 <_printf_float+0x396>
 80099ba:	f04f 0800 	mov.w	r8, #0
 80099be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80099c2:	f104 0b1a 	add.w	fp, r4, #26
 80099c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099c8:	ebaa 0303 	sub.w	r3, sl, r3
 80099cc:	eba3 0309 	sub.w	r3, r3, r9
 80099d0:	4543      	cmp	r3, r8
 80099d2:	f77f af79 	ble.w	80098c8 <_printf_float+0x23c>
 80099d6:	2301      	movs	r3, #1
 80099d8:	465a      	mov	r2, fp
 80099da:	4631      	mov	r1, r6
 80099dc:	4628      	mov	r0, r5
 80099de:	47b8      	blx	r7
 80099e0:	3001      	adds	r0, #1
 80099e2:	f43f aeae 	beq.w	8009742 <_printf_float+0xb6>
 80099e6:	f108 0801 	add.w	r8, r8, #1
 80099ea:	e7ec      	b.n	80099c6 <_printf_float+0x33a>
 80099ec:	4642      	mov	r2, r8
 80099ee:	4631      	mov	r1, r6
 80099f0:	4628      	mov	r0, r5
 80099f2:	47b8      	blx	r7
 80099f4:	3001      	adds	r0, #1
 80099f6:	d1c2      	bne.n	800997e <_printf_float+0x2f2>
 80099f8:	e6a3      	b.n	8009742 <_printf_float+0xb6>
 80099fa:	2301      	movs	r3, #1
 80099fc:	4631      	mov	r1, r6
 80099fe:	4628      	mov	r0, r5
 8009a00:	9206      	str	r2, [sp, #24]
 8009a02:	47b8      	blx	r7
 8009a04:	3001      	adds	r0, #1
 8009a06:	f43f ae9c 	beq.w	8009742 <_printf_float+0xb6>
 8009a0a:	9a06      	ldr	r2, [sp, #24]
 8009a0c:	f10b 0b01 	add.w	fp, fp, #1
 8009a10:	e7bb      	b.n	800998a <_printf_float+0x2fe>
 8009a12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a16:	4631      	mov	r1, r6
 8009a18:	4628      	mov	r0, r5
 8009a1a:	47b8      	blx	r7
 8009a1c:	3001      	adds	r0, #1
 8009a1e:	d1c0      	bne.n	80099a2 <_printf_float+0x316>
 8009a20:	e68f      	b.n	8009742 <_printf_float+0xb6>
 8009a22:	9a06      	ldr	r2, [sp, #24]
 8009a24:	464b      	mov	r3, r9
 8009a26:	4442      	add	r2, r8
 8009a28:	4631      	mov	r1, r6
 8009a2a:	4628      	mov	r0, r5
 8009a2c:	47b8      	blx	r7
 8009a2e:	3001      	adds	r0, #1
 8009a30:	d1c3      	bne.n	80099ba <_printf_float+0x32e>
 8009a32:	e686      	b.n	8009742 <_printf_float+0xb6>
 8009a34:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009a38:	f1ba 0f01 	cmp.w	sl, #1
 8009a3c:	dc01      	bgt.n	8009a42 <_printf_float+0x3b6>
 8009a3e:	07db      	lsls	r3, r3, #31
 8009a40:	d536      	bpl.n	8009ab0 <_printf_float+0x424>
 8009a42:	2301      	movs	r3, #1
 8009a44:	4642      	mov	r2, r8
 8009a46:	4631      	mov	r1, r6
 8009a48:	4628      	mov	r0, r5
 8009a4a:	47b8      	blx	r7
 8009a4c:	3001      	adds	r0, #1
 8009a4e:	f43f ae78 	beq.w	8009742 <_printf_float+0xb6>
 8009a52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a56:	4631      	mov	r1, r6
 8009a58:	4628      	mov	r0, r5
 8009a5a:	47b8      	blx	r7
 8009a5c:	3001      	adds	r0, #1
 8009a5e:	f43f ae70 	beq.w	8009742 <_printf_float+0xb6>
 8009a62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009a66:	2200      	movs	r2, #0
 8009a68:	2300      	movs	r3, #0
 8009a6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009a6e:	f7f7 f84b 	bl	8000b08 <__aeabi_dcmpeq>
 8009a72:	b9c0      	cbnz	r0, 8009aa6 <_printf_float+0x41a>
 8009a74:	4653      	mov	r3, sl
 8009a76:	f108 0201 	add.w	r2, r8, #1
 8009a7a:	4631      	mov	r1, r6
 8009a7c:	4628      	mov	r0, r5
 8009a7e:	47b8      	blx	r7
 8009a80:	3001      	adds	r0, #1
 8009a82:	d10c      	bne.n	8009a9e <_printf_float+0x412>
 8009a84:	e65d      	b.n	8009742 <_printf_float+0xb6>
 8009a86:	2301      	movs	r3, #1
 8009a88:	465a      	mov	r2, fp
 8009a8a:	4631      	mov	r1, r6
 8009a8c:	4628      	mov	r0, r5
 8009a8e:	47b8      	blx	r7
 8009a90:	3001      	adds	r0, #1
 8009a92:	f43f ae56 	beq.w	8009742 <_printf_float+0xb6>
 8009a96:	f108 0801 	add.w	r8, r8, #1
 8009a9a:	45d0      	cmp	r8, sl
 8009a9c:	dbf3      	blt.n	8009a86 <_printf_float+0x3fa>
 8009a9e:	464b      	mov	r3, r9
 8009aa0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009aa4:	e6df      	b.n	8009866 <_printf_float+0x1da>
 8009aa6:	f04f 0800 	mov.w	r8, #0
 8009aaa:	f104 0b1a 	add.w	fp, r4, #26
 8009aae:	e7f4      	b.n	8009a9a <_printf_float+0x40e>
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	4642      	mov	r2, r8
 8009ab4:	e7e1      	b.n	8009a7a <_printf_float+0x3ee>
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	464a      	mov	r2, r9
 8009aba:	4631      	mov	r1, r6
 8009abc:	4628      	mov	r0, r5
 8009abe:	47b8      	blx	r7
 8009ac0:	3001      	adds	r0, #1
 8009ac2:	f43f ae3e 	beq.w	8009742 <_printf_float+0xb6>
 8009ac6:	f108 0801 	add.w	r8, r8, #1
 8009aca:	68e3      	ldr	r3, [r4, #12]
 8009acc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009ace:	1a5b      	subs	r3, r3, r1
 8009ad0:	4543      	cmp	r3, r8
 8009ad2:	dcf0      	bgt.n	8009ab6 <_printf_float+0x42a>
 8009ad4:	e6fc      	b.n	80098d0 <_printf_float+0x244>
 8009ad6:	f04f 0800 	mov.w	r8, #0
 8009ada:	f104 0919 	add.w	r9, r4, #25
 8009ade:	e7f4      	b.n	8009aca <_printf_float+0x43e>

08009ae0 <_printf_common>:
 8009ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ae4:	4616      	mov	r6, r2
 8009ae6:	4698      	mov	r8, r3
 8009ae8:	688a      	ldr	r2, [r1, #8]
 8009aea:	690b      	ldr	r3, [r1, #16]
 8009aec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009af0:	4293      	cmp	r3, r2
 8009af2:	bfb8      	it	lt
 8009af4:	4613      	movlt	r3, r2
 8009af6:	6033      	str	r3, [r6, #0]
 8009af8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009afc:	4607      	mov	r7, r0
 8009afe:	460c      	mov	r4, r1
 8009b00:	b10a      	cbz	r2, 8009b06 <_printf_common+0x26>
 8009b02:	3301      	adds	r3, #1
 8009b04:	6033      	str	r3, [r6, #0]
 8009b06:	6823      	ldr	r3, [r4, #0]
 8009b08:	0699      	lsls	r1, r3, #26
 8009b0a:	bf42      	ittt	mi
 8009b0c:	6833      	ldrmi	r3, [r6, #0]
 8009b0e:	3302      	addmi	r3, #2
 8009b10:	6033      	strmi	r3, [r6, #0]
 8009b12:	6825      	ldr	r5, [r4, #0]
 8009b14:	f015 0506 	ands.w	r5, r5, #6
 8009b18:	d106      	bne.n	8009b28 <_printf_common+0x48>
 8009b1a:	f104 0a19 	add.w	sl, r4, #25
 8009b1e:	68e3      	ldr	r3, [r4, #12]
 8009b20:	6832      	ldr	r2, [r6, #0]
 8009b22:	1a9b      	subs	r3, r3, r2
 8009b24:	42ab      	cmp	r3, r5
 8009b26:	dc26      	bgt.n	8009b76 <_printf_common+0x96>
 8009b28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009b2c:	6822      	ldr	r2, [r4, #0]
 8009b2e:	3b00      	subs	r3, #0
 8009b30:	bf18      	it	ne
 8009b32:	2301      	movne	r3, #1
 8009b34:	0692      	lsls	r2, r2, #26
 8009b36:	d42b      	bmi.n	8009b90 <_printf_common+0xb0>
 8009b38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009b3c:	4641      	mov	r1, r8
 8009b3e:	4638      	mov	r0, r7
 8009b40:	47c8      	blx	r9
 8009b42:	3001      	adds	r0, #1
 8009b44:	d01e      	beq.n	8009b84 <_printf_common+0xa4>
 8009b46:	6823      	ldr	r3, [r4, #0]
 8009b48:	6922      	ldr	r2, [r4, #16]
 8009b4a:	f003 0306 	and.w	r3, r3, #6
 8009b4e:	2b04      	cmp	r3, #4
 8009b50:	bf02      	ittt	eq
 8009b52:	68e5      	ldreq	r5, [r4, #12]
 8009b54:	6833      	ldreq	r3, [r6, #0]
 8009b56:	1aed      	subeq	r5, r5, r3
 8009b58:	68a3      	ldr	r3, [r4, #8]
 8009b5a:	bf0c      	ite	eq
 8009b5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b60:	2500      	movne	r5, #0
 8009b62:	4293      	cmp	r3, r2
 8009b64:	bfc4      	itt	gt
 8009b66:	1a9b      	subgt	r3, r3, r2
 8009b68:	18ed      	addgt	r5, r5, r3
 8009b6a:	2600      	movs	r6, #0
 8009b6c:	341a      	adds	r4, #26
 8009b6e:	42b5      	cmp	r5, r6
 8009b70:	d11a      	bne.n	8009ba8 <_printf_common+0xc8>
 8009b72:	2000      	movs	r0, #0
 8009b74:	e008      	b.n	8009b88 <_printf_common+0xa8>
 8009b76:	2301      	movs	r3, #1
 8009b78:	4652      	mov	r2, sl
 8009b7a:	4641      	mov	r1, r8
 8009b7c:	4638      	mov	r0, r7
 8009b7e:	47c8      	blx	r9
 8009b80:	3001      	adds	r0, #1
 8009b82:	d103      	bne.n	8009b8c <_printf_common+0xac>
 8009b84:	f04f 30ff 	mov.w	r0, #4294967295
 8009b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b8c:	3501      	adds	r5, #1
 8009b8e:	e7c6      	b.n	8009b1e <_printf_common+0x3e>
 8009b90:	18e1      	adds	r1, r4, r3
 8009b92:	1c5a      	adds	r2, r3, #1
 8009b94:	2030      	movs	r0, #48	@ 0x30
 8009b96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009b9a:	4422      	add	r2, r4
 8009b9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009ba0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009ba4:	3302      	adds	r3, #2
 8009ba6:	e7c7      	b.n	8009b38 <_printf_common+0x58>
 8009ba8:	2301      	movs	r3, #1
 8009baa:	4622      	mov	r2, r4
 8009bac:	4641      	mov	r1, r8
 8009bae:	4638      	mov	r0, r7
 8009bb0:	47c8      	blx	r9
 8009bb2:	3001      	adds	r0, #1
 8009bb4:	d0e6      	beq.n	8009b84 <_printf_common+0xa4>
 8009bb6:	3601      	adds	r6, #1
 8009bb8:	e7d9      	b.n	8009b6e <_printf_common+0x8e>
	...

08009bbc <_printf_i>:
 8009bbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009bc0:	7e0f      	ldrb	r7, [r1, #24]
 8009bc2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009bc4:	2f78      	cmp	r7, #120	@ 0x78
 8009bc6:	4691      	mov	r9, r2
 8009bc8:	4680      	mov	r8, r0
 8009bca:	460c      	mov	r4, r1
 8009bcc:	469a      	mov	sl, r3
 8009bce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009bd2:	d807      	bhi.n	8009be4 <_printf_i+0x28>
 8009bd4:	2f62      	cmp	r7, #98	@ 0x62
 8009bd6:	d80a      	bhi.n	8009bee <_printf_i+0x32>
 8009bd8:	2f00      	cmp	r7, #0
 8009bda:	f000 80d2 	beq.w	8009d82 <_printf_i+0x1c6>
 8009bde:	2f58      	cmp	r7, #88	@ 0x58
 8009be0:	f000 80b9 	beq.w	8009d56 <_printf_i+0x19a>
 8009be4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009be8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009bec:	e03a      	b.n	8009c64 <_printf_i+0xa8>
 8009bee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009bf2:	2b15      	cmp	r3, #21
 8009bf4:	d8f6      	bhi.n	8009be4 <_printf_i+0x28>
 8009bf6:	a101      	add	r1, pc, #4	@ (adr r1, 8009bfc <_printf_i+0x40>)
 8009bf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009bfc:	08009c55 	.word	0x08009c55
 8009c00:	08009c69 	.word	0x08009c69
 8009c04:	08009be5 	.word	0x08009be5
 8009c08:	08009be5 	.word	0x08009be5
 8009c0c:	08009be5 	.word	0x08009be5
 8009c10:	08009be5 	.word	0x08009be5
 8009c14:	08009c69 	.word	0x08009c69
 8009c18:	08009be5 	.word	0x08009be5
 8009c1c:	08009be5 	.word	0x08009be5
 8009c20:	08009be5 	.word	0x08009be5
 8009c24:	08009be5 	.word	0x08009be5
 8009c28:	08009d69 	.word	0x08009d69
 8009c2c:	08009c93 	.word	0x08009c93
 8009c30:	08009d23 	.word	0x08009d23
 8009c34:	08009be5 	.word	0x08009be5
 8009c38:	08009be5 	.word	0x08009be5
 8009c3c:	08009d8b 	.word	0x08009d8b
 8009c40:	08009be5 	.word	0x08009be5
 8009c44:	08009c93 	.word	0x08009c93
 8009c48:	08009be5 	.word	0x08009be5
 8009c4c:	08009be5 	.word	0x08009be5
 8009c50:	08009d2b 	.word	0x08009d2b
 8009c54:	6833      	ldr	r3, [r6, #0]
 8009c56:	1d1a      	adds	r2, r3, #4
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	6032      	str	r2, [r6, #0]
 8009c5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009c60:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009c64:	2301      	movs	r3, #1
 8009c66:	e09d      	b.n	8009da4 <_printf_i+0x1e8>
 8009c68:	6833      	ldr	r3, [r6, #0]
 8009c6a:	6820      	ldr	r0, [r4, #0]
 8009c6c:	1d19      	adds	r1, r3, #4
 8009c6e:	6031      	str	r1, [r6, #0]
 8009c70:	0606      	lsls	r6, r0, #24
 8009c72:	d501      	bpl.n	8009c78 <_printf_i+0xbc>
 8009c74:	681d      	ldr	r5, [r3, #0]
 8009c76:	e003      	b.n	8009c80 <_printf_i+0xc4>
 8009c78:	0645      	lsls	r5, r0, #25
 8009c7a:	d5fb      	bpl.n	8009c74 <_printf_i+0xb8>
 8009c7c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009c80:	2d00      	cmp	r5, #0
 8009c82:	da03      	bge.n	8009c8c <_printf_i+0xd0>
 8009c84:	232d      	movs	r3, #45	@ 0x2d
 8009c86:	426d      	negs	r5, r5
 8009c88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c8c:	4859      	ldr	r0, [pc, #356]	@ (8009df4 <_printf_i+0x238>)
 8009c8e:	230a      	movs	r3, #10
 8009c90:	e011      	b.n	8009cb6 <_printf_i+0xfa>
 8009c92:	6821      	ldr	r1, [r4, #0]
 8009c94:	6833      	ldr	r3, [r6, #0]
 8009c96:	0608      	lsls	r0, r1, #24
 8009c98:	f853 5b04 	ldr.w	r5, [r3], #4
 8009c9c:	d402      	bmi.n	8009ca4 <_printf_i+0xe8>
 8009c9e:	0649      	lsls	r1, r1, #25
 8009ca0:	bf48      	it	mi
 8009ca2:	b2ad      	uxthmi	r5, r5
 8009ca4:	2f6f      	cmp	r7, #111	@ 0x6f
 8009ca6:	4853      	ldr	r0, [pc, #332]	@ (8009df4 <_printf_i+0x238>)
 8009ca8:	6033      	str	r3, [r6, #0]
 8009caa:	bf14      	ite	ne
 8009cac:	230a      	movne	r3, #10
 8009cae:	2308      	moveq	r3, #8
 8009cb0:	2100      	movs	r1, #0
 8009cb2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009cb6:	6866      	ldr	r6, [r4, #4]
 8009cb8:	60a6      	str	r6, [r4, #8]
 8009cba:	2e00      	cmp	r6, #0
 8009cbc:	bfa2      	ittt	ge
 8009cbe:	6821      	ldrge	r1, [r4, #0]
 8009cc0:	f021 0104 	bicge.w	r1, r1, #4
 8009cc4:	6021      	strge	r1, [r4, #0]
 8009cc6:	b90d      	cbnz	r5, 8009ccc <_printf_i+0x110>
 8009cc8:	2e00      	cmp	r6, #0
 8009cca:	d04b      	beq.n	8009d64 <_printf_i+0x1a8>
 8009ccc:	4616      	mov	r6, r2
 8009cce:	fbb5 f1f3 	udiv	r1, r5, r3
 8009cd2:	fb03 5711 	mls	r7, r3, r1, r5
 8009cd6:	5dc7      	ldrb	r7, [r0, r7]
 8009cd8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009cdc:	462f      	mov	r7, r5
 8009cde:	42bb      	cmp	r3, r7
 8009ce0:	460d      	mov	r5, r1
 8009ce2:	d9f4      	bls.n	8009cce <_printf_i+0x112>
 8009ce4:	2b08      	cmp	r3, #8
 8009ce6:	d10b      	bne.n	8009d00 <_printf_i+0x144>
 8009ce8:	6823      	ldr	r3, [r4, #0]
 8009cea:	07df      	lsls	r7, r3, #31
 8009cec:	d508      	bpl.n	8009d00 <_printf_i+0x144>
 8009cee:	6923      	ldr	r3, [r4, #16]
 8009cf0:	6861      	ldr	r1, [r4, #4]
 8009cf2:	4299      	cmp	r1, r3
 8009cf4:	bfde      	ittt	le
 8009cf6:	2330      	movle	r3, #48	@ 0x30
 8009cf8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009cfc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009d00:	1b92      	subs	r2, r2, r6
 8009d02:	6122      	str	r2, [r4, #16]
 8009d04:	f8cd a000 	str.w	sl, [sp]
 8009d08:	464b      	mov	r3, r9
 8009d0a:	aa03      	add	r2, sp, #12
 8009d0c:	4621      	mov	r1, r4
 8009d0e:	4640      	mov	r0, r8
 8009d10:	f7ff fee6 	bl	8009ae0 <_printf_common>
 8009d14:	3001      	adds	r0, #1
 8009d16:	d14a      	bne.n	8009dae <_printf_i+0x1f2>
 8009d18:	f04f 30ff 	mov.w	r0, #4294967295
 8009d1c:	b004      	add	sp, #16
 8009d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d22:	6823      	ldr	r3, [r4, #0]
 8009d24:	f043 0320 	orr.w	r3, r3, #32
 8009d28:	6023      	str	r3, [r4, #0]
 8009d2a:	4833      	ldr	r0, [pc, #204]	@ (8009df8 <_printf_i+0x23c>)
 8009d2c:	2778      	movs	r7, #120	@ 0x78
 8009d2e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009d32:	6823      	ldr	r3, [r4, #0]
 8009d34:	6831      	ldr	r1, [r6, #0]
 8009d36:	061f      	lsls	r7, r3, #24
 8009d38:	f851 5b04 	ldr.w	r5, [r1], #4
 8009d3c:	d402      	bmi.n	8009d44 <_printf_i+0x188>
 8009d3e:	065f      	lsls	r7, r3, #25
 8009d40:	bf48      	it	mi
 8009d42:	b2ad      	uxthmi	r5, r5
 8009d44:	6031      	str	r1, [r6, #0]
 8009d46:	07d9      	lsls	r1, r3, #31
 8009d48:	bf44      	itt	mi
 8009d4a:	f043 0320 	orrmi.w	r3, r3, #32
 8009d4e:	6023      	strmi	r3, [r4, #0]
 8009d50:	b11d      	cbz	r5, 8009d5a <_printf_i+0x19e>
 8009d52:	2310      	movs	r3, #16
 8009d54:	e7ac      	b.n	8009cb0 <_printf_i+0xf4>
 8009d56:	4827      	ldr	r0, [pc, #156]	@ (8009df4 <_printf_i+0x238>)
 8009d58:	e7e9      	b.n	8009d2e <_printf_i+0x172>
 8009d5a:	6823      	ldr	r3, [r4, #0]
 8009d5c:	f023 0320 	bic.w	r3, r3, #32
 8009d60:	6023      	str	r3, [r4, #0]
 8009d62:	e7f6      	b.n	8009d52 <_printf_i+0x196>
 8009d64:	4616      	mov	r6, r2
 8009d66:	e7bd      	b.n	8009ce4 <_printf_i+0x128>
 8009d68:	6833      	ldr	r3, [r6, #0]
 8009d6a:	6825      	ldr	r5, [r4, #0]
 8009d6c:	6961      	ldr	r1, [r4, #20]
 8009d6e:	1d18      	adds	r0, r3, #4
 8009d70:	6030      	str	r0, [r6, #0]
 8009d72:	062e      	lsls	r6, r5, #24
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	d501      	bpl.n	8009d7c <_printf_i+0x1c0>
 8009d78:	6019      	str	r1, [r3, #0]
 8009d7a:	e002      	b.n	8009d82 <_printf_i+0x1c6>
 8009d7c:	0668      	lsls	r0, r5, #25
 8009d7e:	d5fb      	bpl.n	8009d78 <_printf_i+0x1bc>
 8009d80:	8019      	strh	r1, [r3, #0]
 8009d82:	2300      	movs	r3, #0
 8009d84:	6123      	str	r3, [r4, #16]
 8009d86:	4616      	mov	r6, r2
 8009d88:	e7bc      	b.n	8009d04 <_printf_i+0x148>
 8009d8a:	6833      	ldr	r3, [r6, #0]
 8009d8c:	1d1a      	adds	r2, r3, #4
 8009d8e:	6032      	str	r2, [r6, #0]
 8009d90:	681e      	ldr	r6, [r3, #0]
 8009d92:	6862      	ldr	r2, [r4, #4]
 8009d94:	2100      	movs	r1, #0
 8009d96:	4630      	mov	r0, r6
 8009d98:	f7f6 fa3a 	bl	8000210 <memchr>
 8009d9c:	b108      	cbz	r0, 8009da2 <_printf_i+0x1e6>
 8009d9e:	1b80      	subs	r0, r0, r6
 8009da0:	6060      	str	r0, [r4, #4]
 8009da2:	6863      	ldr	r3, [r4, #4]
 8009da4:	6123      	str	r3, [r4, #16]
 8009da6:	2300      	movs	r3, #0
 8009da8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009dac:	e7aa      	b.n	8009d04 <_printf_i+0x148>
 8009dae:	6923      	ldr	r3, [r4, #16]
 8009db0:	4632      	mov	r2, r6
 8009db2:	4649      	mov	r1, r9
 8009db4:	4640      	mov	r0, r8
 8009db6:	47d0      	blx	sl
 8009db8:	3001      	adds	r0, #1
 8009dba:	d0ad      	beq.n	8009d18 <_printf_i+0x15c>
 8009dbc:	6823      	ldr	r3, [r4, #0]
 8009dbe:	079b      	lsls	r3, r3, #30
 8009dc0:	d413      	bmi.n	8009dea <_printf_i+0x22e>
 8009dc2:	68e0      	ldr	r0, [r4, #12]
 8009dc4:	9b03      	ldr	r3, [sp, #12]
 8009dc6:	4298      	cmp	r0, r3
 8009dc8:	bfb8      	it	lt
 8009dca:	4618      	movlt	r0, r3
 8009dcc:	e7a6      	b.n	8009d1c <_printf_i+0x160>
 8009dce:	2301      	movs	r3, #1
 8009dd0:	4632      	mov	r2, r6
 8009dd2:	4649      	mov	r1, r9
 8009dd4:	4640      	mov	r0, r8
 8009dd6:	47d0      	blx	sl
 8009dd8:	3001      	adds	r0, #1
 8009dda:	d09d      	beq.n	8009d18 <_printf_i+0x15c>
 8009ddc:	3501      	adds	r5, #1
 8009dde:	68e3      	ldr	r3, [r4, #12]
 8009de0:	9903      	ldr	r1, [sp, #12]
 8009de2:	1a5b      	subs	r3, r3, r1
 8009de4:	42ab      	cmp	r3, r5
 8009de6:	dcf2      	bgt.n	8009dce <_printf_i+0x212>
 8009de8:	e7eb      	b.n	8009dc2 <_printf_i+0x206>
 8009dea:	2500      	movs	r5, #0
 8009dec:	f104 0619 	add.w	r6, r4, #25
 8009df0:	e7f5      	b.n	8009dde <_printf_i+0x222>
 8009df2:	bf00      	nop
 8009df4:	0800d5ee 	.word	0x0800d5ee
 8009df8:	0800d5ff 	.word	0x0800d5ff

08009dfc <std>:
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	b510      	push	{r4, lr}
 8009e00:	4604      	mov	r4, r0
 8009e02:	e9c0 3300 	strd	r3, r3, [r0]
 8009e06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e0a:	6083      	str	r3, [r0, #8]
 8009e0c:	8181      	strh	r1, [r0, #12]
 8009e0e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009e10:	81c2      	strh	r2, [r0, #14]
 8009e12:	6183      	str	r3, [r0, #24]
 8009e14:	4619      	mov	r1, r3
 8009e16:	2208      	movs	r2, #8
 8009e18:	305c      	adds	r0, #92	@ 0x5c
 8009e1a:	f000 f914 	bl	800a046 <memset>
 8009e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8009e54 <std+0x58>)
 8009e20:	6263      	str	r3, [r4, #36]	@ 0x24
 8009e22:	4b0d      	ldr	r3, [pc, #52]	@ (8009e58 <std+0x5c>)
 8009e24:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009e26:	4b0d      	ldr	r3, [pc, #52]	@ (8009e5c <std+0x60>)
 8009e28:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8009e60 <std+0x64>)
 8009e2c:	6323      	str	r3, [r4, #48]	@ 0x30
 8009e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8009e64 <std+0x68>)
 8009e30:	6224      	str	r4, [r4, #32]
 8009e32:	429c      	cmp	r4, r3
 8009e34:	d006      	beq.n	8009e44 <std+0x48>
 8009e36:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009e3a:	4294      	cmp	r4, r2
 8009e3c:	d002      	beq.n	8009e44 <std+0x48>
 8009e3e:	33d0      	adds	r3, #208	@ 0xd0
 8009e40:	429c      	cmp	r4, r3
 8009e42:	d105      	bne.n	8009e50 <std+0x54>
 8009e44:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e4c:	f000 b978 	b.w	800a140 <__retarget_lock_init_recursive>
 8009e50:	bd10      	pop	{r4, pc}
 8009e52:	bf00      	nop
 8009e54:	08009fc1 	.word	0x08009fc1
 8009e58:	08009fe3 	.word	0x08009fe3
 8009e5c:	0800a01b 	.word	0x0800a01b
 8009e60:	0800a03f 	.word	0x0800a03f
 8009e64:	200006c0 	.word	0x200006c0

08009e68 <stdio_exit_handler>:
 8009e68:	4a02      	ldr	r2, [pc, #8]	@ (8009e74 <stdio_exit_handler+0xc>)
 8009e6a:	4903      	ldr	r1, [pc, #12]	@ (8009e78 <stdio_exit_handler+0x10>)
 8009e6c:	4803      	ldr	r0, [pc, #12]	@ (8009e7c <stdio_exit_handler+0x14>)
 8009e6e:	f000 b869 	b.w	8009f44 <_fwalk_sglue>
 8009e72:	bf00      	nop
 8009e74:	20000040 	.word	0x20000040
 8009e78:	0800ba9d 	.word	0x0800ba9d
 8009e7c:	20000050 	.word	0x20000050

08009e80 <cleanup_stdio>:
 8009e80:	6841      	ldr	r1, [r0, #4]
 8009e82:	4b0c      	ldr	r3, [pc, #48]	@ (8009eb4 <cleanup_stdio+0x34>)
 8009e84:	4299      	cmp	r1, r3
 8009e86:	b510      	push	{r4, lr}
 8009e88:	4604      	mov	r4, r0
 8009e8a:	d001      	beq.n	8009e90 <cleanup_stdio+0x10>
 8009e8c:	f001 fe06 	bl	800ba9c <_fflush_r>
 8009e90:	68a1      	ldr	r1, [r4, #8]
 8009e92:	4b09      	ldr	r3, [pc, #36]	@ (8009eb8 <cleanup_stdio+0x38>)
 8009e94:	4299      	cmp	r1, r3
 8009e96:	d002      	beq.n	8009e9e <cleanup_stdio+0x1e>
 8009e98:	4620      	mov	r0, r4
 8009e9a:	f001 fdff 	bl	800ba9c <_fflush_r>
 8009e9e:	68e1      	ldr	r1, [r4, #12]
 8009ea0:	4b06      	ldr	r3, [pc, #24]	@ (8009ebc <cleanup_stdio+0x3c>)
 8009ea2:	4299      	cmp	r1, r3
 8009ea4:	d004      	beq.n	8009eb0 <cleanup_stdio+0x30>
 8009ea6:	4620      	mov	r0, r4
 8009ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009eac:	f001 bdf6 	b.w	800ba9c <_fflush_r>
 8009eb0:	bd10      	pop	{r4, pc}
 8009eb2:	bf00      	nop
 8009eb4:	200006c0 	.word	0x200006c0
 8009eb8:	20000728 	.word	0x20000728
 8009ebc:	20000790 	.word	0x20000790

08009ec0 <global_stdio_init.part.0>:
 8009ec0:	b510      	push	{r4, lr}
 8009ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8009ef0 <global_stdio_init.part.0+0x30>)
 8009ec4:	4c0b      	ldr	r4, [pc, #44]	@ (8009ef4 <global_stdio_init.part.0+0x34>)
 8009ec6:	4a0c      	ldr	r2, [pc, #48]	@ (8009ef8 <global_stdio_init.part.0+0x38>)
 8009ec8:	601a      	str	r2, [r3, #0]
 8009eca:	4620      	mov	r0, r4
 8009ecc:	2200      	movs	r2, #0
 8009ece:	2104      	movs	r1, #4
 8009ed0:	f7ff ff94 	bl	8009dfc <std>
 8009ed4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009ed8:	2201      	movs	r2, #1
 8009eda:	2109      	movs	r1, #9
 8009edc:	f7ff ff8e 	bl	8009dfc <std>
 8009ee0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009ee4:	2202      	movs	r2, #2
 8009ee6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009eea:	2112      	movs	r1, #18
 8009eec:	f7ff bf86 	b.w	8009dfc <std>
 8009ef0:	200007f8 	.word	0x200007f8
 8009ef4:	200006c0 	.word	0x200006c0
 8009ef8:	08009e69 	.word	0x08009e69

08009efc <__sfp_lock_acquire>:
 8009efc:	4801      	ldr	r0, [pc, #4]	@ (8009f04 <__sfp_lock_acquire+0x8>)
 8009efe:	f000 b920 	b.w	800a142 <__retarget_lock_acquire_recursive>
 8009f02:	bf00      	nop
 8009f04:	20000801 	.word	0x20000801

08009f08 <__sfp_lock_release>:
 8009f08:	4801      	ldr	r0, [pc, #4]	@ (8009f10 <__sfp_lock_release+0x8>)
 8009f0a:	f000 b91b 	b.w	800a144 <__retarget_lock_release_recursive>
 8009f0e:	bf00      	nop
 8009f10:	20000801 	.word	0x20000801

08009f14 <__sinit>:
 8009f14:	b510      	push	{r4, lr}
 8009f16:	4604      	mov	r4, r0
 8009f18:	f7ff fff0 	bl	8009efc <__sfp_lock_acquire>
 8009f1c:	6a23      	ldr	r3, [r4, #32]
 8009f1e:	b11b      	cbz	r3, 8009f28 <__sinit+0x14>
 8009f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f24:	f7ff bff0 	b.w	8009f08 <__sfp_lock_release>
 8009f28:	4b04      	ldr	r3, [pc, #16]	@ (8009f3c <__sinit+0x28>)
 8009f2a:	6223      	str	r3, [r4, #32]
 8009f2c:	4b04      	ldr	r3, [pc, #16]	@ (8009f40 <__sinit+0x2c>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d1f5      	bne.n	8009f20 <__sinit+0xc>
 8009f34:	f7ff ffc4 	bl	8009ec0 <global_stdio_init.part.0>
 8009f38:	e7f2      	b.n	8009f20 <__sinit+0xc>
 8009f3a:	bf00      	nop
 8009f3c:	08009e81 	.word	0x08009e81
 8009f40:	200007f8 	.word	0x200007f8

08009f44 <_fwalk_sglue>:
 8009f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f48:	4607      	mov	r7, r0
 8009f4a:	4688      	mov	r8, r1
 8009f4c:	4614      	mov	r4, r2
 8009f4e:	2600      	movs	r6, #0
 8009f50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009f54:	f1b9 0901 	subs.w	r9, r9, #1
 8009f58:	d505      	bpl.n	8009f66 <_fwalk_sglue+0x22>
 8009f5a:	6824      	ldr	r4, [r4, #0]
 8009f5c:	2c00      	cmp	r4, #0
 8009f5e:	d1f7      	bne.n	8009f50 <_fwalk_sglue+0xc>
 8009f60:	4630      	mov	r0, r6
 8009f62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f66:	89ab      	ldrh	r3, [r5, #12]
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	d907      	bls.n	8009f7c <_fwalk_sglue+0x38>
 8009f6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009f70:	3301      	adds	r3, #1
 8009f72:	d003      	beq.n	8009f7c <_fwalk_sglue+0x38>
 8009f74:	4629      	mov	r1, r5
 8009f76:	4638      	mov	r0, r7
 8009f78:	47c0      	blx	r8
 8009f7a:	4306      	orrs	r6, r0
 8009f7c:	3568      	adds	r5, #104	@ 0x68
 8009f7e:	e7e9      	b.n	8009f54 <_fwalk_sglue+0x10>

08009f80 <siprintf>:
 8009f80:	b40e      	push	{r1, r2, r3}
 8009f82:	b500      	push	{lr}
 8009f84:	b09c      	sub	sp, #112	@ 0x70
 8009f86:	ab1d      	add	r3, sp, #116	@ 0x74
 8009f88:	9002      	str	r0, [sp, #8]
 8009f8a:	9006      	str	r0, [sp, #24]
 8009f8c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009f90:	4809      	ldr	r0, [pc, #36]	@ (8009fb8 <siprintf+0x38>)
 8009f92:	9107      	str	r1, [sp, #28]
 8009f94:	9104      	str	r1, [sp, #16]
 8009f96:	4909      	ldr	r1, [pc, #36]	@ (8009fbc <siprintf+0x3c>)
 8009f98:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f9c:	9105      	str	r1, [sp, #20]
 8009f9e:	6800      	ldr	r0, [r0, #0]
 8009fa0:	9301      	str	r3, [sp, #4]
 8009fa2:	a902      	add	r1, sp, #8
 8009fa4:	f001 fbfa 	bl	800b79c <_svfiprintf_r>
 8009fa8:	9b02      	ldr	r3, [sp, #8]
 8009faa:	2200      	movs	r2, #0
 8009fac:	701a      	strb	r2, [r3, #0]
 8009fae:	b01c      	add	sp, #112	@ 0x70
 8009fb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009fb4:	b003      	add	sp, #12
 8009fb6:	4770      	bx	lr
 8009fb8:	2000004c 	.word	0x2000004c
 8009fbc:	ffff0208 	.word	0xffff0208

08009fc0 <__sread>:
 8009fc0:	b510      	push	{r4, lr}
 8009fc2:	460c      	mov	r4, r1
 8009fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fc8:	f000 f86c 	bl	800a0a4 <_read_r>
 8009fcc:	2800      	cmp	r0, #0
 8009fce:	bfab      	itete	ge
 8009fd0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009fd2:	89a3      	ldrhlt	r3, [r4, #12]
 8009fd4:	181b      	addge	r3, r3, r0
 8009fd6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009fda:	bfac      	ite	ge
 8009fdc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009fde:	81a3      	strhlt	r3, [r4, #12]
 8009fe0:	bd10      	pop	{r4, pc}

08009fe2 <__swrite>:
 8009fe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fe6:	461f      	mov	r7, r3
 8009fe8:	898b      	ldrh	r3, [r1, #12]
 8009fea:	05db      	lsls	r3, r3, #23
 8009fec:	4605      	mov	r5, r0
 8009fee:	460c      	mov	r4, r1
 8009ff0:	4616      	mov	r6, r2
 8009ff2:	d505      	bpl.n	800a000 <__swrite+0x1e>
 8009ff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ff8:	2302      	movs	r3, #2
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	f000 f840 	bl	800a080 <_lseek_r>
 800a000:	89a3      	ldrh	r3, [r4, #12]
 800a002:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a006:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a00a:	81a3      	strh	r3, [r4, #12]
 800a00c:	4632      	mov	r2, r6
 800a00e:	463b      	mov	r3, r7
 800a010:	4628      	mov	r0, r5
 800a012:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a016:	f000 b857 	b.w	800a0c8 <_write_r>

0800a01a <__sseek>:
 800a01a:	b510      	push	{r4, lr}
 800a01c:	460c      	mov	r4, r1
 800a01e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a022:	f000 f82d 	bl	800a080 <_lseek_r>
 800a026:	1c43      	adds	r3, r0, #1
 800a028:	89a3      	ldrh	r3, [r4, #12]
 800a02a:	bf15      	itete	ne
 800a02c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a02e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a032:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a036:	81a3      	strheq	r3, [r4, #12]
 800a038:	bf18      	it	ne
 800a03a:	81a3      	strhne	r3, [r4, #12]
 800a03c:	bd10      	pop	{r4, pc}

0800a03e <__sclose>:
 800a03e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a042:	f000 b80d 	b.w	800a060 <_close_r>

0800a046 <memset>:
 800a046:	4402      	add	r2, r0
 800a048:	4603      	mov	r3, r0
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d100      	bne.n	800a050 <memset+0xa>
 800a04e:	4770      	bx	lr
 800a050:	f803 1b01 	strb.w	r1, [r3], #1
 800a054:	e7f9      	b.n	800a04a <memset+0x4>
	...

0800a058 <_localeconv_r>:
 800a058:	4800      	ldr	r0, [pc, #0]	@ (800a05c <_localeconv_r+0x4>)
 800a05a:	4770      	bx	lr
 800a05c:	2000018c 	.word	0x2000018c

0800a060 <_close_r>:
 800a060:	b538      	push	{r3, r4, r5, lr}
 800a062:	4d06      	ldr	r5, [pc, #24]	@ (800a07c <_close_r+0x1c>)
 800a064:	2300      	movs	r3, #0
 800a066:	4604      	mov	r4, r0
 800a068:	4608      	mov	r0, r1
 800a06a:	602b      	str	r3, [r5, #0]
 800a06c:	f7f9 fdba 	bl	8003be4 <_close>
 800a070:	1c43      	adds	r3, r0, #1
 800a072:	d102      	bne.n	800a07a <_close_r+0x1a>
 800a074:	682b      	ldr	r3, [r5, #0]
 800a076:	b103      	cbz	r3, 800a07a <_close_r+0x1a>
 800a078:	6023      	str	r3, [r4, #0]
 800a07a:	bd38      	pop	{r3, r4, r5, pc}
 800a07c:	200007fc 	.word	0x200007fc

0800a080 <_lseek_r>:
 800a080:	b538      	push	{r3, r4, r5, lr}
 800a082:	4d07      	ldr	r5, [pc, #28]	@ (800a0a0 <_lseek_r+0x20>)
 800a084:	4604      	mov	r4, r0
 800a086:	4608      	mov	r0, r1
 800a088:	4611      	mov	r1, r2
 800a08a:	2200      	movs	r2, #0
 800a08c:	602a      	str	r2, [r5, #0]
 800a08e:	461a      	mov	r2, r3
 800a090:	f7f9 fdcf 	bl	8003c32 <_lseek>
 800a094:	1c43      	adds	r3, r0, #1
 800a096:	d102      	bne.n	800a09e <_lseek_r+0x1e>
 800a098:	682b      	ldr	r3, [r5, #0]
 800a09a:	b103      	cbz	r3, 800a09e <_lseek_r+0x1e>
 800a09c:	6023      	str	r3, [r4, #0]
 800a09e:	bd38      	pop	{r3, r4, r5, pc}
 800a0a0:	200007fc 	.word	0x200007fc

0800a0a4 <_read_r>:
 800a0a4:	b538      	push	{r3, r4, r5, lr}
 800a0a6:	4d07      	ldr	r5, [pc, #28]	@ (800a0c4 <_read_r+0x20>)
 800a0a8:	4604      	mov	r4, r0
 800a0aa:	4608      	mov	r0, r1
 800a0ac:	4611      	mov	r1, r2
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	602a      	str	r2, [r5, #0]
 800a0b2:	461a      	mov	r2, r3
 800a0b4:	f7f9 fd5d 	bl	8003b72 <_read>
 800a0b8:	1c43      	adds	r3, r0, #1
 800a0ba:	d102      	bne.n	800a0c2 <_read_r+0x1e>
 800a0bc:	682b      	ldr	r3, [r5, #0]
 800a0be:	b103      	cbz	r3, 800a0c2 <_read_r+0x1e>
 800a0c0:	6023      	str	r3, [r4, #0]
 800a0c2:	bd38      	pop	{r3, r4, r5, pc}
 800a0c4:	200007fc 	.word	0x200007fc

0800a0c8 <_write_r>:
 800a0c8:	b538      	push	{r3, r4, r5, lr}
 800a0ca:	4d07      	ldr	r5, [pc, #28]	@ (800a0e8 <_write_r+0x20>)
 800a0cc:	4604      	mov	r4, r0
 800a0ce:	4608      	mov	r0, r1
 800a0d0:	4611      	mov	r1, r2
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	602a      	str	r2, [r5, #0]
 800a0d6:	461a      	mov	r2, r3
 800a0d8:	f7f9 fd68 	bl	8003bac <_write>
 800a0dc:	1c43      	adds	r3, r0, #1
 800a0de:	d102      	bne.n	800a0e6 <_write_r+0x1e>
 800a0e0:	682b      	ldr	r3, [r5, #0]
 800a0e2:	b103      	cbz	r3, 800a0e6 <_write_r+0x1e>
 800a0e4:	6023      	str	r3, [r4, #0]
 800a0e6:	bd38      	pop	{r3, r4, r5, pc}
 800a0e8:	200007fc 	.word	0x200007fc

0800a0ec <__errno>:
 800a0ec:	4b01      	ldr	r3, [pc, #4]	@ (800a0f4 <__errno+0x8>)
 800a0ee:	6818      	ldr	r0, [r3, #0]
 800a0f0:	4770      	bx	lr
 800a0f2:	bf00      	nop
 800a0f4:	2000004c 	.word	0x2000004c

0800a0f8 <__libc_init_array>:
 800a0f8:	b570      	push	{r4, r5, r6, lr}
 800a0fa:	4d0d      	ldr	r5, [pc, #52]	@ (800a130 <__libc_init_array+0x38>)
 800a0fc:	4c0d      	ldr	r4, [pc, #52]	@ (800a134 <__libc_init_array+0x3c>)
 800a0fe:	1b64      	subs	r4, r4, r5
 800a100:	10a4      	asrs	r4, r4, #2
 800a102:	2600      	movs	r6, #0
 800a104:	42a6      	cmp	r6, r4
 800a106:	d109      	bne.n	800a11c <__libc_init_array+0x24>
 800a108:	4d0b      	ldr	r5, [pc, #44]	@ (800a138 <__libc_init_array+0x40>)
 800a10a:	4c0c      	ldr	r4, [pc, #48]	@ (800a13c <__libc_init_array+0x44>)
 800a10c:	f003 fa44 	bl	800d598 <_init>
 800a110:	1b64      	subs	r4, r4, r5
 800a112:	10a4      	asrs	r4, r4, #2
 800a114:	2600      	movs	r6, #0
 800a116:	42a6      	cmp	r6, r4
 800a118:	d105      	bne.n	800a126 <__libc_init_array+0x2e>
 800a11a:	bd70      	pop	{r4, r5, r6, pc}
 800a11c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a120:	4798      	blx	r3
 800a122:	3601      	adds	r6, #1
 800a124:	e7ee      	b.n	800a104 <__libc_init_array+0xc>
 800a126:	f855 3b04 	ldr.w	r3, [r5], #4
 800a12a:	4798      	blx	r3
 800a12c:	3601      	adds	r6, #1
 800a12e:	e7f2      	b.n	800a116 <__libc_init_array+0x1e>
 800a130:	0800db30 	.word	0x0800db30
 800a134:	0800db30 	.word	0x0800db30
 800a138:	0800db30 	.word	0x0800db30
 800a13c:	0800db34 	.word	0x0800db34

0800a140 <__retarget_lock_init_recursive>:
 800a140:	4770      	bx	lr

0800a142 <__retarget_lock_acquire_recursive>:
 800a142:	4770      	bx	lr

0800a144 <__retarget_lock_release_recursive>:
 800a144:	4770      	bx	lr

0800a146 <quorem>:
 800a146:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a14a:	6903      	ldr	r3, [r0, #16]
 800a14c:	690c      	ldr	r4, [r1, #16]
 800a14e:	42a3      	cmp	r3, r4
 800a150:	4607      	mov	r7, r0
 800a152:	db7e      	blt.n	800a252 <quorem+0x10c>
 800a154:	3c01      	subs	r4, #1
 800a156:	f101 0814 	add.w	r8, r1, #20
 800a15a:	00a3      	lsls	r3, r4, #2
 800a15c:	f100 0514 	add.w	r5, r0, #20
 800a160:	9300      	str	r3, [sp, #0]
 800a162:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a166:	9301      	str	r3, [sp, #4]
 800a168:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a16c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a170:	3301      	adds	r3, #1
 800a172:	429a      	cmp	r2, r3
 800a174:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a178:	fbb2 f6f3 	udiv	r6, r2, r3
 800a17c:	d32e      	bcc.n	800a1dc <quorem+0x96>
 800a17e:	f04f 0a00 	mov.w	sl, #0
 800a182:	46c4      	mov	ip, r8
 800a184:	46ae      	mov	lr, r5
 800a186:	46d3      	mov	fp, sl
 800a188:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a18c:	b298      	uxth	r0, r3
 800a18e:	fb06 a000 	mla	r0, r6, r0, sl
 800a192:	0c02      	lsrs	r2, r0, #16
 800a194:	0c1b      	lsrs	r3, r3, #16
 800a196:	fb06 2303 	mla	r3, r6, r3, r2
 800a19a:	f8de 2000 	ldr.w	r2, [lr]
 800a19e:	b280      	uxth	r0, r0
 800a1a0:	b292      	uxth	r2, r2
 800a1a2:	1a12      	subs	r2, r2, r0
 800a1a4:	445a      	add	r2, fp
 800a1a6:	f8de 0000 	ldr.w	r0, [lr]
 800a1aa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a1ae:	b29b      	uxth	r3, r3
 800a1b0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a1b4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a1b8:	b292      	uxth	r2, r2
 800a1ba:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a1be:	45e1      	cmp	r9, ip
 800a1c0:	f84e 2b04 	str.w	r2, [lr], #4
 800a1c4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a1c8:	d2de      	bcs.n	800a188 <quorem+0x42>
 800a1ca:	9b00      	ldr	r3, [sp, #0]
 800a1cc:	58eb      	ldr	r3, [r5, r3]
 800a1ce:	b92b      	cbnz	r3, 800a1dc <quorem+0x96>
 800a1d0:	9b01      	ldr	r3, [sp, #4]
 800a1d2:	3b04      	subs	r3, #4
 800a1d4:	429d      	cmp	r5, r3
 800a1d6:	461a      	mov	r2, r3
 800a1d8:	d32f      	bcc.n	800a23a <quorem+0xf4>
 800a1da:	613c      	str	r4, [r7, #16]
 800a1dc:	4638      	mov	r0, r7
 800a1de:	f001 f979 	bl	800b4d4 <__mcmp>
 800a1e2:	2800      	cmp	r0, #0
 800a1e4:	db25      	blt.n	800a232 <quorem+0xec>
 800a1e6:	4629      	mov	r1, r5
 800a1e8:	2000      	movs	r0, #0
 800a1ea:	f858 2b04 	ldr.w	r2, [r8], #4
 800a1ee:	f8d1 c000 	ldr.w	ip, [r1]
 800a1f2:	fa1f fe82 	uxth.w	lr, r2
 800a1f6:	fa1f f38c 	uxth.w	r3, ip
 800a1fa:	eba3 030e 	sub.w	r3, r3, lr
 800a1fe:	4403      	add	r3, r0
 800a200:	0c12      	lsrs	r2, r2, #16
 800a202:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a206:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a20a:	b29b      	uxth	r3, r3
 800a20c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a210:	45c1      	cmp	r9, r8
 800a212:	f841 3b04 	str.w	r3, [r1], #4
 800a216:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a21a:	d2e6      	bcs.n	800a1ea <quorem+0xa4>
 800a21c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a220:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a224:	b922      	cbnz	r2, 800a230 <quorem+0xea>
 800a226:	3b04      	subs	r3, #4
 800a228:	429d      	cmp	r5, r3
 800a22a:	461a      	mov	r2, r3
 800a22c:	d30b      	bcc.n	800a246 <quorem+0x100>
 800a22e:	613c      	str	r4, [r7, #16]
 800a230:	3601      	adds	r6, #1
 800a232:	4630      	mov	r0, r6
 800a234:	b003      	add	sp, #12
 800a236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a23a:	6812      	ldr	r2, [r2, #0]
 800a23c:	3b04      	subs	r3, #4
 800a23e:	2a00      	cmp	r2, #0
 800a240:	d1cb      	bne.n	800a1da <quorem+0x94>
 800a242:	3c01      	subs	r4, #1
 800a244:	e7c6      	b.n	800a1d4 <quorem+0x8e>
 800a246:	6812      	ldr	r2, [r2, #0]
 800a248:	3b04      	subs	r3, #4
 800a24a:	2a00      	cmp	r2, #0
 800a24c:	d1ef      	bne.n	800a22e <quorem+0xe8>
 800a24e:	3c01      	subs	r4, #1
 800a250:	e7ea      	b.n	800a228 <quorem+0xe2>
 800a252:	2000      	movs	r0, #0
 800a254:	e7ee      	b.n	800a234 <quorem+0xee>
	...

0800a258 <_dtoa_r>:
 800a258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a25c:	69c7      	ldr	r7, [r0, #28]
 800a25e:	b099      	sub	sp, #100	@ 0x64
 800a260:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a264:	ec55 4b10 	vmov	r4, r5, d0
 800a268:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a26a:	9109      	str	r1, [sp, #36]	@ 0x24
 800a26c:	4683      	mov	fp, r0
 800a26e:	920e      	str	r2, [sp, #56]	@ 0x38
 800a270:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a272:	b97f      	cbnz	r7, 800a294 <_dtoa_r+0x3c>
 800a274:	2010      	movs	r0, #16
 800a276:	f000 fdfd 	bl	800ae74 <malloc>
 800a27a:	4602      	mov	r2, r0
 800a27c:	f8cb 001c 	str.w	r0, [fp, #28]
 800a280:	b920      	cbnz	r0, 800a28c <_dtoa_r+0x34>
 800a282:	4ba7      	ldr	r3, [pc, #668]	@ (800a520 <_dtoa_r+0x2c8>)
 800a284:	21ef      	movs	r1, #239	@ 0xef
 800a286:	48a7      	ldr	r0, [pc, #668]	@ (800a524 <_dtoa_r+0x2cc>)
 800a288:	f001 fc68 	bl	800bb5c <__assert_func>
 800a28c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a290:	6007      	str	r7, [r0, #0]
 800a292:	60c7      	str	r7, [r0, #12]
 800a294:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a298:	6819      	ldr	r1, [r3, #0]
 800a29a:	b159      	cbz	r1, 800a2b4 <_dtoa_r+0x5c>
 800a29c:	685a      	ldr	r2, [r3, #4]
 800a29e:	604a      	str	r2, [r1, #4]
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	4093      	lsls	r3, r2
 800a2a4:	608b      	str	r3, [r1, #8]
 800a2a6:	4658      	mov	r0, fp
 800a2a8:	f000 feda 	bl	800b060 <_Bfree>
 800a2ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	601a      	str	r2, [r3, #0]
 800a2b4:	1e2b      	subs	r3, r5, #0
 800a2b6:	bfb9      	ittee	lt
 800a2b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a2bc:	9303      	strlt	r3, [sp, #12]
 800a2be:	2300      	movge	r3, #0
 800a2c0:	6033      	strge	r3, [r6, #0]
 800a2c2:	9f03      	ldr	r7, [sp, #12]
 800a2c4:	4b98      	ldr	r3, [pc, #608]	@ (800a528 <_dtoa_r+0x2d0>)
 800a2c6:	bfbc      	itt	lt
 800a2c8:	2201      	movlt	r2, #1
 800a2ca:	6032      	strlt	r2, [r6, #0]
 800a2cc:	43bb      	bics	r3, r7
 800a2ce:	d112      	bne.n	800a2f6 <_dtoa_r+0x9e>
 800a2d0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a2d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a2d6:	6013      	str	r3, [r2, #0]
 800a2d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a2dc:	4323      	orrs	r3, r4
 800a2de:	f000 854d 	beq.w	800ad7c <_dtoa_r+0xb24>
 800a2e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a2e4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a53c <_dtoa_r+0x2e4>
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	f000 854f 	beq.w	800ad8c <_dtoa_r+0xb34>
 800a2ee:	f10a 0303 	add.w	r3, sl, #3
 800a2f2:	f000 bd49 	b.w	800ad88 <_dtoa_r+0xb30>
 800a2f6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	ec51 0b17 	vmov	r0, r1, d7
 800a300:	2300      	movs	r3, #0
 800a302:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a306:	f7f6 fbff 	bl	8000b08 <__aeabi_dcmpeq>
 800a30a:	4680      	mov	r8, r0
 800a30c:	b158      	cbz	r0, 800a326 <_dtoa_r+0xce>
 800a30e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a310:	2301      	movs	r3, #1
 800a312:	6013      	str	r3, [r2, #0]
 800a314:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a316:	b113      	cbz	r3, 800a31e <_dtoa_r+0xc6>
 800a318:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a31a:	4b84      	ldr	r3, [pc, #528]	@ (800a52c <_dtoa_r+0x2d4>)
 800a31c:	6013      	str	r3, [r2, #0]
 800a31e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a540 <_dtoa_r+0x2e8>
 800a322:	f000 bd33 	b.w	800ad8c <_dtoa_r+0xb34>
 800a326:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a32a:	aa16      	add	r2, sp, #88	@ 0x58
 800a32c:	a917      	add	r1, sp, #92	@ 0x5c
 800a32e:	4658      	mov	r0, fp
 800a330:	f001 f980 	bl	800b634 <__d2b>
 800a334:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a338:	4681      	mov	r9, r0
 800a33a:	2e00      	cmp	r6, #0
 800a33c:	d077      	beq.n	800a42e <_dtoa_r+0x1d6>
 800a33e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a340:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a344:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a348:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a34c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a350:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a354:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a358:	4619      	mov	r1, r3
 800a35a:	2200      	movs	r2, #0
 800a35c:	4b74      	ldr	r3, [pc, #464]	@ (800a530 <_dtoa_r+0x2d8>)
 800a35e:	f7f5 ffb3 	bl	80002c8 <__aeabi_dsub>
 800a362:	a369      	add	r3, pc, #420	@ (adr r3, 800a508 <_dtoa_r+0x2b0>)
 800a364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a368:	f7f6 f966 	bl	8000638 <__aeabi_dmul>
 800a36c:	a368      	add	r3, pc, #416	@ (adr r3, 800a510 <_dtoa_r+0x2b8>)
 800a36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a372:	f7f5 ffab 	bl	80002cc <__adddf3>
 800a376:	4604      	mov	r4, r0
 800a378:	4630      	mov	r0, r6
 800a37a:	460d      	mov	r5, r1
 800a37c:	f7f6 f8f2 	bl	8000564 <__aeabi_i2d>
 800a380:	a365      	add	r3, pc, #404	@ (adr r3, 800a518 <_dtoa_r+0x2c0>)
 800a382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a386:	f7f6 f957 	bl	8000638 <__aeabi_dmul>
 800a38a:	4602      	mov	r2, r0
 800a38c:	460b      	mov	r3, r1
 800a38e:	4620      	mov	r0, r4
 800a390:	4629      	mov	r1, r5
 800a392:	f7f5 ff9b 	bl	80002cc <__adddf3>
 800a396:	4604      	mov	r4, r0
 800a398:	460d      	mov	r5, r1
 800a39a:	f7f6 fbfd 	bl	8000b98 <__aeabi_d2iz>
 800a39e:	2200      	movs	r2, #0
 800a3a0:	4607      	mov	r7, r0
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	4620      	mov	r0, r4
 800a3a6:	4629      	mov	r1, r5
 800a3a8:	f7f6 fbb8 	bl	8000b1c <__aeabi_dcmplt>
 800a3ac:	b140      	cbz	r0, 800a3c0 <_dtoa_r+0x168>
 800a3ae:	4638      	mov	r0, r7
 800a3b0:	f7f6 f8d8 	bl	8000564 <__aeabi_i2d>
 800a3b4:	4622      	mov	r2, r4
 800a3b6:	462b      	mov	r3, r5
 800a3b8:	f7f6 fba6 	bl	8000b08 <__aeabi_dcmpeq>
 800a3bc:	b900      	cbnz	r0, 800a3c0 <_dtoa_r+0x168>
 800a3be:	3f01      	subs	r7, #1
 800a3c0:	2f16      	cmp	r7, #22
 800a3c2:	d851      	bhi.n	800a468 <_dtoa_r+0x210>
 800a3c4:	4b5b      	ldr	r3, [pc, #364]	@ (800a534 <_dtoa_r+0x2dc>)
 800a3c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a3d2:	f7f6 fba3 	bl	8000b1c <__aeabi_dcmplt>
 800a3d6:	2800      	cmp	r0, #0
 800a3d8:	d048      	beq.n	800a46c <_dtoa_r+0x214>
 800a3da:	3f01      	subs	r7, #1
 800a3dc:	2300      	movs	r3, #0
 800a3de:	9312      	str	r3, [sp, #72]	@ 0x48
 800a3e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a3e2:	1b9b      	subs	r3, r3, r6
 800a3e4:	1e5a      	subs	r2, r3, #1
 800a3e6:	bf44      	itt	mi
 800a3e8:	f1c3 0801 	rsbmi	r8, r3, #1
 800a3ec:	2300      	movmi	r3, #0
 800a3ee:	9208      	str	r2, [sp, #32]
 800a3f0:	bf54      	ite	pl
 800a3f2:	f04f 0800 	movpl.w	r8, #0
 800a3f6:	9308      	strmi	r3, [sp, #32]
 800a3f8:	2f00      	cmp	r7, #0
 800a3fa:	db39      	blt.n	800a470 <_dtoa_r+0x218>
 800a3fc:	9b08      	ldr	r3, [sp, #32]
 800a3fe:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a400:	443b      	add	r3, r7
 800a402:	9308      	str	r3, [sp, #32]
 800a404:	2300      	movs	r3, #0
 800a406:	930a      	str	r3, [sp, #40]	@ 0x28
 800a408:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a40a:	2b09      	cmp	r3, #9
 800a40c:	d864      	bhi.n	800a4d8 <_dtoa_r+0x280>
 800a40e:	2b05      	cmp	r3, #5
 800a410:	bfc4      	itt	gt
 800a412:	3b04      	subgt	r3, #4
 800a414:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a416:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a418:	f1a3 0302 	sub.w	r3, r3, #2
 800a41c:	bfcc      	ite	gt
 800a41e:	2400      	movgt	r4, #0
 800a420:	2401      	movle	r4, #1
 800a422:	2b03      	cmp	r3, #3
 800a424:	d863      	bhi.n	800a4ee <_dtoa_r+0x296>
 800a426:	e8df f003 	tbb	[pc, r3]
 800a42a:	372a      	.short	0x372a
 800a42c:	5535      	.short	0x5535
 800a42e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a432:	441e      	add	r6, r3
 800a434:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a438:	2b20      	cmp	r3, #32
 800a43a:	bfc1      	itttt	gt
 800a43c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a440:	409f      	lslgt	r7, r3
 800a442:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a446:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a44a:	bfd6      	itet	le
 800a44c:	f1c3 0320 	rsble	r3, r3, #32
 800a450:	ea47 0003 	orrgt.w	r0, r7, r3
 800a454:	fa04 f003 	lslle.w	r0, r4, r3
 800a458:	f7f6 f874 	bl	8000544 <__aeabi_ui2d>
 800a45c:	2201      	movs	r2, #1
 800a45e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a462:	3e01      	subs	r6, #1
 800a464:	9214      	str	r2, [sp, #80]	@ 0x50
 800a466:	e777      	b.n	800a358 <_dtoa_r+0x100>
 800a468:	2301      	movs	r3, #1
 800a46a:	e7b8      	b.n	800a3de <_dtoa_r+0x186>
 800a46c:	9012      	str	r0, [sp, #72]	@ 0x48
 800a46e:	e7b7      	b.n	800a3e0 <_dtoa_r+0x188>
 800a470:	427b      	negs	r3, r7
 800a472:	930a      	str	r3, [sp, #40]	@ 0x28
 800a474:	2300      	movs	r3, #0
 800a476:	eba8 0807 	sub.w	r8, r8, r7
 800a47a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a47c:	e7c4      	b.n	800a408 <_dtoa_r+0x1b0>
 800a47e:	2300      	movs	r3, #0
 800a480:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a482:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a484:	2b00      	cmp	r3, #0
 800a486:	dc35      	bgt.n	800a4f4 <_dtoa_r+0x29c>
 800a488:	2301      	movs	r3, #1
 800a48a:	9300      	str	r3, [sp, #0]
 800a48c:	9307      	str	r3, [sp, #28]
 800a48e:	461a      	mov	r2, r3
 800a490:	920e      	str	r2, [sp, #56]	@ 0x38
 800a492:	e00b      	b.n	800a4ac <_dtoa_r+0x254>
 800a494:	2301      	movs	r3, #1
 800a496:	e7f3      	b.n	800a480 <_dtoa_r+0x228>
 800a498:	2300      	movs	r3, #0
 800a49a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a49c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a49e:	18fb      	adds	r3, r7, r3
 800a4a0:	9300      	str	r3, [sp, #0]
 800a4a2:	3301      	adds	r3, #1
 800a4a4:	2b01      	cmp	r3, #1
 800a4a6:	9307      	str	r3, [sp, #28]
 800a4a8:	bfb8      	it	lt
 800a4aa:	2301      	movlt	r3, #1
 800a4ac:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a4b0:	2100      	movs	r1, #0
 800a4b2:	2204      	movs	r2, #4
 800a4b4:	f102 0514 	add.w	r5, r2, #20
 800a4b8:	429d      	cmp	r5, r3
 800a4ba:	d91f      	bls.n	800a4fc <_dtoa_r+0x2a4>
 800a4bc:	6041      	str	r1, [r0, #4]
 800a4be:	4658      	mov	r0, fp
 800a4c0:	f000 fd8e 	bl	800afe0 <_Balloc>
 800a4c4:	4682      	mov	sl, r0
 800a4c6:	2800      	cmp	r0, #0
 800a4c8:	d13c      	bne.n	800a544 <_dtoa_r+0x2ec>
 800a4ca:	4b1b      	ldr	r3, [pc, #108]	@ (800a538 <_dtoa_r+0x2e0>)
 800a4cc:	4602      	mov	r2, r0
 800a4ce:	f240 11af 	movw	r1, #431	@ 0x1af
 800a4d2:	e6d8      	b.n	800a286 <_dtoa_r+0x2e>
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	e7e0      	b.n	800a49a <_dtoa_r+0x242>
 800a4d8:	2401      	movs	r4, #1
 800a4da:	2300      	movs	r3, #0
 800a4dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4de:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a4e0:	f04f 33ff 	mov.w	r3, #4294967295
 800a4e4:	9300      	str	r3, [sp, #0]
 800a4e6:	9307      	str	r3, [sp, #28]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	2312      	movs	r3, #18
 800a4ec:	e7d0      	b.n	800a490 <_dtoa_r+0x238>
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a4f2:	e7f5      	b.n	800a4e0 <_dtoa_r+0x288>
 800a4f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a4f6:	9300      	str	r3, [sp, #0]
 800a4f8:	9307      	str	r3, [sp, #28]
 800a4fa:	e7d7      	b.n	800a4ac <_dtoa_r+0x254>
 800a4fc:	3101      	adds	r1, #1
 800a4fe:	0052      	lsls	r2, r2, #1
 800a500:	e7d8      	b.n	800a4b4 <_dtoa_r+0x25c>
 800a502:	bf00      	nop
 800a504:	f3af 8000 	nop.w
 800a508:	636f4361 	.word	0x636f4361
 800a50c:	3fd287a7 	.word	0x3fd287a7
 800a510:	8b60c8b3 	.word	0x8b60c8b3
 800a514:	3fc68a28 	.word	0x3fc68a28
 800a518:	509f79fb 	.word	0x509f79fb
 800a51c:	3fd34413 	.word	0x3fd34413
 800a520:	0800d61d 	.word	0x0800d61d
 800a524:	0800d634 	.word	0x0800d634
 800a528:	7ff00000 	.word	0x7ff00000
 800a52c:	0800d5ed 	.word	0x0800d5ed
 800a530:	3ff80000 	.word	0x3ff80000
 800a534:	0800d730 	.word	0x0800d730
 800a538:	0800d68c 	.word	0x0800d68c
 800a53c:	0800d619 	.word	0x0800d619
 800a540:	0800d5ec 	.word	0x0800d5ec
 800a544:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a548:	6018      	str	r0, [r3, #0]
 800a54a:	9b07      	ldr	r3, [sp, #28]
 800a54c:	2b0e      	cmp	r3, #14
 800a54e:	f200 80a4 	bhi.w	800a69a <_dtoa_r+0x442>
 800a552:	2c00      	cmp	r4, #0
 800a554:	f000 80a1 	beq.w	800a69a <_dtoa_r+0x442>
 800a558:	2f00      	cmp	r7, #0
 800a55a:	dd33      	ble.n	800a5c4 <_dtoa_r+0x36c>
 800a55c:	4bad      	ldr	r3, [pc, #692]	@ (800a814 <_dtoa_r+0x5bc>)
 800a55e:	f007 020f 	and.w	r2, r7, #15
 800a562:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a566:	ed93 7b00 	vldr	d7, [r3]
 800a56a:	05f8      	lsls	r0, r7, #23
 800a56c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a570:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a574:	d516      	bpl.n	800a5a4 <_dtoa_r+0x34c>
 800a576:	4ba8      	ldr	r3, [pc, #672]	@ (800a818 <_dtoa_r+0x5c0>)
 800a578:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a57c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a580:	f7f6 f984 	bl	800088c <__aeabi_ddiv>
 800a584:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a588:	f004 040f 	and.w	r4, r4, #15
 800a58c:	2603      	movs	r6, #3
 800a58e:	4da2      	ldr	r5, [pc, #648]	@ (800a818 <_dtoa_r+0x5c0>)
 800a590:	b954      	cbnz	r4, 800a5a8 <_dtoa_r+0x350>
 800a592:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a596:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a59a:	f7f6 f977 	bl	800088c <__aeabi_ddiv>
 800a59e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5a2:	e028      	b.n	800a5f6 <_dtoa_r+0x39e>
 800a5a4:	2602      	movs	r6, #2
 800a5a6:	e7f2      	b.n	800a58e <_dtoa_r+0x336>
 800a5a8:	07e1      	lsls	r1, r4, #31
 800a5aa:	d508      	bpl.n	800a5be <_dtoa_r+0x366>
 800a5ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a5b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a5b4:	f7f6 f840 	bl	8000638 <__aeabi_dmul>
 800a5b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a5bc:	3601      	adds	r6, #1
 800a5be:	1064      	asrs	r4, r4, #1
 800a5c0:	3508      	adds	r5, #8
 800a5c2:	e7e5      	b.n	800a590 <_dtoa_r+0x338>
 800a5c4:	f000 80d2 	beq.w	800a76c <_dtoa_r+0x514>
 800a5c8:	427c      	negs	r4, r7
 800a5ca:	4b92      	ldr	r3, [pc, #584]	@ (800a814 <_dtoa_r+0x5bc>)
 800a5cc:	4d92      	ldr	r5, [pc, #584]	@ (800a818 <_dtoa_r+0x5c0>)
 800a5ce:	f004 020f 	and.w	r2, r4, #15
 800a5d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a5de:	f7f6 f82b 	bl	8000638 <__aeabi_dmul>
 800a5e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5e6:	1124      	asrs	r4, r4, #4
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	2602      	movs	r6, #2
 800a5ec:	2c00      	cmp	r4, #0
 800a5ee:	f040 80b2 	bne.w	800a756 <_dtoa_r+0x4fe>
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d1d3      	bne.n	800a59e <_dtoa_r+0x346>
 800a5f6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a5f8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	f000 80b7 	beq.w	800a770 <_dtoa_r+0x518>
 800a602:	4b86      	ldr	r3, [pc, #536]	@ (800a81c <_dtoa_r+0x5c4>)
 800a604:	2200      	movs	r2, #0
 800a606:	4620      	mov	r0, r4
 800a608:	4629      	mov	r1, r5
 800a60a:	f7f6 fa87 	bl	8000b1c <__aeabi_dcmplt>
 800a60e:	2800      	cmp	r0, #0
 800a610:	f000 80ae 	beq.w	800a770 <_dtoa_r+0x518>
 800a614:	9b07      	ldr	r3, [sp, #28]
 800a616:	2b00      	cmp	r3, #0
 800a618:	f000 80aa 	beq.w	800a770 <_dtoa_r+0x518>
 800a61c:	9b00      	ldr	r3, [sp, #0]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	dd37      	ble.n	800a692 <_dtoa_r+0x43a>
 800a622:	1e7b      	subs	r3, r7, #1
 800a624:	9304      	str	r3, [sp, #16]
 800a626:	4620      	mov	r0, r4
 800a628:	4b7d      	ldr	r3, [pc, #500]	@ (800a820 <_dtoa_r+0x5c8>)
 800a62a:	2200      	movs	r2, #0
 800a62c:	4629      	mov	r1, r5
 800a62e:	f7f6 f803 	bl	8000638 <__aeabi_dmul>
 800a632:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a636:	9c00      	ldr	r4, [sp, #0]
 800a638:	3601      	adds	r6, #1
 800a63a:	4630      	mov	r0, r6
 800a63c:	f7f5 ff92 	bl	8000564 <__aeabi_i2d>
 800a640:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a644:	f7f5 fff8 	bl	8000638 <__aeabi_dmul>
 800a648:	4b76      	ldr	r3, [pc, #472]	@ (800a824 <_dtoa_r+0x5cc>)
 800a64a:	2200      	movs	r2, #0
 800a64c:	f7f5 fe3e 	bl	80002cc <__adddf3>
 800a650:	4605      	mov	r5, r0
 800a652:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a656:	2c00      	cmp	r4, #0
 800a658:	f040 808d 	bne.w	800a776 <_dtoa_r+0x51e>
 800a65c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a660:	4b71      	ldr	r3, [pc, #452]	@ (800a828 <_dtoa_r+0x5d0>)
 800a662:	2200      	movs	r2, #0
 800a664:	f7f5 fe30 	bl	80002c8 <__aeabi_dsub>
 800a668:	4602      	mov	r2, r0
 800a66a:	460b      	mov	r3, r1
 800a66c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a670:	462a      	mov	r2, r5
 800a672:	4633      	mov	r3, r6
 800a674:	f7f6 fa70 	bl	8000b58 <__aeabi_dcmpgt>
 800a678:	2800      	cmp	r0, #0
 800a67a:	f040 828b 	bne.w	800ab94 <_dtoa_r+0x93c>
 800a67e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a682:	462a      	mov	r2, r5
 800a684:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a688:	f7f6 fa48 	bl	8000b1c <__aeabi_dcmplt>
 800a68c:	2800      	cmp	r0, #0
 800a68e:	f040 8128 	bne.w	800a8e2 <_dtoa_r+0x68a>
 800a692:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a696:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a69a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	f2c0 815a 	blt.w	800a956 <_dtoa_r+0x6fe>
 800a6a2:	2f0e      	cmp	r7, #14
 800a6a4:	f300 8157 	bgt.w	800a956 <_dtoa_r+0x6fe>
 800a6a8:	4b5a      	ldr	r3, [pc, #360]	@ (800a814 <_dtoa_r+0x5bc>)
 800a6aa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a6ae:	ed93 7b00 	vldr	d7, [r3]
 800a6b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	ed8d 7b00 	vstr	d7, [sp]
 800a6ba:	da03      	bge.n	800a6c4 <_dtoa_r+0x46c>
 800a6bc:	9b07      	ldr	r3, [sp, #28]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	f340 8101 	ble.w	800a8c6 <_dtoa_r+0x66e>
 800a6c4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a6c8:	4656      	mov	r6, sl
 800a6ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6ce:	4620      	mov	r0, r4
 800a6d0:	4629      	mov	r1, r5
 800a6d2:	f7f6 f8db 	bl	800088c <__aeabi_ddiv>
 800a6d6:	f7f6 fa5f 	bl	8000b98 <__aeabi_d2iz>
 800a6da:	4680      	mov	r8, r0
 800a6dc:	f7f5 ff42 	bl	8000564 <__aeabi_i2d>
 800a6e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6e4:	f7f5 ffa8 	bl	8000638 <__aeabi_dmul>
 800a6e8:	4602      	mov	r2, r0
 800a6ea:	460b      	mov	r3, r1
 800a6ec:	4620      	mov	r0, r4
 800a6ee:	4629      	mov	r1, r5
 800a6f0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a6f4:	f7f5 fde8 	bl	80002c8 <__aeabi_dsub>
 800a6f8:	f806 4b01 	strb.w	r4, [r6], #1
 800a6fc:	9d07      	ldr	r5, [sp, #28]
 800a6fe:	eba6 040a 	sub.w	r4, r6, sl
 800a702:	42a5      	cmp	r5, r4
 800a704:	4602      	mov	r2, r0
 800a706:	460b      	mov	r3, r1
 800a708:	f040 8117 	bne.w	800a93a <_dtoa_r+0x6e2>
 800a70c:	f7f5 fdde 	bl	80002cc <__adddf3>
 800a710:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a714:	4604      	mov	r4, r0
 800a716:	460d      	mov	r5, r1
 800a718:	f7f6 fa1e 	bl	8000b58 <__aeabi_dcmpgt>
 800a71c:	2800      	cmp	r0, #0
 800a71e:	f040 80f9 	bne.w	800a914 <_dtoa_r+0x6bc>
 800a722:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a726:	4620      	mov	r0, r4
 800a728:	4629      	mov	r1, r5
 800a72a:	f7f6 f9ed 	bl	8000b08 <__aeabi_dcmpeq>
 800a72e:	b118      	cbz	r0, 800a738 <_dtoa_r+0x4e0>
 800a730:	f018 0f01 	tst.w	r8, #1
 800a734:	f040 80ee 	bne.w	800a914 <_dtoa_r+0x6bc>
 800a738:	4649      	mov	r1, r9
 800a73a:	4658      	mov	r0, fp
 800a73c:	f000 fc90 	bl	800b060 <_Bfree>
 800a740:	2300      	movs	r3, #0
 800a742:	7033      	strb	r3, [r6, #0]
 800a744:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a746:	3701      	adds	r7, #1
 800a748:	601f      	str	r7, [r3, #0]
 800a74a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	f000 831d 	beq.w	800ad8c <_dtoa_r+0xb34>
 800a752:	601e      	str	r6, [r3, #0]
 800a754:	e31a      	b.n	800ad8c <_dtoa_r+0xb34>
 800a756:	07e2      	lsls	r2, r4, #31
 800a758:	d505      	bpl.n	800a766 <_dtoa_r+0x50e>
 800a75a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a75e:	f7f5 ff6b 	bl	8000638 <__aeabi_dmul>
 800a762:	3601      	adds	r6, #1
 800a764:	2301      	movs	r3, #1
 800a766:	1064      	asrs	r4, r4, #1
 800a768:	3508      	adds	r5, #8
 800a76a:	e73f      	b.n	800a5ec <_dtoa_r+0x394>
 800a76c:	2602      	movs	r6, #2
 800a76e:	e742      	b.n	800a5f6 <_dtoa_r+0x39e>
 800a770:	9c07      	ldr	r4, [sp, #28]
 800a772:	9704      	str	r7, [sp, #16]
 800a774:	e761      	b.n	800a63a <_dtoa_r+0x3e2>
 800a776:	4b27      	ldr	r3, [pc, #156]	@ (800a814 <_dtoa_r+0x5bc>)
 800a778:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a77a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a77e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a782:	4454      	add	r4, sl
 800a784:	2900      	cmp	r1, #0
 800a786:	d053      	beq.n	800a830 <_dtoa_r+0x5d8>
 800a788:	4928      	ldr	r1, [pc, #160]	@ (800a82c <_dtoa_r+0x5d4>)
 800a78a:	2000      	movs	r0, #0
 800a78c:	f7f6 f87e 	bl	800088c <__aeabi_ddiv>
 800a790:	4633      	mov	r3, r6
 800a792:	462a      	mov	r2, r5
 800a794:	f7f5 fd98 	bl	80002c8 <__aeabi_dsub>
 800a798:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a79c:	4656      	mov	r6, sl
 800a79e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7a2:	f7f6 f9f9 	bl	8000b98 <__aeabi_d2iz>
 800a7a6:	4605      	mov	r5, r0
 800a7a8:	f7f5 fedc 	bl	8000564 <__aeabi_i2d>
 800a7ac:	4602      	mov	r2, r0
 800a7ae:	460b      	mov	r3, r1
 800a7b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7b4:	f7f5 fd88 	bl	80002c8 <__aeabi_dsub>
 800a7b8:	3530      	adds	r5, #48	@ 0x30
 800a7ba:	4602      	mov	r2, r0
 800a7bc:	460b      	mov	r3, r1
 800a7be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a7c2:	f806 5b01 	strb.w	r5, [r6], #1
 800a7c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a7ca:	f7f6 f9a7 	bl	8000b1c <__aeabi_dcmplt>
 800a7ce:	2800      	cmp	r0, #0
 800a7d0:	d171      	bne.n	800a8b6 <_dtoa_r+0x65e>
 800a7d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a7d6:	4911      	ldr	r1, [pc, #68]	@ (800a81c <_dtoa_r+0x5c4>)
 800a7d8:	2000      	movs	r0, #0
 800a7da:	f7f5 fd75 	bl	80002c8 <__aeabi_dsub>
 800a7de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a7e2:	f7f6 f99b 	bl	8000b1c <__aeabi_dcmplt>
 800a7e6:	2800      	cmp	r0, #0
 800a7e8:	f040 8095 	bne.w	800a916 <_dtoa_r+0x6be>
 800a7ec:	42a6      	cmp	r6, r4
 800a7ee:	f43f af50 	beq.w	800a692 <_dtoa_r+0x43a>
 800a7f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a7f6:	4b0a      	ldr	r3, [pc, #40]	@ (800a820 <_dtoa_r+0x5c8>)
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	f7f5 ff1d 	bl	8000638 <__aeabi_dmul>
 800a7fe:	4b08      	ldr	r3, [pc, #32]	@ (800a820 <_dtoa_r+0x5c8>)
 800a800:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a804:	2200      	movs	r2, #0
 800a806:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a80a:	f7f5 ff15 	bl	8000638 <__aeabi_dmul>
 800a80e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a812:	e7c4      	b.n	800a79e <_dtoa_r+0x546>
 800a814:	0800d730 	.word	0x0800d730
 800a818:	0800d708 	.word	0x0800d708
 800a81c:	3ff00000 	.word	0x3ff00000
 800a820:	40240000 	.word	0x40240000
 800a824:	401c0000 	.word	0x401c0000
 800a828:	40140000 	.word	0x40140000
 800a82c:	3fe00000 	.word	0x3fe00000
 800a830:	4631      	mov	r1, r6
 800a832:	4628      	mov	r0, r5
 800a834:	f7f5 ff00 	bl	8000638 <__aeabi_dmul>
 800a838:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a83c:	9415      	str	r4, [sp, #84]	@ 0x54
 800a83e:	4656      	mov	r6, sl
 800a840:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a844:	f7f6 f9a8 	bl	8000b98 <__aeabi_d2iz>
 800a848:	4605      	mov	r5, r0
 800a84a:	f7f5 fe8b 	bl	8000564 <__aeabi_i2d>
 800a84e:	4602      	mov	r2, r0
 800a850:	460b      	mov	r3, r1
 800a852:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a856:	f7f5 fd37 	bl	80002c8 <__aeabi_dsub>
 800a85a:	3530      	adds	r5, #48	@ 0x30
 800a85c:	f806 5b01 	strb.w	r5, [r6], #1
 800a860:	4602      	mov	r2, r0
 800a862:	460b      	mov	r3, r1
 800a864:	42a6      	cmp	r6, r4
 800a866:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a86a:	f04f 0200 	mov.w	r2, #0
 800a86e:	d124      	bne.n	800a8ba <_dtoa_r+0x662>
 800a870:	4bac      	ldr	r3, [pc, #688]	@ (800ab24 <_dtoa_r+0x8cc>)
 800a872:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a876:	f7f5 fd29 	bl	80002cc <__adddf3>
 800a87a:	4602      	mov	r2, r0
 800a87c:	460b      	mov	r3, r1
 800a87e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a882:	f7f6 f969 	bl	8000b58 <__aeabi_dcmpgt>
 800a886:	2800      	cmp	r0, #0
 800a888:	d145      	bne.n	800a916 <_dtoa_r+0x6be>
 800a88a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a88e:	49a5      	ldr	r1, [pc, #660]	@ (800ab24 <_dtoa_r+0x8cc>)
 800a890:	2000      	movs	r0, #0
 800a892:	f7f5 fd19 	bl	80002c8 <__aeabi_dsub>
 800a896:	4602      	mov	r2, r0
 800a898:	460b      	mov	r3, r1
 800a89a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a89e:	f7f6 f93d 	bl	8000b1c <__aeabi_dcmplt>
 800a8a2:	2800      	cmp	r0, #0
 800a8a4:	f43f aef5 	beq.w	800a692 <_dtoa_r+0x43a>
 800a8a8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a8aa:	1e73      	subs	r3, r6, #1
 800a8ac:	9315      	str	r3, [sp, #84]	@ 0x54
 800a8ae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a8b2:	2b30      	cmp	r3, #48	@ 0x30
 800a8b4:	d0f8      	beq.n	800a8a8 <_dtoa_r+0x650>
 800a8b6:	9f04      	ldr	r7, [sp, #16]
 800a8b8:	e73e      	b.n	800a738 <_dtoa_r+0x4e0>
 800a8ba:	4b9b      	ldr	r3, [pc, #620]	@ (800ab28 <_dtoa_r+0x8d0>)
 800a8bc:	f7f5 febc 	bl	8000638 <__aeabi_dmul>
 800a8c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8c4:	e7bc      	b.n	800a840 <_dtoa_r+0x5e8>
 800a8c6:	d10c      	bne.n	800a8e2 <_dtoa_r+0x68a>
 800a8c8:	4b98      	ldr	r3, [pc, #608]	@ (800ab2c <_dtoa_r+0x8d4>)
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a8d0:	f7f5 feb2 	bl	8000638 <__aeabi_dmul>
 800a8d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a8d8:	f7f6 f934 	bl	8000b44 <__aeabi_dcmpge>
 800a8dc:	2800      	cmp	r0, #0
 800a8de:	f000 8157 	beq.w	800ab90 <_dtoa_r+0x938>
 800a8e2:	2400      	movs	r4, #0
 800a8e4:	4625      	mov	r5, r4
 800a8e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a8e8:	43db      	mvns	r3, r3
 800a8ea:	9304      	str	r3, [sp, #16]
 800a8ec:	4656      	mov	r6, sl
 800a8ee:	2700      	movs	r7, #0
 800a8f0:	4621      	mov	r1, r4
 800a8f2:	4658      	mov	r0, fp
 800a8f4:	f000 fbb4 	bl	800b060 <_Bfree>
 800a8f8:	2d00      	cmp	r5, #0
 800a8fa:	d0dc      	beq.n	800a8b6 <_dtoa_r+0x65e>
 800a8fc:	b12f      	cbz	r7, 800a90a <_dtoa_r+0x6b2>
 800a8fe:	42af      	cmp	r7, r5
 800a900:	d003      	beq.n	800a90a <_dtoa_r+0x6b2>
 800a902:	4639      	mov	r1, r7
 800a904:	4658      	mov	r0, fp
 800a906:	f000 fbab 	bl	800b060 <_Bfree>
 800a90a:	4629      	mov	r1, r5
 800a90c:	4658      	mov	r0, fp
 800a90e:	f000 fba7 	bl	800b060 <_Bfree>
 800a912:	e7d0      	b.n	800a8b6 <_dtoa_r+0x65e>
 800a914:	9704      	str	r7, [sp, #16]
 800a916:	4633      	mov	r3, r6
 800a918:	461e      	mov	r6, r3
 800a91a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a91e:	2a39      	cmp	r2, #57	@ 0x39
 800a920:	d107      	bne.n	800a932 <_dtoa_r+0x6da>
 800a922:	459a      	cmp	sl, r3
 800a924:	d1f8      	bne.n	800a918 <_dtoa_r+0x6c0>
 800a926:	9a04      	ldr	r2, [sp, #16]
 800a928:	3201      	adds	r2, #1
 800a92a:	9204      	str	r2, [sp, #16]
 800a92c:	2230      	movs	r2, #48	@ 0x30
 800a92e:	f88a 2000 	strb.w	r2, [sl]
 800a932:	781a      	ldrb	r2, [r3, #0]
 800a934:	3201      	adds	r2, #1
 800a936:	701a      	strb	r2, [r3, #0]
 800a938:	e7bd      	b.n	800a8b6 <_dtoa_r+0x65e>
 800a93a:	4b7b      	ldr	r3, [pc, #492]	@ (800ab28 <_dtoa_r+0x8d0>)
 800a93c:	2200      	movs	r2, #0
 800a93e:	f7f5 fe7b 	bl	8000638 <__aeabi_dmul>
 800a942:	2200      	movs	r2, #0
 800a944:	2300      	movs	r3, #0
 800a946:	4604      	mov	r4, r0
 800a948:	460d      	mov	r5, r1
 800a94a:	f7f6 f8dd 	bl	8000b08 <__aeabi_dcmpeq>
 800a94e:	2800      	cmp	r0, #0
 800a950:	f43f aebb 	beq.w	800a6ca <_dtoa_r+0x472>
 800a954:	e6f0      	b.n	800a738 <_dtoa_r+0x4e0>
 800a956:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a958:	2a00      	cmp	r2, #0
 800a95a:	f000 80db 	beq.w	800ab14 <_dtoa_r+0x8bc>
 800a95e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a960:	2a01      	cmp	r2, #1
 800a962:	f300 80bf 	bgt.w	800aae4 <_dtoa_r+0x88c>
 800a966:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a968:	2a00      	cmp	r2, #0
 800a96a:	f000 80b7 	beq.w	800aadc <_dtoa_r+0x884>
 800a96e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a972:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a974:	4646      	mov	r6, r8
 800a976:	9a08      	ldr	r2, [sp, #32]
 800a978:	2101      	movs	r1, #1
 800a97a:	441a      	add	r2, r3
 800a97c:	4658      	mov	r0, fp
 800a97e:	4498      	add	r8, r3
 800a980:	9208      	str	r2, [sp, #32]
 800a982:	f000 fc21 	bl	800b1c8 <__i2b>
 800a986:	4605      	mov	r5, r0
 800a988:	b15e      	cbz	r6, 800a9a2 <_dtoa_r+0x74a>
 800a98a:	9b08      	ldr	r3, [sp, #32]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	dd08      	ble.n	800a9a2 <_dtoa_r+0x74a>
 800a990:	42b3      	cmp	r3, r6
 800a992:	9a08      	ldr	r2, [sp, #32]
 800a994:	bfa8      	it	ge
 800a996:	4633      	movge	r3, r6
 800a998:	eba8 0803 	sub.w	r8, r8, r3
 800a99c:	1af6      	subs	r6, r6, r3
 800a99e:	1ad3      	subs	r3, r2, r3
 800a9a0:	9308      	str	r3, [sp, #32]
 800a9a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a9a4:	b1f3      	cbz	r3, 800a9e4 <_dtoa_r+0x78c>
 800a9a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	f000 80b7 	beq.w	800ab1c <_dtoa_r+0x8c4>
 800a9ae:	b18c      	cbz	r4, 800a9d4 <_dtoa_r+0x77c>
 800a9b0:	4629      	mov	r1, r5
 800a9b2:	4622      	mov	r2, r4
 800a9b4:	4658      	mov	r0, fp
 800a9b6:	f000 fcc7 	bl	800b348 <__pow5mult>
 800a9ba:	464a      	mov	r2, r9
 800a9bc:	4601      	mov	r1, r0
 800a9be:	4605      	mov	r5, r0
 800a9c0:	4658      	mov	r0, fp
 800a9c2:	f000 fc17 	bl	800b1f4 <__multiply>
 800a9c6:	4649      	mov	r1, r9
 800a9c8:	9004      	str	r0, [sp, #16]
 800a9ca:	4658      	mov	r0, fp
 800a9cc:	f000 fb48 	bl	800b060 <_Bfree>
 800a9d0:	9b04      	ldr	r3, [sp, #16]
 800a9d2:	4699      	mov	r9, r3
 800a9d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a9d6:	1b1a      	subs	r2, r3, r4
 800a9d8:	d004      	beq.n	800a9e4 <_dtoa_r+0x78c>
 800a9da:	4649      	mov	r1, r9
 800a9dc:	4658      	mov	r0, fp
 800a9de:	f000 fcb3 	bl	800b348 <__pow5mult>
 800a9e2:	4681      	mov	r9, r0
 800a9e4:	2101      	movs	r1, #1
 800a9e6:	4658      	mov	r0, fp
 800a9e8:	f000 fbee 	bl	800b1c8 <__i2b>
 800a9ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9ee:	4604      	mov	r4, r0
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	f000 81cf 	beq.w	800ad94 <_dtoa_r+0xb3c>
 800a9f6:	461a      	mov	r2, r3
 800a9f8:	4601      	mov	r1, r0
 800a9fa:	4658      	mov	r0, fp
 800a9fc:	f000 fca4 	bl	800b348 <__pow5mult>
 800aa00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa02:	2b01      	cmp	r3, #1
 800aa04:	4604      	mov	r4, r0
 800aa06:	f300 8095 	bgt.w	800ab34 <_dtoa_r+0x8dc>
 800aa0a:	9b02      	ldr	r3, [sp, #8]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	f040 8087 	bne.w	800ab20 <_dtoa_r+0x8c8>
 800aa12:	9b03      	ldr	r3, [sp, #12]
 800aa14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	f040 8089 	bne.w	800ab30 <_dtoa_r+0x8d8>
 800aa1e:	9b03      	ldr	r3, [sp, #12]
 800aa20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800aa24:	0d1b      	lsrs	r3, r3, #20
 800aa26:	051b      	lsls	r3, r3, #20
 800aa28:	b12b      	cbz	r3, 800aa36 <_dtoa_r+0x7de>
 800aa2a:	9b08      	ldr	r3, [sp, #32]
 800aa2c:	3301      	adds	r3, #1
 800aa2e:	9308      	str	r3, [sp, #32]
 800aa30:	f108 0801 	add.w	r8, r8, #1
 800aa34:	2301      	movs	r3, #1
 800aa36:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	f000 81b0 	beq.w	800ada0 <_dtoa_r+0xb48>
 800aa40:	6923      	ldr	r3, [r4, #16]
 800aa42:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aa46:	6918      	ldr	r0, [r3, #16]
 800aa48:	f000 fb72 	bl	800b130 <__hi0bits>
 800aa4c:	f1c0 0020 	rsb	r0, r0, #32
 800aa50:	9b08      	ldr	r3, [sp, #32]
 800aa52:	4418      	add	r0, r3
 800aa54:	f010 001f 	ands.w	r0, r0, #31
 800aa58:	d077      	beq.n	800ab4a <_dtoa_r+0x8f2>
 800aa5a:	f1c0 0320 	rsb	r3, r0, #32
 800aa5e:	2b04      	cmp	r3, #4
 800aa60:	dd6b      	ble.n	800ab3a <_dtoa_r+0x8e2>
 800aa62:	9b08      	ldr	r3, [sp, #32]
 800aa64:	f1c0 001c 	rsb	r0, r0, #28
 800aa68:	4403      	add	r3, r0
 800aa6a:	4480      	add	r8, r0
 800aa6c:	4406      	add	r6, r0
 800aa6e:	9308      	str	r3, [sp, #32]
 800aa70:	f1b8 0f00 	cmp.w	r8, #0
 800aa74:	dd05      	ble.n	800aa82 <_dtoa_r+0x82a>
 800aa76:	4649      	mov	r1, r9
 800aa78:	4642      	mov	r2, r8
 800aa7a:	4658      	mov	r0, fp
 800aa7c:	f000 fcbe 	bl	800b3fc <__lshift>
 800aa80:	4681      	mov	r9, r0
 800aa82:	9b08      	ldr	r3, [sp, #32]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	dd05      	ble.n	800aa94 <_dtoa_r+0x83c>
 800aa88:	4621      	mov	r1, r4
 800aa8a:	461a      	mov	r2, r3
 800aa8c:	4658      	mov	r0, fp
 800aa8e:	f000 fcb5 	bl	800b3fc <__lshift>
 800aa92:	4604      	mov	r4, r0
 800aa94:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d059      	beq.n	800ab4e <_dtoa_r+0x8f6>
 800aa9a:	4621      	mov	r1, r4
 800aa9c:	4648      	mov	r0, r9
 800aa9e:	f000 fd19 	bl	800b4d4 <__mcmp>
 800aaa2:	2800      	cmp	r0, #0
 800aaa4:	da53      	bge.n	800ab4e <_dtoa_r+0x8f6>
 800aaa6:	1e7b      	subs	r3, r7, #1
 800aaa8:	9304      	str	r3, [sp, #16]
 800aaaa:	4649      	mov	r1, r9
 800aaac:	2300      	movs	r3, #0
 800aaae:	220a      	movs	r2, #10
 800aab0:	4658      	mov	r0, fp
 800aab2:	f000 faf7 	bl	800b0a4 <__multadd>
 800aab6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aab8:	4681      	mov	r9, r0
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	f000 8172 	beq.w	800ada4 <_dtoa_r+0xb4c>
 800aac0:	2300      	movs	r3, #0
 800aac2:	4629      	mov	r1, r5
 800aac4:	220a      	movs	r2, #10
 800aac6:	4658      	mov	r0, fp
 800aac8:	f000 faec 	bl	800b0a4 <__multadd>
 800aacc:	9b00      	ldr	r3, [sp, #0]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	4605      	mov	r5, r0
 800aad2:	dc67      	bgt.n	800aba4 <_dtoa_r+0x94c>
 800aad4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aad6:	2b02      	cmp	r3, #2
 800aad8:	dc41      	bgt.n	800ab5e <_dtoa_r+0x906>
 800aada:	e063      	b.n	800aba4 <_dtoa_r+0x94c>
 800aadc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800aade:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800aae2:	e746      	b.n	800a972 <_dtoa_r+0x71a>
 800aae4:	9b07      	ldr	r3, [sp, #28]
 800aae6:	1e5c      	subs	r4, r3, #1
 800aae8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aaea:	42a3      	cmp	r3, r4
 800aaec:	bfbf      	itttt	lt
 800aaee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800aaf0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800aaf2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800aaf4:	1ae3      	sublt	r3, r4, r3
 800aaf6:	bfb4      	ite	lt
 800aaf8:	18d2      	addlt	r2, r2, r3
 800aafa:	1b1c      	subge	r4, r3, r4
 800aafc:	9b07      	ldr	r3, [sp, #28]
 800aafe:	bfbc      	itt	lt
 800ab00:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ab02:	2400      	movlt	r4, #0
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	bfb5      	itete	lt
 800ab08:	eba8 0603 	sublt.w	r6, r8, r3
 800ab0c:	9b07      	ldrge	r3, [sp, #28]
 800ab0e:	2300      	movlt	r3, #0
 800ab10:	4646      	movge	r6, r8
 800ab12:	e730      	b.n	800a976 <_dtoa_r+0x71e>
 800ab14:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ab16:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ab18:	4646      	mov	r6, r8
 800ab1a:	e735      	b.n	800a988 <_dtoa_r+0x730>
 800ab1c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ab1e:	e75c      	b.n	800a9da <_dtoa_r+0x782>
 800ab20:	2300      	movs	r3, #0
 800ab22:	e788      	b.n	800aa36 <_dtoa_r+0x7de>
 800ab24:	3fe00000 	.word	0x3fe00000
 800ab28:	40240000 	.word	0x40240000
 800ab2c:	40140000 	.word	0x40140000
 800ab30:	9b02      	ldr	r3, [sp, #8]
 800ab32:	e780      	b.n	800aa36 <_dtoa_r+0x7de>
 800ab34:	2300      	movs	r3, #0
 800ab36:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab38:	e782      	b.n	800aa40 <_dtoa_r+0x7e8>
 800ab3a:	d099      	beq.n	800aa70 <_dtoa_r+0x818>
 800ab3c:	9a08      	ldr	r2, [sp, #32]
 800ab3e:	331c      	adds	r3, #28
 800ab40:	441a      	add	r2, r3
 800ab42:	4498      	add	r8, r3
 800ab44:	441e      	add	r6, r3
 800ab46:	9208      	str	r2, [sp, #32]
 800ab48:	e792      	b.n	800aa70 <_dtoa_r+0x818>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	e7f6      	b.n	800ab3c <_dtoa_r+0x8e4>
 800ab4e:	9b07      	ldr	r3, [sp, #28]
 800ab50:	9704      	str	r7, [sp, #16]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	dc20      	bgt.n	800ab98 <_dtoa_r+0x940>
 800ab56:	9300      	str	r3, [sp, #0]
 800ab58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab5a:	2b02      	cmp	r3, #2
 800ab5c:	dd1e      	ble.n	800ab9c <_dtoa_r+0x944>
 800ab5e:	9b00      	ldr	r3, [sp, #0]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	f47f aec0 	bne.w	800a8e6 <_dtoa_r+0x68e>
 800ab66:	4621      	mov	r1, r4
 800ab68:	2205      	movs	r2, #5
 800ab6a:	4658      	mov	r0, fp
 800ab6c:	f000 fa9a 	bl	800b0a4 <__multadd>
 800ab70:	4601      	mov	r1, r0
 800ab72:	4604      	mov	r4, r0
 800ab74:	4648      	mov	r0, r9
 800ab76:	f000 fcad 	bl	800b4d4 <__mcmp>
 800ab7a:	2800      	cmp	r0, #0
 800ab7c:	f77f aeb3 	ble.w	800a8e6 <_dtoa_r+0x68e>
 800ab80:	4656      	mov	r6, sl
 800ab82:	2331      	movs	r3, #49	@ 0x31
 800ab84:	f806 3b01 	strb.w	r3, [r6], #1
 800ab88:	9b04      	ldr	r3, [sp, #16]
 800ab8a:	3301      	adds	r3, #1
 800ab8c:	9304      	str	r3, [sp, #16]
 800ab8e:	e6ae      	b.n	800a8ee <_dtoa_r+0x696>
 800ab90:	9c07      	ldr	r4, [sp, #28]
 800ab92:	9704      	str	r7, [sp, #16]
 800ab94:	4625      	mov	r5, r4
 800ab96:	e7f3      	b.n	800ab80 <_dtoa_r+0x928>
 800ab98:	9b07      	ldr	r3, [sp, #28]
 800ab9a:	9300      	str	r3, [sp, #0]
 800ab9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	f000 8104 	beq.w	800adac <_dtoa_r+0xb54>
 800aba4:	2e00      	cmp	r6, #0
 800aba6:	dd05      	ble.n	800abb4 <_dtoa_r+0x95c>
 800aba8:	4629      	mov	r1, r5
 800abaa:	4632      	mov	r2, r6
 800abac:	4658      	mov	r0, fp
 800abae:	f000 fc25 	bl	800b3fc <__lshift>
 800abb2:	4605      	mov	r5, r0
 800abb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d05a      	beq.n	800ac70 <_dtoa_r+0xa18>
 800abba:	6869      	ldr	r1, [r5, #4]
 800abbc:	4658      	mov	r0, fp
 800abbe:	f000 fa0f 	bl	800afe0 <_Balloc>
 800abc2:	4606      	mov	r6, r0
 800abc4:	b928      	cbnz	r0, 800abd2 <_dtoa_r+0x97a>
 800abc6:	4b84      	ldr	r3, [pc, #528]	@ (800add8 <_dtoa_r+0xb80>)
 800abc8:	4602      	mov	r2, r0
 800abca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800abce:	f7ff bb5a 	b.w	800a286 <_dtoa_r+0x2e>
 800abd2:	692a      	ldr	r2, [r5, #16]
 800abd4:	3202      	adds	r2, #2
 800abd6:	0092      	lsls	r2, r2, #2
 800abd8:	f105 010c 	add.w	r1, r5, #12
 800abdc:	300c      	adds	r0, #12
 800abde:	f000 ffaf 	bl	800bb40 <memcpy>
 800abe2:	2201      	movs	r2, #1
 800abe4:	4631      	mov	r1, r6
 800abe6:	4658      	mov	r0, fp
 800abe8:	f000 fc08 	bl	800b3fc <__lshift>
 800abec:	f10a 0301 	add.w	r3, sl, #1
 800abf0:	9307      	str	r3, [sp, #28]
 800abf2:	9b00      	ldr	r3, [sp, #0]
 800abf4:	4453      	add	r3, sl
 800abf6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800abf8:	9b02      	ldr	r3, [sp, #8]
 800abfa:	f003 0301 	and.w	r3, r3, #1
 800abfe:	462f      	mov	r7, r5
 800ac00:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac02:	4605      	mov	r5, r0
 800ac04:	9b07      	ldr	r3, [sp, #28]
 800ac06:	4621      	mov	r1, r4
 800ac08:	3b01      	subs	r3, #1
 800ac0a:	4648      	mov	r0, r9
 800ac0c:	9300      	str	r3, [sp, #0]
 800ac0e:	f7ff fa9a 	bl	800a146 <quorem>
 800ac12:	4639      	mov	r1, r7
 800ac14:	9002      	str	r0, [sp, #8]
 800ac16:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ac1a:	4648      	mov	r0, r9
 800ac1c:	f000 fc5a 	bl	800b4d4 <__mcmp>
 800ac20:	462a      	mov	r2, r5
 800ac22:	9008      	str	r0, [sp, #32]
 800ac24:	4621      	mov	r1, r4
 800ac26:	4658      	mov	r0, fp
 800ac28:	f000 fc70 	bl	800b50c <__mdiff>
 800ac2c:	68c2      	ldr	r2, [r0, #12]
 800ac2e:	4606      	mov	r6, r0
 800ac30:	bb02      	cbnz	r2, 800ac74 <_dtoa_r+0xa1c>
 800ac32:	4601      	mov	r1, r0
 800ac34:	4648      	mov	r0, r9
 800ac36:	f000 fc4d 	bl	800b4d4 <__mcmp>
 800ac3a:	4602      	mov	r2, r0
 800ac3c:	4631      	mov	r1, r6
 800ac3e:	4658      	mov	r0, fp
 800ac40:	920e      	str	r2, [sp, #56]	@ 0x38
 800ac42:	f000 fa0d 	bl	800b060 <_Bfree>
 800ac46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac48:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ac4a:	9e07      	ldr	r6, [sp, #28]
 800ac4c:	ea43 0102 	orr.w	r1, r3, r2
 800ac50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac52:	4319      	orrs	r1, r3
 800ac54:	d110      	bne.n	800ac78 <_dtoa_r+0xa20>
 800ac56:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ac5a:	d029      	beq.n	800acb0 <_dtoa_r+0xa58>
 800ac5c:	9b08      	ldr	r3, [sp, #32]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	dd02      	ble.n	800ac68 <_dtoa_r+0xa10>
 800ac62:	9b02      	ldr	r3, [sp, #8]
 800ac64:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ac68:	9b00      	ldr	r3, [sp, #0]
 800ac6a:	f883 8000 	strb.w	r8, [r3]
 800ac6e:	e63f      	b.n	800a8f0 <_dtoa_r+0x698>
 800ac70:	4628      	mov	r0, r5
 800ac72:	e7bb      	b.n	800abec <_dtoa_r+0x994>
 800ac74:	2201      	movs	r2, #1
 800ac76:	e7e1      	b.n	800ac3c <_dtoa_r+0x9e4>
 800ac78:	9b08      	ldr	r3, [sp, #32]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	db04      	blt.n	800ac88 <_dtoa_r+0xa30>
 800ac7e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ac80:	430b      	orrs	r3, r1
 800ac82:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ac84:	430b      	orrs	r3, r1
 800ac86:	d120      	bne.n	800acca <_dtoa_r+0xa72>
 800ac88:	2a00      	cmp	r2, #0
 800ac8a:	dded      	ble.n	800ac68 <_dtoa_r+0xa10>
 800ac8c:	4649      	mov	r1, r9
 800ac8e:	2201      	movs	r2, #1
 800ac90:	4658      	mov	r0, fp
 800ac92:	f000 fbb3 	bl	800b3fc <__lshift>
 800ac96:	4621      	mov	r1, r4
 800ac98:	4681      	mov	r9, r0
 800ac9a:	f000 fc1b 	bl	800b4d4 <__mcmp>
 800ac9e:	2800      	cmp	r0, #0
 800aca0:	dc03      	bgt.n	800acaa <_dtoa_r+0xa52>
 800aca2:	d1e1      	bne.n	800ac68 <_dtoa_r+0xa10>
 800aca4:	f018 0f01 	tst.w	r8, #1
 800aca8:	d0de      	beq.n	800ac68 <_dtoa_r+0xa10>
 800acaa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800acae:	d1d8      	bne.n	800ac62 <_dtoa_r+0xa0a>
 800acb0:	9a00      	ldr	r2, [sp, #0]
 800acb2:	2339      	movs	r3, #57	@ 0x39
 800acb4:	7013      	strb	r3, [r2, #0]
 800acb6:	4633      	mov	r3, r6
 800acb8:	461e      	mov	r6, r3
 800acba:	3b01      	subs	r3, #1
 800acbc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800acc0:	2a39      	cmp	r2, #57	@ 0x39
 800acc2:	d052      	beq.n	800ad6a <_dtoa_r+0xb12>
 800acc4:	3201      	adds	r2, #1
 800acc6:	701a      	strb	r2, [r3, #0]
 800acc8:	e612      	b.n	800a8f0 <_dtoa_r+0x698>
 800acca:	2a00      	cmp	r2, #0
 800accc:	dd07      	ble.n	800acde <_dtoa_r+0xa86>
 800acce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800acd2:	d0ed      	beq.n	800acb0 <_dtoa_r+0xa58>
 800acd4:	9a00      	ldr	r2, [sp, #0]
 800acd6:	f108 0301 	add.w	r3, r8, #1
 800acda:	7013      	strb	r3, [r2, #0]
 800acdc:	e608      	b.n	800a8f0 <_dtoa_r+0x698>
 800acde:	9b07      	ldr	r3, [sp, #28]
 800ace0:	9a07      	ldr	r2, [sp, #28]
 800ace2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ace6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ace8:	4293      	cmp	r3, r2
 800acea:	d028      	beq.n	800ad3e <_dtoa_r+0xae6>
 800acec:	4649      	mov	r1, r9
 800acee:	2300      	movs	r3, #0
 800acf0:	220a      	movs	r2, #10
 800acf2:	4658      	mov	r0, fp
 800acf4:	f000 f9d6 	bl	800b0a4 <__multadd>
 800acf8:	42af      	cmp	r7, r5
 800acfa:	4681      	mov	r9, r0
 800acfc:	f04f 0300 	mov.w	r3, #0
 800ad00:	f04f 020a 	mov.w	r2, #10
 800ad04:	4639      	mov	r1, r7
 800ad06:	4658      	mov	r0, fp
 800ad08:	d107      	bne.n	800ad1a <_dtoa_r+0xac2>
 800ad0a:	f000 f9cb 	bl	800b0a4 <__multadd>
 800ad0e:	4607      	mov	r7, r0
 800ad10:	4605      	mov	r5, r0
 800ad12:	9b07      	ldr	r3, [sp, #28]
 800ad14:	3301      	adds	r3, #1
 800ad16:	9307      	str	r3, [sp, #28]
 800ad18:	e774      	b.n	800ac04 <_dtoa_r+0x9ac>
 800ad1a:	f000 f9c3 	bl	800b0a4 <__multadd>
 800ad1e:	4629      	mov	r1, r5
 800ad20:	4607      	mov	r7, r0
 800ad22:	2300      	movs	r3, #0
 800ad24:	220a      	movs	r2, #10
 800ad26:	4658      	mov	r0, fp
 800ad28:	f000 f9bc 	bl	800b0a4 <__multadd>
 800ad2c:	4605      	mov	r5, r0
 800ad2e:	e7f0      	b.n	800ad12 <_dtoa_r+0xaba>
 800ad30:	9b00      	ldr	r3, [sp, #0]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	bfcc      	ite	gt
 800ad36:	461e      	movgt	r6, r3
 800ad38:	2601      	movle	r6, #1
 800ad3a:	4456      	add	r6, sl
 800ad3c:	2700      	movs	r7, #0
 800ad3e:	4649      	mov	r1, r9
 800ad40:	2201      	movs	r2, #1
 800ad42:	4658      	mov	r0, fp
 800ad44:	f000 fb5a 	bl	800b3fc <__lshift>
 800ad48:	4621      	mov	r1, r4
 800ad4a:	4681      	mov	r9, r0
 800ad4c:	f000 fbc2 	bl	800b4d4 <__mcmp>
 800ad50:	2800      	cmp	r0, #0
 800ad52:	dcb0      	bgt.n	800acb6 <_dtoa_r+0xa5e>
 800ad54:	d102      	bne.n	800ad5c <_dtoa_r+0xb04>
 800ad56:	f018 0f01 	tst.w	r8, #1
 800ad5a:	d1ac      	bne.n	800acb6 <_dtoa_r+0xa5e>
 800ad5c:	4633      	mov	r3, r6
 800ad5e:	461e      	mov	r6, r3
 800ad60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad64:	2a30      	cmp	r2, #48	@ 0x30
 800ad66:	d0fa      	beq.n	800ad5e <_dtoa_r+0xb06>
 800ad68:	e5c2      	b.n	800a8f0 <_dtoa_r+0x698>
 800ad6a:	459a      	cmp	sl, r3
 800ad6c:	d1a4      	bne.n	800acb8 <_dtoa_r+0xa60>
 800ad6e:	9b04      	ldr	r3, [sp, #16]
 800ad70:	3301      	adds	r3, #1
 800ad72:	9304      	str	r3, [sp, #16]
 800ad74:	2331      	movs	r3, #49	@ 0x31
 800ad76:	f88a 3000 	strb.w	r3, [sl]
 800ad7a:	e5b9      	b.n	800a8f0 <_dtoa_r+0x698>
 800ad7c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ad7e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800addc <_dtoa_r+0xb84>
 800ad82:	b11b      	cbz	r3, 800ad8c <_dtoa_r+0xb34>
 800ad84:	f10a 0308 	add.w	r3, sl, #8
 800ad88:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ad8a:	6013      	str	r3, [r2, #0]
 800ad8c:	4650      	mov	r0, sl
 800ad8e:	b019      	add	sp, #100	@ 0x64
 800ad90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad96:	2b01      	cmp	r3, #1
 800ad98:	f77f ae37 	ble.w	800aa0a <_dtoa_r+0x7b2>
 800ad9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad9e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ada0:	2001      	movs	r0, #1
 800ada2:	e655      	b.n	800aa50 <_dtoa_r+0x7f8>
 800ada4:	9b00      	ldr	r3, [sp, #0]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	f77f aed6 	ble.w	800ab58 <_dtoa_r+0x900>
 800adac:	4656      	mov	r6, sl
 800adae:	4621      	mov	r1, r4
 800adb0:	4648      	mov	r0, r9
 800adb2:	f7ff f9c8 	bl	800a146 <quorem>
 800adb6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800adba:	f806 8b01 	strb.w	r8, [r6], #1
 800adbe:	9b00      	ldr	r3, [sp, #0]
 800adc0:	eba6 020a 	sub.w	r2, r6, sl
 800adc4:	4293      	cmp	r3, r2
 800adc6:	ddb3      	ble.n	800ad30 <_dtoa_r+0xad8>
 800adc8:	4649      	mov	r1, r9
 800adca:	2300      	movs	r3, #0
 800adcc:	220a      	movs	r2, #10
 800adce:	4658      	mov	r0, fp
 800add0:	f000 f968 	bl	800b0a4 <__multadd>
 800add4:	4681      	mov	r9, r0
 800add6:	e7ea      	b.n	800adae <_dtoa_r+0xb56>
 800add8:	0800d68c 	.word	0x0800d68c
 800addc:	0800d610 	.word	0x0800d610

0800ade0 <_free_r>:
 800ade0:	b538      	push	{r3, r4, r5, lr}
 800ade2:	4605      	mov	r5, r0
 800ade4:	2900      	cmp	r1, #0
 800ade6:	d041      	beq.n	800ae6c <_free_r+0x8c>
 800ade8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adec:	1f0c      	subs	r4, r1, #4
 800adee:	2b00      	cmp	r3, #0
 800adf0:	bfb8      	it	lt
 800adf2:	18e4      	addlt	r4, r4, r3
 800adf4:	f000 f8e8 	bl	800afc8 <__malloc_lock>
 800adf8:	4a1d      	ldr	r2, [pc, #116]	@ (800ae70 <_free_r+0x90>)
 800adfa:	6813      	ldr	r3, [r2, #0]
 800adfc:	b933      	cbnz	r3, 800ae0c <_free_r+0x2c>
 800adfe:	6063      	str	r3, [r4, #4]
 800ae00:	6014      	str	r4, [r2, #0]
 800ae02:	4628      	mov	r0, r5
 800ae04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae08:	f000 b8e4 	b.w	800afd4 <__malloc_unlock>
 800ae0c:	42a3      	cmp	r3, r4
 800ae0e:	d908      	bls.n	800ae22 <_free_r+0x42>
 800ae10:	6820      	ldr	r0, [r4, #0]
 800ae12:	1821      	adds	r1, r4, r0
 800ae14:	428b      	cmp	r3, r1
 800ae16:	bf01      	itttt	eq
 800ae18:	6819      	ldreq	r1, [r3, #0]
 800ae1a:	685b      	ldreq	r3, [r3, #4]
 800ae1c:	1809      	addeq	r1, r1, r0
 800ae1e:	6021      	streq	r1, [r4, #0]
 800ae20:	e7ed      	b.n	800adfe <_free_r+0x1e>
 800ae22:	461a      	mov	r2, r3
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	b10b      	cbz	r3, 800ae2c <_free_r+0x4c>
 800ae28:	42a3      	cmp	r3, r4
 800ae2a:	d9fa      	bls.n	800ae22 <_free_r+0x42>
 800ae2c:	6811      	ldr	r1, [r2, #0]
 800ae2e:	1850      	adds	r0, r2, r1
 800ae30:	42a0      	cmp	r0, r4
 800ae32:	d10b      	bne.n	800ae4c <_free_r+0x6c>
 800ae34:	6820      	ldr	r0, [r4, #0]
 800ae36:	4401      	add	r1, r0
 800ae38:	1850      	adds	r0, r2, r1
 800ae3a:	4283      	cmp	r3, r0
 800ae3c:	6011      	str	r1, [r2, #0]
 800ae3e:	d1e0      	bne.n	800ae02 <_free_r+0x22>
 800ae40:	6818      	ldr	r0, [r3, #0]
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	6053      	str	r3, [r2, #4]
 800ae46:	4408      	add	r0, r1
 800ae48:	6010      	str	r0, [r2, #0]
 800ae4a:	e7da      	b.n	800ae02 <_free_r+0x22>
 800ae4c:	d902      	bls.n	800ae54 <_free_r+0x74>
 800ae4e:	230c      	movs	r3, #12
 800ae50:	602b      	str	r3, [r5, #0]
 800ae52:	e7d6      	b.n	800ae02 <_free_r+0x22>
 800ae54:	6820      	ldr	r0, [r4, #0]
 800ae56:	1821      	adds	r1, r4, r0
 800ae58:	428b      	cmp	r3, r1
 800ae5a:	bf04      	itt	eq
 800ae5c:	6819      	ldreq	r1, [r3, #0]
 800ae5e:	685b      	ldreq	r3, [r3, #4]
 800ae60:	6063      	str	r3, [r4, #4]
 800ae62:	bf04      	itt	eq
 800ae64:	1809      	addeq	r1, r1, r0
 800ae66:	6021      	streq	r1, [r4, #0]
 800ae68:	6054      	str	r4, [r2, #4]
 800ae6a:	e7ca      	b.n	800ae02 <_free_r+0x22>
 800ae6c:	bd38      	pop	{r3, r4, r5, pc}
 800ae6e:	bf00      	nop
 800ae70:	20000808 	.word	0x20000808

0800ae74 <malloc>:
 800ae74:	4b02      	ldr	r3, [pc, #8]	@ (800ae80 <malloc+0xc>)
 800ae76:	4601      	mov	r1, r0
 800ae78:	6818      	ldr	r0, [r3, #0]
 800ae7a:	f000 b825 	b.w	800aec8 <_malloc_r>
 800ae7e:	bf00      	nop
 800ae80:	2000004c 	.word	0x2000004c

0800ae84 <sbrk_aligned>:
 800ae84:	b570      	push	{r4, r5, r6, lr}
 800ae86:	4e0f      	ldr	r6, [pc, #60]	@ (800aec4 <sbrk_aligned+0x40>)
 800ae88:	460c      	mov	r4, r1
 800ae8a:	6831      	ldr	r1, [r6, #0]
 800ae8c:	4605      	mov	r5, r0
 800ae8e:	b911      	cbnz	r1, 800ae96 <sbrk_aligned+0x12>
 800ae90:	f000 fe46 	bl	800bb20 <_sbrk_r>
 800ae94:	6030      	str	r0, [r6, #0]
 800ae96:	4621      	mov	r1, r4
 800ae98:	4628      	mov	r0, r5
 800ae9a:	f000 fe41 	bl	800bb20 <_sbrk_r>
 800ae9e:	1c43      	adds	r3, r0, #1
 800aea0:	d103      	bne.n	800aeaa <sbrk_aligned+0x26>
 800aea2:	f04f 34ff 	mov.w	r4, #4294967295
 800aea6:	4620      	mov	r0, r4
 800aea8:	bd70      	pop	{r4, r5, r6, pc}
 800aeaa:	1cc4      	adds	r4, r0, #3
 800aeac:	f024 0403 	bic.w	r4, r4, #3
 800aeb0:	42a0      	cmp	r0, r4
 800aeb2:	d0f8      	beq.n	800aea6 <sbrk_aligned+0x22>
 800aeb4:	1a21      	subs	r1, r4, r0
 800aeb6:	4628      	mov	r0, r5
 800aeb8:	f000 fe32 	bl	800bb20 <_sbrk_r>
 800aebc:	3001      	adds	r0, #1
 800aebe:	d1f2      	bne.n	800aea6 <sbrk_aligned+0x22>
 800aec0:	e7ef      	b.n	800aea2 <sbrk_aligned+0x1e>
 800aec2:	bf00      	nop
 800aec4:	20000804 	.word	0x20000804

0800aec8 <_malloc_r>:
 800aec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aecc:	1ccd      	adds	r5, r1, #3
 800aece:	f025 0503 	bic.w	r5, r5, #3
 800aed2:	3508      	adds	r5, #8
 800aed4:	2d0c      	cmp	r5, #12
 800aed6:	bf38      	it	cc
 800aed8:	250c      	movcc	r5, #12
 800aeda:	2d00      	cmp	r5, #0
 800aedc:	4606      	mov	r6, r0
 800aede:	db01      	blt.n	800aee4 <_malloc_r+0x1c>
 800aee0:	42a9      	cmp	r1, r5
 800aee2:	d904      	bls.n	800aeee <_malloc_r+0x26>
 800aee4:	230c      	movs	r3, #12
 800aee6:	6033      	str	r3, [r6, #0]
 800aee8:	2000      	movs	r0, #0
 800aeea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aeee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800afc4 <_malloc_r+0xfc>
 800aef2:	f000 f869 	bl	800afc8 <__malloc_lock>
 800aef6:	f8d8 3000 	ldr.w	r3, [r8]
 800aefa:	461c      	mov	r4, r3
 800aefc:	bb44      	cbnz	r4, 800af50 <_malloc_r+0x88>
 800aefe:	4629      	mov	r1, r5
 800af00:	4630      	mov	r0, r6
 800af02:	f7ff ffbf 	bl	800ae84 <sbrk_aligned>
 800af06:	1c43      	adds	r3, r0, #1
 800af08:	4604      	mov	r4, r0
 800af0a:	d158      	bne.n	800afbe <_malloc_r+0xf6>
 800af0c:	f8d8 4000 	ldr.w	r4, [r8]
 800af10:	4627      	mov	r7, r4
 800af12:	2f00      	cmp	r7, #0
 800af14:	d143      	bne.n	800af9e <_malloc_r+0xd6>
 800af16:	2c00      	cmp	r4, #0
 800af18:	d04b      	beq.n	800afb2 <_malloc_r+0xea>
 800af1a:	6823      	ldr	r3, [r4, #0]
 800af1c:	4639      	mov	r1, r7
 800af1e:	4630      	mov	r0, r6
 800af20:	eb04 0903 	add.w	r9, r4, r3
 800af24:	f000 fdfc 	bl	800bb20 <_sbrk_r>
 800af28:	4581      	cmp	r9, r0
 800af2a:	d142      	bne.n	800afb2 <_malloc_r+0xea>
 800af2c:	6821      	ldr	r1, [r4, #0]
 800af2e:	1a6d      	subs	r5, r5, r1
 800af30:	4629      	mov	r1, r5
 800af32:	4630      	mov	r0, r6
 800af34:	f7ff ffa6 	bl	800ae84 <sbrk_aligned>
 800af38:	3001      	adds	r0, #1
 800af3a:	d03a      	beq.n	800afb2 <_malloc_r+0xea>
 800af3c:	6823      	ldr	r3, [r4, #0]
 800af3e:	442b      	add	r3, r5
 800af40:	6023      	str	r3, [r4, #0]
 800af42:	f8d8 3000 	ldr.w	r3, [r8]
 800af46:	685a      	ldr	r2, [r3, #4]
 800af48:	bb62      	cbnz	r2, 800afa4 <_malloc_r+0xdc>
 800af4a:	f8c8 7000 	str.w	r7, [r8]
 800af4e:	e00f      	b.n	800af70 <_malloc_r+0xa8>
 800af50:	6822      	ldr	r2, [r4, #0]
 800af52:	1b52      	subs	r2, r2, r5
 800af54:	d420      	bmi.n	800af98 <_malloc_r+0xd0>
 800af56:	2a0b      	cmp	r2, #11
 800af58:	d917      	bls.n	800af8a <_malloc_r+0xc2>
 800af5a:	1961      	adds	r1, r4, r5
 800af5c:	42a3      	cmp	r3, r4
 800af5e:	6025      	str	r5, [r4, #0]
 800af60:	bf18      	it	ne
 800af62:	6059      	strne	r1, [r3, #4]
 800af64:	6863      	ldr	r3, [r4, #4]
 800af66:	bf08      	it	eq
 800af68:	f8c8 1000 	streq.w	r1, [r8]
 800af6c:	5162      	str	r2, [r4, r5]
 800af6e:	604b      	str	r3, [r1, #4]
 800af70:	4630      	mov	r0, r6
 800af72:	f000 f82f 	bl	800afd4 <__malloc_unlock>
 800af76:	f104 000b 	add.w	r0, r4, #11
 800af7a:	1d23      	adds	r3, r4, #4
 800af7c:	f020 0007 	bic.w	r0, r0, #7
 800af80:	1ac2      	subs	r2, r0, r3
 800af82:	bf1c      	itt	ne
 800af84:	1a1b      	subne	r3, r3, r0
 800af86:	50a3      	strne	r3, [r4, r2]
 800af88:	e7af      	b.n	800aeea <_malloc_r+0x22>
 800af8a:	6862      	ldr	r2, [r4, #4]
 800af8c:	42a3      	cmp	r3, r4
 800af8e:	bf0c      	ite	eq
 800af90:	f8c8 2000 	streq.w	r2, [r8]
 800af94:	605a      	strne	r2, [r3, #4]
 800af96:	e7eb      	b.n	800af70 <_malloc_r+0xa8>
 800af98:	4623      	mov	r3, r4
 800af9a:	6864      	ldr	r4, [r4, #4]
 800af9c:	e7ae      	b.n	800aefc <_malloc_r+0x34>
 800af9e:	463c      	mov	r4, r7
 800afa0:	687f      	ldr	r7, [r7, #4]
 800afa2:	e7b6      	b.n	800af12 <_malloc_r+0x4a>
 800afa4:	461a      	mov	r2, r3
 800afa6:	685b      	ldr	r3, [r3, #4]
 800afa8:	42a3      	cmp	r3, r4
 800afaa:	d1fb      	bne.n	800afa4 <_malloc_r+0xdc>
 800afac:	2300      	movs	r3, #0
 800afae:	6053      	str	r3, [r2, #4]
 800afb0:	e7de      	b.n	800af70 <_malloc_r+0xa8>
 800afb2:	230c      	movs	r3, #12
 800afb4:	6033      	str	r3, [r6, #0]
 800afb6:	4630      	mov	r0, r6
 800afb8:	f000 f80c 	bl	800afd4 <__malloc_unlock>
 800afbc:	e794      	b.n	800aee8 <_malloc_r+0x20>
 800afbe:	6005      	str	r5, [r0, #0]
 800afc0:	e7d6      	b.n	800af70 <_malloc_r+0xa8>
 800afc2:	bf00      	nop
 800afc4:	20000808 	.word	0x20000808

0800afc8 <__malloc_lock>:
 800afc8:	4801      	ldr	r0, [pc, #4]	@ (800afd0 <__malloc_lock+0x8>)
 800afca:	f7ff b8ba 	b.w	800a142 <__retarget_lock_acquire_recursive>
 800afce:	bf00      	nop
 800afd0:	20000800 	.word	0x20000800

0800afd4 <__malloc_unlock>:
 800afd4:	4801      	ldr	r0, [pc, #4]	@ (800afdc <__malloc_unlock+0x8>)
 800afd6:	f7ff b8b5 	b.w	800a144 <__retarget_lock_release_recursive>
 800afda:	bf00      	nop
 800afdc:	20000800 	.word	0x20000800

0800afe0 <_Balloc>:
 800afe0:	b570      	push	{r4, r5, r6, lr}
 800afe2:	69c6      	ldr	r6, [r0, #28]
 800afe4:	4604      	mov	r4, r0
 800afe6:	460d      	mov	r5, r1
 800afe8:	b976      	cbnz	r6, 800b008 <_Balloc+0x28>
 800afea:	2010      	movs	r0, #16
 800afec:	f7ff ff42 	bl	800ae74 <malloc>
 800aff0:	4602      	mov	r2, r0
 800aff2:	61e0      	str	r0, [r4, #28]
 800aff4:	b920      	cbnz	r0, 800b000 <_Balloc+0x20>
 800aff6:	4b18      	ldr	r3, [pc, #96]	@ (800b058 <_Balloc+0x78>)
 800aff8:	4818      	ldr	r0, [pc, #96]	@ (800b05c <_Balloc+0x7c>)
 800affa:	216b      	movs	r1, #107	@ 0x6b
 800affc:	f000 fdae 	bl	800bb5c <__assert_func>
 800b000:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b004:	6006      	str	r6, [r0, #0]
 800b006:	60c6      	str	r6, [r0, #12]
 800b008:	69e6      	ldr	r6, [r4, #28]
 800b00a:	68f3      	ldr	r3, [r6, #12]
 800b00c:	b183      	cbz	r3, 800b030 <_Balloc+0x50>
 800b00e:	69e3      	ldr	r3, [r4, #28]
 800b010:	68db      	ldr	r3, [r3, #12]
 800b012:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b016:	b9b8      	cbnz	r0, 800b048 <_Balloc+0x68>
 800b018:	2101      	movs	r1, #1
 800b01a:	fa01 f605 	lsl.w	r6, r1, r5
 800b01e:	1d72      	adds	r2, r6, #5
 800b020:	0092      	lsls	r2, r2, #2
 800b022:	4620      	mov	r0, r4
 800b024:	f000 fdb8 	bl	800bb98 <_calloc_r>
 800b028:	b160      	cbz	r0, 800b044 <_Balloc+0x64>
 800b02a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b02e:	e00e      	b.n	800b04e <_Balloc+0x6e>
 800b030:	2221      	movs	r2, #33	@ 0x21
 800b032:	2104      	movs	r1, #4
 800b034:	4620      	mov	r0, r4
 800b036:	f000 fdaf 	bl	800bb98 <_calloc_r>
 800b03a:	69e3      	ldr	r3, [r4, #28]
 800b03c:	60f0      	str	r0, [r6, #12]
 800b03e:	68db      	ldr	r3, [r3, #12]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d1e4      	bne.n	800b00e <_Balloc+0x2e>
 800b044:	2000      	movs	r0, #0
 800b046:	bd70      	pop	{r4, r5, r6, pc}
 800b048:	6802      	ldr	r2, [r0, #0]
 800b04a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b04e:	2300      	movs	r3, #0
 800b050:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b054:	e7f7      	b.n	800b046 <_Balloc+0x66>
 800b056:	bf00      	nop
 800b058:	0800d61d 	.word	0x0800d61d
 800b05c:	0800d69d 	.word	0x0800d69d

0800b060 <_Bfree>:
 800b060:	b570      	push	{r4, r5, r6, lr}
 800b062:	69c6      	ldr	r6, [r0, #28]
 800b064:	4605      	mov	r5, r0
 800b066:	460c      	mov	r4, r1
 800b068:	b976      	cbnz	r6, 800b088 <_Bfree+0x28>
 800b06a:	2010      	movs	r0, #16
 800b06c:	f7ff ff02 	bl	800ae74 <malloc>
 800b070:	4602      	mov	r2, r0
 800b072:	61e8      	str	r0, [r5, #28]
 800b074:	b920      	cbnz	r0, 800b080 <_Bfree+0x20>
 800b076:	4b09      	ldr	r3, [pc, #36]	@ (800b09c <_Bfree+0x3c>)
 800b078:	4809      	ldr	r0, [pc, #36]	@ (800b0a0 <_Bfree+0x40>)
 800b07a:	218f      	movs	r1, #143	@ 0x8f
 800b07c:	f000 fd6e 	bl	800bb5c <__assert_func>
 800b080:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b084:	6006      	str	r6, [r0, #0]
 800b086:	60c6      	str	r6, [r0, #12]
 800b088:	b13c      	cbz	r4, 800b09a <_Bfree+0x3a>
 800b08a:	69eb      	ldr	r3, [r5, #28]
 800b08c:	6862      	ldr	r2, [r4, #4]
 800b08e:	68db      	ldr	r3, [r3, #12]
 800b090:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b094:	6021      	str	r1, [r4, #0]
 800b096:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b09a:	bd70      	pop	{r4, r5, r6, pc}
 800b09c:	0800d61d 	.word	0x0800d61d
 800b0a0:	0800d69d 	.word	0x0800d69d

0800b0a4 <__multadd>:
 800b0a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0a8:	690d      	ldr	r5, [r1, #16]
 800b0aa:	4607      	mov	r7, r0
 800b0ac:	460c      	mov	r4, r1
 800b0ae:	461e      	mov	r6, r3
 800b0b0:	f101 0c14 	add.w	ip, r1, #20
 800b0b4:	2000      	movs	r0, #0
 800b0b6:	f8dc 3000 	ldr.w	r3, [ip]
 800b0ba:	b299      	uxth	r1, r3
 800b0bc:	fb02 6101 	mla	r1, r2, r1, r6
 800b0c0:	0c1e      	lsrs	r6, r3, #16
 800b0c2:	0c0b      	lsrs	r3, r1, #16
 800b0c4:	fb02 3306 	mla	r3, r2, r6, r3
 800b0c8:	b289      	uxth	r1, r1
 800b0ca:	3001      	adds	r0, #1
 800b0cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b0d0:	4285      	cmp	r5, r0
 800b0d2:	f84c 1b04 	str.w	r1, [ip], #4
 800b0d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b0da:	dcec      	bgt.n	800b0b6 <__multadd+0x12>
 800b0dc:	b30e      	cbz	r6, 800b122 <__multadd+0x7e>
 800b0de:	68a3      	ldr	r3, [r4, #8]
 800b0e0:	42ab      	cmp	r3, r5
 800b0e2:	dc19      	bgt.n	800b118 <__multadd+0x74>
 800b0e4:	6861      	ldr	r1, [r4, #4]
 800b0e6:	4638      	mov	r0, r7
 800b0e8:	3101      	adds	r1, #1
 800b0ea:	f7ff ff79 	bl	800afe0 <_Balloc>
 800b0ee:	4680      	mov	r8, r0
 800b0f0:	b928      	cbnz	r0, 800b0fe <__multadd+0x5a>
 800b0f2:	4602      	mov	r2, r0
 800b0f4:	4b0c      	ldr	r3, [pc, #48]	@ (800b128 <__multadd+0x84>)
 800b0f6:	480d      	ldr	r0, [pc, #52]	@ (800b12c <__multadd+0x88>)
 800b0f8:	21ba      	movs	r1, #186	@ 0xba
 800b0fa:	f000 fd2f 	bl	800bb5c <__assert_func>
 800b0fe:	6922      	ldr	r2, [r4, #16]
 800b100:	3202      	adds	r2, #2
 800b102:	f104 010c 	add.w	r1, r4, #12
 800b106:	0092      	lsls	r2, r2, #2
 800b108:	300c      	adds	r0, #12
 800b10a:	f000 fd19 	bl	800bb40 <memcpy>
 800b10e:	4621      	mov	r1, r4
 800b110:	4638      	mov	r0, r7
 800b112:	f7ff ffa5 	bl	800b060 <_Bfree>
 800b116:	4644      	mov	r4, r8
 800b118:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b11c:	3501      	adds	r5, #1
 800b11e:	615e      	str	r6, [r3, #20]
 800b120:	6125      	str	r5, [r4, #16]
 800b122:	4620      	mov	r0, r4
 800b124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b128:	0800d68c 	.word	0x0800d68c
 800b12c:	0800d69d 	.word	0x0800d69d

0800b130 <__hi0bits>:
 800b130:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b134:	4603      	mov	r3, r0
 800b136:	bf36      	itet	cc
 800b138:	0403      	lslcc	r3, r0, #16
 800b13a:	2000      	movcs	r0, #0
 800b13c:	2010      	movcc	r0, #16
 800b13e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b142:	bf3c      	itt	cc
 800b144:	021b      	lslcc	r3, r3, #8
 800b146:	3008      	addcc	r0, #8
 800b148:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b14c:	bf3c      	itt	cc
 800b14e:	011b      	lslcc	r3, r3, #4
 800b150:	3004      	addcc	r0, #4
 800b152:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b156:	bf3c      	itt	cc
 800b158:	009b      	lslcc	r3, r3, #2
 800b15a:	3002      	addcc	r0, #2
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	db05      	blt.n	800b16c <__hi0bits+0x3c>
 800b160:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b164:	f100 0001 	add.w	r0, r0, #1
 800b168:	bf08      	it	eq
 800b16a:	2020      	moveq	r0, #32
 800b16c:	4770      	bx	lr

0800b16e <__lo0bits>:
 800b16e:	6803      	ldr	r3, [r0, #0]
 800b170:	4602      	mov	r2, r0
 800b172:	f013 0007 	ands.w	r0, r3, #7
 800b176:	d00b      	beq.n	800b190 <__lo0bits+0x22>
 800b178:	07d9      	lsls	r1, r3, #31
 800b17a:	d421      	bmi.n	800b1c0 <__lo0bits+0x52>
 800b17c:	0798      	lsls	r0, r3, #30
 800b17e:	bf49      	itett	mi
 800b180:	085b      	lsrmi	r3, r3, #1
 800b182:	089b      	lsrpl	r3, r3, #2
 800b184:	2001      	movmi	r0, #1
 800b186:	6013      	strmi	r3, [r2, #0]
 800b188:	bf5c      	itt	pl
 800b18a:	6013      	strpl	r3, [r2, #0]
 800b18c:	2002      	movpl	r0, #2
 800b18e:	4770      	bx	lr
 800b190:	b299      	uxth	r1, r3
 800b192:	b909      	cbnz	r1, 800b198 <__lo0bits+0x2a>
 800b194:	0c1b      	lsrs	r3, r3, #16
 800b196:	2010      	movs	r0, #16
 800b198:	b2d9      	uxtb	r1, r3
 800b19a:	b909      	cbnz	r1, 800b1a0 <__lo0bits+0x32>
 800b19c:	3008      	adds	r0, #8
 800b19e:	0a1b      	lsrs	r3, r3, #8
 800b1a0:	0719      	lsls	r1, r3, #28
 800b1a2:	bf04      	itt	eq
 800b1a4:	091b      	lsreq	r3, r3, #4
 800b1a6:	3004      	addeq	r0, #4
 800b1a8:	0799      	lsls	r1, r3, #30
 800b1aa:	bf04      	itt	eq
 800b1ac:	089b      	lsreq	r3, r3, #2
 800b1ae:	3002      	addeq	r0, #2
 800b1b0:	07d9      	lsls	r1, r3, #31
 800b1b2:	d403      	bmi.n	800b1bc <__lo0bits+0x4e>
 800b1b4:	085b      	lsrs	r3, r3, #1
 800b1b6:	f100 0001 	add.w	r0, r0, #1
 800b1ba:	d003      	beq.n	800b1c4 <__lo0bits+0x56>
 800b1bc:	6013      	str	r3, [r2, #0]
 800b1be:	4770      	bx	lr
 800b1c0:	2000      	movs	r0, #0
 800b1c2:	4770      	bx	lr
 800b1c4:	2020      	movs	r0, #32
 800b1c6:	4770      	bx	lr

0800b1c8 <__i2b>:
 800b1c8:	b510      	push	{r4, lr}
 800b1ca:	460c      	mov	r4, r1
 800b1cc:	2101      	movs	r1, #1
 800b1ce:	f7ff ff07 	bl	800afe0 <_Balloc>
 800b1d2:	4602      	mov	r2, r0
 800b1d4:	b928      	cbnz	r0, 800b1e2 <__i2b+0x1a>
 800b1d6:	4b05      	ldr	r3, [pc, #20]	@ (800b1ec <__i2b+0x24>)
 800b1d8:	4805      	ldr	r0, [pc, #20]	@ (800b1f0 <__i2b+0x28>)
 800b1da:	f240 1145 	movw	r1, #325	@ 0x145
 800b1de:	f000 fcbd 	bl	800bb5c <__assert_func>
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	6144      	str	r4, [r0, #20]
 800b1e6:	6103      	str	r3, [r0, #16]
 800b1e8:	bd10      	pop	{r4, pc}
 800b1ea:	bf00      	nop
 800b1ec:	0800d68c 	.word	0x0800d68c
 800b1f0:	0800d69d 	.word	0x0800d69d

0800b1f4 <__multiply>:
 800b1f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1f8:	4614      	mov	r4, r2
 800b1fa:	690a      	ldr	r2, [r1, #16]
 800b1fc:	6923      	ldr	r3, [r4, #16]
 800b1fe:	429a      	cmp	r2, r3
 800b200:	bfa8      	it	ge
 800b202:	4623      	movge	r3, r4
 800b204:	460f      	mov	r7, r1
 800b206:	bfa4      	itt	ge
 800b208:	460c      	movge	r4, r1
 800b20a:	461f      	movge	r7, r3
 800b20c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b210:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b214:	68a3      	ldr	r3, [r4, #8]
 800b216:	6861      	ldr	r1, [r4, #4]
 800b218:	eb0a 0609 	add.w	r6, sl, r9
 800b21c:	42b3      	cmp	r3, r6
 800b21e:	b085      	sub	sp, #20
 800b220:	bfb8      	it	lt
 800b222:	3101      	addlt	r1, #1
 800b224:	f7ff fedc 	bl	800afe0 <_Balloc>
 800b228:	b930      	cbnz	r0, 800b238 <__multiply+0x44>
 800b22a:	4602      	mov	r2, r0
 800b22c:	4b44      	ldr	r3, [pc, #272]	@ (800b340 <__multiply+0x14c>)
 800b22e:	4845      	ldr	r0, [pc, #276]	@ (800b344 <__multiply+0x150>)
 800b230:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b234:	f000 fc92 	bl	800bb5c <__assert_func>
 800b238:	f100 0514 	add.w	r5, r0, #20
 800b23c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b240:	462b      	mov	r3, r5
 800b242:	2200      	movs	r2, #0
 800b244:	4543      	cmp	r3, r8
 800b246:	d321      	bcc.n	800b28c <__multiply+0x98>
 800b248:	f107 0114 	add.w	r1, r7, #20
 800b24c:	f104 0214 	add.w	r2, r4, #20
 800b250:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b254:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b258:	9302      	str	r3, [sp, #8]
 800b25a:	1b13      	subs	r3, r2, r4
 800b25c:	3b15      	subs	r3, #21
 800b25e:	f023 0303 	bic.w	r3, r3, #3
 800b262:	3304      	adds	r3, #4
 800b264:	f104 0715 	add.w	r7, r4, #21
 800b268:	42ba      	cmp	r2, r7
 800b26a:	bf38      	it	cc
 800b26c:	2304      	movcc	r3, #4
 800b26e:	9301      	str	r3, [sp, #4]
 800b270:	9b02      	ldr	r3, [sp, #8]
 800b272:	9103      	str	r1, [sp, #12]
 800b274:	428b      	cmp	r3, r1
 800b276:	d80c      	bhi.n	800b292 <__multiply+0x9e>
 800b278:	2e00      	cmp	r6, #0
 800b27a:	dd03      	ble.n	800b284 <__multiply+0x90>
 800b27c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b280:	2b00      	cmp	r3, #0
 800b282:	d05b      	beq.n	800b33c <__multiply+0x148>
 800b284:	6106      	str	r6, [r0, #16]
 800b286:	b005      	add	sp, #20
 800b288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b28c:	f843 2b04 	str.w	r2, [r3], #4
 800b290:	e7d8      	b.n	800b244 <__multiply+0x50>
 800b292:	f8b1 a000 	ldrh.w	sl, [r1]
 800b296:	f1ba 0f00 	cmp.w	sl, #0
 800b29a:	d024      	beq.n	800b2e6 <__multiply+0xf2>
 800b29c:	f104 0e14 	add.w	lr, r4, #20
 800b2a0:	46a9      	mov	r9, r5
 800b2a2:	f04f 0c00 	mov.w	ip, #0
 800b2a6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b2aa:	f8d9 3000 	ldr.w	r3, [r9]
 800b2ae:	fa1f fb87 	uxth.w	fp, r7
 800b2b2:	b29b      	uxth	r3, r3
 800b2b4:	fb0a 330b 	mla	r3, sl, fp, r3
 800b2b8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b2bc:	f8d9 7000 	ldr.w	r7, [r9]
 800b2c0:	4463      	add	r3, ip
 800b2c2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b2c6:	fb0a c70b 	mla	r7, sl, fp, ip
 800b2ca:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b2ce:	b29b      	uxth	r3, r3
 800b2d0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b2d4:	4572      	cmp	r2, lr
 800b2d6:	f849 3b04 	str.w	r3, [r9], #4
 800b2da:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b2de:	d8e2      	bhi.n	800b2a6 <__multiply+0xb2>
 800b2e0:	9b01      	ldr	r3, [sp, #4]
 800b2e2:	f845 c003 	str.w	ip, [r5, r3]
 800b2e6:	9b03      	ldr	r3, [sp, #12]
 800b2e8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b2ec:	3104      	adds	r1, #4
 800b2ee:	f1b9 0f00 	cmp.w	r9, #0
 800b2f2:	d021      	beq.n	800b338 <__multiply+0x144>
 800b2f4:	682b      	ldr	r3, [r5, #0]
 800b2f6:	f104 0c14 	add.w	ip, r4, #20
 800b2fa:	46ae      	mov	lr, r5
 800b2fc:	f04f 0a00 	mov.w	sl, #0
 800b300:	f8bc b000 	ldrh.w	fp, [ip]
 800b304:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b308:	fb09 770b 	mla	r7, r9, fp, r7
 800b30c:	4457      	add	r7, sl
 800b30e:	b29b      	uxth	r3, r3
 800b310:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b314:	f84e 3b04 	str.w	r3, [lr], #4
 800b318:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b31c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b320:	f8be 3000 	ldrh.w	r3, [lr]
 800b324:	fb09 330a 	mla	r3, r9, sl, r3
 800b328:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b32c:	4562      	cmp	r2, ip
 800b32e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b332:	d8e5      	bhi.n	800b300 <__multiply+0x10c>
 800b334:	9f01      	ldr	r7, [sp, #4]
 800b336:	51eb      	str	r3, [r5, r7]
 800b338:	3504      	adds	r5, #4
 800b33a:	e799      	b.n	800b270 <__multiply+0x7c>
 800b33c:	3e01      	subs	r6, #1
 800b33e:	e79b      	b.n	800b278 <__multiply+0x84>
 800b340:	0800d68c 	.word	0x0800d68c
 800b344:	0800d69d 	.word	0x0800d69d

0800b348 <__pow5mult>:
 800b348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b34c:	4615      	mov	r5, r2
 800b34e:	f012 0203 	ands.w	r2, r2, #3
 800b352:	4607      	mov	r7, r0
 800b354:	460e      	mov	r6, r1
 800b356:	d007      	beq.n	800b368 <__pow5mult+0x20>
 800b358:	4c25      	ldr	r4, [pc, #148]	@ (800b3f0 <__pow5mult+0xa8>)
 800b35a:	3a01      	subs	r2, #1
 800b35c:	2300      	movs	r3, #0
 800b35e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b362:	f7ff fe9f 	bl	800b0a4 <__multadd>
 800b366:	4606      	mov	r6, r0
 800b368:	10ad      	asrs	r5, r5, #2
 800b36a:	d03d      	beq.n	800b3e8 <__pow5mult+0xa0>
 800b36c:	69fc      	ldr	r4, [r7, #28]
 800b36e:	b97c      	cbnz	r4, 800b390 <__pow5mult+0x48>
 800b370:	2010      	movs	r0, #16
 800b372:	f7ff fd7f 	bl	800ae74 <malloc>
 800b376:	4602      	mov	r2, r0
 800b378:	61f8      	str	r0, [r7, #28]
 800b37a:	b928      	cbnz	r0, 800b388 <__pow5mult+0x40>
 800b37c:	4b1d      	ldr	r3, [pc, #116]	@ (800b3f4 <__pow5mult+0xac>)
 800b37e:	481e      	ldr	r0, [pc, #120]	@ (800b3f8 <__pow5mult+0xb0>)
 800b380:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b384:	f000 fbea 	bl	800bb5c <__assert_func>
 800b388:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b38c:	6004      	str	r4, [r0, #0]
 800b38e:	60c4      	str	r4, [r0, #12]
 800b390:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b394:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b398:	b94c      	cbnz	r4, 800b3ae <__pow5mult+0x66>
 800b39a:	f240 2171 	movw	r1, #625	@ 0x271
 800b39e:	4638      	mov	r0, r7
 800b3a0:	f7ff ff12 	bl	800b1c8 <__i2b>
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	f8c8 0008 	str.w	r0, [r8, #8]
 800b3aa:	4604      	mov	r4, r0
 800b3ac:	6003      	str	r3, [r0, #0]
 800b3ae:	f04f 0900 	mov.w	r9, #0
 800b3b2:	07eb      	lsls	r3, r5, #31
 800b3b4:	d50a      	bpl.n	800b3cc <__pow5mult+0x84>
 800b3b6:	4631      	mov	r1, r6
 800b3b8:	4622      	mov	r2, r4
 800b3ba:	4638      	mov	r0, r7
 800b3bc:	f7ff ff1a 	bl	800b1f4 <__multiply>
 800b3c0:	4631      	mov	r1, r6
 800b3c2:	4680      	mov	r8, r0
 800b3c4:	4638      	mov	r0, r7
 800b3c6:	f7ff fe4b 	bl	800b060 <_Bfree>
 800b3ca:	4646      	mov	r6, r8
 800b3cc:	106d      	asrs	r5, r5, #1
 800b3ce:	d00b      	beq.n	800b3e8 <__pow5mult+0xa0>
 800b3d0:	6820      	ldr	r0, [r4, #0]
 800b3d2:	b938      	cbnz	r0, 800b3e4 <__pow5mult+0x9c>
 800b3d4:	4622      	mov	r2, r4
 800b3d6:	4621      	mov	r1, r4
 800b3d8:	4638      	mov	r0, r7
 800b3da:	f7ff ff0b 	bl	800b1f4 <__multiply>
 800b3de:	6020      	str	r0, [r4, #0]
 800b3e0:	f8c0 9000 	str.w	r9, [r0]
 800b3e4:	4604      	mov	r4, r0
 800b3e6:	e7e4      	b.n	800b3b2 <__pow5mult+0x6a>
 800b3e8:	4630      	mov	r0, r6
 800b3ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3ee:	bf00      	nop
 800b3f0:	0800d6f8 	.word	0x0800d6f8
 800b3f4:	0800d61d 	.word	0x0800d61d
 800b3f8:	0800d69d 	.word	0x0800d69d

0800b3fc <__lshift>:
 800b3fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b400:	460c      	mov	r4, r1
 800b402:	6849      	ldr	r1, [r1, #4]
 800b404:	6923      	ldr	r3, [r4, #16]
 800b406:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b40a:	68a3      	ldr	r3, [r4, #8]
 800b40c:	4607      	mov	r7, r0
 800b40e:	4691      	mov	r9, r2
 800b410:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b414:	f108 0601 	add.w	r6, r8, #1
 800b418:	42b3      	cmp	r3, r6
 800b41a:	db0b      	blt.n	800b434 <__lshift+0x38>
 800b41c:	4638      	mov	r0, r7
 800b41e:	f7ff fddf 	bl	800afe0 <_Balloc>
 800b422:	4605      	mov	r5, r0
 800b424:	b948      	cbnz	r0, 800b43a <__lshift+0x3e>
 800b426:	4602      	mov	r2, r0
 800b428:	4b28      	ldr	r3, [pc, #160]	@ (800b4cc <__lshift+0xd0>)
 800b42a:	4829      	ldr	r0, [pc, #164]	@ (800b4d0 <__lshift+0xd4>)
 800b42c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b430:	f000 fb94 	bl	800bb5c <__assert_func>
 800b434:	3101      	adds	r1, #1
 800b436:	005b      	lsls	r3, r3, #1
 800b438:	e7ee      	b.n	800b418 <__lshift+0x1c>
 800b43a:	2300      	movs	r3, #0
 800b43c:	f100 0114 	add.w	r1, r0, #20
 800b440:	f100 0210 	add.w	r2, r0, #16
 800b444:	4618      	mov	r0, r3
 800b446:	4553      	cmp	r3, sl
 800b448:	db33      	blt.n	800b4b2 <__lshift+0xb6>
 800b44a:	6920      	ldr	r0, [r4, #16]
 800b44c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b450:	f104 0314 	add.w	r3, r4, #20
 800b454:	f019 091f 	ands.w	r9, r9, #31
 800b458:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b45c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b460:	d02b      	beq.n	800b4ba <__lshift+0xbe>
 800b462:	f1c9 0e20 	rsb	lr, r9, #32
 800b466:	468a      	mov	sl, r1
 800b468:	2200      	movs	r2, #0
 800b46a:	6818      	ldr	r0, [r3, #0]
 800b46c:	fa00 f009 	lsl.w	r0, r0, r9
 800b470:	4310      	orrs	r0, r2
 800b472:	f84a 0b04 	str.w	r0, [sl], #4
 800b476:	f853 2b04 	ldr.w	r2, [r3], #4
 800b47a:	459c      	cmp	ip, r3
 800b47c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b480:	d8f3      	bhi.n	800b46a <__lshift+0x6e>
 800b482:	ebac 0304 	sub.w	r3, ip, r4
 800b486:	3b15      	subs	r3, #21
 800b488:	f023 0303 	bic.w	r3, r3, #3
 800b48c:	3304      	adds	r3, #4
 800b48e:	f104 0015 	add.w	r0, r4, #21
 800b492:	4584      	cmp	ip, r0
 800b494:	bf38      	it	cc
 800b496:	2304      	movcc	r3, #4
 800b498:	50ca      	str	r2, [r1, r3]
 800b49a:	b10a      	cbz	r2, 800b4a0 <__lshift+0xa4>
 800b49c:	f108 0602 	add.w	r6, r8, #2
 800b4a0:	3e01      	subs	r6, #1
 800b4a2:	4638      	mov	r0, r7
 800b4a4:	612e      	str	r6, [r5, #16]
 800b4a6:	4621      	mov	r1, r4
 800b4a8:	f7ff fdda 	bl	800b060 <_Bfree>
 800b4ac:	4628      	mov	r0, r5
 800b4ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4b2:	f842 0f04 	str.w	r0, [r2, #4]!
 800b4b6:	3301      	adds	r3, #1
 800b4b8:	e7c5      	b.n	800b446 <__lshift+0x4a>
 800b4ba:	3904      	subs	r1, #4
 800b4bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4c0:	f841 2f04 	str.w	r2, [r1, #4]!
 800b4c4:	459c      	cmp	ip, r3
 800b4c6:	d8f9      	bhi.n	800b4bc <__lshift+0xc0>
 800b4c8:	e7ea      	b.n	800b4a0 <__lshift+0xa4>
 800b4ca:	bf00      	nop
 800b4cc:	0800d68c 	.word	0x0800d68c
 800b4d0:	0800d69d 	.word	0x0800d69d

0800b4d4 <__mcmp>:
 800b4d4:	690a      	ldr	r2, [r1, #16]
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	6900      	ldr	r0, [r0, #16]
 800b4da:	1a80      	subs	r0, r0, r2
 800b4dc:	b530      	push	{r4, r5, lr}
 800b4de:	d10e      	bne.n	800b4fe <__mcmp+0x2a>
 800b4e0:	3314      	adds	r3, #20
 800b4e2:	3114      	adds	r1, #20
 800b4e4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b4e8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b4ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b4f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b4f4:	4295      	cmp	r5, r2
 800b4f6:	d003      	beq.n	800b500 <__mcmp+0x2c>
 800b4f8:	d205      	bcs.n	800b506 <__mcmp+0x32>
 800b4fa:	f04f 30ff 	mov.w	r0, #4294967295
 800b4fe:	bd30      	pop	{r4, r5, pc}
 800b500:	42a3      	cmp	r3, r4
 800b502:	d3f3      	bcc.n	800b4ec <__mcmp+0x18>
 800b504:	e7fb      	b.n	800b4fe <__mcmp+0x2a>
 800b506:	2001      	movs	r0, #1
 800b508:	e7f9      	b.n	800b4fe <__mcmp+0x2a>
	...

0800b50c <__mdiff>:
 800b50c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b510:	4689      	mov	r9, r1
 800b512:	4606      	mov	r6, r0
 800b514:	4611      	mov	r1, r2
 800b516:	4648      	mov	r0, r9
 800b518:	4614      	mov	r4, r2
 800b51a:	f7ff ffdb 	bl	800b4d4 <__mcmp>
 800b51e:	1e05      	subs	r5, r0, #0
 800b520:	d112      	bne.n	800b548 <__mdiff+0x3c>
 800b522:	4629      	mov	r1, r5
 800b524:	4630      	mov	r0, r6
 800b526:	f7ff fd5b 	bl	800afe0 <_Balloc>
 800b52a:	4602      	mov	r2, r0
 800b52c:	b928      	cbnz	r0, 800b53a <__mdiff+0x2e>
 800b52e:	4b3f      	ldr	r3, [pc, #252]	@ (800b62c <__mdiff+0x120>)
 800b530:	f240 2137 	movw	r1, #567	@ 0x237
 800b534:	483e      	ldr	r0, [pc, #248]	@ (800b630 <__mdiff+0x124>)
 800b536:	f000 fb11 	bl	800bb5c <__assert_func>
 800b53a:	2301      	movs	r3, #1
 800b53c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b540:	4610      	mov	r0, r2
 800b542:	b003      	add	sp, #12
 800b544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b548:	bfbc      	itt	lt
 800b54a:	464b      	movlt	r3, r9
 800b54c:	46a1      	movlt	r9, r4
 800b54e:	4630      	mov	r0, r6
 800b550:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b554:	bfba      	itte	lt
 800b556:	461c      	movlt	r4, r3
 800b558:	2501      	movlt	r5, #1
 800b55a:	2500      	movge	r5, #0
 800b55c:	f7ff fd40 	bl	800afe0 <_Balloc>
 800b560:	4602      	mov	r2, r0
 800b562:	b918      	cbnz	r0, 800b56c <__mdiff+0x60>
 800b564:	4b31      	ldr	r3, [pc, #196]	@ (800b62c <__mdiff+0x120>)
 800b566:	f240 2145 	movw	r1, #581	@ 0x245
 800b56a:	e7e3      	b.n	800b534 <__mdiff+0x28>
 800b56c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b570:	6926      	ldr	r6, [r4, #16]
 800b572:	60c5      	str	r5, [r0, #12]
 800b574:	f109 0310 	add.w	r3, r9, #16
 800b578:	f109 0514 	add.w	r5, r9, #20
 800b57c:	f104 0e14 	add.w	lr, r4, #20
 800b580:	f100 0b14 	add.w	fp, r0, #20
 800b584:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b588:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b58c:	9301      	str	r3, [sp, #4]
 800b58e:	46d9      	mov	r9, fp
 800b590:	f04f 0c00 	mov.w	ip, #0
 800b594:	9b01      	ldr	r3, [sp, #4]
 800b596:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b59a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b59e:	9301      	str	r3, [sp, #4]
 800b5a0:	fa1f f38a 	uxth.w	r3, sl
 800b5a4:	4619      	mov	r1, r3
 800b5a6:	b283      	uxth	r3, r0
 800b5a8:	1acb      	subs	r3, r1, r3
 800b5aa:	0c00      	lsrs	r0, r0, #16
 800b5ac:	4463      	add	r3, ip
 800b5ae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b5b2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b5b6:	b29b      	uxth	r3, r3
 800b5b8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b5bc:	4576      	cmp	r6, lr
 800b5be:	f849 3b04 	str.w	r3, [r9], #4
 800b5c2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b5c6:	d8e5      	bhi.n	800b594 <__mdiff+0x88>
 800b5c8:	1b33      	subs	r3, r6, r4
 800b5ca:	3b15      	subs	r3, #21
 800b5cc:	f023 0303 	bic.w	r3, r3, #3
 800b5d0:	3415      	adds	r4, #21
 800b5d2:	3304      	adds	r3, #4
 800b5d4:	42a6      	cmp	r6, r4
 800b5d6:	bf38      	it	cc
 800b5d8:	2304      	movcc	r3, #4
 800b5da:	441d      	add	r5, r3
 800b5dc:	445b      	add	r3, fp
 800b5de:	461e      	mov	r6, r3
 800b5e0:	462c      	mov	r4, r5
 800b5e2:	4544      	cmp	r4, r8
 800b5e4:	d30e      	bcc.n	800b604 <__mdiff+0xf8>
 800b5e6:	f108 0103 	add.w	r1, r8, #3
 800b5ea:	1b49      	subs	r1, r1, r5
 800b5ec:	f021 0103 	bic.w	r1, r1, #3
 800b5f0:	3d03      	subs	r5, #3
 800b5f2:	45a8      	cmp	r8, r5
 800b5f4:	bf38      	it	cc
 800b5f6:	2100      	movcc	r1, #0
 800b5f8:	440b      	add	r3, r1
 800b5fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b5fe:	b191      	cbz	r1, 800b626 <__mdiff+0x11a>
 800b600:	6117      	str	r7, [r2, #16]
 800b602:	e79d      	b.n	800b540 <__mdiff+0x34>
 800b604:	f854 1b04 	ldr.w	r1, [r4], #4
 800b608:	46e6      	mov	lr, ip
 800b60a:	0c08      	lsrs	r0, r1, #16
 800b60c:	fa1c fc81 	uxtah	ip, ip, r1
 800b610:	4471      	add	r1, lr
 800b612:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b616:	b289      	uxth	r1, r1
 800b618:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b61c:	f846 1b04 	str.w	r1, [r6], #4
 800b620:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b624:	e7dd      	b.n	800b5e2 <__mdiff+0xd6>
 800b626:	3f01      	subs	r7, #1
 800b628:	e7e7      	b.n	800b5fa <__mdiff+0xee>
 800b62a:	bf00      	nop
 800b62c:	0800d68c 	.word	0x0800d68c
 800b630:	0800d69d 	.word	0x0800d69d

0800b634 <__d2b>:
 800b634:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b638:	460f      	mov	r7, r1
 800b63a:	2101      	movs	r1, #1
 800b63c:	ec59 8b10 	vmov	r8, r9, d0
 800b640:	4616      	mov	r6, r2
 800b642:	f7ff fccd 	bl	800afe0 <_Balloc>
 800b646:	4604      	mov	r4, r0
 800b648:	b930      	cbnz	r0, 800b658 <__d2b+0x24>
 800b64a:	4602      	mov	r2, r0
 800b64c:	4b23      	ldr	r3, [pc, #140]	@ (800b6dc <__d2b+0xa8>)
 800b64e:	4824      	ldr	r0, [pc, #144]	@ (800b6e0 <__d2b+0xac>)
 800b650:	f240 310f 	movw	r1, #783	@ 0x30f
 800b654:	f000 fa82 	bl	800bb5c <__assert_func>
 800b658:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b65c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b660:	b10d      	cbz	r5, 800b666 <__d2b+0x32>
 800b662:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b666:	9301      	str	r3, [sp, #4]
 800b668:	f1b8 0300 	subs.w	r3, r8, #0
 800b66c:	d023      	beq.n	800b6b6 <__d2b+0x82>
 800b66e:	4668      	mov	r0, sp
 800b670:	9300      	str	r3, [sp, #0]
 800b672:	f7ff fd7c 	bl	800b16e <__lo0bits>
 800b676:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b67a:	b1d0      	cbz	r0, 800b6b2 <__d2b+0x7e>
 800b67c:	f1c0 0320 	rsb	r3, r0, #32
 800b680:	fa02 f303 	lsl.w	r3, r2, r3
 800b684:	430b      	orrs	r3, r1
 800b686:	40c2      	lsrs	r2, r0
 800b688:	6163      	str	r3, [r4, #20]
 800b68a:	9201      	str	r2, [sp, #4]
 800b68c:	9b01      	ldr	r3, [sp, #4]
 800b68e:	61a3      	str	r3, [r4, #24]
 800b690:	2b00      	cmp	r3, #0
 800b692:	bf0c      	ite	eq
 800b694:	2201      	moveq	r2, #1
 800b696:	2202      	movne	r2, #2
 800b698:	6122      	str	r2, [r4, #16]
 800b69a:	b1a5      	cbz	r5, 800b6c6 <__d2b+0x92>
 800b69c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b6a0:	4405      	add	r5, r0
 800b6a2:	603d      	str	r5, [r7, #0]
 800b6a4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b6a8:	6030      	str	r0, [r6, #0]
 800b6aa:	4620      	mov	r0, r4
 800b6ac:	b003      	add	sp, #12
 800b6ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6b2:	6161      	str	r1, [r4, #20]
 800b6b4:	e7ea      	b.n	800b68c <__d2b+0x58>
 800b6b6:	a801      	add	r0, sp, #4
 800b6b8:	f7ff fd59 	bl	800b16e <__lo0bits>
 800b6bc:	9b01      	ldr	r3, [sp, #4]
 800b6be:	6163      	str	r3, [r4, #20]
 800b6c0:	3020      	adds	r0, #32
 800b6c2:	2201      	movs	r2, #1
 800b6c4:	e7e8      	b.n	800b698 <__d2b+0x64>
 800b6c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b6ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b6ce:	6038      	str	r0, [r7, #0]
 800b6d0:	6918      	ldr	r0, [r3, #16]
 800b6d2:	f7ff fd2d 	bl	800b130 <__hi0bits>
 800b6d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b6da:	e7e5      	b.n	800b6a8 <__d2b+0x74>
 800b6dc:	0800d68c 	.word	0x0800d68c
 800b6e0:	0800d69d 	.word	0x0800d69d

0800b6e4 <__ssputs_r>:
 800b6e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6e8:	688e      	ldr	r6, [r1, #8]
 800b6ea:	461f      	mov	r7, r3
 800b6ec:	42be      	cmp	r6, r7
 800b6ee:	680b      	ldr	r3, [r1, #0]
 800b6f0:	4682      	mov	sl, r0
 800b6f2:	460c      	mov	r4, r1
 800b6f4:	4690      	mov	r8, r2
 800b6f6:	d82d      	bhi.n	800b754 <__ssputs_r+0x70>
 800b6f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b6fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b700:	d026      	beq.n	800b750 <__ssputs_r+0x6c>
 800b702:	6965      	ldr	r5, [r4, #20]
 800b704:	6909      	ldr	r1, [r1, #16]
 800b706:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b70a:	eba3 0901 	sub.w	r9, r3, r1
 800b70e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b712:	1c7b      	adds	r3, r7, #1
 800b714:	444b      	add	r3, r9
 800b716:	106d      	asrs	r5, r5, #1
 800b718:	429d      	cmp	r5, r3
 800b71a:	bf38      	it	cc
 800b71c:	461d      	movcc	r5, r3
 800b71e:	0553      	lsls	r3, r2, #21
 800b720:	d527      	bpl.n	800b772 <__ssputs_r+0x8e>
 800b722:	4629      	mov	r1, r5
 800b724:	f7ff fbd0 	bl	800aec8 <_malloc_r>
 800b728:	4606      	mov	r6, r0
 800b72a:	b360      	cbz	r0, 800b786 <__ssputs_r+0xa2>
 800b72c:	6921      	ldr	r1, [r4, #16]
 800b72e:	464a      	mov	r2, r9
 800b730:	f000 fa06 	bl	800bb40 <memcpy>
 800b734:	89a3      	ldrh	r3, [r4, #12]
 800b736:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b73a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b73e:	81a3      	strh	r3, [r4, #12]
 800b740:	6126      	str	r6, [r4, #16]
 800b742:	6165      	str	r5, [r4, #20]
 800b744:	444e      	add	r6, r9
 800b746:	eba5 0509 	sub.w	r5, r5, r9
 800b74a:	6026      	str	r6, [r4, #0]
 800b74c:	60a5      	str	r5, [r4, #8]
 800b74e:	463e      	mov	r6, r7
 800b750:	42be      	cmp	r6, r7
 800b752:	d900      	bls.n	800b756 <__ssputs_r+0x72>
 800b754:	463e      	mov	r6, r7
 800b756:	6820      	ldr	r0, [r4, #0]
 800b758:	4632      	mov	r2, r6
 800b75a:	4641      	mov	r1, r8
 800b75c:	f000 f9c6 	bl	800baec <memmove>
 800b760:	68a3      	ldr	r3, [r4, #8]
 800b762:	1b9b      	subs	r3, r3, r6
 800b764:	60a3      	str	r3, [r4, #8]
 800b766:	6823      	ldr	r3, [r4, #0]
 800b768:	4433      	add	r3, r6
 800b76a:	6023      	str	r3, [r4, #0]
 800b76c:	2000      	movs	r0, #0
 800b76e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b772:	462a      	mov	r2, r5
 800b774:	f000 fa36 	bl	800bbe4 <_realloc_r>
 800b778:	4606      	mov	r6, r0
 800b77a:	2800      	cmp	r0, #0
 800b77c:	d1e0      	bne.n	800b740 <__ssputs_r+0x5c>
 800b77e:	6921      	ldr	r1, [r4, #16]
 800b780:	4650      	mov	r0, sl
 800b782:	f7ff fb2d 	bl	800ade0 <_free_r>
 800b786:	230c      	movs	r3, #12
 800b788:	f8ca 3000 	str.w	r3, [sl]
 800b78c:	89a3      	ldrh	r3, [r4, #12]
 800b78e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b792:	81a3      	strh	r3, [r4, #12]
 800b794:	f04f 30ff 	mov.w	r0, #4294967295
 800b798:	e7e9      	b.n	800b76e <__ssputs_r+0x8a>
	...

0800b79c <_svfiprintf_r>:
 800b79c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7a0:	4698      	mov	r8, r3
 800b7a2:	898b      	ldrh	r3, [r1, #12]
 800b7a4:	061b      	lsls	r3, r3, #24
 800b7a6:	b09d      	sub	sp, #116	@ 0x74
 800b7a8:	4607      	mov	r7, r0
 800b7aa:	460d      	mov	r5, r1
 800b7ac:	4614      	mov	r4, r2
 800b7ae:	d510      	bpl.n	800b7d2 <_svfiprintf_r+0x36>
 800b7b0:	690b      	ldr	r3, [r1, #16]
 800b7b2:	b973      	cbnz	r3, 800b7d2 <_svfiprintf_r+0x36>
 800b7b4:	2140      	movs	r1, #64	@ 0x40
 800b7b6:	f7ff fb87 	bl	800aec8 <_malloc_r>
 800b7ba:	6028      	str	r0, [r5, #0]
 800b7bc:	6128      	str	r0, [r5, #16]
 800b7be:	b930      	cbnz	r0, 800b7ce <_svfiprintf_r+0x32>
 800b7c0:	230c      	movs	r3, #12
 800b7c2:	603b      	str	r3, [r7, #0]
 800b7c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b7c8:	b01d      	add	sp, #116	@ 0x74
 800b7ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ce:	2340      	movs	r3, #64	@ 0x40
 800b7d0:	616b      	str	r3, [r5, #20]
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7d6:	2320      	movs	r3, #32
 800b7d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b7dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800b7e0:	2330      	movs	r3, #48	@ 0x30
 800b7e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b980 <_svfiprintf_r+0x1e4>
 800b7e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b7ea:	f04f 0901 	mov.w	r9, #1
 800b7ee:	4623      	mov	r3, r4
 800b7f0:	469a      	mov	sl, r3
 800b7f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7f6:	b10a      	cbz	r2, 800b7fc <_svfiprintf_r+0x60>
 800b7f8:	2a25      	cmp	r2, #37	@ 0x25
 800b7fa:	d1f9      	bne.n	800b7f0 <_svfiprintf_r+0x54>
 800b7fc:	ebba 0b04 	subs.w	fp, sl, r4
 800b800:	d00b      	beq.n	800b81a <_svfiprintf_r+0x7e>
 800b802:	465b      	mov	r3, fp
 800b804:	4622      	mov	r2, r4
 800b806:	4629      	mov	r1, r5
 800b808:	4638      	mov	r0, r7
 800b80a:	f7ff ff6b 	bl	800b6e4 <__ssputs_r>
 800b80e:	3001      	adds	r0, #1
 800b810:	f000 80a7 	beq.w	800b962 <_svfiprintf_r+0x1c6>
 800b814:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b816:	445a      	add	r2, fp
 800b818:	9209      	str	r2, [sp, #36]	@ 0x24
 800b81a:	f89a 3000 	ldrb.w	r3, [sl]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	f000 809f 	beq.w	800b962 <_svfiprintf_r+0x1c6>
 800b824:	2300      	movs	r3, #0
 800b826:	f04f 32ff 	mov.w	r2, #4294967295
 800b82a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b82e:	f10a 0a01 	add.w	sl, sl, #1
 800b832:	9304      	str	r3, [sp, #16]
 800b834:	9307      	str	r3, [sp, #28]
 800b836:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b83a:	931a      	str	r3, [sp, #104]	@ 0x68
 800b83c:	4654      	mov	r4, sl
 800b83e:	2205      	movs	r2, #5
 800b840:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b844:	484e      	ldr	r0, [pc, #312]	@ (800b980 <_svfiprintf_r+0x1e4>)
 800b846:	f7f4 fce3 	bl	8000210 <memchr>
 800b84a:	9a04      	ldr	r2, [sp, #16]
 800b84c:	b9d8      	cbnz	r0, 800b886 <_svfiprintf_r+0xea>
 800b84e:	06d0      	lsls	r0, r2, #27
 800b850:	bf44      	itt	mi
 800b852:	2320      	movmi	r3, #32
 800b854:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b858:	0711      	lsls	r1, r2, #28
 800b85a:	bf44      	itt	mi
 800b85c:	232b      	movmi	r3, #43	@ 0x2b
 800b85e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b862:	f89a 3000 	ldrb.w	r3, [sl]
 800b866:	2b2a      	cmp	r3, #42	@ 0x2a
 800b868:	d015      	beq.n	800b896 <_svfiprintf_r+0xfa>
 800b86a:	9a07      	ldr	r2, [sp, #28]
 800b86c:	4654      	mov	r4, sl
 800b86e:	2000      	movs	r0, #0
 800b870:	f04f 0c0a 	mov.w	ip, #10
 800b874:	4621      	mov	r1, r4
 800b876:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b87a:	3b30      	subs	r3, #48	@ 0x30
 800b87c:	2b09      	cmp	r3, #9
 800b87e:	d94b      	bls.n	800b918 <_svfiprintf_r+0x17c>
 800b880:	b1b0      	cbz	r0, 800b8b0 <_svfiprintf_r+0x114>
 800b882:	9207      	str	r2, [sp, #28]
 800b884:	e014      	b.n	800b8b0 <_svfiprintf_r+0x114>
 800b886:	eba0 0308 	sub.w	r3, r0, r8
 800b88a:	fa09 f303 	lsl.w	r3, r9, r3
 800b88e:	4313      	orrs	r3, r2
 800b890:	9304      	str	r3, [sp, #16]
 800b892:	46a2      	mov	sl, r4
 800b894:	e7d2      	b.n	800b83c <_svfiprintf_r+0xa0>
 800b896:	9b03      	ldr	r3, [sp, #12]
 800b898:	1d19      	adds	r1, r3, #4
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	9103      	str	r1, [sp, #12]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	bfbb      	ittet	lt
 800b8a2:	425b      	neglt	r3, r3
 800b8a4:	f042 0202 	orrlt.w	r2, r2, #2
 800b8a8:	9307      	strge	r3, [sp, #28]
 800b8aa:	9307      	strlt	r3, [sp, #28]
 800b8ac:	bfb8      	it	lt
 800b8ae:	9204      	strlt	r2, [sp, #16]
 800b8b0:	7823      	ldrb	r3, [r4, #0]
 800b8b2:	2b2e      	cmp	r3, #46	@ 0x2e
 800b8b4:	d10a      	bne.n	800b8cc <_svfiprintf_r+0x130>
 800b8b6:	7863      	ldrb	r3, [r4, #1]
 800b8b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b8ba:	d132      	bne.n	800b922 <_svfiprintf_r+0x186>
 800b8bc:	9b03      	ldr	r3, [sp, #12]
 800b8be:	1d1a      	adds	r2, r3, #4
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	9203      	str	r2, [sp, #12]
 800b8c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b8c8:	3402      	adds	r4, #2
 800b8ca:	9305      	str	r3, [sp, #20]
 800b8cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b990 <_svfiprintf_r+0x1f4>
 800b8d0:	7821      	ldrb	r1, [r4, #0]
 800b8d2:	2203      	movs	r2, #3
 800b8d4:	4650      	mov	r0, sl
 800b8d6:	f7f4 fc9b 	bl	8000210 <memchr>
 800b8da:	b138      	cbz	r0, 800b8ec <_svfiprintf_r+0x150>
 800b8dc:	9b04      	ldr	r3, [sp, #16]
 800b8de:	eba0 000a 	sub.w	r0, r0, sl
 800b8e2:	2240      	movs	r2, #64	@ 0x40
 800b8e4:	4082      	lsls	r2, r0
 800b8e6:	4313      	orrs	r3, r2
 800b8e8:	3401      	adds	r4, #1
 800b8ea:	9304      	str	r3, [sp, #16]
 800b8ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8f0:	4824      	ldr	r0, [pc, #144]	@ (800b984 <_svfiprintf_r+0x1e8>)
 800b8f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b8f6:	2206      	movs	r2, #6
 800b8f8:	f7f4 fc8a 	bl	8000210 <memchr>
 800b8fc:	2800      	cmp	r0, #0
 800b8fe:	d036      	beq.n	800b96e <_svfiprintf_r+0x1d2>
 800b900:	4b21      	ldr	r3, [pc, #132]	@ (800b988 <_svfiprintf_r+0x1ec>)
 800b902:	bb1b      	cbnz	r3, 800b94c <_svfiprintf_r+0x1b0>
 800b904:	9b03      	ldr	r3, [sp, #12]
 800b906:	3307      	adds	r3, #7
 800b908:	f023 0307 	bic.w	r3, r3, #7
 800b90c:	3308      	adds	r3, #8
 800b90e:	9303      	str	r3, [sp, #12]
 800b910:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b912:	4433      	add	r3, r6
 800b914:	9309      	str	r3, [sp, #36]	@ 0x24
 800b916:	e76a      	b.n	800b7ee <_svfiprintf_r+0x52>
 800b918:	fb0c 3202 	mla	r2, ip, r2, r3
 800b91c:	460c      	mov	r4, r1
 800b91e:	2001      	movs	r0, #1
 800b920:	e7a8      	b.n	800b874 <_svfiprintf_r+0xd8>
 800b922:	2300      	movs	r3, #0
 800b924:	3401      	adds	r4, #1
 800b926:	9305      	str	r3, [sp, #20]
 800b928:	4619      	mov	r1, r3
 800b92a:	f04f 0c0a 	mov.w	ip, #10
 800b92e:	4620      	mov	r0, r4
 800b930:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b934:	3a30      	subs	r2, #48	@ 0x30
 800b936:	2a09      	cmp	r2, #9
 800b938:	d903      	bls.n	800b942 <_svfiprintf_r+0x1a6>
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d0c6      	beq.n	800b8cc <_svfiprintf_r+0x130>
 800b93e:	9105      	str	r1, [sp, #20]
 800b940:	e7c4      	b.n	800b8cc <_svfiprintf_r+0x130>
 800b942:	fb0c 2101 	mla	r1, ip, r1, r2
 800b946:	4604      	mov	r4, r0
 800b948:	2301      	movs	r3, #1
 800b94a:	e7f0      	b.n	800b92e <_svfiprintf_r+0x192>
 800b94c:	ab03      	add	r3, sp, #12
 800b94e:	9300      	str	r3, [sp, #0]
 800b950:	462a      	mov	r2, r5
 800b952:	4b0e      	ldr	r3, [pc, #56]	@ (800b98c <_svfiprintf_r+0x1f0>)
 800b954:	a904      	add	r1, sp, #16
 800b956:	4638      	mov	r0, r7
 800b958:	f7fd fe98 	bl	800968c <_printf_float>
 800b95c:	1c42      	adds	r2, r0, #1
 800b95e:	4606      	mov	r6, r0
 800b960:	d1d6      	bne.n	800b910 <_svfiprintf_r+0x174>
 800b962:	89ab      	ldrh	r3, [r5, #12]
 800b964:	065b      	lsls	r3, r3, #25
 800b966:	f53f af2d 	bmi.w	800b7c4 <_svfiprintf_r+0x28>
 800b96a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b96c:	e72c      	b.n	800b7c8 <_svfiprintf_r+0x2c>
 800b96e:	ab03      	add	r3, sp, #12
 800b970:	9300      	str	r3, [sp, #0]
 800b972:	462a      	mov	r2, r5
 800b974:	4b05      	ldr	r3, [pc, #20]	@ (800b98c <_svfiprintf_r+0x1f0>)
 800b976:	a904      	add	r1, sp, #16
 800b978:	4638      	mov	r0, r7
 800b97a:	f7fe f91f 	bl	8009bbc <_printf_i>
 800b97e:	e7ed      	b.n	800b95c <_svfiprintf_r+0x1c0>
 800b980:	0800d7f8 	.word	0x0800d7f8
 800b984:	0800d802 	.word	0x0800d802
 800b988:	0800968d 	.word	0x0800968d
 800b98c:	0800b6e5 	.word	0x0800b6e5
 800b990:	0800d7fe 	.word	0x0800d7fe

0800b994 <__sflush_r>:
 800b994:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b99c:	0716      	lsls	r6, r2, #28
 800b99e:	4605      	mov	r5, r0
 800b9a0:	460c      	mov	r4, r1
 800b9a2:	d454      	bmi.n	800ba4e <__sflush_r+0xba>
 800b9a4:	684b      	ldr	r3, [r1, #4]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	dc02      	bgt.n	800b9b0 <__sflush_r+0x1c>
 800b9aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	dd48      	ble.n	800ba42 <__sflush_r+0xae>
 800b9b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b9b2:	2e00      	cmp	r6, #0
 800b9b4:	d045      	beq.n	800ba42 <__sflush_r+0xae>
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b9bc:	682f      	ldr	r7, [r5, #0]
 800b9be:	6a21      	ldr	r1, [r4, #32]
 800b9c0:	602b      	str	r3, [r5, #0]
 800b9c2:	d030      	beq.n	800ba26 <__sflush_r+0x92>
 800b9c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b9c6:	89a3      	ldrh	r3, [r4, #12]
 800b9c8:	0759      	lsls	r1, r3, #29
 800b9ca:	d505      	bpl.n	800b9d8 <__sflush_r+0x44>
 800b9cc:	6863      	ldr	r3, [r4, #4]
 800b9ce:	1ad2      	subs	r2, r2, r3
 800b9d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b9d2:	b10b      	cbz	r3, 800b9d8 <__sflush_r+0x44>
 800b9d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b9d6:	1ad2      	subs	r2, r2, r3
 800b9d8:	2300      	movs	r3, #0
 800b9da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b9dc:	6a21      	ldr	r1, [r4, #32]
 800b9de:	4628      	mov	r0, r5
 800b9e0:	47b0      	blx	r6
 800b9e2:	1c43      	adds	r3, r0, #1
 800b9e4:	89a3      	ldrh	r3, [r4, #12]
 800b9e6:	d106      	bne.n	800b9f6 <__sflush_r+0x62>
 800b9e8:	6829      	ldr	r1, [r5, #0]
 800b9ea:	291d      	cmp	r1, #29
 800b9ec:	d82b      	bhi.n	800ba46 <__sflush_r+0xb2>
 800b9ee:	4a2a      	ldr	r2, [pc, #168]	@ (800ba98 <__sflush_r+0x104>)
 800b9f0:	410a      	asrs	r2, r1
 800b9f2:	07d6      	lsls	r6, r2, #31
 800b9f4:	d427      	bmi.n	800ba46 <__sflush_r+0xb2>
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	6062      	str	r2, [r4, #4]
 800b9fa:	04d9      	lsls	r1, r3, #19
 800b9fc:	6922      	ldr	r2, [r4, #16]
 800b9fe:	6022      	str	r2, [r4, #0]
 800ba00:	d504      	bpl.n	800ba0c <__sflush_r+0x78>
 800ba02:	1c42      	adds	r2, r0, #1
 800ba04:	d101      	bne.n	800ba0a <__sflush_r+0x76>
 800ba06:	682b      	ldr	r3, [r5, #0]
 800ba08:	b903      	cbnz	r3, 800ba0c <__sflush_r+0x78>
 800ba0a:	6560      	str	r0, [r4, #84]	@ 0x54
 800ba0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ba0e:	602f      	str	r7, [r5, #0]
 800ba10:	b1b9      	cbz	r1, 800ba42 <__sflush_r+0xae>
 800ba12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ba16:	4299      	cmp	r1, r3
 800ba18:	d002      	beq.n	800ba20 <__sflush_r+0x8c>
 800ba1a:	4628      	mov	r0, r5
 800ba1c:	f7ff f9e0 	bl	800ade0 <_free_r>
 800ba20:	2300      	movs	r3, #0
 800ba22:	6363      	str	r3, [r4, #52]	@ 0x34
 800ba24:	e00d      	b.n	800ba42 <__sflush_r+0xae>
 800ba26:	2301      	movs	r3, #1
 800ba28:	4628      	mov	r0, r5
 800ba2a:	47b0      	blx	r6
 800ba2c:	4602      	mov	r2, r0
 800ba2e:	1c50      	adds	r0, r2, #1
 800ba30:	d1c9      	bne.n	800b9c6 <__sflush_r+0x32>
 800ba32:	682b      	ldr	r3, [r5, #0]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d0c6      	beq.n	800b9c6 <__sflush_r+0x32>
 800ba38:	2b1d      	cmp	r3, #29
 800ba3a:	d001      	beq.n	800ba40 <__sflush_r+0xac>
 800ba3c:	2b16      	cmp	r3, #22
 800ba3e:	d11e      	bne.n	800ba7e <__sflush_r+0xea>
 800ba40:	602f      	str	r7, [r5, #0]
 800ba42:	2000      	movs	r0, #0
 800ba44:	e022      	b.n	800ba8c <__sflush_r+0xf8>
 800ba46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba4a:	b21b      	sxth	r3, r3
 800ba4c:	e01b      	b.n	800ba86 <__sflush_r+0xf2>
 800ba4e:	690f      	ldr	r7, [r1, #16]
 800ba50:	2f00      	cmp	r7, #0
 800ba52:	d0f6      	beq.n	800ba42 <__sflush_r+0xae>
 800ba54:	0793      	lsls	r3, r2, #30
 800ba56:	680e      	ldr	r6, [r1, #0]
 800ba58:	bf08      	it	eq
 800ba5a:	694b      	ldreq	r3, [r1, #20]
 800ba5c:	600f      	str	r7, [r1, #0]
 800ba5e:	bf18      	it	ne
 800ba60:	2300      	movne	r3, #0
 800ba62:	eba6 0807 	sub.w	r8, r6, r7
 800ba66:	608b      	str	r3, [r1, #8]
 800ba68:	f1b8 0f00 	cmp.w	r8, #0
 800ba6c:	dde9      	ble.n	800ba42 <__sflush_r+0xae>
 800ba6e:	6a21      	ldr	r1, [r4, #32]
 800ba70:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ba72:	4643      	mov	r3, r8
 800ba74:	463a      	mov	r2, r7
 800ba76:	4628      	mov	r0, r5
 800ba78:	47b0      	blx	r6
 800ba7a:	2800      	cmp	r0, #0
 800ba7c:	dc08      	bgt.n	800ba90 <__sflush_r+0xfc>
 800ba7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba86:	81a3      	strh	r3, [r4, #12]
 800ba88:	f04f 30ff 	mov.w	r0, #4294967295
 800ba8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba90:	4407      	add	r7, r0
 800ba92:	eba8 0800 	sub.w	r8, r8, r0
 800ba96:	e7e7      	b.n	800ba68 <__sflush_r+0xd4>
 800ba98:	dfbffffe 	.word	0xdfbffffe

0800ba9c <_fflush_r>:
 800ba9c:	b538      	push	{r3, r4, r5, lr}
 800ba9e:	690b      	ldr	r3, [r1, #16]
 800baa0:	4605      	mov	r5, r0
 800baa2:	460c      	mov	r4, r1
 800baa4:	b913      	cbnz	r3, 800baac <_fflush_r+0x10>
 800baa6:	2500      	movs	r5, #0
 800baa8:	4628      	mov	r0, r5
 800baaa:	bd38      	pop	{r3, r4, r5, pc}
 800baac:	b118      	cbz	r0, 800bab6 <_fflush_r+0x1a>
 800baae:	6a03      	ldr	r3, [r0, #32]
 800bab0:	b90b      	cbnz	r3, 800bab6 <_fflush_r+0x1a>
 800bab2:	f7fe fa2f 	bl	8009f14 <__sinit>
 800bab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d0f3      	beq.n	800baa6 <_fflush_r+0xa>
 800babe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bac0:	07d0      	lsls	r0, r2, #31
 800bac2:	d404      	bmi.n	800bace <_fflush_r+0x32>
 800bac4:	0599      	lsls	r1, r3, #22
 800bac6:	d402      	bmi.n	800bace <_fflush_r+0x32>
 800bac8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800baca:	f7fe fb3a 	bl	800a142 <__retarget_lock_acquire_recursive>
 800bace:	4628      	mov	r0, r5
 800bad0:	4621      	mov	r1, r4
 800bad2:	f7ff ff5f 	bl	800b994 <__sflush_r>
 800bad6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bad8:	07da      	lsls	r2, r3, #31
 800bada:	4605      	mov	r5, r0
 800badc:	d4e4      	bmi.n	800baa8 <_fflush_r+0xc>
 800bade:	89a3      	ldrh	r3, [r4, #12]
 800bae0:	059b      	lsls	r3, r3, #22
 800bae2:	d4e1      	bmi.n	800baa8 <_fflush_r+0xc>
 800bae4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bae6:	f7fe fb2d 	bl	800a144 <__retarget_lock_release_recursive>
 800baea:	e7dd      	b.n	800baa8 <_fflush_r+0xc>

0800baec <memmove>:
 800baec:	4288      	cmp	r0, r1
 800baee:	b510      	push	{r4, lr}
 800baf0:	eb01 0402 	add.w	r4, r1, r2
 800baf4:	d902      	bls.n	800bafc <memmove+0x10>
 800baf6:	4284      	cmp	r4, r0
 800baf8:	4623      	mov	r3, r4
 800bafa:	d807      	bhi.n	800bb0c <memmove+0x20>
 800bafc:	1e43      	subs	r3, r0, #1
 800bafe:	42a1      	cmp	r1, r4
 800bb00:	d008      	beq.n	800bb14 <memmove+0x28>
 800bb02:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb06:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bb0a:	e7f8      	b.n	800bafe <memmove+0x12>
 800bb0c:	4402      	add	r2, r0
 800bb0e:	4601      	mov	r1, r0
 800bb10:	428a      	cmp	r2, r1
 800bb12:	d100      	bne.n	800bb16 <memmove+0x2a>
 800bb14:	bd10      	pop	{r4, pc}
 800bb16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bb1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bb1e:	e7f7      	b.n	800bb10 <memmove+0x24>

0800bb20 <_sbrk_r>:
 800bb20:	b538      	push	{r3, r4, r5, lr}
 800bb22:	4d06      	ldr	r5, [pc, #24]	@ (800bb3c <_sbrk_r+0x1c>)
 800bb24:	2300      	movs	r3, #0
 800bb26:	4604      	mov	r4, r0
 800bb28:	4608      	mov	r0, r1
 800bb2a:	602b      	str	r3, [r5, #0]
 800bb2c:	f7f8 f88e 	bl	8003c4c <_sbrk>
 800bb30:	1c43      	adds	r3, r0, #1
 800bb32:	d102      	bne.n	800bb3a <_sbrk_r+0x1a>
 800bb34:	682b      	ldr	r3, [r5, #0]
 800bb36:	b103      	cbz	r3, 800bb3a <_sbrk_r+0x1a>
 800bb38:	6023      	str	r3, [r4, #0]
 800bb3a:	bd38      	pop	{r3, r4, r5, pc}
 800bb3c:	200007fc 	.word	0x200007fc

0800bb40 <memcpy>:
 800bb40:	440a      	add	r2, r1
 800bb42:	4291      	cmp	r1, r2
 800bb44:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb48:	d100      	bne.n	800bb4c <memcpy+0xc>
 800bb4a:	4770      	bx	lr
 800bb4c:	b510      	push	{r4, lr}
 800bb4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb52:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb56:	4291      	cmp	r1, r2
 800bb58:	d1f9      	bne.n	800bb4e <memcpy+0xe>
 800bb5a:	bd10      	pop	{r4, pc}

0800bb5c <__assert_func>:
 800bb5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb5e:	4614      	mov	r4, r2
 800bb60:	461a      	mov	r2, r3
 800bb62:	4b09      	ldr	r3, [pc, #36]	@ (800bb88 <__assert_func+0x2c>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	4605      	mov	r5, r0
 800bb68:	68d8      	ldr	r0, [r3, #12]
 800bb6a:	b954      	cbnz	r4, 800bb82 <__assert_func+0x26>
 800bb6c:	4b07      	ldr	r3, [pc, #28]	@ (800bb8c <__assert_func+0x30>)
 800bb6e:	461c      	mov	r4, r3
 800bb70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bb74:	9100      	str	r1, [sp, #0]
 800bb76:	462b      	mov	r3, r5
 800bb78:	4905      	ldr	r1, [pc, #20]	@ (800bb90 <__assert_func+0x34>)
 800bb7a:	f000 f86f 	bl	800bc5c <fiprintf>
 800bb7e:	f000 f87f 	bl	800bc80 <abort>
 800bb82:	4b04      	ldr	r3, [pc, #16]	@ (800bb94 <__assert_func+0x38>)
 800bb84:	e7f4      	b.n	800bb70 <__assert_func+0x14>
 800bb86:	bf00      	nop
 800bb88:	2000004c 	.word	0x2000004c
 800bb8c:	0800d84e 	.word	0x0800d84e
 800bb90:	0800d820 	.word	0x0800d820
 800bb94:	0800d813 	.word	0x0800d813

0800bb98 <_calloc_r>:
 800bb98:	b570      	push	{r4, r5, r6, lr}
 800bb9a:	fba1 5402 	umull	r5, r4, r1, r2
 800bb9e:	b93c      	cbnz	r4, 800bbb0 <_calloc_r+0x18>
 800bba0:	4629      	mov	r1, r5
 800bba2:	f7ff f991 	bl	800aec8 <_malloc_r>
 800bba6:	4606      	mov	r6, r0
 800bba8:	b928      	cbnz	r0, 800bbb6 <_calloc_r+0x1e>
 800bbaa:	2600      	movs	r6, #0
 800bbac:	4630      	mov	r0, r6
 800bbae:	bd70      	pop	{r4, r5, r6, pc}
 800bbb0:	220c      	movs	r2, #12
 800bbb2:	6002      	str	r2, [r0, #0]
 800bbb4:	e7f9      	b.n	800bbaa <_calloc_r+0x12>
 800bbb6:	462a      	mov	r2, r5
 800bbb8:	4621      	mov	r1, r4
 800bbba:	f7fe fa44 	bl	800a046 <memset>
 800bbbe:	e7f5      	b.n	800bbac <_calloc_r+0x14>

0800bbc0 <__ascii_mbtowc>:
 800bbc0:	b082      	sub	sp, #8
 800bbc2:	b901      	cbnz	r1, 800bbc6 <__ascii_mbtowc+0x6>
 800bbc4:	a901      	add	r1, sp, #4
 800bbc6:	b142      	cbz	r2, 800bbda <__ascii_mbtowc+0x1a>
 800bbc8:	b14b      	cbz	r3, 800bbde <__ascii_mbtowc+0x1e>
 800bbca:	7813      	ldrb	r3, [r2, #0]
 800bbcc:	600b      	str	r3, [r1, #0]
 800bbce:	7812      	ldrb	r2, [r2, #0]
 800bbd0:	1e10      	subs	r0, r2, #0
 800bbd2:	bf18      	it	ne
 800bbd4:	2001      	movne	r0, #1
 800bbd6:	b002      	add	sp, #8
 800bbd8:	4770      	bx	lr
 800bbda:	4610      	mov	r0, r2
 800bbdc:	e7fb      	b.n	800bbd6 <__ascii_mbtowc+0x16>
 800bbde:	f06f 0001 	mvn.w	r0, #1
 800bbe2:	e7f8      	b.n	800bbd6 <__ascii_mbtowc+0x16>

0800bbe4 <_realloc_r>:
 800bbe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbe8:	4680      	mov	r8, r0
 800bbea:	4615      	mov	r5, r2
 800bbec:	460c      	mov	r4, r1
 800bbee:	b921      	cbnz	r1, 800bbfa <_realloc_r+0x16>
 800bbf0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbf4:	4611      	mov	r1, r2
 800bbf6:	f7ff b967 	b.w	800aec8 <_malloc_r>
 800bbfa:	b92a      	cbnz	r2, 800bc08 <_realloc_r+0x24>
 800bbfc:	f7ff f8f0 	bl	800ade0 <_free_r>
 800bc00:	2400      	movs	r4, #0
 800bc02:	4620      	mov	r0, r4
 800bc04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc08:	f000 f841 	bl	800bc8e <_malloc_usable_size_r>
 800bc0c:	4285      	cmp	r5, r0
 800bc0e:	4606      	mov	r6, r0
 800bc10:	d802      	bhi.n	800bc18 <_realloc_r+0x34>
 800bc12:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bc16:	d8f4      	bhi.n	800bc02 <_realloc_r+0x1e>
 800bc18:	4629      	mov	r1, r5
 800bc1a:	4640      	mov	r0, r8
 800bc1c:	f7ff f954 	bl	800aec8 <_malloc_r>
 800bc20:	4607      	mov	r7, r0
 800bc22:	2800      	cmp	r0, #0
 800bc24:	d0ec      	beq.n	800bc00 <_realloc_r+0x1c>
 800bc26:	42b5      	cmp	r5, r6
 800bc28:	462a      	mov	r2, r5
 800bc2a:	4621      	mov	r1, r4
 800bc2c:	bf28      	it	cs
 800bc2e:	4632      	movcs	r2, r6
 800bc30:	f7ff ff86 	bl	800bb40 <memcpy>
 800bc34:	4621      	mov	r1, r4
 800bc36:	4640      	mov	r0, r8
 800bc38:	f7ff f8d2 	bl	800ade0 <_free_r>
 800bc3c:	463c      	mov	r4, r7
 800bc3e:	e7e0      	b.n	800bc02 <_realloc_r+0x1e>

0800bc40 <__ascii_wctomb>:
 800bc40:	4603      	mov	r3, r0
 800bc42:	4608      	mov	r0, r1
 800bc44:	b141      	cbz	r1, 800bc58 <__ascii_wctomb+0x18>
 800bc46:	2aff      	cmp	r2, #255	@ 0xff
 800bc48:	d904      	bls.n	800bc54 <__ascii_wctomb+0x14>
 800bc4a:	228a      	movs	r2, #138	@ 0x8a
 800bc4c:	601a      	str	r2, [r3, #0]
 800bc4e:	f04f 30ff 	mov.w	r0, #4294967295
 800bc52:	4770      	bx	lr
 800bc54:	700a      	strb	r2, [r1, #0]
 800bc56:	2001      	movs	r0, #1
 800bc58:	4770      	bx	lr
	...

0800bc5c <fiprintf>:
 800bc5c:	b40e      	push	{r1, r2, r3}
 800bc5e:	b503      	push	{r0, r1, lr}
 800bc60:	4601      	mov	r1, r0
 800bc62:	ab03      	add	r3, sp, #12
 800bc64:	4805      	ldr	r0, [pc, #20]	@ (800bc7c <fiprintf+0x20>)
 800bc66:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc6a:	6800      	ldr	r0, [r0, #0]
 800bc6c:	9301      	str	r3, [sp, #4]
 800bc6e:	f000 f83f 	bl	800bcf0 <_vfiprintf_r>
 800bc72:	b002      	add	sp, #8
 800bc74:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc78:	b003      	add	sp, #12
 800bc7a:	4770      	bx	lr
 800bc7c:	2000004c 	.word	0x2000004c

0800bc80 <abort>:
 800bc80:	b508      	push	{r3, lr}
 800bc82:	2006      	movs	r0, #6
 800bc84:	f000 fa08 	bl	800c098 <raise>
 800bc88:	2001      	movs	r0, #1
 800bc8a:	f7f7 ff67 	bl	8003b5c <_exit>

0800bc8e <_malloc_usable_size_r>:
 800bc8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc92:	1f18      	subs	r0, r3, #4
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	bfbc      	itt	lt
 800bc98:	580b      	ldrlt	r3, [r1, r0]
 800bc9a:	18c0      	addlt	r0, r0, r3
 800bc9c:	4770      	bx	lr

0800bc9e <__sfputc_r>:
 800bc9e:	6893      	ldr	r3, [r2, #8]
 800bca0:	3b01      	subs	r3, #1
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	b410      	push	{r4}
 800bca6:	6093      	str	r3, [r2, #8]
 800bca8:	da08      	bge.n	800bcbc <__sfputc_r+0x1e>
 800bcaa:	6994      	ldr	r4, [r2, #24]
 800bcac:	42a3      	cmp	r3, r4
 800bcae:	db01      	blt.n	800bcb4 <__sfputc_r+0x16>
 800bcb0:	290a      	cmp	r1, #10
 800bcb2:	d103      	bne.n	800bcbc <__sfputc_r+0x1e>
 800bcb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bcb8:	f000 b932 	b.w	800bf20 <__swbuf_r>
 800bcbc:	6813      	ldr	r3, [r2, #0]
 800bcbe:	1c58      	adds	r0, r3, #1
 800bcc0:	6010      	str	r0, [r2, #0]
 800bcc2:	7019      	strb	r1, [r3, #0]
 800bcc4:	4608      	mov	r0, r1
 800bcc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bcca:	4770      	bx	lr

0800bccc <__sfputs_r>:
 800bccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcce:	4606      	mov	r6, r0
 800bcd0:	460f      	mov	r7, r1
 800bcd2:	4614      	mov	r4, r2
 800bcd4:	18d5      	adds	r5, r2, r3
 800bcd6:	42ac      	cmp	r4, r5
 800bcd8:	d101      	bne.n	800bcde <__sfputs_r+0x12>
 800bcda:	2000      	movs	r0, #0
 800bcdc:	e007      	b.n	800bcee <__sfputs_r+0x22>
 800bcde:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bce2:	463a      	mov	r2, r7
 800bce4:	4630      	mov	r0, r6
 800bce6:	f7ff ffda 	bl	800bc9e <__sfputc_r>
 800bcea:	1c43      	adds	r3, r0, #1
 800bcec:	d1f3      	bne.n	800bcd6 <__sfputs_r+0xa>
 800bcee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bcf0 <_vfiprintf_r>:
 800bcf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcf4:	460d      	mov	r5, r1
 800bcf6:	b09d      	sub	sp, #116	@ 0x74
 800bcf8:	4614      	mov	r4, r2
 800bcfa:	4698      	mov	r8, r3
 800bcfc:	4606      	mov	r6, r0
 800bcfe:	b118      	cbz	r0, 800bd08 <_vfiprintf_r+0x18>
 800bd00:	6a03      	ldr	r3, [r0, #32]
 800bd02:	b90b      	cbnz	r3, 800bd08 <_vfiprintf_r+0x18>
 800bd04:	f7fe f906 	bl	8009f14 <__sinit>
 800bd08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd0a:	07d9      	lsls	r1, r3, #31
 800bd0c:	d405      	bmi.n	800bd1a <_vfiprintf_r+0x2a>
 800bd0e:	89ab      	ldrh	r3, [r5, #12]
 800bd10:	059a      	lsls	r2, r3, #22
 800bd12:	d402      	bmi.n	800bd1a <_vfiprintf_r+0x2a>
 800bd14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd16:	f7fe fa14 	bl	800a142 <__retarget_lock_acquire_recursive>
 800bd1a:	89ab      	ldrh	r3, [r5, #12]
 800bd1c:	071b      	lsls	r3, r3, #28
 800bd1e:	d501      	bpl.n	800bd24 <_vfiprintf_r+0x34>
 800bd20:	692b      	ldr	r3, [r5, #16]
 800bd22:	b99b      	cbnz	r3, 800bd4c <_vfiprintf_r+0x5c>
 800bd24:	4629      	mov	r1, r5
 800bd26:	4630      	mov	r0, r6
 800bd28:	f000 f938 	bl	800bf9c <__swsetup_r>
 800bd2c:	b170      	cbz	r0, 800bd4c <_vfiprintf_r+0x5c>
 800bd2e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd30:	07dc      	lsls	r4, r3, #31
 800bd32:	d504      	bpl.n	800bd3e <_vfiprintf_r+0x4e>
 800bd34:	f04f 30ff 	mov.w	r0, #4294967295
 800bd38:	b01d      	add	sp, #116	@ 0x74
 800bd3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd3e:	89ab      	ldrh	r3, [r5, #12]
 800bd40:	0598      	lsls	r0, r3, #22
 800bd42:	d4f7      	bmi.n	800bd34 <_vfiprintf_r+0x44>
 800bd44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd46:	f7fe f9fd 	bl	800a144 <__retarget_lock_release_recursive>
 800bd4a:	e7f3      	b.n	800bd34 <_vfiprintf_r+0x44>
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd50:	2320      	movs	r3, #32
 800bd52:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bd56:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd5a:	2330      	movs	r3, #48	@ 0x30
 800bd5c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bf0c <_vfiprintf_r+0x21c>
 800bd60:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bd64:	f04f 0901 	mov.w	r9, #1
 800bd68:	4623      	mov	r3, r4
 800bd6a:	469a      	mov	sl, r3
 800bd6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd70:	b10a      	cbz	r2, 800bd76 <_vfiprintf_r+0x86>
 800bd72:	2a25      	cmp	r2, #37	@ 0x25
 800bd74:	d1f9      	bne.n	800bd6a <_vfiprintf_r+0x7a>
 800bd76:	ebba 0b04 	subs.w	fp, sl, r4
 800bd7a:	d00b      	beq.n	800bd94 <_vfiprintf_r+0xa4>
 800bd7c:	465b      	mov	r3, fp
 800bd7e:	4622      	mov	r2, r4
 800bd80:	4629      	mov	r1, r5
 800bd82:	4630      	mov	r0, r6
 800bd84:	f7ff ffa2 	bl	800bccc <__sfputs_r>
 800bd88:	3001      	adds	r0, #1
 800bd8a:	f000 80a7 	beq.w	800bedc <_vfiprintf_r+0x1ec>
 800bd8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd90:	445a      	add	r2, fp
 800bd92:	9209      	str	r2, [sp, #36]	@ 0x24
 800bd94:	f89a 3000 	ldrb.w	r3, [sl]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	f000 809f 	beq.w	800bedc <_vfiprintf_r+0x1ec>
 800bd9e:	2300      	movs	r3, #0
 800bda0:	f04f 32ff 	mov.w	r2, #4294967295
 800bda4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bda8:	f10a 0a01 	add.w	sl, sl, #1
 800bdac:	9304      	str	r3, [sp, #16]
 800bdae:	9307      	str	r3, [sp, #28]
 800bdb0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bdb4:	931a      	str	r3, [sp, #104]	@ 0x68
 800bdb6:	4654      	mov	r4, sl
 800bdb8:	2205      	movs	r2, #5
 800bdba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdbe:	4853      	ldr	r0, [pc, #332]	@ (800bf0c <_vfiprintf_r+0x21c>)
 800bdc0:	f7f4 fa26 	bl	8000210 <memchr>
 800bdc4:	9a04      	ldr	r2, [sp, #16]
 800bdc6:	b9d8      	cbnz	r0, 800be00 <_vfiprintf_r+0x110>
 800bdc8:	06d1      	lsls	r1, r2, #27
 800bdca:	bf44      	itt	mi
 800bdcc:	2320      	movmi	r3, #32
 800bdce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bdd2:	0713      	lsls	r3, r2, #28
 800bdd4:	bf44      	itt	mi
 800bdd6:	232b      	movmi	r3, #43	@ 0x2b
 800bdd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bddc:	f89a 3000 	ldrb.w	r3, [sl]
 800bde0:	2b2a      	cmp	r3, #42	@ 0x2a
 800bde2:	d015      	beq.n	800be10 <_vfiprintf_r+0x120>
 800bde4:	9a07      	ldr	r2, [sp, #28]
 800bde6:	4654      	mov	r4, sl
 800bde8:	2000      	movs	r0, #0
 800bdea:	f04f 0c0a 	mov.w	ip, #10
 800bdee:	4621      	mov	r1, r4
 800bdf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bdf4:	3b30      	subs	r3, #48	@ 0x30
 800bdf6:	2b09      	cmp	r3, #9
 800bdf8:	d94b      	bls.n	800be92 <_vfiprintf_r+0x1a2>
 800bdfa:	b1b0      	cbz	r0, 800be2a <_vfiprintf_r+0x13a>
 800bdfc:	9207      	str	r2, [sp, #28]
 800bdfe:	e014      	b.n	800be2a <_vfiprintf_r+0x13a>
 800be00:	eba0 0308 	sub.w	r3, r0, r8
 800be04:	fa09 f303 	lsl.w	r3, r9, r3
 800be08:	4313      	orrs	r3, r2
 800be0a:	9304      	str	r3, [sp, #16]
 800be0c:	46a2      	mov	sl, r4
 800be0e:	e7d2      	b.n	800bdb6 <_vfiprintf_r+0xc6>
 800be10:	9b03      	ldr	r3, [sp, #12]
 800be12:	1d19      	adds	r1, r3, #4
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	9103      	str	r1, [sp, #12]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	bfbb      	ittet	lt
 800be1c:	425b      	neglt	r3, r3
 800be1e:	f042 0202 	orrlt.w	r2, r2, #2
 800be22:	9307      	strge	r3, [sp, #28]
 800be24:	9307      	strlt	r3, [sp, #28]
 800be26:	bfb8      	it	lt
 800be28:	9204      	strlt	r2, [sp, #16]
 800be2a:	7823      	ldrb	r3, [r4, #0]
 800be2c:	2b2e      	cmp	r3, #46	@ 0x2e
 800be2e:	d10a      	bne.n	800be46 <_vfiprintf_r+0x156>
 800be30:	7863      	ldrb	r3, [r4, #1]
 800be32:	2b2a      	cmp	r3, #42	@ 0x2a
 800be34:	d132      	bne.n	800be9c <_vfiprintf_r+0x1ac>
 800be36:	9b03      	ldr	r3, [sp, #12]
 800be38:	1d1a      	adds	r2, r3, #4
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	9203      	str	r2, [sp, #12]
 800be3e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800be42:	3402      	adds	r4, #2
 800be44:	9305      	str	r3, [sp, #20]
 800be46:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bf1c <_vfiprintf_r+0x22c>
 800be4a:	7821      	ldrb	r1, [r4, #0]
 800be4c:	2203      	movs	r2, #3
 800be4e:	4650      	mov	r0, sl
 800be50:	f7f4 f9de 	bl	8000210 <memchr>
 800be54:	b138      	cbz	r0, 800be66 <_vfiprintf_r+0x176>
 800be56:	9b04      	ldr	r3, [sp, #16]
 800be58:	eba0 000a 	sub.w	r0, r0, sl
 800be5c:	2240      	movs	r2, #64	@ 0x40
 800be5e:	4082      	lsls	r2, r0
 800be60:	4313      	orrs	r3, r2
 800be62:	3401      	adds	r4, #1
 800be64:	9304      	str	r3, [sp, #16]
 800be66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be6a:	4829      	ldr	r0, [pc, #164]	@ (800bf10 <_vfiprintf_r+0x220>)
 800be6c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800be70:	2206      	movs	r2, #6
 800be72:	f7f4 f9cd 	bl	8000210 <memchr>
 800be76:	2800      	cmp	r0, #0
 800be78:	d03f      	beq.n	800befa <_vfiprintf_r+0x20a>
 800be7a:	4b26      	ldr	r3, [pc, #152]	@ (800bf14 <_vfiprintf_r+0x224>)
 800be7c:	bb1b      	cbnz	r3, 800bec6 <_vfiprintf_r+0x1d6>
 800be7e:	9b03      	ldr	r3, [sp, #12]
 800be80:	3307      	adds	r3, #7
 800be82:	f023 0307 	bic.w	r3, r3, #7
 800be86:	3308      	adds	r3, #8
 800be88:	9303      	str	r3, [sp, #12]
 800be8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be8c:	443b      	add	r3, r7
 800be8e:	9309      	str	r3, [sp, #36]	@ 0x24
 800be90:	e76a      	b.n	800bd68 <_vfiprintf_r+0x78>
 800be92:	fb0c 3202 	mla	r2, ip, r2, r3
 800be96:	460c      	mov	r4, r1
 800be98:	2001      	movs	r0, #1
 800be9a:	e7a8      	b.n	800bdee <_vfiprintf_r+0xfe>
 800be9c:	2300      	movs	r3, #0
 800be9e:	3401      	adds	r4, #1
 800bea0:	9305      	str	r3, [sp, #20]
 800bea2:	4619      	mov	r1, r3
 800bea4:	f04f 0c0a 	mov.w	ip, #10
 800bea8:	4620      	mov	r0, r4
 800beaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800beae:	3a30      	subs	r2, #48	@ 0x30
 800beb0:	2a09      	cmp	r2, #9
 800beb2:	d903      	bls.n	800bebc <_vfiprintf_r+0x1cc>
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d0c6      	beq.n	800be46 <_vfiprintf_r+0x156>
 800beb8:	9105      	str	r1, [sp, #20]
 800beba:	e7c4      	b.n	800be46 <_vfiprintf_r+0x156>
 800bebc:	fb0c 2101 	mla	r1, ip, r1, r2
 800bec0:	4604      	mov	r4, r0
 800bec2:	2301      	movs	r3, #1
 800bec4:	e7f0      	b.n	800bea8 <_vfiprintf_r+0x1b8>
 800bec6:	ab03      	add	r3, sp, #12
 800bec8:	9300      	str	r3, [sp, #0]
 800beca:	462a      	mov	r2, r5
 800becc:	4b12      	ldr	r3, [pc, #72]	@ (800bf18 <_vfiprintf_r+0x228>)
 800bece:	a904      	add	r1, sp, #16
 800bed0:	4630      	mov	r0, r6
 800bed2:	f7fd fbdb 	bl	800968c <_printf_float>
 800bed6:	4607      	mov	r7, r0
 800bed8:	1c78      	adds	r0, r7, #1
 800beda:	d1d6      	bne.n	800be8a <_vfiprintf_r+0x19a>
 800bedc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bede:	07d9      	lsls	r1, r3, #31
 800bee0:	d405      	bmi.n	800beee <_vfiprintf_r+0x1fe>
 800bee2:	89ab      	ldrh	r3, [r5, #12]
 800bee4:	059a      	lsls	r2, r3, #22
 800bee6:	d402      	bmi.n	800beee <_vfiprintf_r+0x1fe>
 800bee8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800beea:	f7fe f92b 	bl	800a144 <__retarget_lock_release_recursive>
 800beee:	89ab      	ldrh	r3, [r5, #12]
 800bef0:	065b      	lsls	r3, r3, #25
 800bef2:	f53f af1f 	bmi.w	800bd34 <_vfiprintf_r+0x44>
 800bef6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bef8:	e71e      	b.n	800bd38 <_vfiprintf_r+0x48>
 800befa:	ab03      	add	r3, sp, #12
 800befc:	9300      	str	r3, [sp, #0]
 800befe:	462a      	mov	r2, r5
 800bf00:	4b05      	ldr	r3, [pc, #20]	@ (800bf18 <_vfiprintf_r+0x228>)
 800bf02:	a904      	add	r1, sp, #16
 800bf04:	4630      	mov	r0, r6
 800bf06:	f7fd fe59 	bl	8009bbc <_printf_i>
 800bf0a:	e7e4      	b.n	800bed6 <_vfiprintf_r+0x1e6>
 800bf0c:	0800d7f8 	.word	0x0800d7f8
 800bf10:	0800d802 	.word	0x0800d802
 800bf14:	0800968d 	.word	0x0800968d
 800bf18:	0800bccd 	.word	0x0800bccd
 800bf1c:	0800d7fe 	.word	0x0800d7fe

0800bf20 <__swbuf_r>:
 800bf20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf22:	460e      	mov	r6, r1
 800bf24:	4614      	mov	r4, r2
 800bf26:	4605      	mov	r5, r0
 800bf28:	b118      	cbz	r0, 800bf32 <__swbuf_r+0x12>
 800bf2a:	6a03      	ldr	r3, [r0, #32]
 800bf2c:	b90b      	cbnz	r3, 800bf32 <__swbuf_r+0x12>
 800bf2e:	f7fd fff1 	bl	8009f14 <__sinit>
 800bf32:	69a3      	ldr	r3, [r4, #24]
 800bf34:	60a3      	str	r3, [r4, #8]
 800bf36:	89a3      	ldrh	r3, [r4, #12]
 800bf38:	071a      	lsls	r2, r3, #28
 800bf3a:	d501      	bpl.n	800bf40 <__swbuf_r+0x20>
 800bf3c:	6923      	ldr	r3, [r4, #16]
 800bf3e:	b943      	cbnz	r3, 800bf52 <__swbuf_r+0x32>
 800bf40:	4621      	mov	r1, r4
 800bf42:	4628      	mov	r0, r5
 800bf44:	f000 f82a 	bl	800bf9c <__swsetup_r>
 800bf48:	b118      	cbz	r0, 800bf52 <__swbuf_r+0x32>
 800bf4a:	f04f 37ff 	mov.w	r7, #4294967295
 800bf4e:	4638      	mov	r0, r7
 800bf50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf52:	6823      	ldr	r3, [r4, #0]
 800bf54:	6922      	ldr	r2, [r4, #16]
 800bf56:	1a98      	subs	r0, r3, r2
 800bf58:	6963      	ldr	r3, [r4, #20]
 800bf5a:	b2f6      	uxtb	r6, r6
 800bf5c:	4283      	cmp	r3, r0
 800bf5e:	4637      	mov	r7, r6
 800bf60:	dc05      	bgt.n	800bf6e <__swbuf_r+0x4e>
 800bf62:	4621      	mov	r1, r4
 800bf64:	4628      	mov	r0, r5
 800bf66:	f7ff fd99 	bl	800ba9c <_fflush_r>
 800bf6a:	2800      	cmp	r0, #0
 800bf6c:	d1ed      	bne.n	800bf4a <__swbuf_r+0x2a>
 800bf6e:	68a3      	ldr	r3, [r4, #8]
 800bf70:	3b01      	subs	r3, #1
 800bf72:	60a3      	str	r3, [r4, #8]
 800bf74:	6823      	ldr	r3, [r4, #0]
 800bf76:	1c5a      	adds	r2, r3, #1
 800bf78:	6022      	str	r2, [r4, #0]
 800bf7a:	701e      	strb	r6, [r3, #0]
 800bf7c:	6962      	ldr	r2, [r4, #20]
 800bf7e:	1c43      	adds	r3, r0, #1
 800bf80:	429a      	cmp	r2, r3
 800bf82:	d004      	beq.n	800bf8e <__swbuf_r+0x6e>
 800bf84:	89a3      	ldrh	r3, [r4, #12]
 800bf86:	07db      	lsls	r3, r3, #31
 800bf88:	d5e1      	bpl.n	800bf4e <__swbuf_r+0x2e>
 800bf8a:	2e0a      	cmp	r6, #10
 800bf8c:	d1df      	bne.n	800bf4e <__swbuf_r+0x2e>
 800bf8e:	4621      	mov	r1, r4
 800bf90:	4628      	mov	r0, r5
 800bf92:	f7ff fd83 	bl	800ba9c <_fflush_r>
 800bf96:	2800      	cmp	r0, #0
 800bf98:	d0d9      	beq.n	800bf4e <__swbuf_r+0x2e>
 800bf9a:	e7d6      	b.n	800bf4a <__swbuf_r+0x2a>

0800bf9c <__swsetup_r>:
 800bf9c:	b538      	push	{r3, r4, r5, lr}
 800bf9e:	4b29      	ldr	r3, [pc, #164]	@ (800c044 <__swsetup_r+0xa8>)
 800bfa0:	4605      	mov	r5, r0
 800bfa2:	6818      	ldr	r0, [r3, #0]
 800bfa4:	460c      	mov	r4, r1
 800bfa6:	b118      	cbz	r0, 800bfb0 <__swsetup_r+0x14>
 800bfa8:	6a03      	ldr	r3, [r0, #32]
 800bfaa:	b90b      	cbnz	r3, 800bfb0 <__swsetup_r+0x14>
 800bfac:	f7fd ffb2 	bl	8009f14 <__sinit>
 800bfb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfb4:	0719      	lsls	r1, r3, #28
 800bfb6:	d422      	bmi.n	800bffe <__swsetup_r+0x62>
 800bfb8:	06da      	lsls	r2, r3, #27
 800bfba:	d407      	bmi.n	800bfcc <__swsetup_r+0x30>
 800bfbc:	2209      	movs	r2, #9
 800bfbe:	602a      	str	r2, [r5, #0]
 800bfc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bfc4:	81a3      	strh	r3, [r4, #12]
 800bfc6:	f04f 30ff 	mov.w	r0, #4294967295
 800bfca:	e033      	b.n	800c034 <__swsetup_r+0x98>
 800bfcc:	0758      	lsls	r0, r3, #29
 800bfce:	d512      	bpl.n	800bff6 <__swsetup_r+0x5a>
 800bfd0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bfd2:	b141      	cbz	r1, 800bfe6 <__swsetup_r+0x4a>
 800bfd4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bfd8:	4299      	cmp	r1, r3
 800bfda:	d002      	beq.n	800bfe2 <__swsetup_r+0x46>
 800bfdc:	4628      	mov	r0, r5
 800bfde:	f7fe feff 	bl	800ade0 <_free_r>
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	6363      	str	r3, [r4, #52]	@ 0x34
 800bfe6:	89a3      	ldrh	r3, [r4, #12]
 800bfe8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bfec:	81a3      	strh	r3, [r4, #12]
 800bfee:	2300      	movs	r3, #0
 800bff0:	6063      	str	r3, [r4, #4]
 800bff2:	6923      	ldr	r3, [r4, #16]
 800bff4:	6023      	str	r3, [r4, #0]
 800bff6:	89a3      	ldrh	r3, [r4, #12]
 800bff8:	f043 0308 	orr.w	r3, r3, #8
 800bffc:	81a3      	strh	r3, [r4, #12]
 800bffe:	6923      	ldr	r3, [r4, #16]
 800c000:	b94b      	cbnz	r3, 800c016 <__swsetup_r+0x7a>
 800c002:	89a3      	ldrh	r3, [r4, #12]
 800c004:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c008:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c00c:	d003      	beq.n	800c016 <__swsetup_r+0x7a>
 800c00e:	4621      	mov	r1, r4
 800c010:	4628      	mov	r0, r5
 800c012:	f000 f883 	bl	800c11c <__smakebuf_r>
 800c016:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c01a:	f013 0201 	ands.w	r2, r3, #1
 800c01e:	d00a      	beq.n	800c036 <__swsetup_r+0x9a>
 800c020:	2200      	movs	r2, #0
 800c022:	60a2      	str	r2, [r4, #8]
 800c024:	6962      	ldr	r2, [r4, #20]
 800c026:	4252      	negs	r2, r2
 800c028:	61a2      	str	r2, [r4, #24]
 800c02a:	6922      	ldr	r2, [r4, #16]
 800c02c:	b942      	cbnz	r2, 800c040 <__swsetup_r+0xa4>
 800c02e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c032:	d1c5      	bne.n	800bfc0 <__swsetup_r+0x24>
 800c034:	bd38      	pop	{r3, r4, r5, pc}
 800c036:	0799      	lsls	r1, r3, #30
 800c038:	bf58      	it	pl
 800c03a:	6962      	ldrpl	r2, [r4, #20]
 800c03c:	60a2      	str	r2, [r4, #8]
 800c03e:	e7f4      	b.n	800c02a <__swsetup_r+0x8e>
 800c040:	2000      	movs	r0, #0
 800c042:	e7f7      	b.n	800c034 <__swsetup_r+0x98>
 800c044:	2000004c 	.word	0x2000004c

0800c048 <_raise_r>:
 800c048:	291f      	cmp	r1, #31
 800c04a:	b538      	push	{r3, r4, r5, lr}
 800c04c:	4605      	mov	r5, r0
 800c04e:	460c      	mov	r4, r1
 800c050:	d904      	bls.n	800c05c <_raise_r+0x14>
 800c052:	2316      	movs	r3, #22
 800c054:	6003      	str	r3, [r0, #0]
 800c056:	f04f 30ff 	mov.w	r0, #4294967295
 800c05a:	bd38      	pop	{r3, r4, r5, pc}
 800c05c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c05e:	b112      	cbz	r2, 800c066 <_raise_r+0x1e>
 800c060:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c064:	b94b      	cbnz	r3, 800c07a <_raise_r+0x32>
 800c066:	4628      	mov	r0, r5
 800c068:	f000 f830 	bl	800c0cc <_getpid_r>
 800c06c:	4622      	mov	r2, r4
 800c06e:	4601      	mov	r1, r0
 800c070:	4628      	mov	r0, r5
 800c072:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c076:	f000 b817 	b.w	800c0a8 <_kill_r>
 800c07a:	2b01      	cmp	r3, #1
 800c07c:	d00a      	beq.n	800c094 <_raise_r+0x4c>
 800c07e:	1c59      	adds	r1, r3, #1
 800c080:	d103      	bne.n	800c08a <_raise_r+0x42>
 800c082:	2316      	movs	r3, #22
 800c084:	6003      	str	r3, [r0, #0]
 800c086:	2001      	movs	r0, #1
 800c088:	e7e7      	b.n	800c05a <_raise_r+0x12>
 800c08a:	2100      	movs	r1, #0
 800c08c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c090:	4620      	mov	r0, r4
 800c092:	4798      	blx	r3
 800c094:	2000      	movs	r0, #0
 800c096:	e7e0      	b.n	800c05a <_raise_r+0x12>

0800c098 <raise>:
 800c098:	4b02      	ldr	r3, [pc, #8]	@ (800c0a4 <raise+0xc>)
 800c09a:	4601      	mov	r1, r0
 800c09c:	6818      	ldr	r0, [r3, #0]
 800c09e:	f7ff bfd3 	b.w	800c048 <_raise_r>
 800c0a2:	bf00      	nop
 800c0a4:	2000004c 	.word	0x2000004c

0800c0a8 <_kill_r>:
 800c0a8:	b538      	push	{r3, r4, r5, lr}
 800c0aa:	4d07      	ldr	r5, [pc, #28]	@ (800c0c8 <_kill_r+0x20>)
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	4604      	mov	r4, r0
 800c0b0:	4608      	mov	r0, r1
 800c0b2:	4611      	mov	r1, r2
 800c0b4:	602b      	str	r3, [r5, #0]
 800c0b6:	f7f7 fd41 	bl	8003b3c <_kill>
 800c0ba:	1c43      	adds	r3, r0, #1
 800c0bc:	d102      	bne.n	800c0c4 <_kill_r+0x1c>
 800c0be:	682b      	ldr	r3, [r5, #0]
 800c0c0:	b103      	cbz	r3, 800c0c4 <_kill_r+0x1c>
 800c0c2:	6023      	str	r3, [r4, #0]
 800c0c4:	bd38      	pop	{r3, r4, r5, pc}
 800c0c6:	bf00      	nop
 800c0c8:	200007fc 	.word	0x200007fc

0800c0cc <_getpid_r>:
 800c0cc:	f7f7 bd2e 	b.w	8003b2c <_getpid>

0800c0d0 <__swhatbuf_r>:
 800c0d0:	b570      	push	{r4, r5, r6, lr}
 800c0d2:	460c      	mov	r4, r1
 800c0d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0d8:	2900      	cmp	r1, #0
 800c0da:	b096      	sub	sp, #88	@ 0x58
 800c0dc:	4615      	mov	r5, r2
 800c0de:	461e      	mov	r6, r3
 800c0e0:	da0d      	bge.n	800c0fe <__swhatbuf_r+0x2e>
 800c0e2:	89a3      	ldrh	r3, [r4, #12]
 800c0e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c0e8:	f04f 0100 	mov.w	r1, #0
 800c0ec:	bf14      	ite	ne
 800c0ee:	2340      	movne	r3, #64	@ 0x40
 800c0f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c0f4:	2000      	movs	r0, #0
 800c0f6:	6031      	str	r1, [r6, #0]
 800c0f8:	602b      	str	r3, [r5, #0]
 800c0fa:	b016      	add	sp, #88	@ 0x58
 800c0fc:	bd70      	pop	{r4, r5, r6, pc}
 800c0fe:	466a      	mov	r2, sp
 800c100:	f000 f848 	bl	800c194 <_fstat_r>
 800c104:	2800      	cmp	r0, #0
 800c106:	dbec      	blt.n	800c0e2 <__swhatbuf_r+0x12>
 800c108:	9901      	ldr	r1, [sp, #4]
 800c10a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c10e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c112:	4259      	negs	r1, r3
 800c114:	4159      	adcs	r1, r3
 800c116:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c11a:	e7eb      	b.n	800c0f4 <__swhatbuf_r+0x24>

0800c11c <__smakebuf_r>:
 800c11c:	898b      	ldrh	r3, [r1, #12]
 800c11e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c120:	079d      	lsls	r5, r3, #30
 800c122:	4606      	mov	r6, r0
 800c124:	460c      	mov	r4, r1
 800c126:	d507      	bpl.n	800c138 <__smakebuf_r+0x1c>
 800c128:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c12c:	6023      	str	r3, [r4, #0]
 800c12e:	6123      	str	r3, [r4, #16]
 800c130:	2301      	movs	r3, #1
 800c132:	6163      	str	r3, [r4, #20]
 800c134:	b003      	add	sp, #12
 800c136:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c138:	ab01      	add	r3, sp, #4
 800c13a:	466a      	mov	r2, sp
 800c13c:	f7ff ffc8 	bl	800c0d0 <__swhatbuf_r>
 800c140:	9f00      	ldr	r7, [sp, #0]
 800c142:	4605      	mov	r5, r0
 800c144:	4639      	mov	r1, r7
 800c146:	4630      	mov	r0, r6
 800c148:	f7fe febe 	bl	800aec8 <_malloc_r>
 800c14c:	b948      	cbnz	r0, 800c162 <__smakebuf_r+0x46>
 800c14e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c152:	059a      	lsls	r2, r3, #22
 800c154:	d4ee      	bmi.n	800c134 <__smakebuf_r+0x18>
 800c156:	f023 0303 	bic.w	r3, r3, #3
 800c15a:	f043 0302 	orr.w	r3, r3, #2
 800c15e:	81a3      	strh	r3, [r4, #12]
 800c160:	e7e2      	b.n	800c128 <__smakebuf_r+0xc>
 800c162:	89a3      	ldrh	r3, [r4, #12]
 800c164:	6020      	str	r0, [r4, #0]
 800c166:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c16a:	81a3      	strh	r3, [r4, #12]
 800c16c:	9b01      	ldr	r3, [sp, #4]
 800c16e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c172:	b15b      	cbz	r3, 800c18c <__smakebuf_r+0x70>
 800c174:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c178:	4630      	mov	r0, r6
 800c17a:	f000 f81d 	bl	800c1b8 <_isatty_r>
 800c17e:	b128      	cbz	r0, 800c18c <__smakebuf_r+0x70>
 800c180:	89a3      	ldrh	r3, [r4, #12]
 800c182:	f023 0303 	bic.w	r3, r3, #3
 800c186:	f043 0301 	orr.w	r3, r3, #1
 800c18a:	81a3      	strh	r3, [r4, #12]
 800c18c:	89a3      	ldrh	r3, [r4, #12]
 800c18e:	431d      	orrs	r5, r3
 800c190:	81a5      	strh	r5, [r4, #12]
 800c192:	e7cf      	b.n	800c134 <__smakebuf_r+0x18>

0800c194 <_fstat_r>:
 800c194:	b538      	push	{r3, r4, r5, lr}
 800c196:	4d07      	ldr	r5, [pc, #28]	@ (800c1b4 <_fstat_r+0x20>)
 800c198:	2300      	movs	r3, #0
 800c19a:	4604      	mov	r4, r0
 800c19c:	4608      	mov	r0, r1
 800c19e:	4611      	mov	r1, r2
 800c1a0:	602b      	str	r3, [r5, #0]
 800c1a2:	f7f7 fd2b 	bl	8003bfc <_fstat>
 800c1a6:	1c43      	adds	r3, r0, #1
 800c1a8:	d102      	bne.n	800c1b0 <_fstat_r+0x1c>
 800c1aa:	682b      	ldr	r3, [r5, #0]
 800c1ac:	b103      	cbz	r3, 800c1b0 <_fstat_r+0x1c>
 800c1ae:	6023      	str	r3, [r4, #0]
 800c1b0:	bd38      	pop	{r3, r4, r5, pc}
 800c1b2:	bf00      	nop
 800c1b4:	200007fc 	.word	0x200007fc

0800c1b8 <_isatty_r>:
 800c1b8:	b538      	push	{r3, r4, r5, lr}
 800c1ba:	4d06      	ldr	r5, [pc, #24]	@ (800c1d4 <_isatty_r+0x1c>)
 800c1bc:	2300      	movs	r3, #0
 800c1be:	4604      	mov	r4, r0
 800c1c0:	4608      	mov	r0, r1
 800c1c2:	602b      	str	r3, [r5, #0]
 800c1c4:	f7f7 fd2a 	bl	8003c1c <_isatty>
 800c1c8:	1c43      	adds	r3, r0, #1
 800c1ca:	d102      	bne.n	800c1d2 <_isatty_r+0x1a>
 800c1cc:	682b      	ldr	r3, [r5, #0]
 800c1ce:	b103      	cbz	r3, 800c1d2 <_isatty_r+0x1a>
 800c1d0:	6023      	str	r3, [r4, #0]
 800c1d2:	bd38      	pop	{r3, r4, r5, pc}
 800c1d4:	200007fc 	.word	0x200007fc

0800c1d8 <sqrt>:
 800c1d8:	b538      	push	{r3, r4, r5, lr}
 800c1da:	ed2d 8b02 	vpush	{d8}
 800c1de:	ec55 4b10 	vmov	r4, r5, d0
 800c1e2:	f000 f923 	bl	800c42c <__ieee754_sqrt>
 800c1e6:	4622      	mov	r2, r4
 800c1e8:	462b      	mov	r3, r5
 800c1ea:	4620      	mov	r0, r4
 800c1ec:	4629      	mov	r1, r5
 800c1ee:	eeb0 8a40 	vmov.f32	s16, s0
 800c1f2:	eef0 8a60 	vmov.f32	s17, s1
 800c1f6:	f7f4 fcb9 	bl	8000b6c <__aeabi_dcmpun>
 800c1fa:	b990      	cbnz	r0, 800c222 <sqrt+0x4a>
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	2300      	movs	r3, #0
 800c200:	4620      	mov	r0, r4
 800c202:	4629      	mov	r1, r5
 800c204:	f7f4 fc8a 	bl	8000b1c <__aeabi_dcmplt>
 800c208:	b158      	cbz	r0, 800c222 <sqrt+0x4a>
 800c20a:	f7fd ff6f 	bl	800a0ec <__errno>
 800c20e:	2321      	movs	r3, #33	@ 0x21
 800c210:	6003      	str	r3, [r0, #0]
 800c212:	2200      	movs	r2, #0
 800c214:	2300      	movs	r3, #0
 800c216:	4610      	mov	r0, r2
 800c218:	4619      	mov	r1, r3
 800c21a:	f7f4 fb37 	bl	800088c <__aeabi_ddiv>
 800c21e:	ec41 0b18 	vmov	d8, r0, r1
 800c222:	eeb0 0a48 	vmov.f32	s0, s16
 800c226:	eef0 0a68 	vmov.f32	s1, s17
 800c22a:	ecbd 8b02 	vpop	{d8}
 800c22e:	bd38      	pop	{r3, r4, r5, pc}

0800c230 <cos>:
 800c230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c232:	ec53 2b10 	vmov	r2, r3, d0
 800c236:	4826      	ldr	r0, [pc, #152]	@ (800c2d0 <cos+0xa0>)
 800c238:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c23c:	4281      	cmp	r1, r0
 800c23e:	d806      	bhi.n	800c24e <cos+0x1e>
 800c240:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800c2c8 <cos+0x98>
 800c244:	b005      	add	sp, #20
 800c246:	f85d eb04 	ldr.w	lr, [sp], #4
 800c24a:	f000 b9c9 	b.w	800c5e0 <__kernel_cos>
 800c24e:	4821      	ldr	r0, [pc, #132]	@ (800c2d4 <cos+0xa4>)
 800c250:	4281      	cmp	r1, r0
 800c252:	d908      	bls.n	800c266 <cos+0x36>
 800c254:	4610      	mov	r0, r2
 800c256:	4619      	mov	r1, r3
 800c258:	f7f4 f836 	bl	80002c8 <__aeabi_dsub>
 800c25c:	ec41 0b10 	vmov	d0, r0, r1
 800c260:	b005      	add	sp, #20
 800c262:	f85d fb04 	ldr.w	pc, [sp], #4
 800c266:	4668      	mov	r0, sp
 800c268:	f000 fb3e 	bl	800c8e8 <__ieee754_rem_pio2>
 800c26c:	f000 0003 	and.w	r0, r0, #3
 800c270:	2801      	cmp	r0, #1
 800c272:	d00b      	beq.n	800c28c <cos+0x5c>
 800c274:	2802      	cmp	r0, #2
 800c276:	d015      	beq.n	800c2a4 <cos+0x74>
 800c278:	b9d8      	cbnz	r0, 800c2b2 <cos+0x82>
 800c27a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c27e:	ed9d 0b00 	vldr	d0, [sp]
 800c282:	f000 f9ad 	bl	800c5e0 <__kernel_cos>
 800c286:	ec51 0b10 	vmov	r0, r1, d0
 800c28a:	e7e7      	b.n	800c25c <cos+0x2c>
 800c28c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c290:	ed9d 0b00 	vldr	d0, [sp]
 800c294:	f000 fa6c 	bl	800c770 <__kernel_sin>
 800c298:	ec53 2b10 	vmov	r2, r3, d0
 800c29c:	4610      	mov	r0, r2
 800c29e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800c2a2:	e7db      	b.n	800c25c <cos+0x2c>
 800c2a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c2a8:	ed9d 0b00 	vldr	d0, [sp]
 800c2ac:	f000 f998 	bl	800c5e0 <__kernel_cos>
 800c2b0:	e7f2      	b.n	800c298 <cos+0x68>
 800c2b2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c2b6:	ed9d 0b00 	vldr	d0, [sp]
 800c2ba:	2001      	movs	r0, #1
 800c2bc:	f000 fa58 	bl	800c770 <__kernel_sin>
 800c2c0:	e7e1      	b.n	800c286 <cos+0x56>
 800c2c2:	bf00      	nop
 800c2c4:	f3af 8000 	nop.w
	...
 800c2d0:	3fe921fb 	.word	0x3fe921fb
 800c2d4:	7fefffff 	.word	0x7fefffff

0800c2d8 <sin>:
 800c2d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c2da:	ec53 2b10 	vmov	r2, r3, d0
 800c2de:	4826      	ldr	r0, [pc, #152]	@ (800c378 <sin+0xa0>)
 800c2e0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c2e4:	4281      	cmp	r1, r0
 800c2e6:	d807      	bhi.n	800c2f8 <sin+0x20>
 800c2e8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800c370 <sin+0x98>
 800c2ec:	2000      	movs	r0, #0
 800c2ee:	b005      	add	sp, #20
 800c2f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c2f4:	f000 ba3c 	b.w	800c770 <__kernel_sin>
 800c2f8:	4820      	ldr	r0, [pc, #128]	@ (800c37c <sin+0xa4>)
 800c2fa:	4281      	cmp	r1, r0
 800c2fc:	d908      	bls.n	800c310 <sin+0x38>
 800c2fe:	4610      	mov	r0, r2
 800c300:	4619      	mov	r1, r3
 800c302:	f7f3 ffe1 	bl	80002c8 <__aeabi_dsub>
 800c306:	ec41 0b10 	vmov	d0, r0, r1
 800c30a:	b005      	add	sp, #20
 800c30c:	f85d fb04 	ldr.w	pc, [sp], #4
 800c310:	4668      	mov	r0, sp
 800c312:	f000 fae9 	bl	800c8e8 <__ieee754_rem_pio2>
 800c316:	f000 0003 	and.w	r0, r0, #3
 800c31a:	2801      	cmp	r0, #1
 800c31c:	d00c      	beq.n	800c338 <sin+0x60>
 800c31e:	2802      	cmp	r0, #2
 800c320:	d011      	beq.n	800c346 <sin+0x6e>
 800c322:	b9e8      	cbnz	r0, 800c360 <sin+0x88>
 800c324:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c328:	ed9d 0b00 	vldr	d0, [sp]
 800c32c:	2001      	movs	r0, #1
 800c32e:	f000 fa1f 	bl	800c770 <__kernel_sin>
 800c332:	ec51 0b10 	vmov	r0, r1, d0
 800c336:	e7e6      	b.n	800c306 <sin+0x2e>
 800c338:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c33c:	ed9d 0b00 	vldr	d0, [sp]
 800c340:	f000 f94e 	bl	800c5e0 <__kernel_cos>
 800c344:	e7f5      	b.n	800c332 <sin+0x5a>
 800c346:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c34a:	ed9d 0b00 	vldr	d0, [sp]
 800c34e:	2001      	movs	r0, #1
 800c350:	f000 fa0e 	bl	800c770 <__kernel_sin>
 800c354:	ec53 2b10 	vmov	r2, r3, d0
 800c358:	4610      	mov	r0, r2
 800c35a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800c35e:	e7d2      	b.n	800c306 <sin+0x2e>
 800c360:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c364:	ed9d 0b00 	vldr	d0, [sp]
 800c368:	f000 f93a 	bl	800c5e0 <__kernel_cos>
 800c36c:	e7f2      	b.n	800c354 <sin+0x7c>
 800c36e:	bf00      	nop
	...
 800c378:	3fe921fb 	.word	0x3fe921fb
 800c37c:	7fefffff 	.word	0x7fefffff

0800c380 <fmaxf>:
 800c380:	b508      	push	{r3, lr}
 800c382:	ed2d 8b02 	vpush	{d8}
 800c386:	eeb0 8a40 	vmov.f32	s16, s0
 800c38a:	eef0 8a60 	vmov.f32	s17, s1
 800c38e:	f000 f831 	bl	800c3f4 <__fpclassifyf>
 800c392:	b930      	cbnz	r0, 800c3a2 <fmaxf+0x22>
 800c394:	eeb0 8a68 	vmov.f32	s16, s17
 800c398:	eeb0 0a48 	vmov.f32	s0, s16
 800c39c:	ecbd 8b02 	vpop	{d8}
 800c3a0:	bd08      	pop	{r3, pc}
 800c3a2:	eeb0 0a68 	vmov.f32	s0, s17
 800c3a6:	f000 f825 	bl	800c3f4 <__fpclassifyf>
 800c3aa:	2800      	cmp	r0, #0
 800c3ac:	d0f4      	beq.n	800c398 <fmaxf+0x18>
 800c3ae:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c3b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3b6:	dded      	ble.n	800c394 <fmaxf+0x14>
 800c3b8:	e7ee      	b.n	800c398 <fmaxf+0x18>

0800c3ba <fminf>:
 800c3ba:	b508      	push	{r3, lr}
 800c3bc:	ed2d 8b02 	vpush	{d8}
 800c3c0:	eeb0 8a40 	vmov.f32	s16, s0
 800c3c4:	eef0 8a60 	vmov.f32	s17, s1
 800c3c8:	f000 f814 	bl	800c3f4 <__fpclassifyf>
 800c3cc:	b930      	cbnz	r0, 800c3dc <fminf+0x22>
 800c3ce:	eeb0 8a68 	vmov.f32	s16, s17
 800c3d2:	eeb0 0a48 	vmov.f32	s0, s16
 800c3d6:	ecbd 8b02 	vpop	{d8}
 800c3da:	bd08      	pop	{r3, pc}
 800c3dc:	eeb0 0a68 	vmov.f32	s0, s17
 800c3e0:	f000 f808 	bl	800c3f4 <__fpclassifyf>
 800c3e4:	2800      	cmp	r0, #0
 800c3e6:	d0f4      	beq.n	800c3d2 <fminf+0x18>
 800c3e8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c3ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3f0:	d5ed      	bpl.n	800c3ce <fminf+0x14>
 800c3f2:	e7ee      	b.n	800c3d2 <fminf+0x18>

0800c3f4 <__fpclassifyf>:
 800c3f4:	ee10 3a10 	vmov	r3, s0
 800c3f8:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800c3fc:	d00d      	beq.n	800c41a <__fpclassifyf+0x26>
 800c3fe:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800c402:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800c406:	d30a      	bcc.n	800c41e <__fpclassifyf+0x2a>
 800c408:	4b07      	ldr	r3, [pc, #28]	@ (800c428 <__fpclassifyf+0x34>)
 800c40a:	1e42      	subs	r2, r0, #1
 800c40c:	429a      	cmp	r2, r3
 800c40e:	d908      	bls.n	800c422 <__fpclassifyf+0x2e>
 800c410:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800c414:	4258      	negs	r0, r3
 800c416:	4158      	adcs	r0, r3
 800c418:	4770      	bx	lr
 800c41a:	2002      	movs	r0, #2
 800c41c:	4770      	bx	lr
 800c41e:	2004      	movs	r0, #4
 800c420:	4770      	bx	lr
 800c422:	2003      	movs	r0, #3
 800c424:	4770      	bx	lr
 800c426:	bf00      	nop
 800c428:	007ffffe 	.word	0x007ffffe

0800c42c <__ieee754_sqrt>:
 800c42c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c430:	4a68      	ldr	r2, [pc, #416]	@ (800c5d4 <__ieee754_sqrt+0x1a8>)
 800c432:	ec55 4b10 	vmov	r4, r5, d0
 800c436:	43aa      	bics	r2, r5
 800c438:	462b      	mov	r3, r5
 800c43a:	4621      	mov	r1, r4
 800c43c:	d110      	bne.n	800c460 <__ieee754_sqrt+0x34>
 800c43e:	4622      	mov	r2, r4
 800c440:	4620      	mov	r0, r4
 800c442:	4629      	mov	r1, r5
 800c444:	f7f4 f8f8 	bl	8000638 <__aeabi_dmul>
 800c448:	4602      	mov	r2, r0
 800c44a:	460b      	mov	r3, r1
 800c44c:	4620      	mov	r0, r4
 800c44e:	4629      	mov	r1, r5
 800c450:	f7f3 ff3c 	bl	80002cc <__adddf3>
 800c454:	4604      	mov	r4, r0
 800c456:	460d      	mov	r5, r1
 800c458:	ec45 4b10 	vmov	d0, r4, r5
 800c45c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c460:	2d00      	cmp	r5, #0
 800c462:	dc0e      	bgt.n	800c482 <__ieee754_sqrt+0x56>
 800c464:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800c468:	4322      	orrs	r2, r4
 800c46a:	d0f5      	beq.n	800c458 <__ieee754_sqrt+0x2c>
 800c46c:	b19d      	cbz	r5, 800c496 <__ieee754_sqrt+0x6a>
 800c46e:	4622      	mov	r2, r4
 800c470:	4620      	mov	r0, r4
 800c472:	4629      	mov	r1, r5
 800c474:	f7f3 ff28 	bl	80002c8 <__aeabi_dsub>
 800c478:	4602      	mov	r2, r0
 800c47a:	460b      	mov	r3, r1
 800c47c:	f7f4 fa06 	bl	800088c <__aeabi_ddiv>
 800c480:	e7e8      	b.n	800c454 <__ieee754_sqrt+0x28>
 800c482:	152a      	asrs	r2, r5, #20
 800c484:	d115      	bne.n	800c4b2 <__ieee754_sqrt+0x86>
 800c486:	2000      	movs	r0, #0
 800c488:	e009      	b.n	800c49e <__ieee754_sqrt+0x72>
 800c48a:	0acb      	lsrs	r3, r1, #11
 800c48c:	3a15      	subs	r2, #21
 800c48e:	0549      	lsls	r1, r1, #21
 800c490:	2b00      	cmp	r3, #0
 800c492:	d0fa      	beq.n	800c48a <__ieee754_sqrt+0x5e>
 800c494:	e7f7      	b.n	800c486 <__ieee754_sqrt+0x5a>
 800c496:	462a      	mov	r2, r5
 800c498:	e7fa      	b.n	800c490 <__ieee754_sqrt+0x64>
 800c49a:	005b      	lsls	r3, r3, #1
 800c49c:	3001      	adds	r0, #1
 800c49e:	02dc      	lsls	r4, r3, #11
 800c4a0:	d5fb      	bpl.n	800c49a <__ieee754_sqrt+0x6e>
 800c4a2:	1e44      	subs	r4, r0, #1
 800c4a4:	1b12      	subs	r2, r2, r4
 800c4a6:	f1c0 0420 	rsb	r4, r0, #32
 800c4aa:	fa21 f404 	lsr.w	r4, r1, r4
 800c4ae:	4323      	orrs	r3, r4
 800c4b0:	4081      	lsls	r1, r0
 800c4b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c4b6:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800c4ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c4be:	07d2      	lsls	r2, r2, #31
 800c4c0:	bf5c      	itt	pl
 800c4c2:	005b      	lslpl	r3, r3, #1
 800c4c4:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800c4c8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c4cc:	bf58      	it	pl
 800c4ce:	0049      	lslpl	r1, r1, #1
 800c4d0:	2600      	movs	r6, #0
 800c4d2:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800c4d6:	106d      	asrs	r5, r5, #1
 800c4d8:	0049      	lsls	r1, r1, #1
 800c4da:	2016      	movs	r0, #22
 800c4dc:	4632      	mov	r2, r6
 800c4de:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800c4e2:	1917      	adds	r7, r2, r4
 800c4e4:	429f      	cmp	r7, r3
 800c4e6:	bfde      	ittt	le
 800c4e8:	193a      	addle	r2, r7, r4
 800c4ea:	1bdb      	suble	r3, r3, r7
 800c4ec:	1936      	addle	r6, r6, r4
 800c4ee:	0fcf      	lsrs	r7, r1, #31
 800c4f0:	3801      	subs	r0, #1
 800c4f2:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800c4f6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c4fa:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800c4fe:	d1f0      	bne.n	800c4e2 <__ieee754_sqrt+0xb6>
 800c500:	4604      	mov	r4, r0
 800c502:	2720      	movs	r7, #32
 800c504:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800c508:	429a      	cmp	r2, r3
 800c50a:	eb00 0e0c 	add.w	lr, r0, ip
 800c50e:	db02      	blt.n	800c516 <__ieee754_sqrt+0xea>
 800c510:	d113      	bne.n	800c53a <__ieee754_sqrt+0x10e>
 800c512:	458e      	cmp	lr, r1
 800c514:	d811      	bhi.n	800c53a <__ieee754_sqrt+0x10e>
 800c516:	f1be 0f00 	cmp.w	lr, #0
 800c51a:	eb0e 000c 	add.w	r0, lr, ip
 800c51e:	da42      	bge.n	800c5a6 <__ieee754_sqrt+0x17a>
 800c520:	2800      	cmp	r0, #0
 800c522:	db40      	blt.n	800c5a6 <__ieee754_sqrt+0x17a>
 800c524:	f102 0801 	add.w	r8, r2, #1
 800c528:	1a9b      	subs	r3, r3, r2
 800c52a:	458e      	cmp	lr, r1
 800c52c:	bf88      	it	hi
 800c52e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c532:	eba1 010e 	sub.w	r1, r1, lr
 800c536:	4464      	add	r4, ip
 800c538:	4642      	mov	r2, r8
 800c53a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800c53e:	3f01      	subs	r7, #1
 800c540:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800c544:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c548:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800c54c:	d1dc      	bne.n	800c508 <__ieee754_sqrt+0xdc>
 800c54e:	4319      	orrs	r1, r3
 800c550:	d01b      	beq.n	800c58a <__ieee754_sqrt+0x15e>
 800c552:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800c5d8 <__ieee754_sqrt+0x1ac>
 800c556:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800c5dc <__ieee754_sqrt+0x1b0>
 800c55a:	e9da 0100 	ldrd	r0, r1, [sl]
 800c55e:	e9db 2300 	ldrd	r2, r3, [fp]
 800c562:	f7f3 feb1 	bl	80002c8 <__aeabi_dsub>
 800c566:	e9da 8900 	ldrd	r8, r9, [sl]
 800c56a:	4602      	mov	r2, r0
 800c56c:	460b      	mov	r3, r1
 800c56e:	4640      	mov	r0, r8
 800c570:	4649      	mov	r1, r9
 800c572:	f7f4 fadd 	bl	8000b30 <__aeabi_dcmple>
 800c576:	b140      	cbz	r0, 800c58a <__ieee754_sqrt+0x15e>
 800c578:	f1b4 3fff 	cmp.w	r4, #4294967295
 800c57c:	e9da 0100 	ldrd	r0, r1, [sl]
 800c580:	e9db 2300 	ldrd	r2, r3, [fp]
 800c584:	d111      	bne.n	800c5aa <__ieee754_sqrt+0x17e>
 800c586:	3601      	adds	r6, #1
 800c588:	463c      	mov	r4, r7
 800c58a:	1072      	asrs	r2, r6, #1
 800c58c:	0863      	lsrs	r3, r4, #1
 800c58e:	07f1      	lsls	r1, r6, #31
 800c590:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800c594:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800c598:	bf48      	it	mi
 800c59a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800c59e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	e756      	b.n	800c454 <__ieee754_sqrt+0x28>
 800c5a6:	4690      	mov	r8, r2
 800c5a8:	e7be      	b.n	800c528 <__ieee754_sqrt+0xfc>
 800c5aa:	f7f3 fe8f 	bl	80002cc <__adddf3>
 800c5ae:	e9da 8900 	ldrd	r8, r9, [sl]
 800c5b2:	4602      	mov	r2, r0
 800c5b4:	460b      	mov	r3, r1
 800c5b6:	4640      	mov	r0, r8
 800c5b8:	4649      	mov	r1, r9
 800c5ba:	f7f4 faaf 	bl	8000b1c <__aeabi_dcmplt>
 800c5be:	b120      	cbz	r0, 800c5ca <__ieee754_sqrt+0x19e>
 800c5c0:	1ca0      	adds	r0, r4, #2
 800c5c2:	bf08      	it	eq
 800c5c4:	3601      	addeq	r6, #1
 800c5c6:	3402      	adds	r4, #2
 800c5c8:	e7df      	b.n	800c58a <__ieee754_sqrt+0x15e>
 800c5ca:	1c63      	adds	r3, r4, #1
 800c5cc:	f023 0401 	bic.w	r4, r3, #1
 800c5d0:	e7db      	b.n	800c58a <__ieee754_sqrt+0x15e>
 800c5d2:	bf00      	nop
 800c5d4:	7ff00000 	.word	0x7ff00000
 800c5d8:	20000210 	.word	0x20000210
 800c5dc:	20000208 	.word	0x20000208

0800c5e0 <__kernel_cos>:
 800c5e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5e4:	ec57 6b10 	vmov	r6, r7, d0
 800c5e8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800c5ec:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800c5f0:	ed8d 1b00 	vstr	d1, [sp]
 800c5f4:	d206      	bcs.n	800c604 <__kernel_cos+0x24>
 800c5f6:	4630      	mov	r0, r6
 800c5f8:	4639      	mov	r1, r7
 800c5fa:	f7f4 facd 	bl	8000b98 <__aeabi_d2iz>
 800c5fe:	2800      	cmp	r0, #0
 800c600:	f000 8088 	beq.w	800c714 <__kernel_cos+0x134>
 800c604:	4632      	mov	r2, r6
 800c606:	463b      	mov	r3, r7
 800c608:	4630      	mov	r0, r6
 800c60a:	4639      	mov	r1, r7
 800c60c:	f7f4 f814 	bl	8000638 <__aeabi_dmul>
 800c610:	4b51      	ldr	r3, [pc, #324]	@ (800c758 <__kernel_cos+0x178>)
 800c612:	2200      	movs	r2, #0
 800c614:	4604      	mov	r4, r0
 800c616:	460d      	mov	r5, r1
 800c618:	f7f4 f80e 	bl	8000638 <__aeabi_dmul>
 800c61c:	a340      	add	r3, pc, #256	@ (adr r3, 800c720 <__kernel_cos+0x140>)
 800c61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c622:	4682      	mov	sl, r0
 800c624:	468b      	mov	fp, r1
 800c626:	4620      	mov	r0, r4
 800c628:	4629      	mov	r1, r5
 800c62a:	f7f4 f805 	bl	8000638 <__aeabi_dmul>
 800c62e:	a33e      	add	r3, pc, #248	@ (adr r3, 800c728 <__kernel_cos+0x148>)
 800c630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c634:	f7f3 fe4a 	bl	80002cc <__adddf3>
 800c638:	4622      	mov	r2, r4
 800c63a:	462b      	mov	r3, r5
 800c63c:	f7f3 fffc 	bl	8000638 <__aeabi_dmul>
 800c640:	a33b      	add	r3, pc, #236	@ (adr r3, 800c730 <__kernel_cos+0x150>)
 800c642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c646:	f7f3 fe3f 	bl	80002c8 <__aeabi_dsub>
 800c64a:	4622      	mov	r2, r4
 800c64c:	462b      	mov	r3, r5
 800c64e:	f7f3 fff3 	bl	8000638 <__aeabi_dmul>
 800c652:	a339      	add	r3, pc, #228	@ (adr r3, 800c738 <__kernel_cos+0x158>)
 800c654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c658:	f7f3 fe38 	bl	80002cc <__adddf3>
 800c65c:	4622      	mov	r2, r4
 800c65e:	462b      	mov	r3, r5
 800c660:	f7f3 ffea 	bl	8000638 <__aeabi_dmul>
 800c664:	a336      	add	r3, pc, #216	@ (adr r3, 800c740 <__kernel_cos+0x160>)
 800c666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c66a:	f7f3 fe2d 	bl	80002c8 <__aeabi_dsub>
 800c66e:	4622      	mov	r2, r4
 800c670:	462b      	mov	r3, r5
 800c672:	f7f3 ffe1 	bl	8000638 <__aeabi_dmul>
 800c676:	a334      	add	r3, pc, #208	@ (adr r3, 800c748 <__kernel_cos+0x168>)
 800c678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c67c:	f7f3 fe26 	bl	80002cc <__adddf3>
 800c680:	4622      	mov	r2, r4
 800c682:	462b      	mov	r3, r5
 800c684:	f7f3 ffd8 	bl	8000638 <__aeabi_dmul>
 800c688:	4622      	mov	r2, r4
 800c68a:	462b      	mov	r3, r5
 800c68c:	f7f3 ffd4 	bl	8000638 <__aeabi_dmul>
 800c690:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c694:	4604      	mov	r4, r0
 800c696:	460d      	mov	r5, r1
 800c698:	4630      	mov	r0, r6
 800c69a:	4639      	mov	r1, r7
 800c69c:	f7f3 ffcc 	bl	8000638 <__aeabi_dmul>
 800c6a0:	460b      	mov	r3, r1
 800c6a2:	4602      	mov	r2, r0
 800c6a4:	4629      	mov	r1, r5
 800c6a6:	4620      	mov	r0, r4
 800c6a8:	f7f3 fe0e 	bl	80002c8 <__aeabi_dsub>
 800c6ac:	4b2b      	ldr	r3, [pc, #172]	@ (800c75c <__kernel_cos+0x17c>)
 800c6ae:	4598      	cmp	r8, r3
 800c6b0:	4606      	mov	r6, r0
 800c6b2:	460f      	mov	r7, r1
 800c6b4:	d810      	bhi.n	800c6d8 <__kernel_cos+0xf8>
 800c6b6:	4602      	mov	r2, r0
 800c6b8:	460b      	mov	r3, r1
 800c6ba:	4650      	mov	r0, sl
 800c6bc:	4659      	mov	r1, fp
 800c6be:	f7f3 fe03 	bl	80002c8 <__aeabi_dsub>
 800c6c2:	460b      	mov	r3, r1
 800c6c4:	4926      	ldr	r1, [pc, #152]	@ (800c760 <__kernel_cos+0x180>)
 800c6c6:	4602      	mov	r2, r0
 800c6c8:	2000      	movs	r0, #0
 800c6ca:	f7f3 fdfd 	bl	80002c8 <__aeabi_dsub>
 800c6ce:	ec41 0b10 	vmov	d0, r0, r1
 800c6d2:	b003      	add	sp, #12
 800c6d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6d8:	4b22      	ldr	r3, [pc, #136]	@ (800c764 <__kernel_cos+0x184>)
 800c6da:	4921      	ldr	r1, [pc, #132]	@ (800c760 <__kernel_cos+0x180>)
 800c6dc:	4598      	cmp	r8, r3
 800c6de:	bf8c      	ite	hi
 800c6e0:	4d21      	ldrhi	r5, [pc, #132]	@ (800c768 <__kernel_cos+0x188>)
 800c6e2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800c6e6:	2400      	movs	r4, #0
 800c6e8:	4622      	mov	r2, r4
 800c6ea:	462b      	mov	r3, r5
 800c6ec:	2000      	movs	r0, #0
 800c6ee:	f7f3 fdeb 	bl	80002c8 <__aeabi_dsub>
 800c6f2:	4622      	mov	r2, r4
 800c6f4:	4680      	mov	r8, r0
 800c6f6:	4689      	mov	r9, r1
 800c6f8:	462b      	mov	r3, r5
 800c6fa:	4650      	mov	r0, sl
 800c6fc:	4659      	mov	r1, fp
 800c6fe:	f7f3 fde3 	bl	80002c8 <__aeabi_dsub>
 800c702:	4632      	mov	r2, r6
 800c704:	463b      	mov	r3, r7
 800c706:	f7f3 fddf 	bl	80002c8 <__aeabi_dsub>
 800c70a:	4602      	mov	r2, r0
 800c70c:	460b      	mov	r3, r1
 800c70e:	4640      	mov	r0, r8
 800c710:	4649      	mov	r1, r9
 800c712:	e7da      	b.n	800c6ca <__kernel_cos+0xea>
 800c714:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800c750 <__kernel_cos+0x170>
 800c718:	e7db      	b.n	800c6d2 <__kernel_cos+0xf2>
 800c71a:	bf00      	nop
 800c71c:	f3af 8000 	nop.w
 800c720:	be8838d4 	.word	0xbe8838d4
 800c724:	bda8fae9 	.word	0xbda8fae9
 800c728:	bdb4b1c4 	.word	0xbdb4b1c4
 800c72c:	3e21ee9e 	.word	0x3e21ee9e
 800c730:	809c52ad 	.word	0x809c52ad
 800c734:	3e927e4f 	.word	0x3e927e4f
 800c738:	19cb1590 	.word	0x19cb1590
 800c73c:	3efa01a0 	.word	0x3efa01a0
 800c740:	16c15177 	.word	0x16c15177
 800c744:	3f56c16c 	.word	0x3f56c16c
 800c748:	5555554c 	.word	0x5555554c
 800c74c:	3fa55555 	.word	0x3fa55555
 800c750:	00000000 	.word	0x00000000
 800c754:	3ff00000 	.word	0x3ff00000
 800c758:	3fe00000 	.word	0x3fe00000
 800c75c:	3fd33332 	.word	0x3fd33332
 800c760:	3ff00000 	.word	0x3ff00000
 800c764:	3fe90000 	.word	0x3fe90000
 800c768:	3fd20000 	.word	0x3fd20000
 800c76c:	00000000 	.word	0x00000000

0800c770 <__kernel_sin>:
 800c770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c774:	ec55 4b10 	vmov	r4, r5, d0
 800c778:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800c77c:	b085      	sub	sp, #20
 800c77e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800c782:	ed8d 1b02 	vstr	d1, [sp, #8]
 800c786:	4680      	mov	r8, r0
 800c788:	d205      	bcs.n	800c796 <__kernel_sin+0x26>
 800c78a:	4620      	mov	r0, r4
 800c78c:	4629      	mov	r1, r5
 800c78e:	f7f4 fa03 	bl	8000b98 <__aeabi_d2iz>
 800c792:	2800      	cmp	r0, #0
 800c794:	d052      	beq.n	800c83c <__kernel_sin+0xcc>
 800c796:	4622      	mov	r2, r4
 800c798:	462b      	mov	r3, r5
 800c79a:	4620      	mov	r0, r4
 800c79c:	4629      	mov	r1, r5
 800c79e:	f7f3 ff4b 	bl	8000638 <__aeabi_dmul>
 800c7a2:	4682      	mov	sl, r0
 800c7a4:	468b      	mov	fp, r1
 800c7a6:	4602      	mov	r2, r0
 800c7a8:	460b      	mov	r3, r1
 800c7aa:	4620      	mov	r0, r4
 800c7ac:	4629      	mov	r1, r5
 800c7ae:	f7f3 ff43 	bl	8000638 <__aeabi_dmul>
 800c7b2:	a342      	add	r3, pc, #264	@ (adr r3, 800c8bc <__kernel_sin+0x14c>)
 800c7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7b8:	e9cd 0100 	strd	r0, r1, [sp]
 800c7bc:	4650      	mov	r0, sl
 800c7be:	4659      	mov	r1, fp
 800c7c0:	f7f3 ff3a 	bl	8000638 <__aeabi_dmul>
 800c7c4:	a33f      	add	r3, pc, #252	@ (adr r3, 800c8c4 <__kernel_sin+0x154>)
 800c7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ca:	f7f3 fd7d 	bl	80002c8 <__aeabi_dsub>
 800c7ce:	4652      	mov	r2, sl
 800c7d0:	465b      	mov	r3, fp
 800c7d2:	f7f3 ff31 	bl	8000638 <__aeabi_dmul>
 800c7d6:	a33d      	add	r3, pc, #244	@ (adr r3, 800c8cc <__kernel_sin+0x15c>)
 800c7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7dc:	f7f3 fd76 	bl	80002cc <__adddf3>
 800c7e0:	4652      	mov	r2, sl
 800c7e2:	465b      	mov	r3, fp
 800c7e4:	f7f3 ff28 	bl	8000638 <__aeabi_dmul>
 800c7e8:	a33a      	add	r3, pc, #232	@ (adr r3, 800c8d4 <__kernel_sin+0x164>)
 800c7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ee:	f7f3 fd6b 	bl	80002c8 <__aeabi_dsub>
 800c7f2:	4652      	mov	r2, sl
 800c7f4:	465b      	mov	r3, fp
 800c7f6:	f7f3 ff1f 	bl	8000638 <__aeabi_dmul>
 800c7fa:	a338      	add	r3, pc, #224	@ (adr r3, 800c8dc <__kernel_sin+0x16c>)
 800c7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c800:	f7f3 fd64 	bl	80002cc <__adddf3>
 800c804:	4606      	mov	r6, r0
 800c806:	460f      	mov	r7, r1
 800c808:	f1b8 0f00 	cmp.w	r8, #0
 800c80c:	d11b      	bne.n	800c846 <__kernel_sin+0xd6>
 800c80e:	4602      	mov	r2, r0
 800c810:	460b      	mov	r3, r1
 800c812:	4650      	mov	r0, sl
 800c814:	4659      	mov	r1, fp
 800c816:	f7f3 ff0f 	bl	8000638 <__aeabi_dmul>
 800c81a:	a325      	add	r3, pc, #148	@ (adr r3, 800c8b0 <__kernel_sin+0x140>)
 800c81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c820:	f7f3 fd52 	bl	80002c8 <__aeabi_dsub>
 800c824:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c828:	f7f3 ff06 	bl	8000638 <__aeabi_dmul>
 800c82c:	4602      	mov	r2, r0
 800c82e:	460b      	mov	r3, r1
 800c830:	4620      	mov	r0, r4
 800c832:	4629      	mov	r1, r5
 800c834:	f7f3 fd4a 	bl	80002cc <__adddf3>
 800c838:	4604      	mov	r4, r0
 800c83a:	460d      	mov	r5, r1
 800c83c:	ec45 4b10 	vmov	d0, r4, r5
 800c840:	b005      	add	sp, #20
 800c842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c846:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c84a:	4b1b      	ldr	r3, [pc, #108]	@ (800c8b8 <__kernel_sin+0x148>)
 800c84c:	2200      	movs	r2, #0
 800c84e:	f7f3 fef3 	bl	8000638 <__aeabi_dmul>
 800c852:	4632      	mov	r2, r6
 800c854:	4680      	mov	r8, r0
 800c856:	4689      	mov	r9, r1
 800c858:	463b      	mov	r3, r7
 800c85a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c85e:	f7f3 feeb 	bl	8000638 <__aeabi_dmul>
 800c862:	4602      	mov	r2, r0
 800c864:	460b      	mov	r3, r1
 800c866:	4640      	mov	r0, r8
 800c868:	4649      	mov	r1, r9
 800c86a:	f7f3 fd2d 	bl	80002c8 <__aeabi_dsub>
 800c86e:	4652      	mov	r2, sl
 800c870:	465b      	mov	r3, fp
 800c872:	f7f3 fee1 	bl	8000638 <__aeabi_dmul>
 800c876:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c87a:	f7f3 fd25 	bl	80002c8 <__aeabi_dsub>
 800c87e:	a30c      	add	r3, pc, #48	@ (adr r3, 800c8b0 <__kernel_sin+0x140>)
 800c880:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c884:	4606      	mov	r6, r0
 800c886:	460f      	mov	r7, r1
 800c888:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c88c:	f7f3 fed4 	bl	8000638 <__aeabi_dmul>
 800c890:	4602      	mov	r2, r0
 800c892:	460b      	mov	r3, r1
 800c894:	4630      	mov	r0, r6
 800c896:	4639      	mov	r1, r7
 800c898:	f7f3 fd18 	bl	80002cc <__adddf3>
 800c89c:	4602      	mov	r2, r0
 800c89e:	460b      	mov	r3, r1
 800c8a0:	4620      	mov	r0, r4
 800c8a2:	4629      	mov	r1, r5
 800c8a4:	f7f3 fd10 	bl	80002c8 <__aeabi_dsub>
 800c8a8:	e7c6      	b.n	800c838 <__kernel_sin+0xc8>
 800c8aa:	bf00      	nop
 800c8ac:	f3af 8000 	nop.w
 800c8b0:	55555549 	.word	0x55555549
 800c8b4:	3fc55555 	.word	0x3fc55555
 800c8b8:	3fe00000 	.word	0x3fe00000
 800c8bc:	5acfd57c 	.word	0x5acfd57c
 800c8c0:	3de5d93a 	.word	0x3de5d93a
 800c8c4:	8a2b9ceb 	.word	0x8a2b9ceb
 800c8c8:	3e5ae5e6 	.word	0x3e5ae5e6
 800c8cc:	57b1fe7d 	.word	0x57b1fe7d
 800c8d0:	3ec71de3 	.word	0x3ec71de3
 800c8d4:	19c161d5 	.word	0x19c161d5
 800c8d8:	3f2a01a0 	.word	0x3f2a01a0
 800c8dc:	1110f8a6 	.word	0x1110f8a6
 800c8e0:	3f811111 	.word	0x3f811111
 800c8e4:	00000000 	.word	0x00000000

0800c8e8 <__ieee754_rem_pio2>:
 800c8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8ec:	ec57 6b10 	vmov	r6, r7, d0
 800c8f0:	4bc5      	ldr	r3, [pc, #788]	@ (800cc08 <__ieee754_rem_pio2+0x320>)
 800c8f2:	b08d      	sub	sp, #52	@ 0x34
 800c8f4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800c8f8:	4598      	cmp	r8, r3
 800c8fa:	4604      	mov	r4, r0
 800c8fc:	9704      	str	r7, [sp, #16]
 800c8fe:	d807      	bhi.n	800c910 <__ieee754_rem_pio2+0x28>
 800c900:	2200      	movs	r2, #0
 800c902:	2300      	movs	r3, #0
 800c904:	ed80 0b00 	vstr	d0, [r0]
 800c908:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c90c:	2500      	movs	r5, #0
 800c90e:	e028      	b.n	800c962 <__ieee754_rem_pio2+0x7a>
 800c910:	4bbe      	ldr	r3, [pc, #760]	@ (800cc0c <__ieee754_rem_pio2+0x324>)
 800c912:	4598      	cmp	r8, r3
 800c914:	d878      	bhi.n	800ca08 <__ieee754_rem_pio2+0x120>
 800c916:	9b04      	ldr	r3, [sp, #16]
 800c918:	4dbd      	ldr	r5, [pc, #756]	@ (800cc10 <__ieee754_rem_pio2+0x328>)
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	4630      	mov	r0, r6
 800c91e:	a3ac      	add	r3, pc, #688	@ (adr r3, 800cbd0 <__ieee754_rem_pio2+0x2e8>)
 800c920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c924:	4639      	mov	r1, r7
 800c926:	dd38      	ble.n	800c99a <__ieee754_rem_pio2+0xb2>
 800c928:	f7f3 fcce 	bl	80002c8 <__aeabi_dsub>
 800c92c:	45a8      	cmp	r8, r5
 800c92e:	4606      	mov	r6, r0
 800c930:	460f      	mov	r7, r1
 800c932:	d01a      	beq.n	800c96a <__ieee754_rem_pio2+0x82>
 800c934:	a3a8      	add	r3, pc, #672	@ (adr r3, 800cbd8 <__ieee754_rem_pio2+0x2f0>)
 800c936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c93a:	f7f3 fcc5 	bl	80002c8 <__aeabi_dsub>
 800c93e:	4602      	mov	r2, r0
 800c940:	460b      	mov	r3, r1
 800c942:	4680      	mov	r8, r0
 800c944:	4689      	mov	r9, r1
 800c946:	4630      	mov	r0, r6
 800c948:	4639      	mov	r1, r7
 800c94a:	f7f3 fcbd 	bl	80002c8 <__aeabi_dsub>
 800c94e:	a3a2      	add	r3, pc, #648	@ (adr r3, 800cbd8 <__ieee754_rem_pio2+0x2f0>)
 800c950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c954:	f7f3 fcb8 	bl	80002c8 <__aeabi_dsub>
 800c958:	e9c4 8900 	strd	r8, r9, [r4]
 800c95c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c960:	2501      	movs	r5, #1
 800c962:	4628      	mov	r0, r5
 800c964:	b00d      	add	sp, #52	@ 0x34
 800c966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c96a:	a39d      	add	r3, pc, #628	@ (adr r3, 800cbe0 <__ieee754_rem_pio2+0x2f8>)
 800c96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c970:	f7f3 fcaa 	bl	80002c8 <__aeabi_dsub>
 800c974:	a39c      	add	r3, pc, #624	@ (adr r3, 800cbe8 <__ieee754_rem_pio2+0x300>)
 800c976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c97a:	4606      	mov	r6, r0
 800c97c:	460f      	mov	r7, r1
 800c97e:	f7f3 fca3 	bl	80002c8 <__aeabi_dsub>
 800c982:	4602      	mov	r2, r0
 800c984:	460b      	mov	r3, r1
 800c986:	4680      	mov	r8, r0
 800c988:	4689      	mov	r9, r1
 800c98a:	4630      	mov	r0, r6
 800c98c:	4639      	mov	r1, r7
 800c98e:	f7f3 fc9b 	bl	80002c8 <__aeabi_dsub>
 800c992:	a395      	add	r3, pc, #596	@ (adr r3, 800cbe8 <__ieee754_rem_pio2+0x300>)
 800c994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c998:	e7dc      	b.n	800c954 <__ieee754_rem_pio2+0x6c>
 800c99a:	f7f3 fc97 	bl	80002cc <__adddf3>
 800c99e:	45a8      	cmp	r8, r5
 800c9a0:	4606      	mov	r6, r0
 800c9a2:	460f      	mov	r7, r1
 800c9a4:	d018      	beq.n	800c9d8 <__ieee754_rem_pio2+0xf0>
 800c9a6:	a38c      	add	r3, pc, #560	@ (adr r3, 800cbd8 <__ieee754_rem_pio2+0x2f0>)
 800c9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ac:	f7f3 fc8e 	bl	80002cc <__adddf3>
 800c9b0:	4602      	mov	r2, r0
 800c9b2:	460b      	mov	r3, r1
 800c9b4:	4680      	mov	r8, r0
 800c9b6:	4689      	mov	r9, r1
 800c9b8:	4630      	mov	r0, r6
 800c9ba:	4639      	mov	r1, r7
 800c9bc:	f7f3 fc84 	bl	80002c8 <__aeabi_dsub>
 800c9c0:	a385      	add	r3, pc, #532	@ (adr r3, 800cbd8 <__ieee754_rem_pio2+0x2f0>)
 800c9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c6:	f7f3 fc81 	bl	80002cc <__adddf3>
 800c9ca:	f04f 35ff 	mov.w	r5, #4294967295
 800c9ce:	e9c4 8900 	strd	r8, r9, [r4]
 800c9d2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c9d6:	e7c4      	b.n	800c962 <__ieee754_rem_pio2+0x7a>
 800c9d8:	a381      	add	r3, pc, #516	@ (adr r3, 800cbe0 <__ieee754_rem_pio2+0x2f8>)
 800c9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9de:	f7f3 fc75 	bl	80002cc <__adddf3>
 800c9e2:	a381      	add	r3, pc, #516	@ (adr r3, 800cbe8 <__ieee754_rem_pio2+0x300>)
 800c9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9e8:	4606      	mov	r6, r0
 800c9ea:	460f      	mov	r7, r1
 800c9ec:	f7f3 fc6e 	bl	80002cc <__adddf3>
 800c9f0:	4602      	mov	r2, r0
 800c9f2:	460b      	mov	r3, r1
 800c9f4:	4680      	mov	r8, r0
 800c9f6:	4689      	mov	r9, r1
 800c9f8:	4630      	mov	r0, r6
 800c9fa:	4639      	mov	r1, r7
 800c9fc:	f7f3 fc64 	bl	80002c8 <__aeabi_dsub>
 800ca00:	a379      	add	r3, pc, #484	@ (adr r3, 800cbe8 <__ieee754_rem_pio2+0x300>)
 800ca02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca06:	e7de      	b.n	800c9c6 <__ieee754_rem_pio2+0xde>
 800ca08:	4b82      	ldr	r3, [pc, #520]	@ (800cc14 <__ieee754_rem_pio2+0x32c>)
 800ca0a:	4598      	cmp	r8, r3
 800ca0c:	f200 80d1 	bhi.w	800cbb2 <__ieee754_rem_pio2+0x2ca>
 800ca10:	f000 f966 	bl	800cce0 <fabs>
 800ca14:	ec57 6b10 	vmov	r6, r7, d0
 800ca18:	a375      	add	r3, pc, #468	@ (adr r3, 800cbf0 <__ieee754_rem_pio2+0x308>)
 800ca1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca1e:	4630      	mov	r0, r6
 800ca20:	4639      	mov	r1, r7
 800ca22:	f7f3 fe09 	bl	8000638 <__aeabi_dmul>
 800ca26:	4b7c      	ldr	r3, [pc, #496]	@ (800cc18 <__ieee754_rem_pio2+0x330>)
 800ca28:	2200      	movs	r2, #0
 800ca2a:	f7f3 fc4f 	bl	80002cc <__adddf3>
 800ca2e:	f7f4 f8b3 	bl	8000b98 <__aeabi_d2iz>
 800ca32:	4605      	mov	r5, r0
 800ca34:	f7f3 fd96 	bl	8000564 <__aeabi_i2d>
 800ca38:	4602      	mov	r2, r0
 800ca3a:	460b      	mov	r3, r1
 800ca3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ca40:	a363      	add	r3, pc, #396	@ (adr r3, 800cbd0 <__ieee754_rem_pio2+0x2e8>)
 800ca42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca46:	f7f3 fdf7 	bl	8000638 <__aeabi_dmul>
 800ca4a:	4602      	mov	r2, r0
 800ca4c:	460b      	mov	r3, r1
 800ca4e:	4630      	mov	r0, r6
 800ca50:	4639      	mov	r1, r7
 800ca52:	f7f3 fc39 	bl	80002c8 <__aeabi_dsub>
 800ca56:	a360      	add	r3, pc, #384	@ (adr r3, 800cbd8 <__ieee754_rem_pio2+0x2f0>)
 800ca58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca5c:	4682      	mov	sl, r0
 800ca5e:	468b      	mov	fp, r1
 800ca60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca64:	f7f3 fde8 	bl	8000638 <__aeabi_dmul>
 800ca68:	2d1f      	cmp	r5, #31
 800ca6a:	4606      	mov	r6, r0
 800ca6c:	460f      	mov	r7, r1
 800ca6e:	dc0c      	bgt.n	800ca8a <__ieee754_rem_pio2+0x1a2>
 800ca70:	4b6a      	ldr	r3, [pc, #424]	@ (800cc1c <__ieee754_rem_pio2+0x334>)
 800ca72:	1e6a      	subs	r2, r5, #1
 800ca74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca78:	4543      	cmp	r3, r8
 800ca7a:	d006      	beq.n	800ca8a <__ieee754_rem_pio2+0x1a2>
 800ca7c:	4632      	mov	r2, r6
 800ca7e:	463b      	mov	r3, r7
 800ca80:	4650      	mov	r0, sl
 800ca82:	4659      	mov	r1, fp
 800ca84:	f7f3 fc20 	bl	80002c8 <__aeabi_dsub>
 800ca88:	e00e      	b.n	800caa8 <__ieee754_rem_pio2+0x1c0>
 800ca8a:	463b      	mov	r3, r7
 800ca8c:	4632      	mov	r2, r6
 800ca8e:	4650      	mov	r0, sl
 800ca90:	4659      	mov	r1, fp
 800ca92:	f7f3 fc19 	bl	80002c8 <__aeabi_dsub>
 800ca96:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ca9a:	9305      	str	r3, [sp, #20]
 800ca9c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800caa0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800caa4:	2b10      	cmp	r3, #16
 800caa6:	dc02      	bgt.n	800caae <__ieee754_rem_pio2+0x1c6>
 800caa8:	e9c4 0100 	strd	r0, r1, [r4]
 800caac:	e039      	b.n	800cb22 <__ieee754_rem_pio2+0x23a>
 800caae:	a34c      	add	r3, pc, #304	@ (adr r3, 800cbe0 <__ieee754_rem_pio2+0x2f8>)
 800cab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cab8:	f7f3 fdbe 	bl	8000638 <__aeabi_dmul>
 800cabc:	4606      	mov	r6, r0
 800cabe:	460f      	mov	r7, r1
 800cac0:	4602      	mov	r2, r0
 800cac2:	460b      	mov	r3, r1
 800cac4:	4650      	mov	r0, sl
 800cac6:	4659      	mov	r1, fp
 800cac8:	f7f3 fbfe 	bl	80002c8 <__aeabi_dsub>
 800cacc:	4602      	mov	r2, r0
 800cace:	460b      	mov	r3, r1
 800cad0:	4680      	mov	r8, r0
 800cad2:	4689      	mov	r9, r1
 800cad4:	4650      	mov	r0, sl
 800cad6:	4659      	mov	r1, fp
 800cad8:	f7f3 fbf6 	bl	80002c8 <__aeabi_dsub>
 800cadc:	4632      	mov	r2, r6
 800cade:	463b      	mov	r3, r7
 800cae0:	f7f3 fbf2 	bl	80002c8 <__aeabi_dsub>
 800cae4:	a340      	add	r3, pc, #256	@ (adr r3, 800cbe8 <__ieee754_rem_pio2+0x300>)
 800cae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caea:	4606      	mov	r6, r0
 800caec:	460f      	mov	r7, r1
 800caee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800caf2:	f7f3 fda1 	bl	8000638 <__aeabi_dmul>
 800caf6:	4632      	mov	r2, r6
 800caf8:	463b      	mov	r3, r7
 800cafa:	f7f3 fbe5 	bl	80002c8 <__aeabi_dsub>
 800cafe:	4602      	mov	r2, r0
 800cb00:	460b      	mov	r3, r1
 800cb02:	4606      	mov	r6, r0
 800cb04:	460f      	mov	r7, r1
 800cb06:	4640      	mov	r0, r8
 800cb08:	4649      	mov	r1, r9
 800cb0a:	f7f3 fbdd 	bl	80002c8 <__aeabi_dsub>
 800cb0e:	9a05      	ldr	r2, [sp, #20]
 800cb10:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cb14:	1ad3      	subs	r3, r2, r3
 800cb16:	2b31      	cmp	r3, #49	@ 0x31
 800cb18:	dc20      	bgt.n	800cb5c <__ieee754_rem_pio2+0x274>
 800cb1a:	e9c4 0100 	strd	r0, r1, [r4]
 800cb1e:	46c2      	mov	sl, r8
 800cb20:	46cb      	mov	fp, r9
 800cb22:	e9d4 8900 	ldrd	r8, r9, [r4]
 800cb26:	4650      	mov	r0, sl
 800cb28:	4642      	mov	r2, r8
 800cb2a:	464b      	mov	r3, r9
 800cb2c:	4659      	mov	r1, fp
 800cb2e:	f7f3 fbcb 	bl	80002c8 <__aeabi_dsub>
 800cb32:	463b      	mov	r3, r7
 800cb34:	4632      	mov	r2, r6
 800cb36:	f7f3 fbc7 	bl	80002c8 <__aeabi_dsub>
 800cb3a:	9b04      	ldr	r3, [sp, #16]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800cb42:	f6bf af0e 	bge.w	800c962 <__ieee754_rem_pio2+0x7a>
 800cb46:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800cb4a:	6063      	str	r3, [r4, #4]
 800cb4c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cb50:	f8c4 8000 	str.w	r8, [r4]
 800cb54:	60a0      	str	r0, [r4, #8]
 800cb56:	60e3      	str	r3, [r4, #12]
 800cb58:	426d      	negs	r5, r5
 800cb5a:	e702      	b.n	800c962 <__ieee754_rem_pio2+0x7a>
 800cb5c:	a326      	add	r3, pc, #152	@ (adr r3, 800cbf8 <__ieee754_rem_pio2+0x310>)
 800cb5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb66:	f7f3 fd67 	bl	8000638 <__aeabi_dmul>
 800cb6a:	4606      	mov	r6, r0
 800cb6c:	460f      	mov	r7, r1
 800cb6e:	4602      	mov	r2, r0
 800cb70:	460b      	mov	r3, r1
 800cb72:	4640      	mov	r0, r8
 800cb74:	4649      	mov	r1, r9
 800cb76:	f7f3 fba7 	bl	80002c8 <__aeabi_dsub>
 800cb7a:	4602      	mov	r2, r0
 800cb7c:	460b      	mov	r3, r1
 800cb7e:	4682      	mov	sl, r0
 800cb80:	468b      	mov	fp, r1
 800cb82:	4640      	mov	r0, r8
 800cb84:	4649      	mov	r1, r9
 800cb86:	f7f3 fb9f 	bl	80002c8 <__aeabi_dsub>
 800cb8a:	4632      	mov	r2, r6
 800cb8c:	463b      	mov	r3, r7
 800cb8e:	f7f3 fb9b 	bl	80002c8 <__aeabi_dsub>
 800cb92:	a31b      	add	r3, pc, #108	@ (adr r3, 800cc00 <__ieee754_rem_pio2+0x318>)
 800cb94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb98:	4606      	mov	r6, r0
 800cb9a:	460f      	mov	r7, r1
 800cb9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cba0:	f7f3 fd4a 	bl	8000638 <__aeabi_dmul>
 800cba4:	4632      	mov	r2, r6
 800cba6:	463b      	mov	r3, r7
 800cba8:	f7f3 fb8e 	bl	80002c8 <__aeabi_dsub>
 800cbac:	4606      	mov	r6, r0
 800cbae:	460f      	mov	r7, r1
 800cbb0:	e764      	b.n	800ca7c <__ieee754_rem_pio2+0x194>
 800cbb2:	4b1b      	ldr	r3, [pc, #108]	@ (800cc20 <__ieee754_rem_pio2+0x338>)
 800cbb4:	4598      	cmp	r8, r3
 800cbb6:	d935      	bls.n	800cc24 <__ieee754_rem_pio2+0x33c>
 800cbb8:	4632      	mov	r2, r6
 800cbba:	463b      	mov	r3, r7
 800cbbc:	4630      	mov	r0, r6
 800cbbe:	4639      	mov	r1, r7
 800cbc0:	f7f3 fb82 	bl	80002c8 <__aeabi_dsub>
 800cbc4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800cbc8:	e9c4 0100 	strd	r0, r1, [r4]
 800cbcc:	e69e      	b.n	800c90c <__ieee754_rem_pio2+0x24>
 800cbce:	bf00      	nop
 800cbd0:	54400000 	.word	0x54400000
 800cbd4:	3ff921fb 	.word	0x3ff921fb
 800cbd8:	1a626331 	.word	0x1a626331
 800cbdc:	3dd0b461 	.word	0x3dd0b461
 800cbe0:	1a600000 	.word	0x1a600000
 800cbe4:	3dd0b461 	.word	0x3dd0b461
 800cbe8:	2e037073 	.word	0x2e037073
 800cbec:	3ba3198a 	.word	0x3ba3198a
 800cbf0:	6dc9c883 	.word	0x6dc9c883
 800cbf4:	3fe45f30 	.word	0x3fe45f30
 800cbf8:	2e000000 	.word	0x2e000000
 800cbfc:	3ba3198a 	.word	0x3ba3198a
 800cc00:	252049c1 	.word	0x252049c1
 800cc04:	397b839a 	.word	0x397b839a
 800cc08:	3fe921fb 	.word	0x3fe921fb
 800cc0c:	4002d97b 	.word	0x4002d97b
 800cc10:	3ff921fb 	.word	0x3ff921fb
 800cc14:	413921fb 	.word	0x413921fb
 800cc18:	3fe00000 	.word	0x3fe00000
 800cc1c:	0800d950 	.word	0x0800d950
 800cc20:	7fefffff 	.word	0x7fefffff
 800cc24:	ea4f 5528 	mov.w	r5, r8, asr #20
 800cc28:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800cc2c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800cc30:	4630      	mov	r0, r6
 800cc32:	460f      	mov	r7, r1
 800cc34:	f7f3 ffb0 	bl	8000b98 <__aeabi_d2iz>
 800cc38:	f7f3 fc94 	bl	8000564 <__aeabi_i2d>
 800cc3c:	4602      	mov	r2, r0
 800cc3e:	460b      	mov	r3, r1
 800cc40:	4630      	mov	r0, r6
 800cc42:	4639      	mov	r1, r7
 800cc44:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cc48:	f7f3 fb3e 	bl	80002c8 <__aeabi_dsub>
 800cc4c:	4b22      	ldr	r3, [pc, #136]	@ (800ccd8 <__ieee754_rem_pio2+0x3f0>)
 800cc4e:	2200      	movs	r2, #0
 800cc50:	f7f3 fcf2 	bl	8000638 <__aeabi_dmul>
 800cc54:	460f      	mov	r7, r1
 800cc56:	4606      	mov	r6, r0
 800cc58:	f7f3 ff9e 	bl	8000b98 <__aeabi_d2iz>
 800cc5c:	f7f3 fc82 	bl	8000564 <__aeabi_i2d>
 800cc60:	4602      	mov	r2, r0
 800cc62:	460b      	mov	r3, r1
 800cc64:	4630      	mov	r0, r6
 800cc66:	4639      	mov	r1, r7
 800cc68:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cc6c:	f7f3 fb2c 	bl	80002c8 <__aeabi_dsub>
 800cc70:	4b19      	ldr	r3, [pc, #100]	@ (800ccd8 <__ieee754_rem_pio2+0x3f0>)
 800cc72:	2200      	movs	r2, #0
 800cc74:	f7f3 fce0 	bl	8000638 <__aeabi_dmul>
 800cc78:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800cc7c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800cc80:	f04f 0803 	mov.w	r8, #3
 800cc84:	2600      	movs	r6, #0
 800cc86:	2700      	movs	r7, #0
 800cc88:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800cc8c:	4632      	mov	r2, r6
 800cc8e:	463b      	mov	r3, r7
 800cc90:	46c2      	mov	sl, r8
 800cc92:	f108 38ff 	add.w	r8, r8, #4294967295
 800cc96:	f7f3 ff37 	bl	8000b08 <__aeabi_dcmpeq>
 800cc9a:	2800      	cmp	r0, #0
 800cc9c:	d1f4      	bne.n	800cc88 <__ieee754_rem_pio2+0x3a0>
 800cc9e:	4b0f      	ldr	r3, [pc, #60]	@ (800ccdc <__ieee754_rem_pio2+0x3f4>)
 800cca0:	9301      	str	r3, [sp, #4]
 800cca2:	2302      	movs	r3, #2
 800cca4:	9300      	str	r3, [sp, #0]
 800cca6:	462a      	mov	r2, r5
 800cca8:	4653      	mov	r3, sl
 800ccaa:	4621      	mov	r1, r4
 800ccac:	a806      	add	r0, sp, #24
 800ccae:	f000 f81f 	bl	800ccf0 <__kernel_rem_pio2>
 800ccb2:	9b04      	ldr	r3, [sp, #16]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	4605      	mov	r5, r0
 800ccb8:	f6bf ae53 	bge.w	800c962 <__ieee754_rem_pio2+0x7a>
 800ccbc:	e9d4 2100 	ldrd	r2, r1, [r4]
 800ccc0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ccc4:	e9c4 2300 	strd	r2, r3, [r4]
 800ccc8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800cccc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ccd0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800ccd4:	e740      	b.n	800cb58 <__ieee754_rem_pio2+0x270>
 800ccd6:	bf00      	nop
 800ccd8:	41700000 	.word	0x41700000
 800ccdc:	0800d9d0 	.word	0x0800d9d0

0800cce0 <fabs>:
 800cce0:	ec51 0b10 	vmov	r0, r1, d0
 800cce4:	4602      	mov	r2, r0
 800cce6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ccea:	ec43 2b10 	vmov	d0, r2, r3
 800ccee:	4770      	bx	lr

0800ccf0 <__kernel_rem_pio2>:
 800ccf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccf4:	ed2d 8b02 	vpush	{d8}
 800ccf8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800ccfc:	f112 0f14 	cmn.w	r2, #20
 800cd00:	9306      	str	r3, [sp, #24]
 800cd02:	9104      	str	r1, [sp, #16]
 800cd04:	4bbe      	ldr	r3, [pc, #760]	@ (800d000 <__kernel_rem_pio2+0x310>)
 800cd06:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800cd08:	9008      	str	r0, [sp, #32]
 800cd0a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cd0e:	9300      	str	r3, [sp, #0]
 800cd10:	9b06      	ldr	r3, [sp, #24]
 800cd12:	f103 33ff 	add.w	r3, r3, #4294967295
 800cd16:	bfa8      	it	ge
 800cd18:	1ed4      	subge	r4, r2, #3
 800cd1a:	9305      	str	r3, [sp, #20]
 800cd1c:	bfb2      	itee	lt
 800cd1e:	2400      	movlt	r4, #0
 800cd20:	2318      	movge	r3, #24
 800cd22:	fb94 f4f3 	sdivge	r4, r4, r3
 800cd26:	f06f 0317 	mvn.w	r3, #23
 800cd2a:	fb04 3303 	mla	r3, r4, r3, r3
 800cd2e:	eb03 0b02 	add.w	fp, r3, r2
 800cd32:	9b00      	ldr	r3, [sp, #0]
 800cd34:	9a05      	ldr	r2, [sp, #20]
 800cd36:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800cff0 <__kernel_rem_pio2+0x300>
 800cd3a:	eb03 0802 	add.w	r8, r3, r2
 800cd3e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800cd40:	1aa7      	subs	r7, r4, r2
 800cd42:	ae20      	add	r6, sp, #128	@ 0x80
 800cd44:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800cd48:	2500      	movs	r5, #0
 800cd4a:	4545      	cmp	r5, r8
 800cd4c:	dd13      	ble.n	800cd76 <__kernel_rem_pio2+0x86>
 800cd4e:	9b06      	ldr	r3, [sp, #24]
 800cd50:	aa20      	add	r2, sp, #128	@ 0x80
 800cd52:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800cd56:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800cd5a:	f04f 0800 	mov.w	r8, #0
 800cd5e:	9b00      	ldr	r3, [sp, #0]
 800cd60:	4598      	cmp	r8, r3
 800cd62:	dc31      	bgt.n	800cdc8 <__kernel_rem_pio2+0xd8>
 800cd64:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800cff0 <__kernel_rem_pio2+0x300>
 800cd68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cd6c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cd70:	462f      	mov	r7, r5
 800cd72:	2600      	movs	r6, #0
 800cd74:	e01b      	b.n	800cdae <__kernel_rem_pio2+0xbe>
 800cd76:	42ef      	cmn	r7, r5
 800cd78:	d407      	bmi.n	800cd8a <__kernel_rem_pio2+0x9a>
 800cd7a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800cd7e:	f7f3 fbf1 	bl	8000564 <__aeabi_i2d>
 800cd82:	e8e6 0102 	strd	r0, r1, [r6], #8
 800cd86:	3501      	adds	r5, #1
 800cd88:	e7df      	b.n	800cd4a <__kernel_rem_pio2+0x5a>
 800cd8a:	ec51 0b18 	vmov	r0, r1, d8
 800cd8e:	e7f8      	b.n	800cd82 <__kernel_rem_pio2+0x92>
 800cd90:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd94:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800cd98:	f7f3 fc4e 	bl	8000638 <__aeabi_dmul>
 800cd9c:	4602      	mov	r2, r0
 800cd9e:	460b      	mov	r3, r1
 800cda0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cda4:	f7f3 fa92 	bl	80002cc <__adddf3>
 800cda8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cdac:	3601      	adds	r6, #1
 800cdae:	9b05      	ldr	r3, [sp, #20]
 800cdb0:	429e      	cmp	r6, r3
 800cdb2:	f1a7 0708 	sub.w	r7, r7, #8
 800cdb6:	ddeb      	ble.n	800cd90 <__kernel_rem_pio2+0xa0>
 800cdb8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cdbc:	f108 0801 	add.w	r8, r8, #1
 800cdc0:	ecaa 7b02 	vstmia	sl!, {d7}
 800cdc4:	3508      	adds	r5, #8
 800cdc6:	e7ca      	b.n	800cd5e <__kernel_rem_pio2+0x6e>
 800cdc8:	9b00      	ldr	r3, [sp, #0]
 800cdca:	f8dd 8000 	ldr.w	r8, [sp]
 800cdce:	aa0c      	add	r2, sp, #48	@ 0x30
 800cdd0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cdd4:	930a      	str	r3, [sp, #40]	@ 0x28
 800cdd6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800cdd8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800cddc:	9309      	str	r3, [sp, #36]	@ 0x24
 800cdde:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800cde2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cde4:	ab98      	add	r3, sp, #608	@ 0x260
 800cde6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800cdea:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800cdee:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cdf2:	ac0c      	add	r4, sp, #48	@ 0x30
 800cdf4:	ab70      	add	r3, sp, #448	@ 0x1c0
 800cdf6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800cdfa:	46a1      	mov	r9, r4
 800cdfc:	46c2      	mov	sl, r8
 800cdfe:	f1ba 0f00 	cmp.w	sl, #0
 800ce02:	f1a5 0508 	sub.w	r5, r5, #8
 800ce06:	dc77      	bgt.n	800cef8 <__kernel_rem_pio2+0x208>
 800ce08:	4658      	mov	r0, fp
 800ce0a:	ed9d 0b02 	vldr	d0, [sp, #8]
 800ce0e:	f000 fac7 	bl	800d3a0 <scalbn>
 800ce12:	ec57 6b10 	vmov	r6, r7, d0
 800ce16:	2200      	movs	r2, #0
 800ce18:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800ce1c:	4630      	mov	r0, r6
 800ce1e:	4639      	mov	r1, r7
 800ce20:	f7f3 fc0a 	bl	8000638 <__aeabi_dmul>
 800ce24:	ec41 0b10 	vmov	d0, r0, r1
 800ce28:	f000 fb3a 	bl	800d4a0 <floor>
 800ce2c:	4b75      	ldr	r3, [pc, #468]	@ (800d004 <__kernel_rem_pio2+0x314>)
 800ce2e:	ec51 0b10 	vmov	r0, r1, d0
 800ce32:	2200      	movs	r2, #0
 800ce34:	f7f3 fc00 	bl	8000638 <__aeabi_dmul>
 800ce38:	4602      	mov	r2, r0
 800ce3a:	460b      	mov	r3, r1
 800ce3c:	4630      	mov	r0, r6
 800ce3e:	4639      	mov	r1, r7
 800ce40:	f7f3 fa42 	bl	80002c8 <__aeabi_dsub>
 800ce44:	460f      	mov	r7, r1
 800ce46:	4606      	mov	r6, r0
 800ce48:	f7f3 fea6 	bl	8000b98 <__aeabi_d2iz>
 800ce4c:	9002      	str	r0, [sp, #8]
 800ce4e:	f7f3 fb89 	bl	8000564 <__aeabi_i2d>
 800ce52:	4602      	mov	r2, r0
 800ce54:	460b      	mov	r3, r1
 800ce56:	4630      	mov	r0, r6
 800ce58:	4639      	mov	r1, r7
 800ce5a:	f7f3 fa35 	bl	80002c8 <__aeabi_dsub>
 800ce5e:	f1bb 0f00 	cmp.w	fp, #0
 800ce62:	4606      	mov	r6, r0
 800ce64:	460f      	mov	r7, r1
 800ce66:	dd6c      	ble.n	800cf42 <__kernel_rem_pio2+0x252>
 800ce68:	f108 31ff 	add.w	r1, r8, #4294967295
 800ce6c:	ab0c      	add	r3, sp, #48	@ 0x30
 800ce6e:	9d02      	ldr	r5, [sp, #8]
 800ce70:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ce74:	f1cb 0018 	rsb	r0, fp, #24
 800ce78:	fa43 f200 	asr.w	r2, r3, r0
 800ce7c:	4415      	add	r5, r2
 800ce7e:	4082      	lsls	r2, r0
 800ce80:	1a9b      	subs	r3, r3, r2
 800ce82:	aa0c      	add	r2, sp, #48	@ 0x30
 800ce84:	9502      	str	r5, [sp, #8]
 800ce86:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800ce8a:	f1cb 0217 	rsb	r2, fp, #23
 800ce8e:	fa43 f902 	asr.w	r9, r3, r2
 800ce92:	f1b9 0f00 	cmp.w	r9, #0
 800ce96:	dd64      	ble.n	800cf62 <__kernel_rem_pio2+0x272>
 800ce98:	9b02      	ldr	r3, [sp, #8]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	3301      	adds	r3, #1
 800ce9e:	9302      	str	r3, [sp, #8]
 800cea0:	4615      	mov	r5, r2
 800cea2:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800cea6:	4590      	cmp	r8, r2
 800cea8:	f300 80b8 	bgt.w	800d01c <__kernel_rem_pio2+0x32c>
 800ceac:	f1bb 0f00 	cmp.w	fp, #0
 800ceb0:	dd07      	ble.n	800cec2 <__kernel_rem_pio2+0x1d2>
 800ceb2:	f1bb 0f01 	cmp.w	fp, #1
 800ceb6:	f000 80bf 	beq.w	800d038 <__kernel_rem_pio2+0x348>
 800ceba:	f1bb 0f02 	cmp.w	fp, #2
 800cebe:	f000 80c6 	beq.w	800d04e <__kernel_rem_pio2+0x35e>
 800cec2:	f1b9 0f02 	cmp.w	r9, #2
 800cec6:	d14c      	bne.n	800cf62 <__kernel_rem_pio2+0x272>
 800cec8:	4632      	mov	r2, r6
 800ceca:	463b      	mov	r3, r7
 800cecc:	494e      	ldr	r1, [pc, #312]	@ (800d008 <__kernel_rem_pio2+0x318>)
 800cece:	2000      	movs	r0, #0
 800ced0:	f7f3 f9fa 	bl	80002c8 <__aeabi_dsub>
 800ced4:	4606      	mov	r6, r0
 800ced6:	460f      	mov	r7, r1
 800ced8:	2d00      	cmp	r5, #0
 800ceda:	d042      	beq.n	800cf62 <__kernel_rem_pio2+0x272>
 800cedc:	4658      	mov	r0, fp
 800cede:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800cff8 <__kernel_rem_pio2+0x308>
 800cee2:	f000 fa5d 	bl	800d3a0 <scalbn>
 800cee6:	4630      	mov	r0, r6
 800cee8:	4639      	mov	r1, r7
 800ceea:	ec53 2b10 	vmov	r2, r3, d0
 800ceee:	f7f3 f9eb 	bl	80002c8 <__aeabi_dsub>
 800cef2:	4606      	mov	r6, r0
 800cef4:	460f      	mov	r7, r1
 800cef6:	e034      	b.n	800cf62 <__kernel_rem_pio2+0x272>
 800cef8:	4b44      	ldr	r3, [pc, #272]	@ (800d00c <__kernel_rem_pio2+0x31c>)
 800cefa:	2200      	movs	r2, #0
 800cefc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf00:	f7f3 fb9a 	bl	8000638 <__aeabi_dmul>
 800cf04:	f7f3 fe48 	bl	8000b98 <__aeabi_d2iz>
 800cf08:	f7f3 fb2c 	bl	8000564 <__aeabi_i2d>
 800cf0c:	4b40      	ldr	r3, [pc, #256]	@ (800d010 <__kernel_rem_pio2+0x320>)
 800cf0e:	2200      	movs	r2, #0
 800cf10:	4606      	mov	r6, r0
 800cf12:	460f      	mov	r7, r1
 800cf14:	f7f3 fb90 	bl	8000638 <__aeabi_dmul>
 800cf18:	4602      	mov	r2, r0
 800cf1a:	460b      	mov	r3, r1
 800cf1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf20:	f7f3 f9d2 	bl	80002c8 <__aeabi_dsub>
 800cf24:	f7f3 fe38 	bl	8000b98 <__aeabi_d2iz>
 800cf28:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cf2c:	f849 0b04 	str.w	r0, [r9], #4
 800cf30:	4639      	mov	r1, r7
 800cf32:	4630      	mov	r0, r6
 800cf34:	f7f3 f9ca 	bl	80002cc <__adddf3>
 800cf38:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cf3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf40:	e75d      	b.n	800cdfe <__kernel_rem_pio2+0x10e>
 800cf42:	d107      	bne.n	800cf54 <__kernel_rem_pio2+0x264>
 800cf44:	f108 33ff 	add.w	r3, r8, #4294967295
 800cf48:	aa0c      	add	r2, sp, #48	@ 0x30
 800cf4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf4e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800cf52:	e79e      	b.n	800ce92 <__kernel_rem_pio2+0x1a2>
 800cf54:	4b2f      	ldr	r3, [pc, #188]	@ (800d014 <__kernel_rem_pio2+0x324>)
 800cf56:	2200      	movs	r2, #0
 800cf58:	f7f3 fdf4 	bl	8000b44 <__aeabi_dcmpge>
 800cf5c:	2800      	cmp	r0, #0
 800cf5e:	d143      	bne.n	800cfe8 <__kernel_rem_pio2+0x2f8>
 800cf60:	4681      	mov	r9, r0
 800cf62:	2200      	movs	r2, #0
 800cf64:	2300      	movs	r3, #0
 800cf66:	4630      	mov	r0, r6
 800cf68:	4639      	mov	r1, r7
 800cf6a:	f7f3 fdcd 	bl	8000b08 <__aeabi_dcmpeq>
 800cf6e:	2800      	cmp	r0, #0
 800cf70:	f000 80bf 	beq.w	800d0f2 <__kernel_rem_pio2+0x402>
 800cf74:	f108 33ff 	add.w	r3, r8, #4294967295
 800cf78:	2200      	movs	r2, #0
 800cf7a:	9900      	ldr	r1, [sp, #0]
 800cf7c:	428b      	cmp	r3, r1
 800cf7e:	da6e      	bge.n	800d05e <__kernel_rem_pio2+0x36e>
 800cf80:	2a00      	cmp	r2, #0
 800cf82:	f000 8089 	beq.w	800d098 <__kernel_rem_pio2+0x3a8>
 800cf86:	f108 38ff 	add.w	r8, r8, #4294967295
 800cf8a:	ab0c      	add	r3, sp, #48	@ 0x30
 800cf8c:	f1ab 0b18 	sub.w	fp, fp, #24
 800cf90:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d0f6      	beq.n	800cf86 <__kernel_rem_pio2+0x296>
 800cf98:	4658      	mov	r0, fp
 800cf9a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800cff8 <__kernel_rem_pio2+0x308>
 800cf9e:	f000 f9ff 	bl	800d3a0 <scalbn>
 800cfa2:	f108 0301 	add.w	r3, r8, #1
 800cfa6:	00da      	lsls	r2, r3, #3
 800cfa8:	9205      	str	r2, [sp, #20]
 800cfaa:	ec55 4b10 	vmov	r4, r5, d0
 800cfae:	aa70      	add	r2, sp, #448	@ 0x1c0
 800cfb0:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800d00c <__kernel_rem_pio2+0x31c>
 800cfb4:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800cfb8:	4646      	mov	r6, r8
 800cfba:	f04f 0a00 	mov.w	sl, #0
 800cfbe:	2e00      	cmp	r6, #0
 800cfc0:	f280 80cf 	bge.w	800d162 <__kernel_rem_pio2+0x472>
 800cfc4:	4644      	mov	r4, r8
 800cfc6:	2c00      	cmp	r4, #0
 800cfc8:	f2c0 80fd 	blt.w	800d1c6 <__kernel_rem_pio2+0x4d6>
 800cfcc:	4b12      	ldr	r3, [pc, #72]	@ (800d018 <__kernel_rem_pio2+0x328>)
 800cfce:	461f      	mov	r7, r3
 800cfd0:	ab70      	add	r3, sp, #448	@ 0x1c0
 800cfd2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cfd6:	9306      	str	r3, [sp, #24]
 800cfd8:	f04f 0a00 	mov.w	sl, #0
 800cfdc:	f04f 0b00 	mov.w	fp, #0
 800cfe0:	2600      	movs	r6, #0
 800cfe2:	eba8 0504 	sub.w	r5, r8, r4
 800cfe6:	e0e2      	b.n	800d1ae <__kernel_rem_pio2+0x4be>
 800cfe8:	f04f 0902 	mov.w	r9, #2
 800cfec:	e754      	b.n	800ce98 <__kernel_rem_pio2+0x1a8>
 800cfee:	bf00      	nop
	...
 800cffc:	3ff00000 	.word	0x3ff00000
 800d000:	0800db18 	.word	0x0800db18
 800d004:	40200000 	.word	0x40200000
 800d008:	3ff00000 	.word	0x3ff00000
 800d00c:	3e700000 	.word	0x3e700000
 800d010:	41700000 	.word	0x41700000
 800d014:	3fe00000 	.word	0x3fe00000
 800d018:	0800dad8 	.word	0x0800dad8
 800d01c:	f854 3b04 	ldr.w	r3, [r4], #4
 800d020:	b945      	cbnz	r5, 800d034 <__kernel_rem_pio2+0x344>
 800d022:	b123      	cbz	r3, 800d02e <__kernel_rem_pio2+0x33e>
 800d024:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800d028:	f844 3c04 	str.w	r3, [r4, #-4]
 800d02c:	2301      	movs	r3, #1
 800d02e:	3201      	adds	r2, #1
 800d030:	461d      	mov	r5, r3
 800d032:	e738      	b.n	800cea6 <__kernel_rem_pio2+0x1b6>
 800d034:	1acb      	subs	r3, r1, r3
 800d036:	e7f7      	b.n	800d028 <__kernel_rem_pio2+0x338>
 800d038:	f108 32ff 	add.w	r2, r8, #4294967295
 800d03c:	ab0c      	add	r3, sp, #48	@ 0x30
 800d03e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d042:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d046:	a90c      	add	r1, sp, #48	@ 0x30
 800d048:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d04c:	e739      	b.n	800cec2 <__kernel_rem_pio2+0x1d2>
 800d04e:	f108 32ff 	add.w	r2, r8, #4294967295
 800d052:	ab0c      	add	r3, sp, #48	@ 0x30
 800d054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d058:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d05c:	e7f3      	b.n	800d046 <__kernel_rem_pio2+0x356>
 800d05e:	a90c      	add	r1, sp, #48	@ 0x30
 800d060:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d064:	3b01      	subs	r3, #1
 800d066:	430a      	orrs	r2, r1
 800d068:	e787      	b.n	800cf7a <__kernel_rem_pio2+0x28a>
 800d06a:	3401      	adds	r4, #1
 800d06c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d070:	2a00      	cmp	r2, #0
 800d072:	d0fa      	beq.n	800d06a <__kernel_rem_pio2+0x37a>
 800d074:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d076:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d07a:	eb0d 0503 	add.w	r5, sp, r3
 800d07e:	9b06      	ldr	r3, [sp, #24]
 800d080:	aa20      	add	r2, sp, #128	@ 0x80
 800d082:	4443      	add	r3, r8
 800d084:	f108 0701 	add.w	r7, r8, #1
 800d088:	3d98      	subs	r5, #152	@ 0x98
 800d08a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800d08e:	4444      	add	r4, r8
 800d090:	42bc      	cmp	r4, r7
 800d092:	da04      	bge.n	800d09e <__kernel_rem_pio2+0x3ae>
 800d094:	46a0      	mov	r8, r4
 800d096:	e6a2      	b.n	800cdde <__kernel_rem_pio2+0xee>
 800d098:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d09a:	2401      	movs	r4, #1
 800d09c:	e7e6      	b.n	800d06c <__kernel_rem_pio2+0x37c>
 800d09e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0a0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800d0a4:	f7f3 fa5e 	bl	8000564 <__aeabi_i2d>
 800d0a8:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800d370 <__kernel_rem_pio2+0x680>
 800d0ac:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d0b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d0b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d0b8:	46b2      	mov	sl, r6
 800d0ba:	f04f 0800 	mov.w	r8, #0
 800d0be:	9b05      	ldr	r3, [sp, #20]
 800d0c0:	4598      	cmp	r8, r3
 800d0c2:	dd05      	ble.n	800d0d0 <__kernel_rem_pio2+0x3e0>
 800d0c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d0c8:	3701      	adds	r7, #1
 800d0ca:	eca5 7b02 	vstmia	r5!, {d7}
 800d0ce:	e7df      	b.n	800d090 <__kernel_rem_pio2+0x3a0>
 800d0d0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800d0d4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d0d8:	f7f3 faae 	bl	8000638 <__aeabi_dmul>
 800d0dc:	4602      	mov	r2, r0
 800d0de:	460b      	mov	r3, r1
 800d0e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d0e4:	f7f3 f8f2 	bl	80002cc <__adddf3>
 800d0e8:	f108 0801 	add.w	r8, r8, #1
 800d0ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d0f0:	e7e5      	b.n	800d0be <__kernel_rem_pio2+0x3ce>
 800d0f2:	f1cb 0000 	rsb	r0, fp, #0
 800d0f6:	ec47 6b10 	vmov	d0, r6, r7
 800d0fa:	f000 f951 	bl	800d3a0 <scalbn>
 800d0fe:	ec55 4b10 	vmov	r4, r5, d0
 800d102:	4b9d      	ldr	r3, [pc, #628]	@ (800d378 <__kernel_rem_pio2+0x688>)
 800d104:	2200      	movs	r2, #0
 800d106:	4620      	mov	r0, r4
 800d108:	4629      	mov	r1, r5
 800d10a:	f7f3 fd1b 	bl	8000b44 <__aeabi_dcmpge>
 800d10e:	b300      	cbz	r0, 800d152 <__kernel_rem_pio2+0x462>
 800d110:	4b9a      	ldr	r3, [pc, #616]	@ (800d37c <__kernel_rem_pio2+0x68c>)
 800d112:	2200      	movs	r2, #0
 800d114:	4620      	mov	r0, r4
 800d116:	4629      	mov	r1, r5
 800d118:	f7f3 fa8e 	bl	8000638 <__aeabi_dmul>
 800d11c:	f7f3 fd3c 	bl	8000b98 <__aeabi_d2iz>
 800d120:	4606      	mov	r6, r0
 800d122:	f7f3 fa1f 	bl	8000564 <__aeabi_i2d>
 800d126:	4b94      	ldr	r3, [pc, #592]	@ (800d378 <__kernel_rem_pio2+0x688>)
 800d128:	2200      	movs	r2, #0
 800d12a:	f7f3 fa85 	bl	8000638 <__aeabi_dmul>
 800d12e:	460b      	mov	r3, r1
 800d130:	4602      	mov	r2, r0
 800d132:	4629      	mov	r1, r5
 800d134:	4620      	mov	r0, r4
 800d136:	f7f3 f8c7 	bl	80002c8 <__aeabi_dsub>
 800d13a:	f7f3 fd2d 	bl	8000b98 <__aeabi_d2iz>
 800d13e:	ab0c      	add	r3, sp, #48	@ 0x30
 800d140:	f10b 0b18 	add.w	fp, fp, #24
 800d144:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800d148:	f108 0801 	add.w	r8, r8, #1
 800d14c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800d150:	e722      	b.n	800cf98 <__kernel_rem_pio2+0x2a8>
 800d152:	4620      	mov	r0, r4
 800d154:	4629      	mov	r1, r5
 800d156:	f7f3 fd1f 	bl	8000b98 <__aeabi_d2iz>
 800d15a:	ab0c      	add	r3, sp, #48	@ 0x30
 800d15c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800d160:	e71a      	b.n	800cf98 <__kernel_rem_pio2+0x2a8>
 800d162:	ab0c      	add	r3, sp, #48	@ 0x30
 800d164:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d168:	f7f3 f9fc 	bl	8000564 <__aeabi_i2d>
 800d16c:	4622      	mov	r2, r4
 800d16e:	462b      	mov	r3, r5
 800d170:	f7f3 fa62 	bl	8000638 <__aeabi_dmul>
 800d174:	4652      	mov	r2, sl
 800d176:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800d17a:	465b      	mov	r3, fp
 800d17c:	4620      	mov	r0, r4
 800d17e:	4629      	mov	r1, r5
 800d180:	f7f3 fa5a 	bl	8000638 <__aeabi_dmul>
 800d184:	3e01      	subs	r6, #1
 800d186:	4604      	mov	r4, r0
 800d188:	460d      	mov	r5, r1
 800d18a:	e718      	b.n	800cfbe <__kernel_rem_pio2+0x2ce>
 800d18c:	9906      	ldr	r1, [sp, #24]
 800d18e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800d192:	9106      	str	r1, [sp, #24]
 800d194:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800d198:	f7f3 fa4e 	bl	8000638 <__aeabi_dmul>
 800d19c:	4602      	mov	r2, r0
 800d19e:	460b      	mov	r3, r1
 800d1a0:	4650      	mov	r0, sl
 800d1a2:	4659      	mov	r1, fp
 800d1a4:	f7f3 f892 	bl	80002cc <__adddf3>
 800d1a8:	3601      	adds	r6, #1
 800d1aa:	4682      	mov	sl, r0
 800d1ac:	468b      	mov	fp, r1
 800d1ae:	9b00      	ldr	r3, [sp, #0]
 800d1b0:	429e      	cmp	r6, r3
 800d1b2:	dc01      	bgt.n	800d1b8 <__kernel_rem_pio2+0x4c8>
 800d1b4:	42b5      	cmp	r5, r6
 800d1b6:	dae9      	bge.n	800d18c <__kernel_rem_pio2+0x49c>
 800d1b8:	ab48      	add	r3, sp, #288	@ 0x120
 800d1ba:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800d1be:	e9c5 ab00 	strd	sl, fp, [r5]
 800d1c2:	3c01      	subs	r4, #1
 800d1c4:	e6ff      	b.n	800cfc6 <__kernel_rem_pio2+0x2d6>
 800d1c6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800d1c8:	2b02      	cmp	r3, #2
 800d1ca:	dc0b      	bgt.n	800d1e4 <__kernel_rem_pio2+0x4f4>
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	dc39      	bgt.n	800d244 <__kernel_rem_pio2+0x554>
 800d1d0:	d05d      	beq.n	800d28e <__kernel_rem_pio2+0x59e>
 800d1d2:	9b02      	ldr	r3, [sp, #8]
 800d1d4:	f003 0007 	and.w	r0, r3, #7
 800d1d8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800d1dc:	ecbd 8b02 	vpop	{d8}
 800d1e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1e4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800d1e6:	2b03      	cmp	r3, #3
 800d1e8:	d1f3      	bne.n	800d1d2 <__kernel_rem_pio2+0x4e2>
 800d1ea:	9b05      	ldr	r3, [sp, #20]
 800d1ec:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d1f0:	eb0d 0403 	add.w	r4, sp, r3
 800d1f4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800d1f8:	4625      	mov	r5, r4
 800d1fa:	46c2      	mov	sl, r8
 800d1fc:	f1ba 0f00 	cmp.w	sl, #0
 800d200:	f1a5 0508 	sub.w	r5, r5, #8
 800d204:	dc6b      	bgt.n	800d2de <__kernel_rem_pio2+0x5ee>
 800d206:	4645      	mov	r5, r8
 800d208:	2d01      	cmp	r5, #1
 800d20a:	f1a4 0408 	sub.w	r4, r4, #8
 800d20e:	f300 8087 	bgt.w	800d320 <__kernel_rem_pio2+0x630>
 800d212:	9c05      	ldr	r4, [sp, #20]
 800d214:	ab48      	add	r3, sp, #288	@ 0x120
 800d216:	441c      	add	r4, r3
 800d218:	2000      	movs	r0, #0
 800d21a:	2100      	movs	r1, #0
 800d21c:	f1b8 0f01 	cmp.w	r8, #1
 800d220:	f300 809c 	bgt.w	800d35c <__kernel_rem_pio2+0x66c>
 800d224:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800d228:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800d22c:	f1b9 0f00 	cmp.w	r9, #0
 800d230:	f040 80a6 	bne.w	800d380 <__kernel_rem_pio2+0x690>
 800d234:	9b04      	ldr	r3, [sp, #16]
 800d236:	e9c3 7800 	strd	r7, r8, [r3]
 800d23a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800d23e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800d242:	e7c6      	b.n	800d1d2 <__kernel_rem_pio2+0x4e2>
 800d244:	9d05      	ldr	r5, [sp, #20]
 800d246:	ab48      	add	r3, sp, #288	@ 0x120
 800d248:	441d      	add	r5, r3
 800d24a:	4644      	mov	r4, r8
 800d24c:	2000      	movs	r0, #0
 800d24e:	2100      	movs	r1, #0
 800d250:	2c00      	cmp	r4, #0
 800d252:	da35      	bge.n	800d2c0 <__kernel_rem_pio2+0x5d0>
 800d254:	f1b9 0f00 	cmp.w	r9, #0
 800d258:	d038      	beq.n	800d2cc <__kernel_rem_pio2+0x5dc>
 800d25a:	4602      	mov	r2, r0
 800d25c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d260:	9c04      	ldr	r4, [sp, #16]
 800d262:	e9c4 2300 	strd	r2, r3, [r4]
 800d266:	4602      	mov	r2, r0
 800d268:	460b      	mov	r3, r1
 800d26a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800d26e:	f7f3 f82b 	bl	80002c8 <__aeabi_dsub>
 800d272:	ad4a      	add	r5, sp, #296	@ 0x128
 800d274:	2401      	movs	r4, #1
 800d276:	45a0      	cmp	r8, r4
 800d278:	da2b      	bge.n	800d2d2 <__kernel_rem_pio2+0x5e2>
 800d27a:	f1b9 0f00 	cmp.w	r9, #0
 800d27e:	d002      	beq.n	800d286 <__kernel_rem_pio2+0x596>
 800d280:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d284:	4619      	mov	r1, r3
 800d286:	9b04      	ldr	r3, [sp, #16]
 800d288:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d28c:	e7a1      	b.n	800d1d2 <__kernel_rem_pio2+0x4e2>
 800d28e:	9c05      	ldr	r4, [sp, #20]
 800d290:	ab48      	add	r3, sp, #288	@ 0x120
 800d292:	441c      	add	r4, r3
 800d294:	2000      	movs	r0, #0
 800d296:	2100      	movs	r1, #0
 800d298:	f1b8 0f00 	cmp.w	r8, #0
 800d29c:	da09      	bge.n	800d2b2 <__kernel_rem_pio2+0x5c2>
 800d29e:	f1b9 0f00 	cmp.w	r9, #0
 800d2a2:	d002      	beq.n	800d2aa <__kernel_rem_pio2+0x5ba>
 800d2a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d2a8:	4619      	mov	r1, r3
 800d2aa:	9b04      	ldr	r3, [sp, #16]
 800d2ac:	e9c3 0100 	strd	r0, r1, [r3]
 800d2b0:	e78f      	b.n	800d1d2 <__kernel_rem_pio2+0x4e2>
 800d2b2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d2b6:	f7f3 f809 	bl	80002cc <__adddf3>
 800d2ba:	f108 38ff 	add.w	r8, r8, #4294967295
 800d2be:	e7eb      	b.n	800d298 <__kernel_rem_pio2+0x5a8>
 800d2c0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800d2c4:	f7f3 f802 	bl	80002cc <__adddf3>
 800d2c8:	3c01      	subs	r4, #1
 800d2ca:	e7c1      	b.n	800d250 <__kernel_rem_pio2+0x560>
 800d2cc:	4602      	mov	r2, r0
 800d2ce:	460b      	mov	r3, r1
 800d2d0:	e7c6      	b.n	800d260 <__kernel_rem_pio2+0x570>
 800d2d2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800d2d6:	f7f2 fff9 	bl	80002cc <__adddf3>
 800d2da:	3401      	adds	r4, #1
 800d2dc:	e7cb      	b.n	800d276 <__kernel_rem_pio2+0x586>
 800d2de:	ed95 7b00 	vldr	d7, [r5]
 800d2e2:	ed8d 7b00 	vstr	d7, [sp]
 800d2e6:	ed95 7b02 	vldr	d7, [r5, #8]
 800d2ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d2ee:	ec53 2b17 	vmov	r2, r3, d7
 800d2f2:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d2f6:	f7f2 ffe9 	bl	80002cc <__adddf3>
 800d2fa:	4602      	mov	r2, r0
 800d2fc:	460b      	mov	r3, r1
 800d2fe:	4606      	mov	r6, r0
 800d300:	460f      	mov	r7, r1
 800d302:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d306:	f7f2 ffdf 	bl	80002c8 <__aeabi_dsub>
 800d30a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d30e:	f7f2 ffdd 	bl	80002cc <__adddf3>
 800d312:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d316:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800d31a:	e9c5 6700 	strd	r6, r7, [r5]
 800d31e:	e76d      	b.n	800d1fc <__kernel_rem_pio2+0x50c>
 800d320:	ed94 7b00 	vldr	d7, [r4]
 800d324:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800d328:	ec51 0b17 	vmov	r0, r1, d7
 800d32c:	4652      	mov	r2, sl
 800d32e:	465b      	mov	r3, fp
 800d330:	ed8d 7b00 	vstr	d7, [sp]
 800d334:	f7f2 ffca 	bl	80002cc <__adddf3>
 800d338:	4602      	mov	r2, r0
 800d33a:	460b      	mov	r3, r1
 800d33c:	4606      	mov	r6, r0
 800d33e:	460f      	mov	r7, r1
 800d340:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d344:	f7f2 ffc0 	bl	80002c8 <__aeabi_dsub>
 800d348:	4652      	mov	r2, sl
 800d34a:	465b      	mov	r3, fp
 800d34c:	f7f2 ffbe 	bl	80002cc <__adddf3>
 800d350:	3d01      	subs	r5, #1
 800d352:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d356:	e9c4 6700 	strd	r6, r7, [r4]
 800d35a:	e755      	b.n	800d208 <__kernel_rem_pio2+0x518>
 800d35c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d360:	f7f2 ffb4 	bl	80002cc <__adddf3>
 800d364:	f108 38ff 	add.w	r8, r8, #4294967295
 800d368:	e758      	b.n	800d21c <__kernel_rem_pio2+0x52c>
 800d36a:	bf00      	nop
 800d36c:	f3af 8000 	nop.w
	...
 800d378:	41700000 	.word	0x41700000
 800d37c:	3e700000 	.word	0x3e700000
 800d380:	9b04      	ldr	r3, [sp, #16]
 800d382:	9a04      	ldr	r2, [sp, #16]
 800d384:	601f      	str	r7, [r3, #0]
 800d386:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800d38a:	605c      	str	r4, [r3, #4]
 800d38c:	609d      	str	r5, [r3, #8]
 800d38e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d392:	60d3      	str	r3, [r2, #12]
 800d394:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d398:	6110      	str	r0, [r2, #16]
 800d39a:	6153      	str	r3, [r2, #20]
 800d39c:	e719      	b.n	800d1d2 <__kernel_rem_pio2+0x4e2>
 800d39e:	bf00      	nop

0800d3a0 <scalbn>:
 800d3a0:	b570      	push	{r4, r5, r6, lr}
 800d3a2:	ec55 4b10 	vmov	r4, r5, d0
 800d3a6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800d3aa:	4606      	mov	r6, r0
 800d3ac:	462b      	mov	r3, r5
 800d3ae:	b991      	cbnz	r1, 800d3d6 <scalbn+0x36>
 800d3b0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800d3b4:	4323      	orrs	r3, r4
 800d3b6:	d03d      	beq.n	800d434 <scalbn+0x94>
 800d3b8:	4b35      	ldr	r3, [pc, #212]	@ (800d490 <scalbn+0xf0>)
 800d3ba:	4620      	mov	r0, r4
 800d3bc:	4629      	mov	r1, r5
 800d3be:	2200      	movs	r2, #0
 800d3c0:	f7f3 f93a 	bl	8000638 <__aeabi_dmul>
 800d3c4:	4b33      	ldr	r3, [pc, #204]	@ (800d494 <scalbn+0xf4>)
 800d3c6:	429e      	cmp	r6, r3
 800d3c8:	4604      	mov	r4, r0
 800d3ca:	460d      	mov	r5, r1
 800d3cc:	da0f      	bge.n	800d3ee <scalbn+0x4e>
 800d3ce:	a328      	add	r3, pc, #160	@ (adr r3, 800d470 <scalbn+0xd0>)
 800d3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3d4:	e01e      	b.n	800d414 <scalbn+0x74>
 800d3d6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800d3da:	4291      	cmp	r1, r2
 800d3dc:	d10b      	bne.n	800d3f6 <scalbn+0x56>
 800d3de:	4622      	mov	r2, r4
 800d3e0:	4620      	mov	r0, r4
 800d3e2:	4629      	mov	r1, r5
 800d3e4:	f7f2 ff72 	bl	80002cc <__adddf3>
 800d3e8:	4604      	mov	r4, r0
 800d3ea:	460d      	mov	r5, r1
 800d3ec:	e022      	b.n	800d434 <scalbn+0x94>
 800d3ee:	460b      	mov	r3, r1
 800d3f0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800d3f4:	3936      	subs	r1, #54	@ 0x36
 800d3f6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800d3fa:	4296      	cmp	r6, r2
 800d3fc:	dd0d      	ble.n	800d41a <scalbn+0x7a>
 800d3fe:	2d00      	cmp	r5, #0
 800d400:	a11d      	add	r1, pc, #116	@ (adr r1, 800d478 <scalbn+0xd8>)
 800d402:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d406:	da02      	bge.n	800d40e <scalbn+0x6e>
 800d408:	a11d      	add	r1, pc, #116	@ (adr r1, 800d480 <scalbn+0xe0>)
 800d40a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d40e:	a31a      	add	r3, pc, #104	@ (adr r3, 800d478 <scalbn+0xd8>)
 800d410:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d414:	f7f3 f910 	bl	8000638 <__aeabi_dmul>
 800d418:	e7e6      	b.n	800d3e8 <scalbn+0x48>
 800d41a:	1872      	adds	r2, r6, r1
 800d41c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800d420:	428a      	cmp	r2, r1
 800d422:	dcec      	bgt.n	800d3fe <scalbn+0x5e>
 800d424:	2a00      	cmp	r2, #0
 800d426:	dd08      	ble.n	800d43a <scalbn+0x9a>
 800d428:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d42c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d430:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d434:	ec45 4b10 	vmov	d0, r4, r5
 800d438:	bd70      	pop	{r4, r5, r6, pc}
 800d43a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800d43e:	da08      	bge.n	800d452 <scalbn+0xb2>
 800d440:	2d00      	cmp	r5, #0
 800d442:	a10b      	add	r1, pc, #44	@ (adr r1, 800d470 <scalbn+0xd0>)
 800d444:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d448:	dac1      	bge.n	800d3ce <scalbn+0x2e>
 800d44a:	a10f      	add	r1, pc, #60	@ (adr r1, 800d488 <scalbn+0xe8>)
 800d44c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d450:	e7bd      	b.n	800d3ce <scalbn+0x2e>
 800d452:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d456:	3236      	adds	r2, #54	@ 0x36
 800d458:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d45c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d460:	4620      	mov	r0, r4
 800d462:	4b0d      	ldr	r3, [pc, #52]	@ (800d498 <scalbn+0xf8>)
 800d464:	4629      	mov	r1, r5
 800d466:	2200      	movs	r2, #0
 800d468:	e7d4      	b.n	800d414 <scalbn+0x74>
 800d46a:	bf00      	nop
 800d46c:	f3af 8000 	nop.w
 800d470:	c2f8f359 	.word	0xc2f8f359
 800d474:	01a56e1f 	.word	0x01a56e1f
 800d478:	8800759c 	.word	0x8800759c
 800d47c:	7e37e43c 	.word	0x7e37e43c
 800d480:	8800759c 	.word	0x8800759c
 800d484:	fe37e43c 	.word	0xfe37e43c
 800d488:	c2f8f359 	.word	0xc2f8f359
 800d48c:	81a56e1f 	.word	0x81a56e1f
 800d490:	43500000 	.word	0x43500000
 800d494:	ffff3cb0 	.word	0xffff3cb0
 800d498:	3c900000 	.word	0x3c900000
 800d49c:	00000000 	.word	0x00000000

0800d4a0 <floor>:
 800d4a0:	ec51 0b10 	vmov	r0, r1, d0
 800d4a4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d4a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4ac:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800d4b0:	2e13      	cmp	r6, #19
 800d4b2:	460c      	mov	r4, r1
 800d4b4:	4605      	mov	r5, r0
 800d4b6:	4680      	mov	r8, r0
 800d4b8:	dc34      	bgt.n	800d524 <floor+0x84>
 800d4ba:	2e00      	cmp	r6, #0
 800d4bc:	da17      	bge.n	800d4ee <floor+0x4e>
 800d4be:	a332      	add	r3, pc, #200	@ (adr r3, 800d588 <floor+0xe8>)
 800d4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4c4:	f7f2 ff02 	bl	80002cc <__adddf3>
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	f7f3 fb44 	bl	8000b58 <__aeabi_dcmpgt>
 800d4d0:	b150      	cbz	r0, 800d4e8 <floor+0x48>
 800d4d2:	2c00      	cmp	r4, #0
 800d4d4:	da55      	bge.n	800d582 <floor+0xe2>
 800d4d6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800d4da:	432c      	orrs	r4, r5
 800d4dc:	2500      	movs	r5, #0
 800d4de:	42ac      	cmp	r4, r5
 800d4e0:	4c2b      	ldr	r4, [pc, #172]	@ (800d590 <floor+0xf0>)
 800d4e2:	bf08      	it	eq
 800d4e4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800d4e8:	4621      	mov	r1, r4
 800d4ea:	4628      	mov	r0, r5
 800d4ec:	e023      	b.n	800d536 <floor+0x96>
 800d4ee:	4f29      	ldr	r7, [pc, #164]	@ (800d594 <floor+0xf4>)
 800d4f0:	4137      	asrs	r7, r6
 800d4f2:	ea01 0307 	and.w	r3, r1, r7
 800d4f6:	4303      	orrs	r3, r0
 800d4f8:	d01d      	beq.n	800d536 <floor+0x96>
 800d4fa:	a323      	add	r3, pc, #140	@ (adr r3, 800d588 <floor+0xe8>)
 800d4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d500:	f7f2 fee4 	bl	80002cc <__adddf3>
 800d504:	2200      	movs	r2, #0
 800d506:	2300      	movs	r3, #0
 800d508:	f7f3 fb26 	bl	8000b58 <__aeabi_dcmpgt>
 800d50c:	2800      	cmp	r0, #0
 800d50e:	d0eb      	beq.n	800d4e8 <floor+0x48>
 800d510:	2c00      	cmp	r4, #0
 800d512:	bfbe      	ittt	lt
 800d514:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800d518:	4133      	asrlt	r3, r6
 800d51a:	18e4      	addlt	r4, r4, r3
 800d51c:	ea24 0407 	bic.w	r4, r4, r7
 800d520:	2500      	movs	r5, #0
 800d522:	e7e1      	b.n	800d4e8 <floor+0x48>
 800d524:	2e33      	cmp	r6, #51	@ 0x33
 800d526:	dd0a      	ble.n	800d53e <floor+0x9e>
 800d528:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800d52c:	d103      	bne.n	800d536 <floor+0x96>
 800d52e:	4602      	mov	r2, r0
 800d530:	460b      	mov	r3, r1
 800d532:	f7f2 fecb 	bl	80002cc <__adddf3>
 800d536:	ec41 0b10 	vmov	d0, r0, r1
 800d53a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d53e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800d542:	f04f 37ff 	mov.w	r7, #4294967295
 800d546:	40df      	lsrs	r7, r3
 800d548:	4207      	tst	r7, r0
 800d54a:	d0f4      	beq.n	800d536 <floor+0x96>
 800d54c:	a30e      	add	r3, pc, #56	@ (adr r3, 800d588 <floor+0xe8>)
 800d54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d552:	f7f2 febb 	bl	80002cc <__adddf3>
 800d556:	2200      	movs	r2, #0
 800d558:	2300      	movs	r3, #0
 800d55a:	f7f3 fafd 	bl	8000b58 <__aeabi_dcmpgt>
 800d55e:	2800      	cmp	r0, #0
 800d560:	d0c2      	beq.n	800d4e8 <floor+0x48>
 800d562:	2c00      	cmp	r4, #0
 800d564:	da0a      	bge.n	800d57c <floor+0xdc>
 800d566:	2e14      	cmp	r6, #20
 800d568:	d101      	bne.n	800d56e <floor+0xce>
 800d56a:	3401      	adds	r4, #1
 800d56c:	e006      	b.n	800d57c <floor+0xdc>
 800d56e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800d572:	2301      	movs	r3, #1
 800d574:	40b3      	lsls	r3, r6
 800d576:	441d      	add	r5, r3
 800d578:	4545      	cmp	r5, r8
 800d57a:	d3f6      	bcc.n	800d56a <floor+0xca>
 800d57c:	ea25 0507 	bic.w	r5, r5, r7
 800d580:	e7b2      	b.n	800d4e8 <floor+0x48>
 800d582:	2500      	movs	r5, #0
 800d584:	462c      	mov	r4, r5
 800d586:	e7af      	b.n	800d4e8 <floor+0x48>
 800d588:	8800759c 	.word	0x8800759c
 800d58c:	7e37e43c 	.word	0x7e37e43c
 800d590:	bff00000 	.word	0xbff00000
 800d594:	000fffff 	.word	0x000fffff

0800d598 <_init>:
 800d598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d59a:	bf00      	nop
 800d59c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d59e:	bc08      	pop	{r3}
 800d5a0:	469e      	mov	lr, r3
 800d5a2:	4770      	bx	lr

0800d5a4 <_fini>:
 800d5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5a6:	bf00      	nop
 800d5a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5aa:	bc08      	pop	{r3}
 800d5ac:	469e      	mov	lr, r3
 800d5ae:	4770      	bx	lr
