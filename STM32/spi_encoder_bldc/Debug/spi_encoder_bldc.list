
spi_encoder_bldc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d458  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000580  0800d628  0800d628  0000e628  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dba8  0800dba8  0000f218  2**0
                  CONTENTS
  4 .ARM          00000008  0800dba8  0800dba8  0000eba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dbb0  0800dbb0  0000f218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dbb0  0800dbb0  0000ebb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dbb4  0800dbb4  0000ebb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000218  20000000  0800dbb8  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000648  20000218  0800ddd0  0000f218  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000860  0800ddd0  0000f860  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f218  2**0
                  CONTENTS, READONLY
 12 .debug_info   000137f8  00000000  00000000  0000f248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b37  00000000  00000000  00022a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001248  00000000  00000000  00025578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e55  00000000  00000000  000267c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024b94  00000000  00000000  00027615  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015c58  00000000  00000000  0004c1a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e230b  00000000  00000000  00061e01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014410c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006214  00000000  00000000  00144150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0014a364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000218 	.word	0x20000218
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d610 	.word	0x0800d610

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000021c 	.word	0x2000021c
 800020c:	0800d610 	.word	0x0800d610

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b96a 	b.w	8000fb4 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	460c      	mov	r4, r1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d14e      	bne.n	8000da2 <__udivmoddi4+0xaa>
 8000d04:	4694      	mov	ip, r2
 8000d06:	458c      	cmp	ip, r1
 8000d08:	4686      	mov	lr, r0
 8000d0a:	fab2 f282 	clz	r2, r2
 8000d0e:	d962      	bls.n	8000dd6 <__udivmoddi4+0xde>
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0320 	rsb	r3, r2, #32
 8000d16:	4091      	lsls	r1, r2
 8000d18:	fa20 f303 	lsr.w	r3, r0, r3
 8000d1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d20:	4319      	orrs	r1, r3
 8000d22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2a:	fa1f f68c 	uxth.w	r6, ip
 8000d2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d36:	fb07 1114 	mls	r1, r7, r4, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb04 f106 	mul.w	r1, r4, r6
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d4e:	f080 8112 	bcs.w	8000f76 <__udivmoddi4+0x27e>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 810f 	bls.w	8000f76 <__udivmoddi4+0x27e>
 8000d58:	3c02      	subs	r4, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a59      	subs	r1, r3, r1
 8000d5e:	fa1f f38e 	uxth.w	r3, lr
 8000d62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d66:	fb07 1110 	mls	r1, r7, r0, r1
 8000d6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6e:	fb00 f606 	mul.w	r6, r0, r6
 8000d72:	429e      	cmp	r6, r3
 8000d74:	d90a      	bls.n	8000d8c <__udivmoddi4+0x94>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d7e:	f080 80fc 	bcs.w	8000f7a <__udivmoddi4+0x282>
 8000d82:	429e      	cmp	r6, r3
 8000d84:	f240 80f9 	bls.w	8000f7a <__udivmoddi4+0x282>
 8000d88:	4463      	add	r3, ip
 8000d8a:	3802      	subs	r0, #2
 8000d8c:	1b9b      	subs	r3, r3, r6
 8000d8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d92:	2100      	movs	r1, #0
 8000d94:	b11d      	cbz	r5, 8000d9e <__udivmoddi4+0xa6>
 8000d96:	40d3      	lsrs	r3, r2
 8000d98:	2200      	movs	r2, #0
 8000d9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d905      	bls.n	8000db2 <__udivmoddi4+0xba>
 8000da6:	b10d      	cbz	r5, 8000dac <__udivmoddi4+0xb4>
 8000da8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dac:	2100      	movs	r1, #0
 8000dae:	4608      	mov	r0, r1
 8000db0:	e7f5      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000db2:	fab3 f183 	clz	r1, r3
 8000db6:	2900      	cmp	r1, #0
 8000db8:	d146      	bne.n	8000e48 <__udivmoddi4+0x150>
 8000dba:	42a3      	cmp	r3, r4
 8000dbc:	d302      	bcc.n	8000dc4 <__udivmoddi4+0xcc>
 8000dbe:	4290      	cmp	r0, r2
 8000dc0:	f0c0 80f0 	bcc.w	8000fa4 <__udivmoddi4+0x2ac>
 8000dc4:	1a86      	subs	r6, r0, r2
 8000dc6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dca:	2001      	movs	r0, #1
 8000dcc:	2d00      	cmp	r5, #0
 8000dce:	d0e6      	beq.n	8000d9e <__udivmoddi4+0xa6>
 8000dd0:	e9c5 6300 	strd	r6, r3, [r5]
 8000dd4:	e7e3      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000dd6:	2a00      	cmp	r2, #0
 8000dd8:	f040 8090 	bne.w	8000efc <__udivmoddi4+0x204>
 8000ddc:	eba1 040c 	sub.w	r4, r1, ip
 8000de0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000de4:	fa1f f78c 	uxth.w	r7, ip
 8000de8:	2101      	movs	r1, #1
 8000dea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000df2:	fb08 4416 	mls	r4, r8, r6, r4
 8000df6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dfa:	fb07 f006 	mul.w	r0, r7, r6
 8000dfe:	4298      	cmp	r0, r3
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x11c>
 8000e02:	eb1c 0303 	adds.w	r3, ip, r3
 8000e06:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x11a>
 8000e0c:	4298      	cmp	r0, r3
 8000e0e:	f200 80cd 	bhi.w	8000fac <__udivmoddi4+0x2b4>
 8000e12:	4626      	mov	r6, r4
 8000e14:	1a1c      	subs	r4, r3, r0
 8000e16:	fa1f f38e 	uxth.w	r3, lr
 8000e1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb00 f707 	mul.w	r7, r0, r7
 8000e2a:	429f      	cmp	r7, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x148>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x146>
 8000e38:	429f      	cmp	r7, r3
 8000e3a:	f200 80b0 	bhi.w	8000f9e <__udivmoddi4+0x2a6>
 8000e3e:	4620      	mov	r0, r4
 8000e40:	1bdb      	subs	r3, r3, r7
 8000e42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e46:	e7a5      	b.n	8000d94 <__udivmoddi4+0x9c>
 8000e48:	f1c1 0620 	rsb	r6, r1, #32
 8000e4c:	408b      	lsls	r3, r1
 8000e4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e52:	431f      	orrs	r7, r3
 8000e54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e58:	fa04 f301 	lsl.w	r3, r4, r1
 8000e5c:	ea43 030c 	orr.w	r3, r3, ip
 8000e60:	40f4      	lsrs	r4, r6
 8000e62:	fa00 f801 	lsl.w	r8, r0, r1
 8000e66:	0c38      	lsrs	r0, r7, #16
 8000e68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e70:	fa1f fc87 	uxth.w	ip, r7
 8000e74:	fb00 441e 	mls	r4, r0, lr, r4
 8000e78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e80:	45a1      	cmp	r9, r4
 8000e82:	fa02 f201 	lsl.w	r2, r2, r1
 8000e86:	d90a      	bls.n	8000e9e <__udivmoddi4+0x1a6>
 8000e88:	193c      	adds	r4, r7, r4
 8000e8a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e8e:	f080 8084 	bcs.w	8000f9a <__udivmoddi4+0x2a2>
 8000e92:	45a1      	cmp	r9, r4
 8000e94:	f240 8081 	bls.w	8000f9a <__udivmoddi4+0x2a2>
 8000e98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e9c:	443c      	add	r4, r7
 8000e9e:	eba4 0409 	sub.w	r4, r4, r9
 8000ea2:	fa1f f983 	uxth.w	r9, r3
 8000ea6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eaa:	fb00 4413 	mls	r4, r0, r3, r4
 8000eae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eb6:	45a4      	cmp	ip, r4
 8000eb8:	d907      	bls.n	8000eca <__udivmoddi4+0x1d2>
 8000eba:	193c      	adds	r4, r7, r4
 8000ebc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ec0:	d267      	bcs.n	8000f92 <__udivmoddi4+0x29a>
 8000ec2:	45a4      	cmp	ip, r4
 8000ec4:	d965      	bls.n	8000f92 <__udivmoddi4+0x29a>
 8000ec6:	3b02      	subs	r3, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ece:	fba0 9302 	umull	r9, r3, r0, r2
 8000ed2:	eba4 040c 	sub.w	r4, r4, ip
 8000ed6:	429c      	cmp	r4, r3
 8000ed8:	46ce      	mov	lr, r9
 8000eda:	469c      	mov	ip, r3
 8000edc:	d351      	bcc.n	8000f82 <__udivmoddi4+0x28a>
 8000ede:	d04e      	beq.n	8000f7e <__udivmoddi4+0x286>
 8000ee0:	b155      	cbz	r5, 8000ef8 <__udivmoddi4+0x200>
 8000ee2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ee6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eea:	fa04 f606 	lsl.w	r6, r4, r6
 8000eee:	40cb      	lsrs	r3, r1
 8000ef0:	431e      	orrs	r6, r3
 8000ef2:	40cc      	lsrs	r4, r1
 8000ef4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ef8:	2100      	movs	r1, #0
 8000efa:	e750      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000efc:	f1c2 0320 	rsb	r3, r2, #32
 8000f00:	fa20 f103 	lsr.w	r1, r0, r3
 8000f04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f08:	fa24 f303 	lsr.w	r3, r4, r3
 8000f0c:	4094      	lsls	r4, r2
 8000f0e:	430c      	orrs	r4, r1
 8000f10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f18:	fa1f f78c 	uxth.w	r7, ip
 8000f1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f20:	fb08 3110 	mls	r1, r8, r0, r3
 8000f24:	0c23      	lsrs	r3, r4, #16
 8000f26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f2a:	fb00 f107 	mul.w	r1, r0, r7
 8000f2e:	4299      	cmp	r1, r3
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x24c>
 8000f32:	eb1c 0303 	adds.w	r3, ip, r3
 8000f36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f3a:	d22c      	bcs.n	8000f96 <__udivmoddi4+0x29e>
 8000f3c:	4299      	cmp	r1, r3
 8000f3e:	d92a      	bls.n	8000f96 <__udivmoddi4+0x29e>
 8000f40:	3802      	subs	r0, #2
 8000f42:	4463      	add	r3, ip
 8000f44:	1a5b      	subs	r3, r3, r1
 8000f46:	b2a4      	uxth	r4, r4
 8000f48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f54:	fb01 f307 	mul.w	r3, r1, r7
 8000f58:	42a3      	cmp	r3, r4
 8000f5a:	d908      	bls.n	8000f6e <__udivmoddi4+0x276>
 8000f5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f64:	d213      	bcs.n	8000f8e <__udivmoddi4+0x296>
 8000f66:	42a3      	cmp	r3, r4
 8000f68:	d911      	bls.n	8000f8e <__udivmoddi4+0x296>
 8000f6a:	3902      	subs	r1, #2
 8000f6c:	4464      	add	r4, ip
 8000f6e:	1ae4      	subs	r4, r4, r3
 8000f70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f74:	e739      	b.n	8000dea <__udivmoddi4+0xf2>
 8000f76:	4604      	mov	r4, r0
 8000f78:	e6f0      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	e706      	b.n	8000d8c <__udivmoddi4+0x94>
 8000f7e:	45c8      	cmp	r8, r9
 8000f80:	d2ae      	bcs.n	8000ee0 <__udivmoddi4+0x1e8>
 8000f82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f8a:	3801      	subs	r0, #1
 8000f8c:	e7a8      	b.n	8000ee0 <__udivmoddi4+0x1e8>
 8000f8e:	4631      	mov	r1, r6
 8000f90:	e7ed      	b.n	8000f6e <__udivmoddi4+0x276>
 8000f92:	4603      	mov	r3, r0
 8000f94:	e799      	b.n	8000eca <__udivmoddi4+0x1d2>
 8000f96:	4630      	mov	r0, r6
 8000f98:	e7d4      	b.n	8000f44 <__udivmoddi4+0x24c>
 8000f9a:	46d6      	mov	lr, sl
 8000f9c:	e77f      	b.n	8000e9e <__udivmoddi4+0x1a6>
 8000f9e:	4463      	add	r3, ip
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	e74d      	b.n	8000e40 <__udivmoddi4+0x148>
 8000fa4:	4606      	mov	r6, r0
 8000fa6:	4623      	mov	r3, r4
 8000fa8:	4608      	mov	r0, r1
 8000faa:	e70f      	b.n	8000dcc <__udivmoddi4+0xd4>
 8000fac:	3e02      	subs	r6, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	e730      	b.n	8000e14 <__udivmoddi4+0x11c>
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <_micros>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

unsigned long _micros(){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	return HAL_GetTick()*1000;
 8000fbc:	f002 ff58 	bl	8003e70 <HAL_GetTick>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000fc6:	fb02 f303 	mul.w	r3, r2, r3
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <Update_dt>:

void Update_dt()
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
	 static uint32_t t_prev = 0;
	uint32_t t_now = _micros();
 8000fd6:	f7ff ffef 	bl	8000fb8 <_micros>
 8000fda:	6078      	str	r0, [r7, #4]
	dt = (t_now - t_prev) / 1000000.0f;
 8000fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8001008 <Update_dt+0x38>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	687a      	ldr	r2, [r7, #4]
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	ee07 3a90 	vmov	s15, r3
 8000fe8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fec:	eddf 6a07 	vldr	s13, [pc, #28]	@ 800100c <Update_dt+0x3c>
 8000ff0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ff4:	4b06      	ldr	r3, [pc, #24]	@ (8001010 <Update_dt+0x40>)
 8000ff6:	edc3 7a00 	vstr	s15, [r3]
	t_prev = t_now;
 8000ffa:	4a03      	ldr	r2, [pc, #12]	@ (8001008 <Update_dt+0x38>)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6013      	str	r3, [r2, #0]
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	200006e4 	.word	0x200006e4
 800100c:	49742400 	.word	0x49742400
 8001010:	2000029c 	.word	0x2000029c

08001014 <update_speed_dt>:

void update_speed_dt()
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
	 static uint32_t t_speed_prev = 0;
	uint32_t t_speed_now = _micros();
 800101a:	f7ff ffcd 	bl	8000fb8 <_micros>
 800101e:	6078      	str	r0, [r7, #4]
	Speed_dt = (t_speed_now - t_speed_prev) / 1000000.0f;
 8001020:	4b0a      	ldr	r3, [pc, #40]	@ (800104c <update_speed_dt+0x38>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	ee07 3a90 	vmov	s15, r3
 800102c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001030:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8001050 <update_speed_dt+0x3c>
 8001034:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001038:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <update_speed_dt+0x40>)
 800103a:	edc3 7a00 	vstr	s15, [r3]
	t_speed_prev = t_speed_now;
 800103e:	4a03      	ldr	r2, [pc, #12]	@ (800104c <update_speed_dt+0x38>)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6013      	str	r3, [r2, #0]
}
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	200006e8 	.word	0x200006e8
 8001050:	49742400 	.word	0x49742400
 8001054:	200002d4 	.word	0x200002d4

08001058 <update_position_dt>:

void update_position_dt()
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
	 static uint32_t t_position_prev = 0;
	uint32_t t_position_now = _micros();
 800105e:	f7ff ffab 	bl	8000fb8 <_micros>
 8001062:	6078      	str	r0, [r7, #4]
	position_dt = (t_position_now - t_position_prev) / 1000000.0f;
 8001064:	4b0a      	ldr	r3, [pc, #40]	@ (8001090 <update_position_dt+0x38>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	ee07 3a90 	vmov	s15, r3
 8001070:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001074:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8001094 <update_position_dt+0x3c>
 8001078:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800107c:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <update_position_dt+0x40>)
 800107e:	edc3 7a00 	vstr	s15, [r3]
	t_position_prev = t_position_now;
 8001082:	4a03      	ldr	r2, [pc, #12]	@ (8001090 <update_position_dt+0x38>)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6013      	str	r3, [r2, #0]
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	200006ec 	.word	0x200006ec
 8001094:	49742400 	.word	0x49742400
 8001098:	200002d0 	.word	0x200002d0

0800109c <delay_us>:

void delay_us (uint16_t us)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3,0);
 80010a6:	4b09      	ldr	r3, [pc, #36]	@ (80010cc <delay_us+0x30>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2200      	movs	r2, #0
 80010ac:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim3) < us);
 80010ae:	bf00      	nop
 80010b0:	4b06      	ldr	r3, [pc, #24]	@ (80010cc <delay_us+0x30>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80010b6:	88fb      	ldrh	r3, [r7, #6]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d3f9      	bcc.n	80010b0 <delay_us+0x14>
}
 80010bc:	bf00      	nop
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	20000504 	.word	0x20000504

080010d0 <spiCalcEvenParity>:

uint8_t spiCalcEvenParity(uint16_t value) {
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	80fb      	strh	r3, [r7, #6]
    uint8_t cnt = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < 16; i++) {
 80010de:	2300      	movs	r3, #0
 80010e0:	73bb      	strb	r3, [r7, #14]
 80010e2:	e00d      	b.n	8001100 <spiCalcEvenParity+0x30>
        if (value & 0x1) cnt++;
 80010e4:	88fb      	ldrh	r3, [r7, #6]
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d002      	beq.n	80010f4 <spiCalcEvenParity+0x24>
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
 80010f0:	3301      	adds	r3, #1
 80010f2:	73fb      	strb	r3, [r7, #15]
        value >>= 1;
 80010f4:	88fb      	ldrh	r3, [r7, #6]
 80010f6:	085b      	lsrs	r3, r3, #1
 80010f8:	80fb      	strh	r3, [r7, #6]
    for (uint8_t i = 0; i < 16; i++) {
 80010fa:	7bbb      	ldrb	r3, [r7, #14]
 80010fc:	3301      	adds	r3, #1
 80010fe:	73bb      	strb	r3, [r7, #14]
 8001100:	7bbb      	ldrb	r3, [r7, #14]
 8001102:	2b0f      	cmp	r3, #15
 8001104:	d9ee      	bls.n	80010e4 <spiCalcEvenParity+0x14>
    }
    return cnt & 0x1;
 8001106:	7bfb      	ldrb	r3, [r7, #15]
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	b2db      	uxtb	r3, r3
}
 800110e:	4618      	mov	r0, r3
 8001110:	3714      	adds	r7, #20
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
	...

0800111c <AS5147U_ReadAngle>:

uint16_t AS5147U_ReadAngle() {
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af02      	add	r7, sp, #8
    uint16_t command = AS5147U_ANGLE_REG ;
 8001122:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 8001126:	80bb      	strh	r3, [r7, #4]
    command |= (1 << 14);
 8001128:	88bb      	ldrh	r3, [r7, #4]
 800112a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800112e:	b29b      	uxth	r3, r3
 8001130:	80bb      	strh	r3, [r7, #4]
    command |= ((uint16_t)spiCalcEvenParity(command) << 15);
 8001132:	88bb      	ldrh	r3, [r7, #4]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff ffcb 	bl	80010d0 <spiCalcEvenParity>
 800113a:	4603      	mov	r3, r0
 800113c:	03db      	lsls	r3, r3, #15
 800113e:	b21a      	sxth	r2, r3
 8001140:	88bb      	ldrh	r3, [r7, #4]
 8001142:	b21b      	sxth	r3, r3
 8001144:	4313      	orrs	r3, r2
 8001146:	b21b      	sxth	r3, r3
 8001148:	b29b      	uxth	r3, r3
 800114a:	80bb      	strh	r3, [r7, #4]
    uint16_t receivedData;

    uint16_t nop = 0x0000;
 800114c:	2300      	movs	r3, #0
 800114e:	803b      	strh	r3, [r7, #0]

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8001150:	2200      	movs	r2, #0
 8001152:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001156:	481a      	ldr	r0, [pc, #104]	@ (80011c0 <AS5147U_ReadAngle+0xa4>)
 8001158:	f004 fd38 	bl	8005bcc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (uint8_t*)&command, 1, HAL_MAX_DELAY);
 800115c:	1d39      	adds	r1, r7, #4
 800115e:	f04f 33ff 	mov.w	r3, #4294967295
 8001162:	2201      	movs	r2, #1
 8001164:	4817      	ldr	r0, [pc, #92]	@ (80011c4 <AS5147U_ReadAngle+0xa8>)
 8001166:	f005 fc0c 	bl	8006982 <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800116a:	2201      	movs	r2, #1
 800116c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001170:	4813      	ldr	r0, [pc, #76]	@ (80011c0 <AS5147U_ReadAngle+0xa4>)
 8001172:	f004 fd2b 	bl	8005bcc <HAL_GPIO_WritePin>
    delay_us(10);
 8001176:	200a      	movs	r0, #10
 8001178:	f7ff ff90 	bl	800109c <delay_us>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800117c:	2200      	movs	r2, #0
 800117e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001182:	480f      	ldr	r0, [pc, #60]	@ (80011c0 <AS5147U_ReadAngle+0xa4>)
 8001184:	f004 fd22 	bl	8005bcc <HAL_GPIO_WritePin>

    HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)&nop ,(uint8_t*)&receivedData, 1, HAL_MAX_DELAY);
 8001188:	1cba      	adds	r2, r7, #2
 800118a:	4639      	mov	r1, r7
 800118c:	f04f 33ff 	mov.w	r3, #4294967295
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	2301      	movs	r3, #1
 8001194:	480b      	ldr	r0, [pc, #44]	@ (80011c4 <AS5147U_ReadAngle+0xa8>)
 8001196:	f005 fd38 	bl	8006c0a <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800119a:	2201      	movs	r2, #1
 800119c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011a0:	4807      	ldr	r0, [pc, #28]	@ (80011c0 <AS5147U_ReadAngle+0xa4>)
 80011a2:	f004 fd13 	bl	8005bcc <HAL_GPIO_WritePin>

    receivedData = receivedData >> (1 + 13 - AS5147U_BIT_RESOLUTION);
 80011a6:	887b      	ldrh	r3, [r7, #2]
 80011a8:	807b      	strh	r3, [r7, #2]
    const uint16_t data_mask = 0xFFFF >> (16 - AS5147U_BIT_RESOLUTION);
 80011aa:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 80011ae:	80fb      	strh	r3, [r7, #6]
    return receivedData & data_mask;
 80011b0:	887a      	ldrh	r2, [r7, #2]
 80011b2:	88fb      	ldrh	r3, [r7, #6]
 80011b4:	4013      	ands	r3, r2
 80011b6:	b29b      	uxth	r3, r3

}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40020400 	.word	0x40020400
 80011c4:	2000041c 	.word	0x2000041c

080011c8 <AS5147U_GetAngleRad>:
    while (angle_elec_rad >= 2 * M_PI) angle_elec_rad -= 2 * M_PI;
    while (angle_elec_rad < 0) angle_elec_rad += 2 * M_PI;
    return angle_elec_rad;
}

float AS5147U_GetAngleRad() {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
    rawCount = AS5147U_ReadAngle();
 80011ce:	f7ff ffa5 	bl	800111c <AS5147U_ReadAngle>
 80011d2:	4603      	mov	r3, r0
 80011d4:	461a      	mov	r2, r3
 80011d6:	4b32      	ldr	r3, [pc, #200]	@ (80012a0 <AS5147U_GetAngleRad+0xd8>)
 80011d8:	801a      	strh	r2, [r3, #0]
    float mechanical = rawCount / 16384.0 * 2.0 * PI;
 80011da:	4b31      	ldr	r3, [pc, #196]	@ (80012a0 <AS5147U_GetAngleRad+0xd8>)
 80011dc:	881b      	ldrh	r3, [r3, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff f9c0 	bl	8000564 <__aeabi_i2d>
 80011e4:	f04f 0200 	mov.w	r2, #0
 80011e8:	4b2e      	ldr	r3, [pc, #184]	@ (80012a4 <AS5147U_GetAngleRad+0xdc>)
 80011ea:	f7ff fb4f 	bl	800088c <__aeabi_ddiv>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	4610      	mov	r0, r2
 80011f4:	4619      	mov	r1, r3
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	f7ff f867 	bl	80002cc <__adddf3>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	4610      	mov	r0, r2
 8001204:	4619      	mov	r1, r3
 8001206:	a320      	add	r3, pc, #128	@ (adr r3, 8001288 <AS5147U_GetAngleRad+0xc0>)
 8001208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120c:	f7ff fa14 	bl	8000638 <__aeabi_dmul>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	4610      	mov	r0, r2
 8001216:	4619      	mov	r1, r3
 8001218:	f7ff fd06 	bl	8000c28 <__aeabi_d2f>
 800121c:	4603      	mov	r3, r0
 800121e:	607b      	str	r3, [r7, #4]
    mechanical -= 5.3897189304;// dây màu
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff f9b1 	bl	8000588 <__aeabi_f2d>
 8001226:	a31a      	add	r3, pc, #104	@ (adr r3, 8001290 <AS5147U_GetAngleRad+0xc8>)
 8001228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122c:	f7ff f84c 	bl	80002c8 <__aeabi_dsub>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	4610      	mov	r0, r2
 8001236:	4619      	mov	r1, r3
 8001238:	f7ff fcf6 	bl	8000c28 <__aeabi_d2f>
 800123c:	4603      	mov	r3, r0
 800123e:	607b      	str	r3, [r7, #4]
   // mechanical -= 1.19627206;// dây 3 pha màu trắng
    if (mechanical >= 2.0f * PI) mechanical -= 2.0f * PI;
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff f9a1 	bl	8000588 <__aeabi_f2d>
 8001246:	a314      	add	r3, pc, #80	@ (adr r3, 8001298 <AS5147U_GetAngleRad+0xd0>)
 8001248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124c:	f7ff fc7a 	bl	8000b44 <__aeabi_dcmpge>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d00f      	beq.n	8001276 <AS5147U_GetAngleRad+0xae>
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff f996 	bl	8000588 <__aeabi_f2d>
 800125c:	a30e      	add	r3, pc, #56	@ (adr r3, 8001298 <AS5147U_GetAngleRad+0xd0>)
 800125e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001262:	f7ff f831 	bl	80002c8 <__aeabi_dsub>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4610      	mov	r0, r2
 800126c:	4619      	mov	r1, r3
 800126e:	f7ff fcdb 	bl	8000c28 <__aeabi_d2f>
 8001272:	4603      	mov	r3, r0
 8001274:	607b      	str	r3, [r7, #4]
    return mechanical;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	ee07 3a90 	vmov	s15, r3
}
 800127c:	eeb0 0a67 	vmov.f32	s0, s15
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	54442eea 	.word	0x54442eea
 800128c:	400921fb 	.word	0x400921fb
 8001290:	7ab2cce7 	.word	0x7ab2cce7
 8001294:	40158f12 	.word	0x40158f12
 8001298:	54442eea 	.word	0x54442eea
 800129c:	401921fb 	.word	0x401921fb
 80012a0:	200002ee 	.word	0x200002ee
 80012a4:	40d00000 	.word	0x40d00000

080012a8 <electricalAngle>:

float electricalAngle() {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
	float mechanical_angle_rad = AS5147U_GetAngleRad();
 80012ae:	f7ff ff8b 	bl	80011c8 <AS5147U_GetAngleRad>
 80012b2:	ed87 0a01 	vstr	s0, [r7, #4]
     elec_angle = ((mechanical_angle_rad  - angle_offset )) * pole_pairs;
 80012b6:	4b2e      	ldr	r3, [pc, #184]	@ (8001370 <electricalAngle+0xc8>)
 80012b8:	edd3 7a00 	vldr	s15, [r3]
 80012bc:	ed97 7a01 	vldr	s14, [r7, #4]
 80012c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001374 <electricalAngle+0xcc>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	ee07 3a90 	vmov	s15, r3
 80012cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012d4:	4b28      	ldr	r3, [pc, #160]	@ (8001378 <electricalAngle+0xd0>)
 80012d6:	edc3 7a00 	vstr	s15, [r3]
    while (elec_angle >= 2 * M_PI) elec_angle -= 2 * M_PI;
 80012da:	e012      	b.n	8001302 <electricalAngle+0x5a>
 80012dc:	4b26      	ldr	r3, [pc, #152]	@ (8001378 <electricalAngle+0xd0>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff f951 	bl	8000588 <__aeabi_f2d>
 80012e6:	a320      	add	r3, pc, #128	@ (adr r3, 8001368 <electricalAngle+0xc0>)
 80012e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ec:	f7fe ffec 	bl	80002c8 <__aeabi_dsub>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4610      	mov	r0, r2
 80012f6:	4619      	mov	r1, r3
 80012f8:	f7ff fc96 	bl	8000c28 <__aeabi_d2f>
 80012fc:	4603      	mov	r3, r0
 80012fe:	4a1e      	ldr	r2, [pc, #120]	@ (8001378 <electricalAngle+0xd0>)
 8001300:	6013      	str	r3, [r2, #0]
 8001302:	4b1d      	ldr	r3, [pc, #116]	@ (8001378 <electricalAngle+0xd0>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff f93e 	bl	8000588 <__aeabi_f2d>
 800130c:	a316      	add	r3, pc, #88	@ (adr r3, 8001368 <electricalAngle+0xc0>)
 800130e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001312:	f7ff fc17 	bl	8000b44 <__aeabi_dcmpge>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1df      	bne.n	80012dc <electricalAngle+0x34>
    while (elec_angle < 0) elec_angle += 2 * M_PI;
 800131c:	e012      	b.n	8001344 <electricalAngle+0x9c>
 800131e:	4b16      	ldr	r3, [pc, #88]	@ (8001378 <electricalAngle+0xd0>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff f930 	bl	8000588 <__aeabi_f2d>
 8001328:	a30f      	add	r3, pc, #60	@ (adr r3, 8001368 <electricalAngle+0xc0>)
 800132a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132e:	f7fe ffcd 	bl	80002cc <__adddf3>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	4610      	mov	r0, r2
 8001338:	4619      	mov	r1, r3
 800133a:	f7ff fc75 	bl	8000c28 <__aeabi_d2f>
 800133e:	4603      	mov	r3, r0
 8001340:	4a0d      	ldr	r2, [pc, #52]	@ (8001378 <electricalAngle+0xd0>)
 8001342:	6013      	str	r3, [r2, #0]
 8001344:	4b0c      	ldr	r3, [pc, #48]	@ (8001378 <electricalAngle+0xd0>)
 8001346:	edd3 7a00 	vldr	s15, [r3]
 800134a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800134e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001352:	d4e4      	bmi.n	800131e <electricalAngle+0x76>
    return elec_angle;
 8001354:	4b08      	ldr	r3, [pc, #32]	@ (8001378 <electricalAngle+0xd0>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	ee07 3a90 	vmov	s15, r3
}
 800135c:	eeb0 0a67 	vmov.f32	s0, s15
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	54442d18 	.word	0x54442d18
 800136c:	401921fb 	.word	0x401921fb
 8001370:	200002a0 	.word	0x200002a0
 8001374:	20000030 	.word	0x20000030
 8001378:	200002c4 	.word	0x200002c4
 800137c:	00000000 	.word	0x00000000

08001380 <alignRotor>:


void alignRotor() {
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
    float V_align = 2.0;
 8001386:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800138a:	607b      	str	r3, [r7, #4]

    Va = V_align;
 800138c:	4a3a      	ldr	r2, [pc, #232]	@ (8001478 <alignRotor+0xf8>)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6013      	str	r3, [r2, #0]
    PWM_A = ((Va / 8.0 + 1.0)/2 * PWM_PERIOD)*0.4;
 8001392:	4b39      	ldr	r3, [pc, #228]	@ (8001478 <alignRotor+0xf8>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff f8f6 	bl	8000588 <__aeabi_f2d>
 800139c:	f04f 0200 	mov.w	r2, #0
 80013a0:	4b36      	ldr	r3, [pc, #216]	@ (800147c <alignRotor+0xfc>)
 80013a2:	f7ff fa73 	bl	800088c <__aeabi_ddiv>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	4610      	mov	r0, r2
 80013ac:	4619      	mov	r1, r3
 80013ae:	f04f 0200 	mov.w	r2, #0
 80013b2:	4b33      	ldr	r3, [pc, #204]	@ (8001480 <alignRotor+0x100>)
 80013b4:	f7fe ff8a 	bl	80002cc <__adddf3>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4610      	mov	r0, r2
 80013be:	4619      	mov	r1, r3
 80013c0:	f04f 0200 	mov.w	r2, #0
 80013c4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013c8:	f7ff fa60 	bl	800088c <__aeabi_ddiv>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	4610      	mov	r0, r2
 80013d2:	4619      	mov	r1, r3
 80013d4:	a324      	add	r3, pc, #144	@ (adr r3, 8001468 <alignRotor+0xe8>)
 80013d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013da:	f7ff f92d 	bl	8000638 <__aeabi_dmul>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	4610      	mov	r0, r2
 80013e4:	4619      	mov	r1, r3
 80013e6:	a322      	add	r3, pc, #136	@ (adr r3, 8001470 <alignRotor+0xf0>)
 80013e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ec:	f7ff f924 	bl	8000638 <__aeabi_dmul>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	4610      	mov	r0, r2
 80013f6:	4619      	mov	r1, r3
 80013f8:	f7ff fbf6 	bl	8000be8 <__aeabi_d2uiz>
 80013fc:	4603      	mov	r3, r0
 80013fe:	b29a      	uxth	r2, r3
 8001400:	4b20      	ldr	r3, [pc, #128]	@ (8001484 <alignRotor+0x104>)
 8001402:	801a      	strh	r2, [r3, #0]
    PWM_B = 0;
 8001404:	4b20      	ldr	r3, [pc, #128]	@ (8001488 <alignRotor+0x108>)
 8001406:	2200      	movs	r2, #0
 8001408:	801a      	strh	r2, [r3, #0]
    PWM_C = 0;
 800140a:	4b20      	ldr	r3, [pc, #128]	@ (800148c <alignRotor+0x10c>)
 800140c:	2200      	movs	r2, #0
 800140e:	801a      	strh	r2, [r3, #0]

    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM_A);
 8001410:	4b1c      	ldr	r3, [pc, #112]	@ (8001484 <alignRotor+0x104>)
 8001412:	881a      	ldrh	r2, [r3, #0]
 8001414:	4b1e      	ldr	r3, [pc, #120]	@ (8001490 <alignRotor+0x110>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWM_B);
 800141a:	4b1b      	ldr	r3, [pc, #108]	@ (8001488 <alignRotor+0x108>)
 800141c:	881a      	ldrh	r2, [r3, #0]
 800141e:	4b1c      	ldr	r3, [pc, #112]	@ (8001490 <alignRotor+0x110>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, PWM_C);
 8001424:	4b19      	ldr	r3, [pc, #100]	@ (800148c <alignRotor+0x10c>)
 8001426:	881a      	ldrh	r2, [r3, #0]
 8001428:	4b19      	ldr	r3, [pc, #100]	@ (8001490 <alignRotor+0x110>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	63da      	str	r2, [r3, #60]	@ 0x3c

    HAL_Delay(1000);
 800142e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001432:	f002 fd29 	bl	8003e88 <HAL_Delay>

    angle_offset = AS5147U_GetAngleRad();
 8001436:	f7ff fec7 	bl	80011c8 <AS5147U_GetAngleRad>
 800143a:	eef0 7a40 	vmov.f32	s15, s0
 800143e:	4b15      	ldr	r3, [pc, #84]	@ (8001494 <alignRotor+0x114>)
 8001440:	edc3 7a00 	vstr	s15, [r3]

    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001444:	4b12      	ldr	r3, [pc, #72]	@ (8001490 <alignRotor+0x110>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2200      	movs	r2, #0
 800144a:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 800144c:	4b10      	ldr	r3, [pc, #64]	@ (8001490 <alignRotor+0x110>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2200      	movs	r2, #0
 8001452:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8001454:	4b0e      	ldr	r3, [pc, #56]	@ (8001490 <alignRotor+0x110>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2200      	movs	r2, #0
 800145a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800145c:	bf00      	nop
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	f3af 8000 	nop.w
 8001468:	00000000 	.word	0x00000000
 800146c:	40a76e00 	.word	0x40a76e00
 8001470:	9999999a 	.word	0x9999999a
 8001474:	3fd99999 	.word	0x3fd99999
 8001478:	20000260 	.word	0x20000260
 800147c:	40200000 	.word	0x40200000
 8001480:	3ff00000 	.word	0x3ff00000
 8001484:	200002e8 	.word	0x200002e8
 8001488:	200002ea 	.word	0x200002ea
 800148c:	200002ec 	.word	0x200002ec
 8001490:	20000474 	.word	0x20000474
 8001494:	200002a0 	.word	0x200002a0

08001498 <clark>:
void clark()
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
 	i_alpha = ia;
 800149c:	4b12      	ldr	r3, [pc, #72]	@ (80014e8 <clark+0x50>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a12      	ldr	r2, [pc, #72]	@ (80014ec <clark+0x54>)
 80014a2:	6013      	str	r3, [r2, #0]
	i_beta = (ib - ic) / sqrt(3);
 80014a4:	4b12      	ldr	r3, [pc, #72]	@ (80014f0 <clark+0x58>)
 80014a6:	ed93 7a00 	vldr	s14, [r3]
 80014aa:	4b12      	ldr	r3, [pc, #72]	@ (80014f4 <clark+0x5c>)
 80014ac:	edd3 7a00 	vldr	s15, [r3]
 80014b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014b4:	ee17 0a90 	vmov	r0, s15
 80014b8:	f7ff f866 	bl	8000588 <__aeabi_f2d>
 80014bc:	a308      	add	r3, pc, #32	@ (adr r3, 80014e0 <clark+0x48>)
 80014be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c2:	f7ff f9e3 	bl	800088c <__aeabi_ddiv>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	4610      	mov	r0, r2
 80014cc:	4619      	mov	r1, r3
 80014ce:	f7ff fbab 	bl	8000c28 <__aeabi_d2f>
 80014d2:	4603      	mov	r3, r0
 80014d4:	4a08      	ldr	r2, [pc, #32]	@ (80014f8 <clark+0x60>)
 80014d6:	6013      	str	r3, [r2, #0]
}
 80014d8:	bf00      	nop
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	f3af 8000 	nop.w
 80014e0:	e8584caa 	.word	0xe8584caa
 80014e4:	3ffbb67a 	.word	0x3ffbb67a
 80014e8:	2000023c 	.word	0x2000023c
 80014ec:	20000248 	.word	0x20000248
 80014f0:	20000240 	.word	0x20000240
 80014f4:	20000244 	.word	0x20000244
 80014f8:	2000024c 	.word	0x2000024c

080014fc <park>:

void park()
{
 80014fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001500:	af00      	add	r7, sp, #0
	i_d = i_alpha*cos(theta) + i_beta*sin(theta);
 8001502:	4b59      	ldr	r3, [pc, #356]	@ (8001668 <park+0x16c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff f83e 	bl	8000588 <__aeabi_f2d>
 800150c:	4604      	mov	r4, r0
 800150e:	460d      	mov	r5, r1
 8001510:	4b56      	ldr	r3, [pc, #344]	@ (800166c <park+0x170>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff f837 	bl	8000588 <__aeabi_f2d>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	ec43 2b10 	vmov	d0, r2, r3
 8001522:	f00a fec1 	bl	800c2a8 <cos>
 8001526:	ec53 2b10 	vmov	r2, r3, d0
 800152a:	4620      	mov	r0, r4
 800152c:	4629      	mov	r1, r5
 800152e:	f7ff f883 	bl	8000638 <__aeabi_dmul>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4690      	mov	r8, r2
 8001538:	4699      	mov	r9, r3
 800153a:	4b4d      	ldr	r3, [pc, #308]	@ (8001670 <park+0x174>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff f822 	bl	8000588 <__aeabi_f2d>
 8001544:	4604      	mov	r4, r0
 8001546:	460d      	mov	r5, r1
 8001548:	4b48      	ldr	r3, [pc, #288]	@ (800166c <park+0x170>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff f81b 	bl	8000588 <__aeabi_f2d>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	ec43 2b10 	vmov	d0, r2, r3
 800155a:	f00a fef9 	bl	800c350 <sin>
 800155e:	ec53 2b10 	vmov	r2, r3, d0
 8001562:	4620      	mov	r0, r4
 8001564:	4629      	mov	r1, r5
 8001566:	f7ff f867 	bl	8000638 <__aeabi_dmul>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	4640      	mov	r0, r8
 8001570:	4649      	mov	r1, r9
 8001572:	f7fe feab 	bl	80002cc <__adddf3>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	4610      	mov	r0, r2
 800157c:	4619      	mov	r1, r3
 800157e:	f7ff fb53 	bl	8000c28 <__aeabi_d2f>
 8001582:	4603      	mov	r3, r0
 8001584:	4a3b      	ldr	r2, [pc, #236]	@ (8001674 <park+0x178>)
 8001586:	6013      	str	r3, [r2, #0]
	i_q = -i_alpha*sin(theta) + i_beta*cos(theta);
 8001588:	4b37      	ldr	r3, [pc, #220]	@ (8001668 <park+0x16c>)
 800158a:	edd3 7a00 	vldr	s15, [r3]
 800158e:	eef1 7a67 	vneg.f32	s15, s15
 8001592:	ee17 3a90 	vmov	r3, s15
 8001596:	4618      	mov	r0, r3
 8001598:	f7fe fff6 	bl	8000588 <__aeabi_f2d>
 800159c:	4604      	mov	r4, r0
 800159e:	460d      	mov	r5, r1
 80015a0:	4b32      	ldr	r3, [pc, #200]	@ (800166c <park+0x170>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7fe ffef 	bl	8000588 <__aeabi_f2d>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	ec43 2b10 	vmov	d0, r2, r3
 80015b2:	f00a fecd 	bl	800c350 <sin>
 80015b6:	ec53 2b10 	vmov	r2, r3, d0
 80015ba:	4620      	mov	r0, r4
 80015bc:	4629      	mov	r1, r5
 80015be:	f7ff f83b 	bl	8000638 <__aeabi_dmul>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4690      	mov	r8, r2
 80015c8:	4699      	mov	r9, r3
 80015ca:	4b29      	ldr	r3, [pc, #164]	@ (8001670 <park+0x174>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7fe ffda 	bl	8000588 <__aeabi_f2d>
 80015d4:	4604      	mov	r4, r0
 80015d6:	460d      	mov	r5, r1
 80015d8:	4b24      	ldr	r3, [pc, #144]	@ (800166c <park+0x170>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7fe ffd3 	bl	8000588 <__aeabi_f2d>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	ec43 2b10 	vmov	d0, r2, r3
 80015ea:	f00a fe5d 	bl	800c2a8 <cos>
 80015ee:	ec53 2b10 	vmov	r2, r3, d0
 80015f2:	4620      	mov	r0, r4
 80015f4:	4629      	mov	r1, r5
 80015f6:	f7ff f81f 	bl	8000638 <__aeabi_dmul>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	4640      	mov	r0, r8
 8001600:	4649      	mov	r1, r9
 8001602:	f7fe fe63 	bl	80002cc <__adddf3>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4610      	mov	r0, r2
 800160c:	4619      	mov	r1, r3
 800160e:	f7ff fb0b 	bl	8000c28 <__aeabi_d2f>
 8001612:	4603      	mov	r3, r0
 8001614:	4a18      	ldr	r2, [pc, #96]	@ (8001678 <park+0x17c>)
 8001616:	6013      	str	r3, [r2, #0]
	idq = sqrt( i_d * i_d + i_q * i_q);
 8001618:	4b16      	ldr	r3, [pc, #88]	@ (8001674 <park+0x178>)
 800161a:	ed93 7a00 	vldr	s14, [r3]
 800161e:	4b15      	ldr	r3, [pc, #84]	@ (8001674 <park+0x178>)
 8001620:	edd3 7a00 	vldr	s15, [r3]
 8001624:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001628:	4b13      	ldr	r3, [pc, #76]	@ (8001678 <park+0x17c>)
 800162a:	edd3 6a00 	vldr	s13, [r3]
 800162e:	4b12      	ldr	r3, [pc, #72]	@ (8001678 <park+0x17c>)
 8001630:	edd3 7a00 	vldr	s15, [r3]
 8001634:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001638:	ee77 7a27 	vadd.f32	s15, s14, s15
 800163c:	ee17 0a90 	vmov	r0, s15
 8001640:	f7fe ffa2 	bl	8000588 <__aeabi_f2d>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	ec43 2b10 	vmov	d0, r2, r3
 800164c:	f00a fe00 	bl	800c250 <sqrt>
 8001650:	ec53 2b10 	vmov	r2, r3, d0
 8001654:	4610      	mov	r0, r2
 8001656:	4619      	mov	r1, r3
 8001658:	f7ff fae6 	bl	8000c28 <__aeabi_d2f>
 800165c:	4603      	mov	r3, r0
 800165e:	4a07      	ldr	r2, [pc, #28]	@ (800167c <park+0x180>)
 8001660:	6013      	str	r3, [r2, #0]
}
 8001662:	bf00      	nop
 8001664:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001668:	20000248 	.word	0x20000248
 800166c:	200002a8 	.word	0x200002a8
 8001670:	2000024c 	.word	0x2000024c
 8001674:	20000250 	.word	0x20000250
 8001678:	20000254 	.word	0x20000254
 800167c:	200002bc 	.word	0x200002bc

08001680 <setpwm>:

void setpwm(){
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0

	Va = fminf(fmaxf(Va, -8.0f), 8.0f);
 8001684:	4b7e      	ldr	r3, [pc, #504]	@ (8001880 <setpwm+0x200>)
 8001686:	edd3 7a00 	vldr	s15, [r3]
 800168a:	eefa 0a00 	vmov.f32	s1, #160	@ 0xc1000000 -8.0
 800168e:	eeb0 0a67 	vmov.f32	s0, s15
 8001692:	f00a feb1 	bl	800c3f8 <fmaxf>
 8001696:	eef0 7a40 	vmov.f32	s15, s0
 800169a:	eef2 0a00 	vmov.f32	s1, #32	@ 0x41000000  8.0
 800169e:	eeb0 0a67 	vmov.f32	s0, s15
 80016a2:	f00a fec6 	bl	800c432 <fminf>
 80016a6:	eef0 7a40 	vmov.f32	s15, s0
 80016aa:	4b75      	ldr	r3, [pc, #468]	@ (8001880 <setpwm+0x200>)
 80016ac:	edc3 7a00 	vstr	s15, [r3]
	Vb = fminf(fmaxf(Vb, -8.0f), 8.0f);
 80016b0:	4b74      	ldr	r3, [pc, #464]	@ (8001884 <setpwm+0x204>)
 80016b2:	edd3 7a00 	vldr	s15, [r3]
 80016b6:	eefa 0a00 	vmov.f32	s1, #160	@ 0xc1000000 -8.0
 80016ba:	eeb0 0a67 	vmov.f32	s0, s15
 80016be:	f00a fe9b 	bl	800c3f8 <fmaxf>
 80016c2:	eef0 7a40 	vmov.f32	s15, s0
 80016c6:	eef2 0a00 	vmov.f32	s1, #32	@ 0x41000000  8.0
 80016ca:	eeb0 0a67 	vmov.f32	s0, s15
 80016ce:	f00a feb0 	bl	800c432 <fminf>
 80016d2:	eef0 7a40 	vmov.f32	s15, s0
 80016d6:	4b6b      	ldr	r3, [pc, #428]	@ (8001884 <setpwm+0x204>)
 80016d8:	edc3 7a00 	vstr	s15, [r3]
	Vc = fminf(fmaxf(Vc, -8.0f), 8.0f);
 80016dc:	4b6a      	ldr	r3, [pc, #424]	@ (8001888 <setpwm+0x208>)
 80016de:	edd3 7a00 	vldr	s15, [r3]
 80016e2:	eefa 0a00 	vmov.f32	s1, #160	@ 0xc1000000 -8.0
 80016e6:	eeb0 0a67 	vmov.f32	s0, s15
 80016ea:	f00a fe85 	bl	800c3f8 <fmaxf>
 80016ee:	eef0 7a40 	vmov.f32	s15, s0
 80016f2:	eef2 0a00 	vmov.f32	s1, #32	@ 0x41000000  8.0
 80016f6:	eeb0 0a67 	vmov.f32	s0, s15
 80016fa:	f00a fe9a 	bl	800c432 <fminf>
 80016fe:	eef0 7a40 	vmov.f32	s15, s0
 8001702:	4b61      	ldr	r3, [pc, #388]	@ (8001888 <setpwm+0x208>)
 8001704:	edc3 7a00 	vstr	s15, [r3]

	PWM_A = ((Va / 8 + 1.0)/2 * PWM_PERIOD)*0.7;
 8001708:	4b5d      	ldr	r3, [pc, #372]	@ (8001880 <setpwm+0x200>)
 800170a:	edd3 7a00 	vldr	s15, [r3]
 800170e:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8001712:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001716:	ee16 0a90 	vmov	r0, s13
 800171a:	f7fe ff35 	bl	8000588 <__aeabi_f2d>
 800171e:	f04f 0200 	mov.w	r2, #0
 8001722:	4b5a      	ldr	r3, [pc, #360]	@ (800188c <setpwm+0x20c>)
 8001724:	f7fe fdd2 	bl	80002cc <__adddf3>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	4610      	mov	r0, r2
 800172e:	4619      	mov	r1, r3
 8001730:	f04f 0200 	mov.w	r2, #0
 8001734:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001738:	f7ff f8a8 	bl	800088c <__aeabi_ddiv>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4610      	mov	r0, r2
 8001742:	4619      	mov	r1, r3
 8001744:	a34a      	add	r3, pc, #296	@ (adr r3, 8001870 <setpwm+0x1f0>)
 8001746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174a:	f7fe ff75 	bl	8000638 <__aeabi_dmul>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4610      	mov	r0, r2
 8001754:	4619      	mov	r1, r3
 8001756:	a348      	add	r3, pc, #288	@ (adr r3, 8001878 <setpwm+0x1f8>)
 8001758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175c:	f7fe ff6c 	bl	8000638 <__aeabi_dmul>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	4610      	mov	r0, r2
 8001766:	4619      	mov	r1, r3
 8001768:	f7ff fa3e 	bl	8000be8 <__aeabi_d2uiz>
 800176c:	4603      	mov	r3, r0
 800176e:	b29a      	uxth	r2, r3
 8001770:	4b47      	ldr	r3, [pc, #284]	@ (8001890 <setpwm+0x210>)
 8001772:	801a      	strh	r2, [r3, #0]
	PWM_B = ((Vb / 8 + 1.0)/2 * PWM_PERIOD)*0.7;
 8001774:	4b43      	ldr	r3, [pc, #268]	@ (8001884 <setpwm+0x204>)
 8001776:	edd3 7a00 	vldr	s15, [r3]
 800177a:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 800177e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001782:	ee16 0a90 	vmov	r0, s13
 8001786:	f7fe feff 	bl	8000588 <__aeabi_f2d>
 800178a:	f04f 0200 	mov.w	r2, #0
 800178e:	4b3f      	ldr	r3, [pc, #252]	@ (800188c <setpwm+0x20c>)
 8001790:	f7fe fd9c 	bl	80002cc <__adddf3>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4610      	mov	r0, r2
 800179a:	4619      	mov	r1, r3
 800179c:	f04f 0200 	mov.w	r2, #0
 80017a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80017a4:	f7ff f872 	bl	800088c <__aeabi_ddiv>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4610      	mov	r0, r2
 80017ae:	4619      	mov	r1, r3
 80017b0:	a32f      	add	r3, pc, #188	@ (adr r3, 8001870 <setpwm+0x1f0>)
 80017b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b6:	f7fe ff3f 	bl	8000638 <__aeabi_dmul>
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	4610      	mov	r0, r2
 80017c0:	4619      	mov	r1, r3
 80017c2:	a32d      	add	r3, pc, #180	@ (adr r3, 8001878 <setpwm+0x1f8>)
 80017c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c8:	f7fe ff36 	bl	8000638 <__aeabi_dmul>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	4610      	mov	r0, r2
 80017d2:	4619      	mov	r1, r3
 80017d4:	f7ff fa08 	bl	8000be8 <__aeabi_d2uiz>
 80017d8:	4603      	mov	r3, r0
 80017da:	b29a      	uxth	r2, r3
 80017dc:	4b2d      	ldr	r3, [pc, #180]	@ (8001894 <setpwm+0x214>)
 80017de:	801a      	strh	r2, [r3, #0]
	PWM_C = ((Vc / 8 + 1.0)/2 * PWM_PERIOD)*0.7;
 80017e0:	4b29      	ldr	r3, [pc, #164]	@ (8001888 <setpwm+0x208>)
 80017e2:	edd3 7a00 	vldr	s15, [r3]
 80017e6:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 80017ea:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80017ee:	ee16 0a90 	vmov	r0, s13
 80017f2:	f7fe fec9 	bl	8000588 <__aeabi_f2d>
 80017f6:	f04f 0200 	mov.w	r2, #0
 80017fa:	4b24      	ldr	r3, [pc, #144]	@ (800188c <setpwm+0x20c>)
 80017fc:	f7fe fd66 	bl	80002cc <__adddf3>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	4610      	mov	r0, r2
 8001806:	4619      	mov	r1, r3
 8001808:	f04f 0200 	mov.w	r2, #0
 800180c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001810:	f7ff f83c 	bl	800088c <__aeabi_ddiv>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	4610      	mov	r0, r2
 800181a:	4619      	mov	r1, r3
 800181c:	a314      	add	r3, pc, #80	@ (adr r3, 8001870 <setpwm+0x1f0>)
 800181e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001822:	f7fe ff09 	bl	8000638 <__aeabi_dmul>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	4610      	mov	r0, r2
 800182c:	4619      	mov	r1, r3
 800182e:	a312      	add	r3, pc, #72	@ (adr r3, 8001878 <setpwm+0x1f8>)
 8001830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001834:	f7fe ff00 	bl	8000638 <__aeabi_dmul>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	4610      	mov	r0, r2
 800183e:	4619      	mov	r1, r3
 8001840:	f7ff f9d2 	bl	8000be8 <__aeabi_d2uiz>
 8001844:	4603      	mov	r3, r0
 8001846:	b29a      	uxth	r2, r3
 8001848:	4b13      	ldr	r3, [pc, #76]	@ (8001898 <setpwm+0x218>)
 800184a:	801a      	strh	r2, [r3, #0]



	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM_A);
 800184c:	4b10      	ldr	r3, [pc, #64]	@ (8001890 <setpwm+0x210>)
 800184e:	881a      	ldrh	r2, [r3, #0]
 8001850:	4b12      	ldr	r3, [pc, #72]	@ (800189c <setpwm+0x21c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWM_B);
 8001856:	4b0f      	ldr	r3, [pc, #60]	@ (8001894 <setpwm+0x214>)
 8001858:	881a      	ldrh	r2, [r3, #0]
 800185a:	4b10      	ldr	r3, [pc, #64]	@ (800189c <setpwm+0x21c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, PWM_C);
 8001860:	4b0d      	ldr	r3, [pc, #52]	@ (8001898 <setpwm+0x218>)
 8001862:	881a      	ldrh	r2, [r3, #0]
 8001864:	4b0d      	ldr	r3, [pc, #52]	@ (800189c <setpwm+0x21c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	63da      	str	r2, [r3, #60]	@ 0x3c


}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	00000000 	.word	0x00000000
 8001874:	40a76e00 	.word	0x40a76e00
 8001878:	66666666 	.word	0x66666666
 800187c:	3fe66666 	.word	0x3fe66666
 8001880:	20000260 	.word	0x20000260
 8001884:	20000264 	.word	0x20000264
 8001888:	20000268 	.word	0x20000268
 800188c:	3ff00000 	.word	0x3ff00000
 8001890:	200002e8 	.word	0x200002e8
 8001894:	200002ea 	.word	0x200002ea
 8001898:	200002ec 	.word	0x200002ec
 800189c:	20000474 	.word	0x20000474

080018a0 <update_PID>:

void update_PID()
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
	if ((fabs(error_pos) >= 0.0f) && (fabs(error_pos) <= (6.0f * (float)M_PI)))
 80018a4:	4bb0      	ldr	r3, [pc, #704]	@ (8001b68 <update_PID+0x2c8>)
 80018a6:	edd3 7a00 	vldr	s15, [r3]
 80018aa:	eef0 7ae7 	vabs.f32	s15, s15
 80018ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b6:	f2c0 80e6 	blt.w	8001a86 <update_PID+0x1e6>
 80018ba:	4bab      	ldr	r3, [pc, #684]	@ (8001b68 <update_PID+0x2c8>)
 80018bc:	edd3 7a00 	vldr	s15, [r3]
 80018c0:	eef0 7ae7 	vabs.f32	s15, s15
 80018c4:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 8001b6c <update_PID+0x2cc>
 80018c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d0:	f200 80d9 	bhi.w	8001a86 <update_PID+0x1e6>
	{

		Kp_speed = 20.0f;
 80018d4:	4ba6      	ldr	r3, [pc, #664]	@ (8001b70 <update_PID+0x2d0>)
 80018d6:	4aa7      	ldr	r2, [pc, #668]	@ (8001b74 <update_PID+0x2d4>)
 80018d8:	601a      	str	r2, [r3, #0]
				Ki_speed = 2.0f;
 80018da:	4ba7      	ldr	r3, [pc, #668]	@ (8001b78 <update_PID+0x2d8>)
 80018dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018e0:	601a      	str	r2, [r3, #0]
				Kd_speed = 2.0f;
 80018e2:	4ba6      	ldr	r3, [pc, #664]	@ (8001b7c <update_PID+0x2dc>)
 80018e4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018e8:	601a      	str	r2, [r3, #0]
				Ki_pos = 1.0f;
 80018ea:	4ba5      	ldr	r3, [pc, #660]	@ (8001b80 <update_PID+0x2e0>)
 80018ec:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80018f0:	601a      	str	r2, [r3, #0]
				Kp_pos = 100.0f;
 80018f2:	4ba4      	ldr	r3, [pc, #656]	@ (8001b84 <update_PID+0x2e4>)
 80018f4:	4aa4      	ldr	r2, [pc, #656]	@ (8001b88 <update_PID+0x2e8>)
 80018f6:	601a      	str	r2, [r3, #0]
				Kd_pos = 15.0f;
 80018f8:	4ba4      	ldr	r3, [pc, #656]	@ (8001b8c <update_PID+0x2ec>)
 80018fa:	4aa5      	ldr	r2, [pc, #660]	@ (8001b90 <update_PID+0x2f0>)
 80018fc:	601a      	str	r2, [r3, #0]
			    if((velocity_ref > -200 && velocity_ref <= 0) || (velocity_ref > 0 && velocity_ref <= 200))
 80018fe:	4ba5      	ldr	r3, [pc, #660]	@ (8001b94 <update_PID+0x2f4>)
 8001900:	edd3 7a00 	vldr	s15, [r3]
 8001904:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 8001b98 <update_PID+0x2f8>
 8001908:	eef4 7ac7 	vcmpe.f32	s15, s14
 800190c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001910:	dd07      	ble.n	8001922 <update_PID+0x82>
 8001912:	4ba0      	ldr	r3, [pc, #640]	@ (8001b94 <update_PID+0x2f4>)
 8001914:	edd3 7a00 	vldr	s15, [r3]
 8001918:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800191c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001920:	d911      	bls.n	8001946 <update_PID+0xa6>
 8001922:	4b9c      	ldr	r3, [pc, #624]	@ (8001b94 <update_PID+0x2f4>)
 8001924:	edd3 7a00 	vldr	s15, [r3]
 8001928:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800192c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001930:	dd10      	ble.n	8001954 <update_PID+0xb4>
 8001932:	4b98      	ldr	r3, [pc, #608]	@ (8001b94 <update_PID+0x2f4>)
 8001934:	edd3 7a00 	vldr	s15, [r3]
 8001938:	ed9f 7a98 	vldr	s14, [pc, #608]	@ 8001b9c <update_PID+0x2fc>
 800193c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001944:	d806      	bhi.n	8001954 <update_PID+0xb4>
			    {
			        Ki = 3.5;
 8001946:	4b96      	ldr	r3, [pc, #600]	@ (8001ba0 <update_PID+0x300>)
 8001948:	4a96      	ldr	r2, [pc, #600]	@ (8001ba4 <update_PID+0x304>)
 800194a:	601a      	str	r2, [r3, #0]
			        Kp = 0.8;
 800194c:	4b96      	ldr	r3, [pc, #600]	@ (8001ba8 <update_PID+0x308>)
 800194e:	4a97      	ldr	r2, [pc, #604]	@ (8001bac <update_PID+0x30c>)
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	e097      	b.n	8001a84 <update_PID+0x1e4>
			    }
			    else if((velocity_ref > -500 && velocity_ref <= -200)||(velocity_ref > 200 && velocity_ref <= 500))
 8001954:	4b8f      	ldr	r3, [pc, #572]	@ (8001b94 <update_PID+0x2f4>)
 8001956:	edd3 7a00 	vldr	s15, [r3]
 800195a:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 8001bb0 <update_PID+0x310>
 800195e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001966:	dd09      	ble.n	800197c <update_PID+0xdc>
 8001968:	4b8a      	ldr	r3, [pc, #552]	@ (8001b94 <update_PID+0x2f4>)
 800196a:	edd3 7a00 	vldr	s15, [r3]
 800196e:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 8001b98 <update_PID+0x2f8>
 8001972:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800197a:	d913      	bls.n	80019a4 <update_PID+0x104>
 800197c:	4b85      	ldr	r3, [pc, #532]	@ (8001b94 <update_PID+0x2f4>)
 800197e:	edd3 7a00 	vldr	s15, [r3]
 8001982:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8001b9c <update_PID+0x2fc>
 8001986:	eef4 7ac7 	vcmpe.f32	s15, s14
 800198a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800198e:	dd11      	ble.n	80019b4 <update_PID+0x114>
 8001990:	4b80      	ldr	r3, [pc, #512]	@ (8001b94 <update_PID+0x2f4>)
 8001992:	edd3 7a00 	vldr	s15, [r3]
 8001996:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 8001bb4 <update_PID+0x314>
 800199a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800199e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a2:	d807      	bhi.n	80019b4 <update_PID+0x114>
			    {
			        Ki = 5.0;
 80019a4:	4b7e      	ldr	r3, [pc, #504]	@ (8001ba0 <update_PID+0x300>)
 80019a6:	4a84      	ldr	r2, [pc, #528]	@ (8001bb8 <update_PID+0x318>)
 80019a8:	601a      	str	r2, [r3, #0]
			        Kp = 2.0;
 80019aa:	4b7f      	ldr	r3, [pc, #508]	@ (8001ba8 <update_PID+0x308>)
 80019ac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	e067      	b.n	8001a84 <update_PID+0x1e4>
			    }
			    else if((velocity_ref > -1000 && velocity_ref <= -500)||(velocity_ref > 500 && velocity_ref <= 1000))
 80019b4:	4b77      	ldr	r3, [pc, #476]	@ (8001b94 <update_PID+0x2f4>)
 80019b6:	edd3 7a00 	vldr	s15, [r3]
 80019ba:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8001bbc <update_PID+0x31c>
 80019be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c6:	dd09      	ble.n	80019dc <update_PID+0x13c>
 80019c8:	4b72      	ldr	r3, [pc, #456]	@ (8001b94 <update_PID+0x2f4>)
 80019ca:	edd3 7a00 	vldr	s15, [r3]
 80019ce:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8001bb0 <update_PID+0x310>
 80019d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019da:	d913      	bls.n	8001a04 <update_PID+0x164>
 80019dc:	4b6d      	ldr	r3, [pc, #436]	@ (8001b94 <update_PID+0x2f4>)
 80019de:	edd3 7a00 	vldr	s15, [r3]
 80019e2:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 8001bb4 <update_PID+0x314>
 80019e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ee:	dd11      	ble.n	8001a14 <update_PID+0x174>
 80019f0:	4b68      	ldr	r3, [pc, #416]	@ (8001b94 <update_PID+0x2f4>)
 80019f2:	edd3 7a00 	vldr	s15, [r3]
 80019f6:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 8001bc0 <update_PID+0x320>
 80019fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a02:	d807      	bhi.n	8001a14 <update_PID+0x174>
			    {
			        Ki = 7.0;
 8001a04:	4b66      	ldr	r3, [pc, #408]	@ (8001ba0 <update_PID+0x300>)
 8001a06:	4a6f      	ldr	r2, [pc, #444]	@ (8001bc4 <update_PID+0x324>)
 8001a08:	601a      	str	r2, [r3, #0]
			        Kp = 2.0;
 8001a0a:	4b67      	ldr	r3, [pc, #412]	@ (8001ba8 <update_PID+0x308>)
 8001a0c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	e037      	b.n	8001a84 <update_PID+0x1e4>
			    }
			    else if((velocity_ref > -1500 && velocity_ref <= -1000)||(velocity_ref > 1000 && velocity_ref <= 1500))
 8001a14:	4b5f      	ldr	r3, [pc, #380]	@ (8001b94 <update_PID+0x2f4>)
 8001a16:	edd3 7a00 	vldr	s15, [r3]
 8001a1a:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 8001bc8 <update_PID+0x328>
 8001a1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a26:	dd09      	ble.n	8001a3c <update_PID+0x19c>
 8001a28:	4b5a      	ldr	r3, [pc, #360]	@ (8001b94 <update_PID+0x2f4>)
 8001a2a:	edd3 7a00 	vldr	s15, [r3]
 8001a2e:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8001bbc <update_PID+0x31c>
 8001a32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a3a:	d913      	bls.n	8001a64 <update_PID+0x1c4>
 8001a3c:	4b55      	ldr	r3, [pc, #340]	@ (8001b94 <update_PID+0x2f4>)
 8001a3e:	edd3 7a00 	vldr	s15, [r3]
 8001a42:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8001bc0 <update_PID+0x320>
 8001a46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a4e:	dd11      	ble.n	8001a74 <update_PID+0x1d4>
 8001a50:	4b50      	ldr	r3, [pc, #320]	@ (8001b94 <update_PID+0x2f4>)
 8001a52:	edd3 7a00 	vldr	s15, [r3]
 8001a56:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8001bcc <update_PID+0x32c>
 8001a5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a62:	d807      	bhi.n	8001a74 <update_PID+0x1d4>
			    {
			        Ki = 11;
 8001a64:	4b4e      	ldr	r3, [pc, #312]	@ (8001ba0 <update_PID+0x300>)
 8001a66:	4a5a      	ldr	r2, [pc, #360]	@ (8001bd0 <update_PID+0x330>)
 8001a68:	601a      	str	r2, [r3, #0]
			        Kp = 2.0;
 8001a6a:	4b4f      	ldr	r3, [pc, #316]	@ (8001ba8 <update_PID+0x308>)
 8001a6c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	e007      	b.n	8001a84 <update_PID+0x1e4>
			    }
			    else
			    {
			        Ki = 13;
 8001a74:	4b4a      	ldr	r3, [pc, #296]	@ (8001ba0 <update_PID+0x300>)
 8001a76:	4a57      	ldr	r2, [pc, #348]	@ (8001bd4 <update_PID+0x334>)
 8001a78:	601a      	str	r2, [r3, #0]
			        Kp = 2.0;
 8001a7a:	4b4b      	ldr	r3, [pc, #300]	@ (8001ba8 <update_PID+0x308>)
 8001a7c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a80:	601a      	str	r2, [r3, #0]
			    if((velocity_ref > -200 && velocity_ref <= 0) || (velocity_ref > 0 && velocity_ref <= 200))
 8001a82:	e114      	b.n	8001cae <update_PID+0x40e>
 8001a84:	e113      	b.n	8001cae <update_PID+0x40e>
			    }
	}
else
	{
		Kp_speed = 10.0f;
 8001a86:	4b3a      	ldr	r3, [pc, #232]	@ (8001b70 <update_PID+0x2d0>)
 8001a88:	4a53      	ldr	r2, [pc, #332]	@ (8001bd8 <update_PID+0x338>)
 8001a8a:	601a      	str	r2, [r3, #0]
		Ki_speed = 0.0f;
 8001a8c:	4b3a      	ldr	r3, [pc, #232]	@ (8001b78 <update_PID+0x2d8>)
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
		Kd_speed = 0.0f;
 8001a94:	4b39      	ldr	r3, [pc, #228]	@ (8001b7c <update_PID+0x2dc>)
 8001a96:	f04f 0200 	mov.w	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
		Ki_pos = 5.0f;
 8001a9c:	4b38      	ldr	r3, [pc, #224]	@ (8001b80 <update_PID+0x2e0>)
 8001a9e:	4a46      	ldr	r2, [pc, #280]	@ (8001bb8 <update_PID+0x318>)
 8001aa0:	601a      	str	r2, [r3, #0]
		Kp_pos = 100.0f;
 8001aa2:	4b38      	ldr	r3, [pc, #224]	@ (8001b84 <update_PID+0x2e4>)
 8001aa4:	4a38      	ldr	r2, [pc, #224]	@ (8001b88 <update_PID+0x2e8>)
 8001aa6:	601a      	str	r2, [r3, #0]
		Kd_pos = 0.5f;
 8001aa8:	4b38      	ldr	r3, [pc, #224]	@ (8001b8c <update_PID+0x2ec>)
 8001aaa:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8001aae:	601a      	str	r2, [r3, #0]
		if((velocity_ref > -200 && velocity_ref <= 0) || (velocity_ref > 0 && velocity_ref <= 200))
 8001ab0:	4b38      	ldr	r3, [pc, #224]	@ (8001b94 <update_PID+0x2f4>)
 8001ab2:	edd3 7a00 	vldr	s15, [r3]
 8001ab6:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001b98 <update_PID+0x2f8>
 8001aba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac2:	dd07      	ble.n	8001ad4 <update_PID+0x234>
 8001ac4:	4b33      	ldr	r3, [pc, #204]	@ (8001b94 <update_PID+0x2f4>)
 8001ac6:	edd3 7a00 	vldr	s15, [r3]
 8001aca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad2:	d911      	bls.n	8001af8 <update_PID+0x258>
 8001ad4:	4b2f      	ldr	r3, [pc, #188]	@ (8001b94 <update_PID+0x2f4>)
 8001ad6:	edd3 7a00 	vldr	s15, [r3]
 8001ada:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ae2:	dd10      	ble.n	8001b06 <update_PID+0x266>
 8001ae4:	4b2b      	ldr	r3, [pc, #172]	@ (8001b94 <update_PID+0x2f4>)
 8001ae6:	edd3 7a00 	vldr	s15, [r3]
 8001aea:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8001b9c <update_PID+0x2fc>
 8001aee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af6:	d806      	bhi.n	8001b06 <update_PID+0x266>
		{
		Ki = 7.5;
 8001af8:	4b29      	ldr	r3, [pc, #164]	@ (8001ba0 <update_PID+0x300>)
 8001afa:	4a38      	ldr	r2, [pc, #224]	@ (8001bdc <update_PID+0x33c>)
 8001afc:	601a      	str	r2, [r3, #0]
		Kp = 5.5;
 8001afe:	4b2a      	ldr	r3, [pc, #168]	@ (8001ba8 <update_PID+0x308>)
 8001b00:	4a37      	ldr	r2, [pc, #220]	@ (8001be0 <update_PID+0x340>)
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	e0d3      	b.n	8001cae <update_PID+0x40e>
		}
		else if((velocity_ref > -500 && velocity_ref <= -200)||(velocity_ref > 200 && velocity_ref <= 500))
 8001b06:	4b23      	ldr	r3, [pc, #140]	@ (8001b94 <update_PID+0x2f4>)
 8001b08:	edd3 7a00 	vldr	s15, [r3]
 8001b0c:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001bb0 <update_PID+0x310>
 8001b10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b18:	dd09      	ble.n	8001b2e <update_PID+0x28e>
 8001b1a:	4b1e      	ldr	r3, [pc, #120]	@ (8001b94 <update_PID+0x2f4>)
 8001b1c:	edd3 7a00 	vldr	s15, [r3]
 8001b20:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001b98 <update_PID+0x2f8>
 8001b24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b2c:	d913      	bls.n	8001b56 <update_PID+0x2b6>
 8001b2e:	4b19      	ldr	r3, [pc, #100]	@ (8001b94 <update_PID+0x2f4>)
 8001b30:	edd3 7a00 	vldr	s15, [r3]
 8001b34:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8001b9c <update_PID+0x2fc>
 8001b38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b40:	dd50      	ble.n	8001be4 <update_PID+0x344>
 8001b42:	4b14      	ldr	r3, [pc, #80]	@ (8001b94 <update_PID+0x2f4>)
 8001b44:	edd3 7a00 	vldr	s15, [r3]
 8001b48:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001bb4 <update_PID+0x314>
 8001b4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b54:	d846      	bhi.n	8001be4 <update_PID+0x344>
		{
		 Ki = 8.0;
 8001b56:	4b12      	ldr	r3, [pc, #72]	@ (8001ba0 <update_PID+0x300>)
 8001b58:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8001b5c:	601a      	str	r2, [r3, #0]
		 Kp = 5.5;
 8001b5e:	4b12      	ldr	r3, [pc, #72]	@ (8001ba8 <update_PID+0x308>)
 8001b60:	4a1f      	ldr	r2, [pc, #124]	@ (8001be0 <update_PID+0x340>)
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	e0a3      	b.n	8001cae <update_PID+0x40e>
 8001b66:	bf00      	nop
 8001b68:	20000294 	.word	0x20000294
 8001b6c:	4196cbe4 	.word	0x4196cbe4
 8001b70:	20000010 	.word	0x20000010
 8001b74:	41a00000 	.word	0x41a00000
 8001b78:	20000014 	.word	0x20000014
 8001b7c:	20000018 	.word	0x20000018
 8001b80:	2000001c 	.word	0x2000001c
 8001b84:	20000020 	.word	0x20000020
 8001b88:	42c80000 	.word	0x42c80000
 8001b8c:	20000024 	.word	0x20000024
 8001b90:	41700000 	.word	0x41700000
 8001b94:	20000004 	.word	0x20000004
 8001b98:	c3480000 	.word	0xc3480000
 8001b9c:	43480000 	.word	0x43480000
 8001ba0:	20000008 	.word	0x20000008
 8001ba4:	40600000 	.word	0x40600000
 8001ba8:	2000000c 	.word	0x2000000c
 8001bac:	3f4ccccd 	.word	0x3f4ccccd
 8001bb0:	c3fa0000 	.word	0xc3fa0000
 8001bb4:	43fa0000 	.word	0x43fa0000
 8001bb8:	40a00000 	.word	0x40a00000
 8001bbc:	c47a0000 	.word	0xc47a0000
 8001bc0:	447a0000 	.word	0x447a0000
 8001bc4:	40e00000 	.word	0x40e00000
 8001bc8:	c4bb8000 	.word	0xc4bb8000
 8001bcc:	44bb8000 	.word	0x44bb8000
 8001bd0:	41300000 	.word	0x41300000
 8001bd4:	41500000 	.word	0x41500000
 8001bd8:	41200000 	.word	0x41200000
 8001bdc:	40f00000 	.word	0x40f00000
 8001be0:	40b00000 	.word	0x40b00000
		 }
		else if((velocity_ref > -1000 && velocity_ref <= -500)||(velocity_ref > 500 && velocity_ref <= 1000))
 8001be4:	4b34      	ldr	r3, [pc, #208]	@ (8001cb8 <update_PID+0x418>)
 8001be6:	edd3 7a00 	vldr	s15, [r3]
 8001bea:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8001cbc <update_PID+0x41c>
 8001bee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf6:	dd09      	ble.n	8001c0c <update_PID+0x36c>
 8001bf8:	4b2f      	ldr	r3, [pc, #188]	@ (8001cb8 <update_PID+0x418>)
 8001bfa:	edd3 7a00 	vldr	s15, [r3]
 8001bfe:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001cc0 <update_PID+0x420>
 8001c02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c0a:	d913      	bls.n	8001c34 <update_PID+0x394>
 8001c0c:	4b2a      	ldr	r3, [pc, #168]	@ (8001cb8 <update_PID+0x418>)
 8001c0e:	edd3 7a00 	vldr	s15, [r3]
 8001c12:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8001cc4 <update_PID+0x424>
 8001c16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1e:	dd10      	ble.n	8001c42 <update_PID+0x3a2>
 8001c20:	4b25      	ldr	r3, [pc, #148]	@ (8001cb8 <update_PID+0x418>)
 8001c22:	edd3 7a00 	vldr	s15, [r3]
 8001c26:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001cc8 <update_PID+0x428>
 8001c2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c32:	d806      	bhi.n	8001c42 <update_PID+0x3a2>
		{
		 Ki = 9.0;
 8001c34:	4b25      	ldr	r3, [pc, #148]	@ (8001ccc <update_PID+0x42c>)
 8001c36:	4a26      	ldr	r2, [pc, #152]	@ (8001cd0 <update_PID+0x430>)
 8001c38:	601a      	str	r2, [r3, #0]
		 Kp = 5.5;
 8001c3a:	4b26      	ldr	r3, [pc, #152]	@ (8001cd4 <update_PID+0x434>)
 8001c3c:	4a26      	ldr	r2, [pc, #152]	@ (8001cd8 <update_PID+0x438>)
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	e035      	b.n	8001cae <update_PID+0x40e>
		 }
		else if((velocity_ref > -1500 && velocity_ref <= -1000)||(velocity_ref > 1000 && velocity_ref <= 1500))
 8001c42:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb8 <update_PID+0x418>)
 8001c44:	edd3 7a00 	vldr	s15, [r3]
 8001c48:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8001cdc <update_PID+0x43c>
 8001c4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c54:	dd09      	ble.n	8001c6a <update_PID+0x3ca>
 8001c56:	4b18      	ldr	r3, [pc, #96]	@ (8001cb8 <update_PID+0x418>)
 8001c58:	edd3 7a00 	vldr	s15, [r3]
 8001c5c:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001cbc <update_PID+0x41c>
 8001c60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c68:	d913      	bls.n	8001c92 <update_PID+0x3f2>
 8001c6a:	4b13      	ldr	r3, [pc, #76]	@ (8001cb8 <update_PID+0x418>)
 8001c6c:	edd3 7a00 	vldr	s15, [r3]
 8001c70:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001cc8 <update_PID+0x428>
 8001c74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c7c:	dd10      	ble.n	8001ca0 <update_PID+0x400>
 8001c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb8 <update_PID+0x418>)
 8001c80:	edd3 7a00 	vldr	s15, [r3]
 8001c84:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001ce0 <update_PID+0x440>
 8001c88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c90:	d806      	bhi.n	8001ca0 <update_PID+0x400>
		{
		Ki = 13;
 8001c92:	4b0e      	ldr	r3, [pc, #56]	@ (8001ccc <update_PID+0x42c>)
 8001c94:	4a13      	ldr	r2, [pc, #76]	@ (8001ce4 <update_PID+0x444>)
 8001c96:	601a      	str	r2, [r3, #0]
		Kp = 5.5;
 8001c98:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd4 <update_PID+0x434>)
 8001c9a:	4a0f      	ldr	r2, [pc, #60]	@ (8001cd8 <update_PID+0x438>)
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	e006      	b.n	8001cae <update_PID+0x40e>
		}
		else
		{
		Ki = 13;
 8001ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8001ccc <update_PID+0x42c>)
 8001ca2:	4a10      	ldr	r2, [pc, #64]	@ (8001ce4 <update_PID+0x444>)
 8001ca4:	601a      	str	r2, [r3, #0]
		Kp = 5.5;
 8001ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd4 <update_PID+0x434>)
 8001ca8:	4a0b      	ldr	r2, [pc, #44]	@ (8001cd8 <update_PID+0x438>)
 8001caa:	601a      	str	r2, [r3, #0]
		}
	}

}
 8001cac:	bf00      	nop
 8001cae:	bf00      	nop
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	20000004 	.word	0x20000004
 8001cbc:	c47a0000 	.word	0xc47a0000
 8001cc0:	c3fa0000 	.word	0xc3fa0000
 8001cc4:	43fa0000 	.word	0x43fa0000
 8001cc8:	447a0000 	.word	0x447a0000
 8001ccc:	20000008 	.word	0x20000008
 8001cd0:	41100000 	.word	0x41100000
 8001cd4:	2000000c 	.word	0x2000000c
 8001cd8:	40b00000 	.word	0x40b00000
 8001cdc:	c4bb8000 	.word	0xc4bb8000
 8001ce0:	44bb8000 	.word	0x44bb8000
 8001ce4:	41500000 	.word	0x41500000

08001ce8 <position_loop>:

void position_loop()
{
 8001ce8:	b5b0      	push	{r4, r5, r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
	update_position_dt();
 8001cee:	f7ff f9b3 	bl	8001058 <update_position_dt>
	    static float raw_angle_prev = 0;
	    static int turn_count = 0;

	    static float velocity_ref_prev = 0;

	     raw_angle = AS5147U_GetAngleRad();
 8001cf2:	f7ff fa69 	bl	80011c8 <AS5147U_GetAngleRad>
 8001cf6:	eef0 7a40 	vmov.f32	s15, s0
 8001cfa:	4b8f      	ldr	r3, [pc, #572]	@ (8001f38 <position_loop+0x250>)
 8001cfc:	edc3 7a00 	vstr	s15, [r3]
	     angle_deg = raw_angle * (180.0f / M_PI);
 8001d00:	4b8d      	ldr	r3, [pc, #564]	@ (8001f38 <position_loop+0x250>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7fe fc3f 	bl	8000588 <__aeabi_f2d>
 8001d0a:	a385      	add	r3, pc, #532	@ (adr r3, 8001f20 <position_loop+0x238>)
 8001d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d10:	f7fe fc92 	bl	8000638 <__aeabi_dmul>
 8001d14:	4602      	mov	r2, r0
 8001d16:	460b      	mov	r3, r1
 8001d18:	4610      	mov	r0, r2
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	f7fe ff84 	bl	8000c28 <__aeabi_d2f>
 8001d20:	4603      	mov	r3, r0
 8001d22:	4a86      	ldr	r2, [pc, #536]	@ (8001f3c <position_loop+0x254>)
 8001d24:	6013      	str	r3, [r2, #0]
	    float delta = raw_angle - raw_angle_prev;
 8001d26:	4b84      	ldr	r3, [pc, #528]	@ (8001f38 <position_loop+0x250>)
 8001d28:	ed93 7a00 	vldr	s14, [r3]
 8001d2c:	4b84      	ldr	r3, [pc, #528]	@ (8001f40 <position_loop+0x258>)
 8001d2e:	edd3 7a00 	vldr	s15, [r3]
 8001d32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d36:	edc7 7a03 	vstr	s15, [r7, #12]

	    if (delta > M_PI) turn_count--;
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f7fe fc24 	bl	8000588 <__aeabi_f2d>
 8001d40:	a379      	add	r3, pc, #484	@ (adr r3, 8001f28 <position_loop+0x240>)
 8001d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d46:	f7fe ff07 	bl	8000b58 <__aeabi_dcmpgt>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d005      	beq.n	8001d5c <position_loop+0x74>
 8001d50:	4b7c      	ldr	r3, [pc, #496]	@ (8001f44 <position_loop+0x25c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	3b01      	subs	r3, #1
 8001d56:	4a7b      	ldr	r2, [pc, #492]	@ (8001f44 <position_loop+0x25c>)
 8001d58:	6013      	str	r3, [r2, #0]
 8001d5a:	e00f      	b.n	8001d7c <position_loop+0x94>
	    else if (delta < -M_PI) turn_count++;
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	f7fe fc13 	bl	8000588 <__aeabi_f2d>
 8001d62:	a373      	add	r3, pc, #460	@ (adr r3, 8001f30 <position_loop+0x248>)
 8001d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d68:	f7fe fed8 	bl	8000b1c <__aeabi_dcmplt>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d004      	beq.n	8001d7c <position_loop+0x94>
 8001d72:	4b74      	ldr	r3, [pc, #464]	@ (8001f44 <position_loop+0x25c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	3301      	adds	r3, #1
 8001d78:	4a72      	ldr	r2, [pc, #456]	@ (8001f44 <position_loop+0x25c>)
 8001d7a:	6013      	str	r3, [r2, #0]

	    raw_angle_prev = raw_angle;
 8001d7c:	4b6e      	ldr	r3, [pc, #440]	@ (8001f38 <position_loop+0x250>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a6f      	ldr	r2, [pc, #444]	@ (8001f40 <position_loop+0x258>)
 8001d82:	6013      	str	r3, [r2, #0]

	    theta_now = raw_angle + turn_count * 2.0f * M_PI;
 8001d84:	4b6c      	ldr	r3, [pc, #432]	@ (8001f38 <position_loop+0x250>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7fe fbfd 	bl	8000588 <__aeabi_f2d>
 8001d8e:	4604      	mov	r4, r0
 8001d90:	460d      	mov	r5, r1
 8001d92:	4b6c      	ldr	r3, [pc, #432]	@ (8001f44 <position_loop+0x25c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	ee07 3a90 	vmov	s15, r3
 8001d9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d9e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001da2:	ee17 0a90 	vmov	r0, s15
 8001da6:	f7fe fbef 	bl	8000588 <__aeabi_f2d>
 8001daa:	a35f      	add	r3, pc, #380	@ (adr r3, 8001f28 <position_loop+0x240>)
 8001dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db0:	f7fe fc42 	bl	8000638 <__aeabi_dmul>
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	4620      	mov	r0, r4
 8001dba:	4629      	mov	r1, r5
 8001dbc:	f7fe fa86 	bl	80002cc <__adddf3>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	4610      	mov	r0, r2
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	f7fe ff2e 	bl	8000c28 <__aeabi_d2f>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	4a5e      	ldr	r2, [pc, #376]	@ (8001f48 <position_loop+0x260>)
 8001dd0:	6013      	str	r3, [r2, #0]
	    error_pos = theta_ref - theta_now;
 8001dd2:	4b5e      	ldr	r3, [pc, #376]	@ (8001f4c <position_loop+0x264>)
 8001dd4:	ed93 7a00 	vldr	s14, [r3]
 8001dd8:	4b5b      	ldr	r3, [pc, #364]	@ (8001f48 <position_loop+0x260>)
 8001dda:	edd3 7a00 	vldr	s15, [r3]
 8001dde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001de2:	4b5b      	ldr	r3, [pc, #364]	@ (8001f50 <position_loop+0x268>)
 8001de4:	edc3 7a00 	vstr	s15, [r3]

	    error_pos_sum += error_pos * position_dt;
 8001de8:	4b59      	ldr	r3, [pc, #356]	@ (8001f50 <position_loop+0x268>)
 8001dea:	ed93 7a00 	vldr	s14, [r3]
 8001dee:	4b59      	ldr	r3, [pc, #356]	@ (8001f54 <position_loop+0x26c>)
 8001df0:	edd3 7a00 	vldr	s15, [r3]
 8001df4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001df8:	4b57      	ldr	r3, [pc, #348]	@ (8001f58 <position_loop+0x270>)
 8001dfa:	edd3 7a00 	vldr	s15, [r3]
 8001dfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e02:	4b55      	ldr	r3, [pc, #340]	@ (8001f58 <position_loop+0x270>)
 8001e04:	edc3 7a00 	vstr	s15, [r3]
	    error_pos_sum = fminf(fmaxf(error_pos_sum, -0.5f), 0.5f);
 8001e08:	4b53      	ldr	r3, [pc, #332]	@ (8001f58 <position_loop+0x270>)
 8001e0a:	edd3 7a00 	vldr	s15, [r3]
 8001e0e:	eefe 0a00 	vmov.f32	s1, #224	@ 0xbf000000 -0.5
 8001e12:	eeb0 0a67 	vmov.f32	s0, s15
 8001e16:	f00a faef 	bl	800c3f8 <fmaxf>
 8001e1a:	eef0 7a40 	vmov.f32	s15, s0
 8001e1e:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 8001e22:	eeb0 0a67 	vmov.f32	s0, s15
 8001e26:	f00a fb04 	bl	800c432 <fminf>
 8001e2a:	eef0 7a40 	vmov.f32	s15, s0
 8001e2e:	4b4a      	ldr	r3, [pc, #296]	@ (8001f58 <position_loop+0x270>)
 8001e30:	edc3 7a00 	vstr	s15, [r3]

	    float velocity_unclamped = Kp_pos * error_pos + Ki_pos * error_pos_sum;
 8001e34:	4b49      	ldr	r3, [pc, #292]	@ (8001f5c <position_loop+0x274>)
 8001e36:	ed93 7a00 	vldr	s14, [r3]
 8001e3a:	4b45      	ldr	r3, [pc, #276]	@ (8001f50 <position_loop+0x268>)
 8001e3c:	edd3 7a00 	vldr	s15, [r3]
 8001e40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e44:	4b46      	ldr	r3, [pc, #280]	@ (8001f60 <position_loop+0x278>)
 8001e46:	edd3 6a00 	vldr	s13, [r3]
 8001e4a:	4b43      	ldr	r3, [pc, #268]	@ (8001f58 <position_loop+0x270>)
 8001e4c:	edd3 7a00 	vldr	s15, [r3]
 8001e50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e58:	edc7 7a02 	vstr	s15, [r7, #8]
	    velocity_unclamped = fminf(fmaxf(velocity_unclamped, -1700), 1700);
 8001e5c:	eddf 0a41 	vldr	s1, [pc, #260]	@ 8001f64 <position_loop+0x27c>
 8001e60:	ed97 0a02 	vldr	s0, [r7, #8]
 8001e64:	f00a fac8 	bl	800c3f8 <fmaxf>
 8001e68:	eef0 7a40 	vmov.f32	s15, s0
 8001e6c:	eddf 0a3e 	vldr	s1, [pc, #248]	@ 8001f68 <position_loop+0x280>
 8001e70:	eeb0 0a67 	vmov.f32	s0, s15
 8001e74:	f00a fadd 	bl	800c432 <fminf>
 8001e78:	ed87 0a02 	vstr	s0, [r7, #8]


	    float velocity_ramp = 5000.0f;
 8001e7c:	4b3b      	ldr	r3, [pc, #236]	@ (8001f6c <position_loop+0x284>)
 8001e7e:	607b      	str	r3, [r7, #4]
	    float velocity_rate = (velocity_unclamped - velocity_ref_prev) / position_dt;
 8001e80:	4b3b      	ldr	r3, [pc, #236]	@ (8001f70 <position_loop+0x288>)
 8001e82:	edd3 7a00 	vldr	s15, [r3]
 8001e86:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e8a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001e8e:	4b31      	ldr	r3, [pc, #196]	@ (8001f54 <position_loop+0x26c>)
 8001e90:	ed93 7a00 	vldr	s14, [r3]
 8001e94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e98:	edc7 7a00 	vstr	s15, [r7]

	    if (velocity_rate > velocity_ramp)
 8001e9c:	ed97 7a00 	vldr	s14, [r7]
 8001ea0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ea4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eac:	dd0f      	ble.n	8001ece <position_loop+0x1e6>
	        velocity_ref = velocity_ref_prev + velocity_ramp * position_dt;
 8001eae:	4b29      	ldr	r3, [pc, #164]	@ (8001f54 <position_loop+0x26c>)
 8001eb0:	ed93 7a00 	vldr	s14, [r3]
 8001eb4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001eb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ebc:	4b2c      	ldr	r3, [pc, #176]	@ (8001f70 <position_loop+0x288>)
 8001ebe:	edd3 7a00 	vldr	s15, [r3]
 8001ec2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ec6:	4b2b      	ldr	r3, [pc, #172]	@ (8001f74 <position_loop+0x28c>)
 8001ec8:	edc3 7a00 	vstr	s15, [r3]
 8001ecc:	e01d      	b.n	8001f0a <position_loop+0x222>
	    else if (velocity_rate < -velocity_ramp)
 8001ece:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ed2:	eef1 7a67 	vneg.f32	s15, s15
 8001ed6:	ed97 7a00 	vldr	s14, [r7]
 8001eda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee2:	d50f      	bpl.n	8001f04 <position_loop+0x21c>
	        velocity_ref = velocity_ref_prev - velocity_ramp * position_dt;
 8001ee4:	4b22      	ldr	r3, [pc, #136]	@ (8001f70 <position_loop+0x288>)
 8001ee6:	ed93 7a00 	vldr	s14, [r3]
 8001eea:	4b1a      	ldr	r3, [pc, #104]	@ (8001f54 <position_loop+0x26c>)
 8001eec:	edd3 6a00 	vldr	s13, [r3]
 8001ef0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ef4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ef8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001efc:	4b1d      	ldr	r3, [pc, #116]	@ (8001f74 <position_loop+0x28c>)
 8001efe:	edc3 7a00 	vstr	s15, [r3]
 8001f02:	e002      	b.n	8001f0a <position_loop+0x222>
	    else
	        velocity_ref = velocity_unclamped;
 8001f04:	4a1b      	ldr	r2, [pc, #108]	@ (8001f74 <position_loop+0x28c>)
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	6013      	str	r3, [r2, #0]

	    velocity_ref_prev = velocity_ref;
 8001f0a:	4b1a      	ldr	r3, [pc, #104]	@ (8001f74 <position_loop+0x28c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a18      	ldr	r2, [pc, #96]	@ (8001f70 <position_loop+0x288>)
 8001f10:	6013      	str	r3, [r2, #0]
}
 8001f12:	bf00      	nop
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bdb0      	pop	{r4, r5, r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	f3af 8000 	nop.w
 8001f20:	1a63c1f8 	.word	0x1a63c1f8
 8001f24:	404ca5dc 	.word	0x404ca5dc
 8001f28:	54442d18 	.word	0x54442d18
 8001f2c:	400921fb 	.word	0x400921fb
 8001f30:	54442d18 	.word	0x54442d18
 8001f34:	c00921fb 	.word	0xc00921fb
 8001f38:	20000324 	.word	0x20000324
 8001f3c:	20000328 	.word	0x20000328
 8001f40:	200006f0 	.word	0x200006f0
 8001f44:	200006f4 	.word	0x200006f4
 8001f48:	20000298 	.word	0x20000298
 8001f4c:	2000028c 	.word	0x2000028c
 8001f50:	20000294 	.word	0x20000294
 8001f54:	200002d0 	.word	0x200002d0
 8001f58:	20000284 	.word	0x20000284
 8001f5c:	20000020 	.word	0x20000020
 8001f60:	2000001c 	.word	0x2000001c
 8001f64:	c4d48000 	.word	0xc4d48000
 8001f68:	44d48000 	.word	0x44d48000
 8001f6c:	459c4000 	.word	0x459c4000
 8001f70:	200006f8 	.word	0x200006f8
 8001f74:	20000004 	.word	0x20000004

08001f78 <Speed_Loop>:

void Speed_Loop()
{
 8001f78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f7c:	b086      	sub	sp, #24
 8001f7e:	af00      	add	r7, sp, #0
	update_speed_dt();
 8001f80:	f7ff f848 	bl	8001014 <update_speed_dt>
    static float angle_prev = 0;

    float angle_now = electricalAngle();
 8001f84:	f7ff f990 	bl	80012a8 <electricalAngle>
 8001f88:	ed87 0a04 	vstr	s0, [r7, #16]
    float delta_angle = angle_now - angle_prev;
 8001f8c:	4b9e      	ldr	r3, [pc, #632]	@ (8002208 <Speed_Loop+0x290>)
 8001f8e:	edd3 7a00 	vldr	s15, [r3]
 8001f92:	ed97 7a04 	vldr	s14, [r7, #16]
 8001f96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f9a:	edc7 7a05 	vstr	s15, [r7, #20]
    //speed_dt= Speed_dt * 7;
    if (delta_angle > PI) delta_angle -= 2 * PI;
 8001f9e:	6978      	ldr	r0, [r7, #20]
 8001fa0:	f7fe faf2 	bl	8000588 <__aeabi_f2d>
 8001fa4:	a390      	add	r3, pc, #576	@ (adr r3, 80021e8 <Speed_Loop+0x270>)
 8001fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001faa:	f7fe fdd5 	bl	8000b58 <__aeabi_dcmpgt>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d00f      	beq.n	8001fd4 <Speed_Loop+0x5c>
 8001fb4:	6978      	ldr	r0, [r7, #20]
 8001fb6:	f7fe fae7 	bl	8000588 <__aeabi_f2d>
 8001fba:	a38d      	add	r3, pc, #564	@ (adr r3, 80021f0 <Speed_Loop+0x278>)
 8001fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc0:	f7fe f982 	bl	80002c8 <__aeabi_dsub>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	4610      	mov	r0, r2
 8001fca:	4619      	mov	r1, r3
 8001fcc:	f7fe fe2c 	bl	8000c28 <__aeabi_d2f>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	617b      	str	r3, [r7, #20]
    if (delta_angle < -PI) delta_angle += 2 * PI;
 8001fd4:	6978      	ldr	r0, [r7, #20]
 8001fd6:	f7fe fad7 	bl	8000588 <__aeabi_f2d>
 8001fda:	a387      	add	r3, pc, #540	@ (adr r3, 80021f8 <Speed_Loop+0x280>)
 8001fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe0:	f7fe fd9c 	bl	8000b1c <__aeabi_dcmplt>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00f      	beq.n	800200a <Speed_Loop+0x92>
 8001fea:	6978      	ldr	r0, [r7, #20]
 8001fec:	f7fe facc 	bl	8000588 <__aeabi_f2d>
 8001ff0:	a37f      	add	r3, pc, #508	@ (adr r3, 80021f0 <Speed_Loop+0x278>)
 8001ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff6:	f7fe f969 	bl	80002cc <__adddf3>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	4610      	mov	r0, r2
 8002000:	4619      	mov	r1, r3
 8002002:	f7fe fe11 	bl	8000c28 <__aeabi_d2f>
 8002006:	4603      	mov	r3, r0
 8002008:	617b      	str	r3, [r7, #20]

    velocity = alpha * velocity + (1 - alpha) * ((delta_angle / speed_dt) * (60.0f / (2.0f * PI)));
 800200a:	4b80      	ldr	r3, [pc, #512]	@ (800220c <Speed_Loop+0x294>)
 800200c:	ed93 7a00 	vldr	s14, [r3]
 8002010:	4b7f      	ldr	r3, [pc, #508]	@ (8002210 <Speed_Loop+0x298>)
 8002012:	edd3 7a00 	vldr	s15, [r3]
 8002016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800201a:	ee17 0a90 	vmov	r0, s15
 800201e:	f7fe fab3 	bl	8000588 <__aeabi_f2d>
 8002022:	4604      	mov	r4, r0
 8002024:	460d      	mov	r5, r1
 8002026:	4b79      	ldr	r3, [pc, #484]	@ (800220c <Speed_Loop+0x294>)
 8002028:	edd3 7a00 	vldr	s15, [r3]
 800202c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002030:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002034:	ee17 0a90 	vmov	r0, s15
 8002038:	f7fe faa6 	bl	8000588 <__aeabi_f2d>
 800203c:	4680      	mov	r8, r0
 800203e:	4689      	mov	r9, r1
 8002040:	4b74      	ldr	r3, [pc, #464]	@ (8002214 <Speed_Loop+0x29c>)
 8002042:	edd3 7a00 	vldr	s15, [r3]
 8002046:	ed97 7a05 	vldr	s14, [r7, #20]
 800204a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800204e:	ee16 0a90 	vmov	r0, s13
 8002052:	f7fe fa99 	bl	8000588 <__aeabi_f2d>
 8002056:	a36a      	add	r3, pc, #424	@ (adr r3, 8002200 <Speed_Loop+0x288>)
 8002058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800205c:	f7fe faec 	bl	8000638 <__aeabi_dmul>
 8002060:	4602      	mov	r2, r0
 8002062:	460b      	mov	r3, r1
 8002064:	4640      	mov	r0, r8
 8002066:	4649      	mov	r1, r9
 8002068:	f7fe fae6 	bl	8000638 <__aeabi_dmul>
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	4620      	mov	r0, r4
 8002072:	4629      	mov	r1, r5
 8002074:	f7fe f92a 	bl	80002cc <__adddf3>
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	4610      	mov	r0, r2
 800207e:	4619      	mov	r1, r3
 8002080:	f7fe fdd2 	bl	8000c28 <__aeabi_d2f>
 8002084:	4603      	mov	r3, r0
 8002086:	4a62      	ldr	r2, [pc, #392]	@ (8002210 <Speed_Loop+0x298>)
 8002088:	6013      	str	r3, [r2, #0]
    error_speed = velocity_ref - velocity;
 800208a:	4b63      	ldr	r3, [pc, #396]	@ (8002218 <Speed_Loop+0x2a0>)
 800208c:	ed93 7a00 	vldr	s14, [r3]
 8002090:	4b5f      	ldr	r3, [pc, #380]	@ (8002210 <Speed_Loop+0x298>)
 8002092:	edd3 7a00 	vldr	s15, [r3]
 8002096:	ee77 7a67 	vsub.f32	s15, s14, s15
 800209a:	4b60      	ldr	r3, [pc, #384]	@ (800221c <Speed_Loop+0x2a4>)
 800209c:	edc3 7a00 	vstr	s15, [r3]
    speed_error_sum += error_speed * speed_dt;
 80020a0:	4b5e      	ldr	r3, [pc, #376]	@ (800221c <Speed_Loop+0x2a4>)
 80020a2:	ed93 7a00 	vldr	s14, [r3]
 80020a6:	4b5b      	ldr	r3, [pc, #364]	@ (8002214 <Speed_Loop+0x29c>)
 80020a8:	edd3 7a00 	vldr	s15, [r3]
 80020ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020b0:	4b5b      	ldr	r3, [pc, #364]	@ (8002220 <Speed_Loop+0x2a8>)
 80020b2:	edd3 7a00 	vldr	s15, [r3]
 80020b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ba:	4b59      	ldr	r3, [pc, #356]	@ (8002220 <Speed_Loop+0x2a8>)
 80020bc:	edc3 7a00 	vstr	s15, [r3]
    speed_error_sum = fminf(fmaxf(speed_error_sum, -1.0f), 1.0f);
 80020c0:	4b57      	ldr	r3, [pc, #348]	@ (8002220 <Speed_Loop+0x2a8>)
 80020c2:	edd3 7a00 	vldr	s15, [r3]
 80020c6:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 80020ca:	eeb0 0a67 	vmov.f32	s0, s15
 80020ce:	f00a f993 	bl	800c3f8 <fmaxf>
 80020d2:	eef0 7a40 	vmov.f32	s15, s0
 80020d6:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80020da:	eeb0 0a67 	vmov.f32	s0, s15
 80020de:	f00a f9a8 	bl	800c432 <fminf>
 80020e2:	eef0 7a40 	vmov.f32	s15, s0
 80020e6:	4b4e      	ldr	r3, [pc, #312]	@ (8002220 <Speed_Loop+0x2a8>)
 80020e8:	edc3 7a00 	vstr	s15, [r3]



    float Iq_unlimited = Kp_speed * error_speed + Ki_speed * speed_error_sum ;//+ Kd_speed * derivative;
 80020ec:	4b4d      	ldr	r3, [pc, #308]	@ (8002224 <Speed_Loop+0x2ac>)
 80020ee:	ed93 7a00 	vldr	s14, [r3]
 80020f2:	4b4a      	ldr	r3, [pc, #296]	@ (800221c <Speed_Loop+0x2a4>)
 80020f4:	edd3 7a00 	vldr	s15, [r3]
 80020f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020fc:	4b4a      	ldr	r3, [pc, #296]	@ (8002228 <Speed_Loop+0x2b0>)
 80020fe:	edd3 6a00 	vldr	s13, [r3]
 8002102:	4b47      	ldr	r3, [pc, #284]	@ (8002220 <Speed_Loop+0x2a8>)
 8002104:	edd3 7a00 	vldr	s15, [r3]
 8002108:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800210c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002110:	edc7 7a03 	vstr	s15, [r7, #12]
           float Ts = speed_dt;
 8002114:	4b3f      	ldr	r3, [pc, #252]	@ (8002214 <Speed_Loop+0x29c>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	60bb      	str	r3, [r7, #8]
           float Iq_ramp = 5000;
 800211a:	4b44      	ldr	r3, [pc, #272]	@ (800222c <Speed_Loop+0x2b4>)
 800211c:	607b      	str	r3, [r7, #4]


           static float iq_ref_prev = 0.0f;
            Iq_rate = (Iq_unlimited - iq_ref_prev) / Ts;
 800211e:	4b44      	ldr	r3, [pc, #272]	@ (8002230 <Speed_Loop+0x2b8>)
 8002120:	edd3 7a00 	vldr	s15, [r3]
 8002124:	ed97 7a03 	vldr	s14, [r7, #12]
 8002128:	ee77 6a67 	vsub.f32	s13, s14, s15
 800212c:	ed97 7a02 	vldr	s14, [r7, #8]
 8002130:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002134:	4b3f      	ldr	r3, [pc, #252]	@ (8002234 <Speed_Loop+0x2bc>)
 8002136:	edc3 7a00 	vstr	s15, [r3]
           if (Iq_rate > Iq_ramp)
 800213a:	4b3e      	ldr	r3, [pc, #248]	@ (8002234 <Speed_Loop+0x2bc>)
 800213c:	edd3 7a00 	vldr	s15, [r3]
 8002140:	ed97 7a01 	vldr	s14, [r7, #4]
 8002144:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800214c:	d50e      	bpl.n	800216c <Speed_Loop+0x1f4>
               iq_ref = iq_ref_prev + Iq_ramp * Ts;
 800214e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002152:	edd7 7a02 	vldr	s15, [r7, #8]
 8002156:	ee27 7a27 	vmul.f32	s14, s14, s15
 800215a:	4b35      	ldr	r3, [pc, #212]	@ (8002230 <Speed_Loop+0x2b8>)
 800215c:	edd3 7a00 	vldr	s15, [r3]
 8002160:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002164:	4b34      	ldr	r3, [pc, #208]	@ (8002238 <Speed_Loop+0x2c0>)
 8002166:	edc3 7a00 	vstr	s15, [r3]
 800216a:	e01d      	b.n	80021a8 <Speed_Loop+0x230>
           else if (Iq_rate < -Iq_ramp)
 800216c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002170:	eeb1 7a67 	vneg.f32	s14, s15
 8002174:	4b2f      	ldr	r3, [pc, #188]	@ (8002234 <Speed_Loop+0x2bc>)
 8002176:	edd3 7a00 	vldr	s15, [r3]
 800217a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800217e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002182:	dd0e      	ble.n	80021a2 <Speed_Loop+0x22a>
               iq_ref = iq_ref_prev - Iq_ramp * Ts;
 8002184:	4b2a      	ldr	r3, [pc, #168]	@ (8002230 <Speed_Loop+0x2b8>)
 8002186:	ed93 7a00 	vldr	s14, [r3]
 800218a:	edd7 6a01 	vldr	s13, [r7, #4]
 800218e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002192:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002196:	ee77 7a67 	vsub.f32	s15, s14, s15
 800219a:	4b27      	ldr	r3, [pc, #156]	@ (8002238 <Speed_Loop+0x2c0>)
 800219c:	edc3 7a00 	vstr	s15, [r3]
 80021a0:	e002      	b.n	80021a8 <Speed_Loop+0x230>
           else
               iq_ref = Iq_unlimited;
 80021a2:	4a25      	ldr	r2, [pc, #148]	@ (8002238 <Speed_Loop+0x2c0>)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6013      	str	r3, [r2, #0]

           iq_ref = fminf(fmaxf(Iq_unlimited, -1.0f), 1.0f);
 80021a8:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 80021ac:	ed97 0a03 	vldr	s0, [r7, #12]
 80021b0:	f00a f922 	bl	800c3f8 <fmaxf>
 80021b4:	eef0 7a40 	vmov.f32	s15, s0
 80021b8:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80021bc:	eeb0 0a67 	vmov.f32	s0, s15
 80021c0:	f00a f937 	bl	800c432 <fminf>
 80021c4:	eef0 7a40 	vmov.f32	s15, s0
 80021c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002238 <Speed_Loop+0x2c0>)
 80021ca:	edc3 7a00 	vstr	s15, [r3]


           iq_ref_prev = iq_ref;
 80021ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002238 <Speed_Loop+0x2c0>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a17      	ldr	r2, [pc, #92]	@ (8002230 <Speed_Loop+0x2b8>)
 80021d4:	6013      	str	r3, [r2, #0]

        angle_prev = angle_now;;
 80021d6:	4a0c      	ldr	r2, [pc, #48]	@ (8002208 <Speed_Loop+0x290>)
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	6013      	str	r3, [r2, #0]

}
 80021dc:	bf00      	nop
 80021de:	3718      	adds	r7, #24
 80021e0:	46bd      	mov	sp, r7
 80021e2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80021e6:	bf00      	nop
 80021e8:	54442eea 	.word	0x54442eea
 80021ec:	400921fb 	.word	0x400921fb
 80021f0:	54442eea 	.word	0x54442eea
 80021f4:	401921fb 	.word	0x401921fb
 80021f8:	54442eea 	.word	0x54442eea
 80021fc:	c00921fb 	.word	0xc00921fb
 8002200:	66ed2a99 	.word	0x66ed2a99
 8002204:	4023193d 	.word	0x4023193d
 8002208:	200006fc 	.word	0x200006fc
 800220c:	20000028 	.word	0x20000028
 8002210:	20000290 	.word	0x20000290
 8002214:	2000002c 	.word	0x2000002c
 8002218:	20000004 	.word	0x20000004
 800221c:	200002a4 	.word	0x200002a4
 8002220:	20000280 	.word	0x20000280
 8002224:	20000010 	.word	0x20000010
 8002228:	20000014 	.word	0x20000014
 800222c:	459c4000 	.word	0x459c4000
 8002230:	20000700 	.word	0x20000700
 8002234:	200002b8 	.word	0x200002b8
 8002238:	20000000 	.word	0x20000000

0800223c <Current_Loop>:


void Current_Loop()
{
 800223c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002240:	b084      	sub	sp, #16
 8002242:	af00      	add	r7, sp, #0
    Update_dt();
 8002244:	f7fe fec4 	bl	8000fd0 <Update_dt>

    theta = electricalAngle();
 8002248:	f7ff f82e 	bl	80012a8 <electricalAngle>
 800224c:	eef0 7a40 	vmov.f32	s15, s0
 8002250:	4b90      	ldr	r3, [pc, #576]	@ (8002494 <Current_Loop+0x258>)
 8002252:	edc3 7a00 	vstr	s15, [r3]
    clark();
 8002256:	f7ff f91f 	bl	8001498 <clark>
    park();
 800225a:	f7ff f94f 	bl	80014fc <park>

    error_d = id_ref - i_d;
 800225e:	4b8e      	ldr	r3, [pc, #568]	@ (8002498 <Current_Loop+0x25c>)
 8002260:	ed93 7a00 	vldr	s14, [r3]
 8002264:	4b8d      	ldr	r3, [pc, #564]	@ (800249c <Current_Loop+0x260>)
 8002266:	edd3 7a00 	vldr	s15, [r3]
 800226a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800226e:	4b8c      	ldr	r3, [pc, #560]	@ (80024a0 <Current_Loop+0x264>)
 8002270:	edc3 7a00 	vstr	s15, [r3]
    error_q = iq_ref - i_q;
 8002274:	4b8b      	ldr	r3, [pc, #556]	@ (80024a4 <Current_Loop+0x268>)
 8002276:	ed93 7a00 	vldr	s14, [r3]
 800227a:	4b8b      	ldr	r3, [pc, #556]	@ (80024a8 <Current_Loop+0x26c>)
 800227c:	edd3 7a00 	vldr	s15, [r3]
 8002280:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002284:	4b89      	ldr	r3, [pc, #548]	@ (80024ac <Current_Loop+0x270>)
 8002286:	edc3 7a00 	vstr	s15, [r3]


    error_d_sum += error_d * dt;
 800228a:	4b85      	ldr	r3, [pc, #532]	@ (80024a0 <Current_Loop+0x264>)
 800228c:	ed93 7a00 	vldr	s14, [r3]
 8002290:	4b87      	ldr	r3, [pc, #540]	@ (80024b0 <Current_Loop+0x274>)
 8002292:	edd3 7a00 	vldr	s15, [r3]
 8002296:	ee27 7a27 	vmul.f32	s14, s14, s15
 800229a:	4b86      	ldr	r3, [pc, #536]	@ (80024b4 <Current_Loop+0x278>)
 800229c:	edd3 7a00 	vldr	s15, [r3]
 80022a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022a4:	4b83      	ldr	r3, [pc, #524]	@ (80024b4 <Current_Loop+0x278>)
 80022a6:	edc3 7a00 	vstr	s15, [r3]
    error_q_sum += error_q * dt;
 80022aa:	4b80      	ldr	r3, [pc, #512]	@ (80024ac <Current_Loop+0x270>)
 80022ac:	ed93 7a00 	vldr	s14, [r3]
 80022b0:	4b7f      	ldr	r3, [pc, #508]	@ (80024b0 <Current_Loop+0x274>)
 80022b2:	edd3 7a00 	vldr	s15, [r3]
 80022b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022ba:	4b7f      	ldr	r3, [pc, #508]	@ (80024b8 <Current_Loop+0x27c>)
 80022bc:	edd3 7a00 	vldr	s15, [r3]
 80022c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022c4:	4b7c      	ldr	r3, [pc, #496]	@ (80024b8 <Current_Loop+0x27c>)
 80022c6:	edc3 7a00 	vstr	s15, [r3]

    error_d_sum = fminf(fmaxf(error_d_sum, -INTEGRAL_LIMIT), INTEGRAL_LIMIT);
 80022ca:	4b7a      	ldr	r3, [pc, #488]	@ (80024b4 <Current_Loop+0x278>)
 80022cc:	edd3 7a00 	vldr	s15, [r3]
 80022d0:	eeff 0a08 	vmov.f32	s1, #248	@ 0xbfc00000 -1.5
 80022d4:	eeb0 0a67 	vmov.f32	s0, s15
 80022d8:	f00a f88e 	bl	800c3f8 <fmaxf>
 80022dc:	eef0 7a40 	vmov.f32	s15, s0
 80022e0:	eef7 0a08 	vmov.f32	s1, #120	@ 0x3fc00000  1.5
 80022e4:	eeb0 0a67 	vmov.f32	s0, s15
 80022e8:	f00a f8a3 	bl	800c432 <fminf>
 80022ec:	eef0 7a40 	vmov.f32	s15, s0
 80022f0:	4b70      	ldr	r3, [pc, #448]	@ (80024b4 <Current_Loop+0x278>)
 80022f2:	edc3 7a00 	vstr	s15, [r3]
    error_q_sum = fminf(fmaxf(error_q_sum, -INTEGRAL_LIMIT), INTEGRAL_LIMIT);
 80022f6:	4b70      	ldr	r3, [pc, #448]	@ (80024b8 <Current_Loop+0x27c>)
 80022f8:	edd3 7a00 	vldr	s15, [r3]
 80022fc:	eeff 0a08 	vmov.f32	s1, #248	@ 0xbfc00000 -1.5
 8002300:	eeb0 0a67 	vmov.f32	s0, s15
 8002304:	f00a f878 	bl	800c3f8 <fmaxf>
 8002308:	eef0 7a40 	vmov.f32	s15, s0
 800230c:	eef7 0a08 	vmov.f32	s1, #120	@ 0x3fc00000  1.5
 8002310:	eeb0 0a67 	vmov.f32	s0, s15
 8002314:	f00a f88d 	bl	800c432 <fminf>
 8002318:	eef0 7a40 	vmov.f32	s15, s0
 800231c:	4b66      	ldr	r3, [pc, #408]	@ (80024b8 <Current_Loop+0x27c>)
 800231e:	edc3 7a00 	vstr	s15, [r3]

    float Vd_unclamped = Kp * error_d + Ki * error_d_sum ;
 8002322:	4b66      	ldr	r3, [pc, #408]	@ (80024bc <Current_Loop+0x280>)
 8002324:	ed93 7a00 	vldr	s14, [r3]
 8002328:	4b5d      	ldr	r3, [pc, #372]	@ (80024a0 <Current_Loop+0x264>)
 800232a:	edd3 7a00 	vldr	s15, [r3]
 800232e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002332:	4b63      	ldr	r3, [pc, #396]	@ (80024c0 <Current_Loop+0x284>)
 8002334:	edd3 6a00 	vldr	s13, [r3]
 8002338:	4b5e      	ldr	r3, [pc, #376]	@ (80024b4 <Current_Loop+0x278>)
 800233a:	edd3 7a00 	vldr	s15, [r3]
 800233e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002346:	edc7 7a03 	vstr	s15, [r7, #12]
     Vq_unclamped = Kp * error_q + Ki * error_q_sum ;
 800234a:	4b5c      	ldr	r3, [pc, #368]	@ (80024bc <Current_Loop+0x280>)
 800234c:	ed93 7a00 	vldr	s14, [r3]
 8002350:	4b56      	ldr	r3, [pc, #344]	@ (80024ac <Current_Loop+0x270>)
 8002352:	edd3 7a00 	vldr	s15, [r3]
 8002356:	ee27 7a27 	vmul.f32	s14, s14, s15
 800235a:	4b59      	ldr	r3, [pc, #356]	@ (80024c0 <Current_Loop+0x284>)
 800235c:	edd3 6a00 	vldr	s13, [r3]
 8002360:	4b55      	ldr	r3, [pc, #340]	@ (80024b8 <Current_Loop+0x27c>)
 8002362:	edd3 7a00 	vldr	s15, [r3]
 8002366:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800236a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800236e:	4b55      	ldr	r3, [pc, #340]	@ (80024c4 <Current_Loop+0x288>)
 8002370:	edc3 7a00 	vstr	s15, [r3]

    float V_limit = 8.0f;
 8002374:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8002378:	60bb      	str	r3, [r7, #8]

    static float Vd_prev = 0;
    static float Vq_prev = 0;
    float output_ramp = 5000.0f;
 800237a:	4b53      	ldr	r3, [pc, #332]	@ (80024c8 <Current_Loop+0x28c>)
 800237c:	607b      	str	r3, [r7, #4]

    float output_d_rate = (Vd_unclamped - Vd_prev) / dt;
 800237e:	4b53      	ldr	r3, [pc, #332]	@ (80024cc <Current_Loop+0x290>)
 8002380:	edd3 7a00 	vldr	s15, [r3]
 8002384:	ed97 7a03 	vldr	s14, [r7, #12]
 8002388:	ee77 6a67 	vsub.f32	s13, s14, s15
 800238c:	4b48      	ldr	r3, [pc, #288]	@ (80024b0 <Current_Loop+0x274>)
 800238e:	ed93 7a00 	vldr	s14, [r3]
 8002392:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002396:	edc7 7a00 	vstr	s15, [r7]
    output_q_rate = (Vq_unclamped - Vq_prev) / dt;
 800239a:	4b4a      	ldr	r3, [pc, #296]	@ (80024c4 <Current_Loop+0x288>)
 800239c:	ed93 7a00 	vldr	s14, [r3]
 80023a0:	4b4b      	ldr	r3, [pc, #300]	@ (80024d0 <Current_Loop+0x294>)
 80023a2:	edd3 7a00 	vldr	s15, [r3]
 80023a6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80023aa:	4b41      	ldr	r3, [pc, #260]	@ (80024b0 <Current_Loop+0x274>)
 80023ac:	ed93 7a00 	vldr	s14, [r3]
 80023b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023b4:	4b47      	ldr	r3, [pc, #284]	@ (80024d4 <Current_Loop+0x298>)
 80023b6:	edc3 7a00 	vstr	s15, [r3]

    if (output_d_rate > output_ramp)
 80023ba:	ed97 7a00 	vldr	s14, [r7]
 80023be:	edd7 7a01 	vldr	s15, [r7, #4]
 80023c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ca:	dd0f      	ble.n	80023ec <Current_Loop+0x1b0>
        Vd = Vd_prev + output_ramp * dt;
 80023cc:	4b38      	ldr	r3, [pc, #224]	@ (80024b0 <Current_Loop+0x274>)
 80023ce:	ed93 7a00 	vldr	s14, [r3]
 80023d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80023d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023da:	4b3c      	ldr	r3, [pc, #240]	@ (80024cc <Current_Loop+0x290>)
 80023dc:	edd3 7a00 	vldr	s15, [r3]
 80023e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023e4:	4b3c      	ldr	r3, [pc, #240]	@ (80024d8 <Current_Loop+0x29c>)
 80023e6:	edc3 7a00 	vstr	s15, [r3]
 80023ea:	e01d      	b.n	8002428 <Current_Loop+0x1ec>
    else if (output_d_rate < -output_ramp)
 80023ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80023f0:	eef1 7a67 	vneg.f32	s15, s15
 80023f4:	ed97 7a00 	vldr	s14, [r7]
 80023f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002400:	d50f      	bpl.n	8002422 <Current_Loop+0x1e6>
        Vd = Vd_prev - output_ramp * dt;
 8002402:	4b32      	ldr	r3, [pc, #200]	@ (80024cc <Current_Loop+0x290>)
 8002404:	ed93 7a00 	vldr	s14, [r3]
 8002408:	4b29      	ldr	r3, [pc, #164]	@ (80024b0 <Current_Loop+0x274>)
 800240a:	edd3 6a00 	vldr	s13, [r3]
 800240e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002412:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002416:	ee77 7a67 	vsub.f32	s15, s14, s15
 800241a:	4b2f      	ldr	r3, [pc, #188]	@ (80024d8 <Current_Loop+0x29c>)
 800241c:	edc3 7a00 	vstr	s15, [r3]
 8002420:	e002      	b.n	8002428 <Current_Loop+0x1ec>
    else
        Vd = Vd_unclamped;
 8002422:	4a2d      	ldr	r2, [pc, #180]	@ (80024d8 <Current_Loop+0x29c>)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6013      	str	r3, [r2, #0]

    if (output_q_rate > output_ramp)
 8002428:	4b2a      	ldr	r3, [pc, #168]	@ (80024d4 <Current_Loop+0x298>)
 800242a:	edd3 7a00 	vldr	s15, [r3]
 800242e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002432:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800243a:	d50f      	bpl.n	800245c <Current_Loop+0x220>
        Vq = Vq_prev + output_ramp * dt;
 800243c:	4b1c      	ldr	r3, [pc, #112]	@ (80024b0 <Current_Loop+0x274>)
 800243e:	ed93 7a00 	vldr	s14, [r3]
 8002442:	edd7 7a01 	vldr	s15, [r7, #4]
 8002446:	ee27 7a27 	vmul.f32	s14, s14, s15
 800244a:	4b21      	ldr	r3, [pc, #132]	@ (80024d0 <Current_Loop+0x294>)
 800244c:	edd3 7a00 	vldr	s15, [r3]
 8002450:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002454:	4b21      	ldr	r3, [pc, #132]	@ (80024dc <Current_Loop+0x2a0>)
 8002456:	edc3 7a00 	vstr	s15, [r3]
 800245a:	e045      	b.n	80024e8 <Current_Loop+0x2ac>
    else if (output_q_rate < -output_ramp)
 800245c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002460:	eeb1 7a67 	vneg.f32	s14, s15
 8002464:	4b1b      	ldr	r3, [pc, #108]	@ (80024d4 <Current_Loop+0x298>)
 8002466:	edd3 7a00 	vldr	s15, [r3]
 800246a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800246e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002472:	dd35      	ble.n	80024e0 <Current_Loop+0x2a4>
        Vq = Vq_prev - output_ramp * dt;
 8002474:	4b16      	ldr	r3, [pc, #88]	@ (80024d0 <Current_Loop+0x294>)
 8002476:	ed93 7a00 	vldr	s14, [r3]
 800247a:	4b0d      	ldr	r3, [pc, #52]	@ (80024b0 <Current_Loop+0x274>)
 800247c:	edd3 6a00 	vldr	s13, [r3]
 8002480:	edd7 7a01 	vldr	s15, [r7, #4]
 8002484:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002488:	ee77 7a67 	vsub.f32	s15, s14, s15
 800248c:	4b13      	ldr	r3, [pc, #76]	@ (80024dc <Current_Loop+0x2a0>)
 800248e:	edc3 7a00 	vstr	s15, [r3]
 8002492:	e029      	b.n	80024e8 <Current_Loop+0x2ac>
 8002494:	200002a8 	.word	0x200002a8
 8002498:	20000288 	.word	0x20000288
 800249c:	20000250 	.word	0x20000250
 80024a0:	20000270 	.word	0x20000270
 80024a4:	20000000 	.word	0x20000000
 80024a8:	20000254 	.word	0x20000254
 80024ac:	20000274 	.word	0x20000274
 80024b0:	2000029c 	.word	0x2000029c
 80024b4:	20000278 	.word	0x20000278
 80024b8:	2000027c 	.word	0x2000027c
 80024bc:	2000000c 	.word	0x2000000c
 80024c0:	20000008 	.word	0x20000008
 80024c4:	200002c8 	.word	0x200002c8
 80024c8:	459c4000 	.word	0x459c4000
 80024cc:	20000704 	.word	0x20000704
 80024d0:	20000708 	.word	0x20000708
 80024d4:	200002c0 	.word	0x200002c0
 80024d8:	200002ac 	.word	0x200002ac
 80024dc:	200002b4 	.word	0x200002b4
    else
        Vq = Vq_unclamped;
 80024e0:	4b9d      	ldr	r3, [pc, #628]	@ (8002758 <Current_Loop+0x51c>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a9d      	ldr	r2, [pc, #628]	@ (800275c <Current_Loop+0x520>)
 80024e6:	6013      	str	r3, [r2, #0]

    Vd = fminf(fmaxf(Vd, -V_limit), V_limit);
 80024e8:	4b9d      	ldr	r3, [pc, #628]	@ (8002760 <Current_Loop+0x524>)
 80024ea:	ed93 7a00 	vldr	s14, [r3]
 80024ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80024f2:	eef1 7a67 	vneg.f32	s15, s15
 80024f6:	eef0 0a67 	vmov.f32	s1, s15
 80024fa:	eeb0 0a47 	vmov.f32	s0, s14
 80024fe:	f009 ff7b 	bl	800c3f8 <fmaxf>
 8002502:	eef0 7a40 	vmov.f32	s15, s0
 8002506:	eef0 0a67 	vmov.f32	s1, s15
 800250a:	ed97 0a02 	vldr	s0, [r7, #8]
 800250e:	f009 ff90 	bl	800c432 <fminf>
 8002512:	eef0 7a40 	vmov.f32	s15, s0
 8002516:	4b92      	ldr	r3, [pc, #584]	@ (8002760 <Current_Loop+0x524>)
 8002518:	edc3 7a00 	vstr	s15, [r3]
    Vq = fminf(fmaxf(Vq, -V_limit), V_limit);
 800251c:	4b8f      	ldr	r3, [pc, #572]	@ (800275c <Current_Loop+0x520>)
 800251e:	ed93 7a00 	vldr	s14, [r3]
 8002522:	edd7 7a02 	vldr	s15, [r7, #8]
 8002526:	eef1 7a67 	vneg.f32	s15, s15
 800252a:	eef0 0a67 	vmov.f32	s1, s15
 800252e:	eeb0 0a47 	vmov.f32	s0, s14
 8002532:	f009 ff61 	bl	800c3f8 <fmaxf>
 8002536:	eef0 7a40 	vmov.f32	s15, s0
 800253a:	eef0 0a67 	vmov.f32	s1, s15
 800253e:	ed97 0a02 	vldr	s0, [r7, #8]
 8002542:	f009 ff76 	bl	800c432 <fminf>
 8002546:	eef0 7a40 	vmov.f32	s15, s0
 800254a:	4b84      	ldr	r3, [pc, #528]	@ (800275c <Current_Loop+0x520>)
 800254c:	edc3 7a00 	vstr	s15, [r3]

    Vd_prev = Vd;
 8002550:	4b83      	ldr	r3, [pc, #524]	@ (8002760 <Current_Loop+0x524>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a83      	ldr	r2, [pc, #524]	@ (8002764 <Current_Loop+0x528>)
 8002556:	6013      	str	r3, [r2, #0]
    Vq_prev = Vq;
 8002558:	4b80      	ldr	r3, [pc, #512]	@ (800275c <Current_Loop+0x520>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a82      	ldr	r2, [pc, #520]	@ (8002768 <Current_Loop+0x52c>)
 800255e:	6013      	str	r3, [r2, #0]

	Valpha = Vd * cos(theta) - Vq * sin(theta);
 8002560:	4b7f      	ldr	r3, [pc, #508]	@ (8002760 <Current_Loop+0x524>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f7fe f80f 	bl	8000588 <__aeabi_f2d>
 800256a:	4604      	mov	r4, r0
 800256c:	460d      	mov	r5, r1
 800256e:	4b7f      	ldr	r3, [pc, #508]	@ (800276c <Current_Loop+0x530>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f7fe f808 	bl	8000588 <__aeabi_f2d>
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
 800257c:	ec43 2b10 	vmov	d0, r2, r3
 8002580:	f009 fe92 	bl	800c2a8 <cos>
 8002584:	ec53 2b10 	vmov	r2, r3, d0
 8002588:	4620      	mov	r0, r4
 800258a:	4629      	mov	r1, r5
 800258c:	f7fe f854 	bl	8000638 <__aeabi_dmul>
 8002590:	4602      	mov	r2, r0
 8002592:	460b      	mov	r3, r1
 8002594:	4690      	mov	r8, r2
 8002596:	4699      	mov	r9, r3
 8002598:	4b70      	ldr	r3, [pc, #448]	@ (800275c <Current_Loop+0x520>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4618      	mov	r0, r3
 800259e:	f7fd fff3 	bl	8000588 <__aeabi_f2d>
 80025a2:	4604      	mov	r4, r0
 80025a4:	460d      	mov	r5, r1
 80025a6:	4b71      	ldr	r3, [pc, #452]	@ (800276c <Current_Loop+0x530>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7fd ffec 	bl	8000588 <__aeabi_f2d>
 80025b0:	4602      	mov	r2, r0
 80025b2:	460b      	mov	r3, r1
 80025b4:	ec43 2b10 	vmov	d0, r2, r3
 80025b8:	f009 feca 	bl	800c350 <sin>
 80025bc:	ec53 2b10 	vmov	r2, r3, d0
 80025c0:	4620      	mov	r0, r4
 80025c2:	4629      	mov	r1, r5
 80025c4:	f7fe f838 	bl	8000638 <__aeabi_dmul>
 80025c8:	4602      	mov	r2, r0
 80025ca:	460b      	mov	r3, r1
 80025cc:	4640      	mov	r0, r8
 80025ce:	4649      	mov	r1, r9
 80025d0:	f7fd fe7a 	bl	80002c8 <__aeabi_dsub>
 80025d4:	4602      	mov	r2, r0
 80025d6:	460b      	mov	r3, r1
 80025d8:	4610      	mov	r0, r2
 80025da:	4619      	mov	r1, r3
 80025dc:	f7fe fb24 	bl	8000c28 <__aeabi_d2f>
 80025e0:	4603      	mov	r3, r0
 80025e2:	4a63      	ldr	r2, [pc, #396]	@ (8002770 <Current_Loop+0x534>)
 80025e4:	6013      	str	r3, [r2, #0]
	Vbeta  = Vd * sin(theta) + Vq * cos(theta);
 80025e6:	4b5e      	ldr	r3, [pc, #376]	@ (8002760 <Current_Loop+0x524>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7fd ffcc 	bl	8000588 <__aeabi_f2d>
 80025f0:	4604      	mov	r4, r0
 80025f2:	460d      	mov	r5, r1
 80025f4:	4b5d      	ldr	r3, [pc, #372]	@ (800276c <Current_Loop+0x530>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7fd ffc5 	bl	8000588 <__aeabi_f2d>
 80025fe:	4602      	mov	r2, r0
 8002600:	460b      	mov	r3, r1
 8002602:	ec43 2b10 	vmov	d0, r2, r3
 8002606:	f009 fea3 	bl	800c350 <sin>
 800260a:	ec53 2b10 	vmov	r2, r3, d0
 800260e:	4620      	mov	r0, r4
 8002610:	4629      	mov	r1, r5
 8002612:	f7fe f811 	bl	8000638 <__aeabi_dmul>
 8002616:	4602      	mov	r2, r0
 8002618:	460b      	mov	r3, r1
 800261a:	4690      	mov	r8, r2
 800261c:	4699      	mov	r9, r3
 800261e:	4b4f      	ldr	r3, [pc, #316]	@ (800275c <Current_Loop+0x520>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f7fd ffb0 	bl	8000588 <__aeabi_f2d>
 8002628:	4604      	mov	r4, r0
 800262a:	460d      	mov	r5, r1
 800262c:	4b4f      	ldr	r3, [pc, #316]	@ (800276c <Current_Loop+0x530>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4618      	mov	r0, r3
 8002632:	f7fd ffa9 	bl	8000588 <__aeabi_f2d>
 8002636:	4602      	mov	r2, r0
 8002638:	460b      	mov	r3, r1
 800263a:	ec43 2b10 	vmov	d0, r2, r3
 800263e:	f009 fe33 	bl	800c2a8 <cos>
 8002642:	ec53 2b10 	vmov	r2, r3, d0
 8002646:	4620      	mov	r0, r4
 8002648:	4629      	mov	r1, r5
 800264a:	f7fd fff5 	bl	8000638 <__aeabi_dmul>
 800264e:	4602      	mov	r2, r0
 8002650:	460b      	mov	r3, r1
 8002652:	4640      	mov	r0, r8
 8002654:	4649      	mov	r1, r9
 8002656:	f7fd fe39 	bl	80002cc <__adddf3>
 800265a:	4602      	mov	r2, r0
 800265c:	460b      	mov	r3, r1
 800265e:	4610      	mov	r0, r2
 8002660:	4619      	mov	r1, r3
 8002662:	f7fe fae1 	bl	8000c28 <__aeabi_d2f>
 8002666:	4603      	mov	r3, r0
 8002668:	4a42      	ldr	r2, [pc, #264]	@ (8002774 <Current_Loop+0x538>)
 800266a:	6013      	str	r3, [r2, #0]

    Va = Valpha;
 800266c:	4b40      	ldr	r3, [pc, #256]	@ (8002770 <Current_Loop+0x534>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a41      	ldr	r2, [pc, #260]	@ (8002778 <Current_Loop+0x53c>)
 8002672:	6013      	str	r3, [r2, #0]
    Vb = -0.5 * Valpha + (sqrtf(3) / 2) * Vbeta ;
 8002674:	4b3e      	ldr	r3, [pc, #248]	@ (8002770 <Current_Loop+0x534>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4618      	mov	r0, r3
 800267a:	f7fd ff85 	bl	8000588 <__aeabi_f2d>
 800267e:	f04f 0200 	mov.w	r2, #0
 8002682:	4b3e      	ldr	r3, [pc, #248]	@ (800277c <Current_Loop+0x540>)
 8002684:	f7fd ffd8 	bl	8000638 <__aeabi_dmul>
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	4614      	mov	r4, r2
 800268e:	461d      	mov	r5, r3
 8002690:	4b38      	ldr	r3, [pc, #224]	@ (8002774 <Current_Loop+0x538>)
 8002692:	edd3 7a00 	vldr	s15, [r3]
 8002696:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8002780 <Current_Loop+0x544>
 800269a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800269e:	ee17 0a90 	vmov	r0, s15
 80026a2:	f7fd ff71 	bl	8000588 <__aeabi_f2d>
 80026a6:	4602      	mov	r2, r0
 80026a8:	460b      	mov	r3, r1
 80026aa:	4620      	mov	r0, r4
 80026ac:	4629      	mov	r1, r5
 80026ae:	f7fd fe0d 	bl	80002cc <__adddf3>
 80026b2:	4602      	mov	r2, r0
 80026b4:	460b      	mov	r3, r1
 80026b6:	4610      	mov	r0, r2
 80026b8:	4619      	mov	r1, r3
 80026ba:	f7fe fab5 	bl	8000c28 <__aeabi_d2f>
 80026be:	4603      	mov	r3, r0
 80026c0:	4a30      	ldr	r2, [pc, #192]	@ (8002784 <Current_Loop+0x548>)
 80026c2:	6013      	str	r3, [r2, #0]
    Vc = -0.5 * Valpha - (sqrtf(3) / 2) * Vbeta ;
 80026c4:	4b2a      	ldr	r3, [pc, #168]	@ (8002770 <Current_Loop+0x534>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7fd ff5d 	bl	8000588 <__aeabi_f2d>
 80026ce:	f04f 0200 	mov.w	r2, #0
 80026d2:	4b2a      	ldr	r3, [pc, #168]	@ (800277c <Current_Loop+0x540>)
 80026d4:	f7fd ffb0 	bl	8000638 <__aeabi_dmul>
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	4614      	mov	r4, r2
 80026de:	461d      	mov	r5, r3
 80026e0:	4b24      	ldr	r3, [pc, #144]	@ (8002774 <Current_Loop+0x538>)
 80026e2:	edd3 7a00 	vldr	s15, [r3]
 80026e6:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8002780 <Current_Loop+0x544>
 80026ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026ee:	ee17 0a90 	vmov	r0, s15
 80026f2:	f7fd ff49 	bl	8000588 <__aeabi_f2d>
 80026f6:	4602      	mov	r2, r0
 80026f8:	460b      	mov	r3, r1
 80026fa:	4620      	mov	r0, r4
 80026fc:	4629      	mov	r1, r5
 80026fe:	f7fd fde3 	bl	80002c8 <__aeabi_dsub>
 8002702:	4602      	mov	r2, r0
 8002704:	460b      	mov	r3, r1
 8002706:	4610      	mov	r0, r2
 8002708:	4619      	mov	r1, r3
 800270a:	f7fe fa8d 	bl	8000c28 <__aeabi_d2f>
 800270e:	4603      	mov	r3, r0
 8002710:	4a1d      	ldr	r2, [pc, #116]	@ (8002788 <Current_Loop+0x54c>)
 8002712:	6013      	str	r3, [r2, #0]

    setpwm(Va, Vb, Vc);
 8002714:	4b18      	ldr	r3, [pc, #96]	@ (8002778 <Current_Loop+0x53c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f7fd ff35 	bl	8000588 <__aeabi_f2d>
 800271e:	4604      	mov	r4, r0
 8002720:	460d      	mov	r5, r1
 8002722:	4b18      	ldr	r3, [pc, #96]	@ (8002784 <Current_Loop+0x548>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f7fd ff2e 	bl	8000588 <__aeabi_f2d>
 800272c:	4680      	mov	r8, r0
 800272e:	4689      	mov	r9, r1
 8002730:	4b15      	ldr	r3, [pc, #84]	@ (8002788 <Current_Loop+0x54c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4618      	mov	r0, r3
 8002736:	f7fd ff27 	bl	8000588 <__aeabi_f2d>
 800273a:	4602      	mov	r2, r0
 800273c:	460b      	mov	r3, r1
 800273e:	ec43 2b12 	vmov	d2, r2, r3
 8002742:	ec49 8b11 	vmov	d1, r8, r9
 8002746:	ec45 4b10 	vmov	d0, r4, r5
 800274a:	f7fe ff99 	bl	8001680 <setpwm>
}
 800274e:	bf00      	nop
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002758:	200002c8 	.word	0x200002c8
 800275c:	200002b4 	.word	0x200002b4
 8002760:	200002ac 	.word	0x200002ac
 8002764:	20000704 	.word	0x20000704
 8002768:	20000708 	.word	0x20000708
 800276c:	200002a8 	.word	0x200002a8
 8002770:	20000258 	.word	0x20000258
 8002774:	2000025c 	.word	0x2000025c
 8002778:	20000260 	.word	0x20000260
 800277c:	bfe00000 	.word	0xbfe00000
 8002780:	3f5db3d7 	.word	0x3f5db3d7
 8002784:	20000264 	.word	0x20000264
 8002788:	20000268 	.word	0x20000268
 800278c:	00000000 	.word	0x00000000

08002790 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002790:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002794:	b086      	sub	sp, #24
 8002796:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002798:	f001 fb04 	bl	8003da4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800279c:	f000 f900 	bl	80029a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027a0:	f000 fcb6 	bl	8003110 <MX_GPIO_Init>
  MX_DMA_Init();
 80027a4:	f000 fc76 	bl	8003094 <MX_DMA_Init>
  MX_TIM1_Init();
 80027a8:	f000 fa7e 	bl	8002ca8 <MX_TIM1_Init>
  MX_ADC1_Init();
 80027ac:	f000 f96c 	bl	8002a88 <MX_ADC1_Init>
  MX_SPI1_Init();
 80027b0:	f000 fa42 	bl	8002c38 <MX_SPI1_Init>
  MX_TIM3_Init();
 80027b4:	f000 fb7c 	bl	8002eb0 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80027b8:	f000 fc42 	bl	8003040 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80027bc:	f000 fb2c 	bl	8002e18 <MX_TIM2_Init>
  MX_TIM8_Init();
 80027c0:	f000 fbc4 	bl	8002f4c <MX_TIM8_Init>
  MX_UART4_Init();
 80027c4:	f000 fc12 	bl	8002fec <MX_UART4_Init>
  MX_ADC2_Init();
 80027c8:	f000 f9e4 	bl	8002b94 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 80027cc:	4860      	ldr	r0, [pc, #384]	@ (8002950 <main+0x1c0>)
 80027ce:	f004 fe03 	bl	80073d8 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80027d2:	2100      	movs	r1, #0
 80027d4:	485e      	ldr	r0, [pc, #376]	@ (8002950 <main+0x1c0>)
 80027d6:	f004 ff31 	bl	800763c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80027da:	2104      	movs	r1, #4
 80027dc:	485c      	ldr	r0, [pc, #368]	@ (8002950 <main+0x1c0>)
 80027de:	f004 ff2d 	bl	800763c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80027e2:	2108      	movs	r1, #8
 80027e4:	485a      	ldr	r0, [pc, #360]	@ (8002950 <main+0x1c0>)
 80027e6:	f004 ff29 	bl	800763c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim8);
 80027ea:	485a      	ldr	r0, [pc, #360]	@ (8002954 <main+0x1c4>)
 80027ec:	f004 fe5c 	bl	80074a8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim3);
 80027f0:	4859      	ldr	r0, [pc, #356]	@ (8002958 <main+0x1c8>)
 80027f2:	f004 fdf1 	bl	80073d8 <HAL_TIM_Base_Start>
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 80027f6:	4b59      	ldr	r3, [pc, #356]	@ (800295c <main+0x1cc>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2200      	movs	r2, #0
 80027fc:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_TIM_Base_Start(&htim2);
 80027fe:	4857      	ldr	r0, [pc, #348]	@ (800295c <main+0x1cc>)
 8002800:	f004 fdea 	bl	80073d8 <HAL_TIM_Base_Start>
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 8002804:	4856      	ldr	r0, [pc, #344]	@ (8002960 <main+0x1d0>)
 8002806:	f002 f895 	bl	8004934 <HAL_ADCEx_InjectedStart_IT>
 // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
  HAL_ADC_Start_DMA(&hadc2, &adc_dma_value, 1);
 800280a:	2201      	movs	r2, #1
 800280c:	4955      	ldr	r1, [pc, #340]	@ (8002964 <main+0x1d4>)
 800280e:	4856      	ldr	r0, [pc, #344]	@ (8002968 <main+0x1d8>)
 8002810:	f001 fcb2 	bl	8004178 <HAL_ADC_Start_DMA>
  angle = AS5147U_GetAngleRad();
 8002814:	f7fe fcd8 	bl	80011c8 <AS5147U_GetAngleRad>
 8002818:	eef0 7a40 	vmov.f32	s15, s0
 800281c:	4b53      	ldr	r3, [pc, #332]	@ (800296c <main+0x1dc>)
 800281e:	edc3 7a00 	vstr	s15, [r3]
  alignRotor();
 8002822:	f7fe fdad 	bl	8001380 <alignRotor>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (flag_current_loop)
 8002826:	4b52      	ldr	r3, [pc, #328]	@ (8002970 <main+0x1e0>)
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	b2db      	uxtb	r3, r3
 800282c:	2b00      	cmp	r3, #0
 800282e:	d0fa      	beq.n	8002826 <main+0x96>
	     {
	         flag_current_loop = 0;
 8002830:	4b4f      	ldr	r3, [pc, #316]	@ (8002970 <main+0x1e0>)
 8002832:	2200      	movs	r2, #0
 8002834:	701a      	strb	r2, [r3, #0]
	         update_PID();
 8002836:	f7ff f833 	bl	80018a0 <update_PID>
	         Current_Loop();
 800283a:	f7ff fcff 	bl	800223c <Current_Loop>
	         Speed_Loop();
 800283e:	f7ff fb9b 	bl	8001f78 <Speed_Loop>
	         i++;
 8002842:	4b4c      	ldr	r3, [pc, #304]	@ (8002974 <main+0x1e4>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	3301      	adds	r3, #1
 8002848:	4a4a      	ldr	r2, [pc, #296]	@ (8002974 <main+0x1e4>)
 800284a:	6013      	str	r3, [r2, #0]
	         position_loop_counter++;
 800284c:	4b4a      	ldr	r3, [pc, #296]	@ (8002978 <main+0x1e8>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	3301      	adds	r3, #1
 8002852:	4a49      	ldr	r2, [pc, #292]	@ (8002978 <main+0x1e8>)
 8002854:	6013      	str	r3, [r2, #0]
	         if(position_loop_counter >= 12)
 8002856:	4b48      	ldr	r3, [pc, #288]	@ (8002978 <main+0x1e8>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2b0b      	cmp	r3, #11
 800285c:	dd04      	ble.n	8002868 <main+0xd8>
	         {
       	     position_loop();
 800285e:	f7ff fa43 	bl	8001ce8 <position_loop>
          	 position_loop_counter = 0;
 8002862:	4b45      	ldr	r3, [pc, #276]	@ (8002978 <main+0x1e8>)
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]
//	                	   position_loop_counter = 0;
//	                   }

// demo vòng vị trí

	                   if(i == 2000)
 8002868:	4b42      	ldr	r3, [pc, #264]	@ (8002974 <main+0x1e4>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002870:	d113      	bne.n	800289a <main+0x10a>
	                   {
	                	   theta_ref += M_PI/3;
 8002872:	4b42      	ldr	r3, [pc, #264]	@ (800297c <main+0x1ec>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f7fd fe86 	bl	8000588 <__aeabi_f2d>
 800287c:	a332      	add	r3, pc, #200	@ (adr r3, 8002948 <main+0x1b8>)
 800287e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002882:	f7fd fd23 	bl	80002cc <__adddf3>
 8002886:	4602      	mov	r2, r0
 8002888:	460b      	mov	r3, r1
 800288a:	4610      	mov	r0, r2
 800288c:	4619      	mov	r1, r3
 800288e:	f7fe f9cb 	bl	8000c28 <__aeabi_d2f>
 8002892:	4603      	mov	r3, r0
 8002894:	4a39      	ldr	r2, [pc, #228]	@ (800297c <main+0x1ec>)
 8002896:	6013      	str	r3, [r2, #0]
 8002898:	e01a      	b.n	80028d0 <main+0x140>

	                   }
	                   else if (i == 4000)
 800289a:	4b36      	ldr	r3, [pc, #216]	@ (8002974 <main+0x1e4>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80028a2:	d115      	bne.n	80028d0 <main+0x140>
	                   {
	                	   theta_ref -= M_PI/3;
 80028a4:	4b35      	ldr	r3, [pc, #212]	@ (800297c <main+0x1ec>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7fd fe6d 	bl	8000588 <__aeabi_f2d>
 80028ae:	a326      	add	r3, pc, #152	@ (adr r3, 8002948 <main+0x1b8>)
 80028b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b4:	f7fd fd08 	bl	80002c8 <__aeabi_dsub>
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	4610      	mov	r0, r2
 80028be:	4619      	mov	r1, r3
 80028c0:	f7fe f9b2 	bl	8000c28 <__aeabi_d2f>
 80028c4:	4603      	mov	r3, r0
 80028c6:	4a2d      	ldr	r2, [pc, #180]	@ (800297c <main+0x1ec>)
 80028c8:	6013      	str	r3, [r2, #0]
	                	   i = 0;
 80028ca:	4b2a      	ldr	r3, [pc, #168]	@ (8002974 <main+0x1e4>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
	                   }
//	     }
	      if (!uart_busy)
 80028d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002980 <main+0x1f0>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1a5      	bne.n	8002826 <main+0x96>
//	    	  	    sprintf((char*)array_iq, "%f\t%f\t%f\t\r\n", theta_ref, theta_now,velocity);// ,velocity
//	    	  	    uart_busy = 1; // Đánh dấu UART đang bận
//	    	  	    HAL_UART_Transmit_DMA(&huart2, array_iq, strlen((char*)array_iq));

	     	    	  // vòng điều khiển dòng
	     	          sprintf((char*)array_iq, "%.5f\t%.5f\t%.5f\t%.5f\r\n",id_ref, i_d,iq_ref ,i_q);
 80028da:	4b2a      	ldr	r3, [pc, #168]	@ (8002984 <main+0x1f4>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4618      	mov	r0, r3
 80028e0:	f7fd fe52 	bl	8000588 <__aeabi_f2d>
 80028e4:	4682      	mov	sl, r0
 80028e6:	468b      	mov	fp, r1
 80028e8:	4b27      	ldr	r3, [pc, #156]	@ (8002988 <main+0x1f8>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7fd fe4b 	bl	8000588 <__aeabi_f2d>
 80028f2:	4604      	mov	r4, r0
 80028f4:	460d      	mov	r5, r1
 80028f6:	4b25      	ldr	r3, [pc, #148]	@ (800298c <main+0x1fc>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7fd fe44 	bl	8000588 <__aeabi_f2d>
 8002900:	4680      	mov	r8, r0
 8002902:	4689      	mov	r9, r1
 8002904:	4b22      	ldr	r3, [pc, #136]	@ (8002990 <main+0x200>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f7fd fe3d 	bl	8000588 <__aeabi_f2d>
 800290e:	4602      	mov	r2, r0
 8002910:	460b      	mov	r3, r1
 8002912:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002916:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800291a:	e9cd 4500 	strd	r4, r5, [sp]
 800291e:	4652      	mov	r2, sl
 8002920:	465b      	mov	r3, fp
 8002922:	491c      	ldr	r1, [pc, #112]	@ (8002994 <main+0x204>)
 8002924:	481c      	ldr	r0, [pc, #112]	@ (8002998 <main+0x208>)
 8002926:	f007 fb65 	bl	8009ff4 <siprintf>
	     	          uart_busy = 1; // Đánh dấu UART đang bậ
 800292a:	4b15      	ldr	r3, [pc, #84]	@ (8002980 <main+0x1f0>)
 800292c:	2201      	movs	r2, #1
 800292e:	701a      	strb	r2, [r3, #0]
	     	          HAL_UART_Transmit_DMA(&huart2, array_iq, strlen((char*)array_iq));
 8002930:	4819      	ldr	r0, [pc, #100]	@ (8002998 <main+0x208>)
 8002932:	f7fd fcbd 	bl	80002b0 <strlen>
 8002936:	4603      	mov	r3, r0
 8002938:	b29b      	uxth	r3, r3
 800293a:	461a      	mov	r2, r3
 800293c:	4916      	ldr	r1, [pc, #88]	@ (8002998 <main+0x208>)
 800293e:	4817      	ldr	r0, [pc, #92]	@ (800299c <main+0x20c>)
 8002940:	f005 fe34 	bl	80085ac <HAL_UART_Transmit_DMA>
	  if (flag_current_loop)
 8002944:	e76f      	b.n	8002826 <main+0x96>
 8002946:	bf00      	nop
 8002948:	382d7365 	.word	0x382d7365
 800294c:	3ff0c152 	.word	0x3ff0c152
 8002950:	20000474 	.word	0x20000474
 8002954:	2000054c 	.word	0x2000054c
 8002958:	20000504 	.word	0x20000504
 800295c:	200004bc 	.word	0x200004bc
 8002960:	2000032c 	.word	0x2000032c
 8002964:	200002e4 	.word	0x200002e4
 8002968:	20000374 	.word	0x20000374
 800296c:	2000026c 	.word	0x2000026c
 8002970:	200002e0 	.word	0x200002e0
 8002974:	200002dc 	.word	0x200002dc
 8002978:	200002d8 	.word	0x200002d8
 800297c:	2000028c 	.word	0x2000028c
 8002980:	200002e1 	.word	0x200002e1
 8002984:	20000288 	.word	0x20000288
 8002988:	20000250 	.word	0x20000250
 800298c:	20000000 	.word	0x20000000
 8002990:	20000254 	.word	0x20000254
 8002994:	0800d628 	.word	0x0800d628
 8002998:	200002f0 	.word	0x200002f0
 800299c:	200005dc 	.word	0x200005dc

080029a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b094      	sub	sp, #80	@ 0x50
 80029a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029a6:	f107 031c 	add.w	r3, r7, #28
 80029aa:	2234      	movs	r2, #52	@ 0x34
 80029ac:	2100      	movs	r1, #0
 80029ae:	4618      	mov	r0, r3
 80029b0:	f007 fb83 	bl	800a0ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029b4:	f107 0308 	add.w	r3, r7, #8
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	605a      	str	r2, [r3, #4]
 80029be:	609a      	str	r2, [r3, #8]
 80029c0:	60da      	str	r2, [r3, #12]
 80029c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80029c4:	2300      	movs	r3, #0
 80029c6:	607b      	str	r3, [r7, #4]
 80029c8:	4b2d      	ldr	r3, [pc, #180]	@ (8002a80 <SystemClock_Config+0xe0>)
 80029ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029cc:	4a2c      	ldr	r2, [pc, #176]	@ (8002a80 <SystemClock_Config+0xe0>)
 80029ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80029d4:	4b2a      	ldr	r3, [pc, #168]	@ (8002a80 <SystemClock_Config+0xe0>)
 80029d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029dc:	607b      	str	r3, [r7, #4]
 80029de:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80029e0:	2300      	movs	r3, #0
 80029e2:	603b      	str	r3, [r7, #0]
 80029e4:	4b27      	ldr	r3, [pc, #156]	@ (8002a84 <SystemClock_Config+0xe4>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a26      	ldr	r2, [pc, #152]	@ (8002a84 <SystemClock_Config+0xe4>)
 80029ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80029ee:	6013      	str	r3, [r2, #0]
 80029f0:	4b24      	ldr	r3, [pc, #144]	@ (8002a84 <SystemClock_Config+0xe4>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80029f8:	603b      	str	r3, [r7, #0]
 80029fa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80029fc:	2302      	movs	r3, #2
 80029fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a00:	2301      	movs	r3, #1
 8002a02:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a04:	2310      	movs	r3, #16
 8002a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a08:	2302      	movs	r3, #2
 8002a0a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002a10:	2310      	movs	r3, #16
 8002a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8002a14:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8002a18:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002a1e:	2302      	movs	r3, #2
 8002a20:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002a22:	2302      	movs	r3, #2
 8002a24:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a26:	f107 031c 	add.w	r3, r7, #28
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f003 fc82 	bl	8006334 <HAL_RCC_OscConfig>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002a36:	f000 fd65 	bl	8003504 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002a3a:	f003 f8e1 	bl	8005c00 <HAL_PWREx_EnableOverDrive>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8002a44:	f000 fd5e 	bl	8003504 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a48:	230f      	movs	r3, #15
 8002a4a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a50:	2300      	movs	r3, #0
 8002a52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002a54:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002a58:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002a5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a5e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002a60:	f107 0308 	add.w	r3, r7, #8
 8002a64:	2105      	movs	r1, #5
 8002a66:	4618      	mov	r0, r3
 8002a68:	f003 f91a 	bl	8005ca0 <HAL_RCC_ClockConfig>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8002a72:	f000 fd47 	bl	8003504 <Error_Handler>
  }
}
 8002a76:	bf00      	nop
 8002a78:	3750      	adds	r7, #80	@ 0x50
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40023800 	.word	0x40023800
 8002a84:	40007000 	.word	0x40007000

08002a88 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b08c      	sub	sp, #48	@ 0x30
 8002a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002a8e:	f107 0320 	add.w	r3, r7, #32
 8002a92:	2200      	movs	r2, #0
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	605a      	str	r2, [r3, #4]
 8002a98:	609a      	str	r2, [r3, #8]
 8002a9a:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8002a9c:	463b      	mov	r3, r7
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f007 fb09 	bl	800a0ba <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002aa8:	4b37      	ldr	r3, [pc, #220]	@ (8002b88 <MX_ADC1_Init+0x100>)
 8002aaa:	4a38      	ldr	r2, [pc, #224]	@ (8002b8c <MX_ADC1_Init+0x104>)
 8002aac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8002aae:	4b36      	ldr	r3, [pc, #216]	@ (8002b88 <MX_ADC1_Init+0x100>)
 8002ab0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002ab4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002ab6:	4b34      	ldr	r3, [pc, #208]	@ (8002b88 <MX_ADC1_Init+0x100>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002abc:	4b32      	ldr	r3, [pc, #200]	@ (8002b88 <MX_ADC1_Init+0x100>)
 8002abe:	2201      	movs	r2, #1
 8002ac0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002ac2:	4b31      	ldr	r3, [pc, #196]	@ (8002b88 <MX_ADC1_Init+0x100>)
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002ac8:	4b2f      	ldr	r3, [pc, #188]	@ (8002b88 <MX_ADC1_Init+0x100>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002ad0:	4b2d      	ldr	r3, [pc, #180]	@ (8002b88 <MX_ADC1_Init+0x100>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002ad6:	4b2c      	ldr	r3, [pc, #176]	@ (8002b88 <MX_ADC1_Init+0x100>)
 8002ad8:	4a2d      	ldr	r2, [pc, #180]	@ (8002b90 <MX_ADC1_Init+0x108>)
 8002ada:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002adc:	4b2a      	ldr	r3, [pc, #168]	@ (8002b88 <MX_ADC1_Init+0x100>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002ae2:	4b29      	ldr	r3, [pc, #164]	@ (8002b88 <MX_ADC1_Init+0x100>)
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002ae8:	4b27      	ldr	r3, [pc, #156]	@ (8002b88 <MX_ADC1_Init+0x100>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002af0:	4b25      	ldr	r3, [pc, #148]	@ (8002b88 <MX_ADC1_Init+0x100>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002af6:	4824      	ldr	r0, [pc, #144]	@ (8002b88 <MX_ADC1_Init+0x100>)
 8002af8:	f001 f9ea 	bl	8003ed0 <HAL_ADC_Init>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 8002b02:	f000 fcff 	bl	8003504 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002b06:	2300      	movs	r3, #0
 8002b08:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002b0e:	2307      	movs	r3, #7
 8002b10:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b12:	f107 0320 	add.w	r3, r7, #32
 8002b16:	4619      	mov	r1, r3
 8002b18:	481b      	ldr	r0, [pc, #108]	@ (8002b88 <MX_ADC1_Init+0x100>)
 8002b1a:	f001 fc5b 	bl	80043d4 <HAL_ADC_ConfigChannel>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8002b24:	f000 fcee 	bl	8003504 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 2;
 8002b30:	2302      	movs	r3, #2
 8002b32:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002b34:	2307      	movs	r3, #7
 8002b36:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 8002b38:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002b3c:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_TRGO;
 8002b3e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b42:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8002b44:	2300      	movs	r3, #0
 8002b46:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = ENABLE;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8002b50:	463b      	mov	r3, r7
 8002b52:	4619      	mov	r1, r3
 8002b54:	480c      	ldr	r0, [pc, #48]	@ (8002b88 <MX_ADC1_Init+0x100>)
 8002b56:	f001 fff7 	bl	8004b48 <HAL_ADCEx_InjectedConfigChannel>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8002b60:	f000 fcd0 	bl	8003504 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8002b64:	2304      	movs	r3, #4
 8002b66:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 8002b68:	2302      	movs	r3, #2
 8002b6a:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8002b6c:	463b      	mov	r3, r7
 8002b6e:	4619      	mov	r1, r3
 8002b70:	4805      	ldr	r0, [pc, #20]	@ (8002b88 <MX_ADC1_Init+0x100>)
 8002b72:	f001 ffe9 	bl	8004b48 <HAL_ADCEx_InjectedConfigChannel>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8002b7c:	f000 fcc2 	bl	8003504 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002b80:	bf00      	nop
 8002b82:	3730      	adds	r7, #48	@ 0x30
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	2000032c 	.word	0x2000032c
 8002b8c:	40012000 	.word	0x40012000
 8002b90:	0f000001 	.word	0x0f000001

08002b94 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002b9a:	463b      	mov	r3, r7
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	605a      	str	r2, [r3, #4]
 8002ba2:	609a      	str	r2, [r3, #8]
 8002ba4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8002ba6:	4b21      	ldr	r3, [pc, #132]	@ (8002c2c <MX_ADC2_Init+0x98>)
 8002ba8:	4a21      	ldr	r2, [pc, #132]	@ (8002c30 <MX_ADC2_Init+0x9c>)
 8002baa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8002bac:	4b1f      	ldr	r3, [pc, #124]	@ (8002c2c <MX_ADC2_Init+0x98>)
 8002bae:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002bb2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002bb4:	4b1d      	ldr	r3, [pc, #116]	@ (8002c2c <MX_ADC2_Init+0x98>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8002bba:	4b1c      	ldr	r3, [pc, #112]	@ (8002c2c <MX_ADC2_Init+0x98>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002bc0:	4b1a      	ldr	r3, [pc, #104]	@ (8002c2c <MX_ADC2_Init+0x98>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002bc6:	4b19      	ldr	r3, [pc, #100]	@ (8002c2c <MX_ADC2_Init+0x98>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002bce:	4b17      	ldr	r3, [pc, #92]	@ (8002c2c <MX_ADC2_Init+0x98>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002bd4:	4b15      	ldr	r3, [pc, #84]	@ (8002c2c <MX_ADC2_Init+0x98>)
 8002bd6:	4a17      	ldr	r2, [pc, #92]	@ (8002c34 <MX_ADC2_Init+0xa0>)
 8002bd8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002bda:	4b14      	ldr	r3, [pc, #80]	@ (8002c2c <MX_ADC2_Init+0x98>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8002be0:	4b12      	ldr	r3, [pc, #72]	@ (8002c2c <MX_ADC2_Init+0x98>)
 8002be2:	2201      	movs	r2, #1
 8002be4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002be6:	4b11      	ldr	r3, [pc, #68]	@ (8002c2c <MX_ADC2_Init+0x98>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002bee:	4b0f      	ldr	r3, [pc, #60]	@ (8002c2c <MX_ADC2_Init+0x98>)
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002bf4:	480d      	ldr	r0, [pc, #52]	@ (8002c2c <MX_ADC2_Init+0x98>)
 8002bf6:	f001 f96b 	bl	8003ed0 <HAL_ADC_Init>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8002c00:	f000 fc80 	bl	8003504 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002c04:	2301      	movs	r3, #1
 8002c06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002c10:	463b      	mov	r3, r7
 8002c12:	4619      	mov	r1, r3
 8002c14:	4805      	ldr	r0, [pc, #20]	@ (8002c2c <MX_ADC2_Init+0x98>)
 8002c16:	f001 fbdd 	bl	80043d4 <HAL_ADC_ConfigChannel>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8002c20:	f000 fc70 	bl	8003504 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002c24:	bf00      	nop
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	20000374 	.word	0x20000374
 8002c30:	40012100 	.word	0x40012100
 8002c34:	0f000001 	.word	0x0f000001

08002c38 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002c3c:	4b18      	ldr	r3, [pc, #96]	@ (8002ca0 <MX_SPI1_Init+0x68>)
 8002c3e:	4a19      	ldr	r2, [pc, #100]	@ (8002ca4 <MX_SPI1_Init+0x6c>)
 8002c40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c42:	4b17      	ldr	r3, [pc, #92]	@ (8002ca0 <MX_SPI1_Init+0x68>)
 8002c44:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002c48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c4a:	4b15      	ldr	r3, [pc, #84]	@ (8002ca0 <MX_SPI1_Init+0x68>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8002c50:	4b13      	ldr	r3, [pc, #76]	@ (8002ca0 <MX_SPI1_Init+0x68>)
 8002c52:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002c56:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c58:	4b11      	ldr	r3, [pc, #68]	@ (8002ca0 <MX_SPI1_Init+0x68>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002c5e:	4b10      	ldr	r3, [pc, #64]	@ (8002ca0 <MX_SPI1_Init+0x68>)
 8002c60:	2201      	movs	r2, #1
 8002c62:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c64:	4b0e      	ldr	r3, [pc, #56]	@ (8002ca0 <MX_SPI1_Init+0x68>)
 8002c66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c6a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ca0 <MX_SPI1_Init+0x68>)
 8002c6e:	2218      	movs	r2, #24
 8002c70:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c72:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca0 <MX_SPI1_Init+0x68>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c78:	4b09      	ldr	r3, [pc, #36]	@ (8002ca0 <MX_SPI1_Init+0x68>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c7e:	4b08      	ldr	r3, [pc, #32]	@ (8002ca0 <MX_SPI1_Init+0x68>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002c84:	4b06      	ldr	r3, [pc, #24]	@ (8002ca0 <MX_SPI1_Init+0x68>)
 8002c86:	220a      	movs	r2, #10
 8002c88:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c8a:	4805      	ldr	r0, [pc, #20]	@ (8002ca0 <MX_SPI1_Init+0x68>)
 8002c8c:	f003 fdf0 	bl	8006870 <HAL_SPI_Init>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8002c96:	f000 fc35 	bl	8003504 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002c9a:	bf00      	nop
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	2000041c 	.word	0x2000041c
 8002ca4:	40013000 	.word	0x40013000

08002ca8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b096      	sub	sp, #88	@ 0x58
 8002cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cae:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	605a      	str	r2, [r3, #4]
 8002cb8:	609a      	str	r2, [r3, #8]
 8002cba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cbc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]
 8002cc4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cca:	2200      	movs	r2, #0
 8002ccc:	601a      	str	r2, [r3, #0]
 8002cce:	605a      	str	r2, [r3, #4]
 8002cd0:	609a      	str	r2, [r3, #8]
 8002cd2:	60da      	str	r2, [r3, #12]
 8002cd4:	611a      	str	r2, [r3, #16]
 8002cd6:	615a      	str	r2, [r3, #20]
 8002cd8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002cda:	1d3b      	adds	r3, r7, #4
 8002cdc:	2220      	movs	r2, #32
 8002cde:	2100      	movs	r1, #0
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f007 f9ea 	bl	800a0ba <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002ce6:	4b4a      	ldr	r3, [pc, #296]	@ (8002e10 <MX_TIM1_Init+0x168>)
 8002ce8:	4a4a      	ldr	r2, [pc, #296]	@ (8002e14 <MX_TIM1_Init+0x16c>)
 8002cea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002cec:	4b48      	ldr	r3, [pc, #288]	@ (8002e10 <MX_TIM1_Init+0x168>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002cf2:	4b47      	ldr	r3, [pc, #284]	@ (8002e10 <MX_TIM1_Init+0x168>)
 8002cf4:	2220      	movs	r2, #32
 8002cf6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2999;
 8002cf8:	4b45      	ldr	r3, [pc, #276]	@ (8002e10 <MX_TIM1_Init+0x168>)
 8002cfa:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8002cfe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d00:	4b43      	ldr	r3, [pc, #268]	@ (8002e10 <MX_TIM1_Init+0x168>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002d06:	4b42      	ldr	r3, [pc, #264]	@ (8002e10 <MX_TIM1_Init+0x168>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d0c:	4b40      	ldr	r3, [pc, #256]	@ (8002e10 <MX_TIM1_Init+0x168>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002d12:	483f      	ldr	r0, [pc, #252]	@ (8002e10 <MX_TIM1_Init+0x168>)
 8002d14:	f004 fb10 	bl	8007338 <HAL_TIM_Base_Init>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002d1e:	f000 fbf1 	bl	8003504 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d26:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002d28:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	4838      	ldr	r0, [pc, #224]	@ (8002e10 <MX_TIM1_Init+0x168>)
 8002d30:	f004 fefe 	bl	8007b30 <HAL_TIM_ConfigClockSource>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002d3a:	f000 fbe3 	bl	8003504 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002d3e:	4834      	ldr	r0, [pc, #208]	@ (8002e10 <MX_TIM1_Init+0x168>)
 8002d40:	f004 fc22 	bl	8007588 <HAL_TIM_PWM_Init>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002d4a:	f000 fbdb 	bl	8003504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002d4e:	2320      	movs	r3, #32
 8002d50:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d52:	2300      	movs	r3, #0
 8002d54:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002d56:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	482c      	ldr	r0, [pc, #176]	@ (8002e10 <MX_TIM1_Init+0x168>)
 8002d5e:	f005 faf3 	bl	8008348 <HAL_TIMEx_MasterConfigSynchronization>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002d68:	f000 fbcc 	bl	8003504 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002d6c:	2370      	movs	r3, #112	@ 0x70
 8002d6e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002d70:	2300      	movs	r3, #0
 8002d72:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d74:	2300      	movs	r3, #0
 8002d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002d7c:	2304      	movs	r3, #4
 8002d7e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002d80:	2300      	movs	r3, #0
 8002d82:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002d84:	2300      	movs	r3, #0
 8002d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	4619      	mov	r1, r3
 8002d90:	481f      	ldr	r0, [pc, #124]	@ (8002e10 <MX_TIM1_Init+0x168>)
 8002d92:	f004 fe0b 	bl	80079ac <HAL_TIM_PWM_ConfigChannel>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002d9c:	f000 fbb2 	bl	8003504 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002da0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002da4:	2204      	movs	r2, #4
 8002da6:	4619      	mov	r1, r3
 8002da8:	4819      	ldr	r0, [pc, #100]	@ (8002e10 <MX_TIM1_Init+0x168>)
 8002daa:	f004 fdff 	bl	80079ac <HAL_TIM_PWM_ConfigChannel>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002db4:	f000 fba6 	bl	8003504 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002db8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002dbc:	2208      	movs	r2, #8
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	4813      	ldr	r0, [pc, #76]	@ (8002e10 <MX_TIM1_Init+0x168>)
 8002dc2:	f004 fdf3 	bl	80079ac <HAL_TIM_PWM_ConfigChannel>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002dcc:	f000 fb9a 	bl	8003504 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002de0:	2300      	movs	r3, #0
 8002de2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002de4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002de8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002dea:	2300      	movs	r3, #0
 8002dec:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002dee:	1d3b      	adds	r3, r7, #4
 8002df0:	4619      	mov	r1, r3
 8002df2:	4807      	ldr	r0, [pc, #28]	@ (8002e10 <MX_TIM1_Init+0x168>)
 8002df4:	f005 fb24 	bl	8008440 <HAL_TIMEx_ConfigBreakDeadTime>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8002dfe:	f000 fb81 	bl	8003504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002e02:	4803      	ldr	r0, [pc, #12]	@ (8002e10 <MX_TIM1_Init+0x168>)
 8002e04:	f000 fd1c 	bl	8003840 <HAL_TIM_MspPostInit>

}
 8002e08:	bf00      	nop
 8002e0a:	3758      	adds	r7, #88	@ 0x58
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	20000474 	.word	0x20000474
 8002e14:	40010000 	.word	0x40010000

08002e18 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e1e:	f107 0308 	add.w	r3, r7, #8
 8002e22:	2200      	movs	r2, #0
 8002e24:	601a      	str	r2, [r3, #0]
 8002e26:	605a      	str	r2, [r3, #4]
 8002e28:	609a      	str	r2, [r3, #8]
 8002e2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e2c:	463b      	mov	r3, r7
 8002e2e:	2200      	movs	r2, #0
 8002e30:	601a      	str	r2, [r3, #0]
 8002e32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e34:	4b1d      	ldr	r3, [pc, #116]	@ (8002eac <MX_TIM2_Init+0x94>)
 8002e36:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002e3a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 44;
 8002e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8002eac <MX_TIM2_Init+0x94>)
 8002e3e:	222c      	movs	r2, #44	@ 0x2c
 8002e40:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e42:	4b1a      	ldr	r3, [pc, #104]	@ (8002eac <MX_TIM2_Init+0x94>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002e48:	4b18      	ldr	r3, [pc, #96]	@ (8002eac <MX_TIM2_Init+0x94>)
 8002e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8002e4e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e50:	4b16      	ldr	r3, [pc, #88]	@ (8002eac <MX_TIM2_Init+0x94>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e56:	4b15      	ldr	r3, [pc, #84]	@ (8002eac <MX_TIM2_Init+0x94>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e5c:	4813      	ldr	r0, [pc, #76]	@ (8002eac <MX_TIM2_Init+0x94>)
 8002e5e:	f004 fa6b 	bl	8007338 <HAL_TIM_Base_Init>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002e68:	f000 fb4c 	bl	8003504 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e72:	f107 0308 	add.w	r3, r7, #8
 8002e76:	4619      	mov	r1, r3
 8002e78:	480c      	ldr	r0, [pc, #48]	@ (8002eac <MX_TIM2_Init+0x94>)
 8002e7a:	f004 fe59 	bl	8007b30 <HAL_TIM_ConfigClockSource>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002e84:	f000 fb3e 	bl	8003504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e90:	463b      	mov	r3, r7
 8002e92:	4619      	mov	r1, r3
 8002e94:	4805      	ldr	r0, [pc, #20]	@ (8002eac <MX_TIM2_Init+0x94>)
 8002e96:	f005 fa57 	bl	8008348 <HAL_TIMEx_MasterConfigSynchronization>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002ea0:	f000 fb30 	bl	8003504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002ea4:	bf00      	nop
 8002ea6:	3718      	adds	r7, #24
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	200004bc 	.word	0x200004bc

08002eb0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002eb6:	f107 0308 	add.w	r3, r7, #8
 8002eba:	2200      	movs	r2, #0
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	605a      	str	r2, [r3, #4]
 8002ec0:	609a      	str	r2, [r3, #8]
 8002ec2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ec4:	463b      	mov	r3, r7
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002ecc:	4b1d      	ldr	r3, [pc, #116]	@ (8002f44 <MX_TIM3_Init+0x94>)
 8002ece:	4a1e      	ldr	r2, [pc, #120]	@ (8002f48 <MX_TIM3_Init+0x98>)
 8002ed0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 19;
 8002ed2:	4b1c      	ldr	r3, [pc, #112]	@ (8002f44 <MX_TIM3_Init+0x94>)
 8002ed4:	2213      	movs	r2, #19
 8002ed6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ed8:	4b1a      	ldr	r3, [pc, #104]	@ (8002f44 <MX_TIM3_Init+0x94>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002ede:	4b19      	ldr	r3, [pc, #100]	@ (8002f44 <MX_TIM3_Init+0x94>)
 8002ee0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ee4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ee6:	4b17      	ldr	r3, [pc, #92]	@ (8002f44 <MX_TIM3_Init+0x94>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002eec:	4b15      	ldr	r3, [pc, #84]	@ (8002f44 <MX_TIM3_Init+0x94>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002ef2:	4814      	ldr	r0, [pc, #80]	@ (8002f44 <MX_TIM3_Init+0x94>)
 8002ef4:	f004 fa20 	bl	8007338 <HAL_TIM_Base_Init>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002efe:	f000 fb01 	bl	8003504 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f06:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002f08:	f107 0308 	add.w	r3, r7, #8
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	480d      	ldr	r0, [pc, #52]	@ (8002f44 <MX_TIM3_Init+0x94>)
 8002f10:	f004 fe0e 	bl	8007b30 <HAL_TIM_ConfigClockSource>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002f1a:	f000 faf3 	bl	8003504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f22:	2300      	movs	r3, #0
 8002f24:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f26:	463b      	mov	r3, r7
 8002f28:	4619      	mov	r1, r3
 8002f2a:	4806      	ldr	r0, [pc, #24]	@ (8002f44 <MX_TIM3_Init+0x94>)
 8002f2c:	f005 fa0c 	bl	8008348 <HAL_TIMEx_MasterConfigSynchronization>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002f36:	f000 fae5 	bl	8003504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002f3a:	bf00      	nop
 8002f3c:	3718      	adds	r7, #24
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	20000504 	.word	0x20000504
 8002f48:	40000400 	.word	0x40000400

08002f4c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f52:	f107 0308 	add.w	r3, r7, #8
 8002f56:	2200      	movs	r2, #0
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	605a      	str	r2, [r3, #4]
 8002f5c:	609a      	str	r2, [r3, #8]
 8002f5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f60:	463b      	mov	r3, r7
 8002f62:	2200      	movs	r2, #0
 8002f64:	601a      	str	r2, [r3, #0]
 8002f66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002f68:	4b1e      	ldr	r3, [pc, #120]	@ (8002fe4 <MX_TIM8_Init+0x98>)
 8002f6a:	4a1f      	ldr	r2, [pc, #124]	@ (8002fe8 <MX_TIM8_Init+0x9c>)
 8002f6c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 179;
 8002f6e:	4b1d      	ldr	r3, [pc, #116]	@ (8002fe4 <MX_TIM8_Init+0x98>)
 8002f70:	22b3      	movs	r2, #179	@ 0xb3
 8002f72:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f74:	4b1b      	ldr	r3, [pc, #108]	@ (8002fe4 <MX_TIM8_Init+0x98>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 8002f7a:	4b1a      	ldr	r3, [pc, #104]	@ (8002fe4 <MX_TIM8_Init+0x98>)
 8002f7c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002f80:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f82:	4b18      	ldr	r3, [pc, #96]	@ (8002fe4 <MX_TIM8_Init+0x98>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002f88:	4b16      	ldr	r3, [pc, #88]	@ (8002fe4 <MX_TIM8_Init+0x98>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f8e:	4b15      	ldr	r3, [pc, #84]	@ (8002fe4 <MX_TIM8_Init+0x98>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002f94:	4813      	ldr	r0, [pc, #76]	@ (8002fe4 <MX_TIM8_Init+0x98>)
 8002f96:	f004 f9cf 	bl	8007338 <HAL_TIM_Base_Init>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8002fa0:	f000 fab0 	bl	8003504 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fa4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002fa8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002faa:	f107 0308 	add.w	r3, r7, #8
 8002fae:	4619      	mov	r1, r3
 8002fb0:	480c      	ldr	r0, [pc, #48]	@ (8002fe4 <MX_TIM8_Init+0x98>)
 8002fb2:	f004 fdbd 	bl	8007b30 <HAL_TIM_ConfigClockSource>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8002fbc:	f000 faa2 	bl	8003504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002fc8:	463b      	mov	r3, r7
 8002fca:	4619      	mov	r1, r3
 8002fcc:	4805      	ldr	r0, [pc, #20]	@ (8002fe4 <MX_TIM8_Init+0x98>)
 8002fce:	f005 f9bb 	bl	8008348 <HAL_TIMEx_MasterConfigSynchronization>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8002fd8:	f000 fa94 	bl	8003504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002fdc:	bf00      	nop
 8002fde:	3718      	adds	r7, #24
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	2000054c 	.word	0x2000054c
 8002fe8:	40010400 	.word	0x40010400

08002fec <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002ff0:	4b11      	ldr	r3, [pc, #68]	@ (8003038 <MX_UART4_Init+0x4c>)
 8002ff2:	4a12      	ldr	r2, [pc, #72]	@ (800303c <MX_UART4_Init+0x50>)
 8002ff4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 19200;
 8002ff6:	4b10      	ldr	r3, [pc, #64]	@ (8003038 <MX_UART4_Init+0x4c>)
 8002ff8:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8002ffc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8003038 <MX_UART4_Init+0x4c>)
 8003000:	2200      	movs	r2, #0
 8003002:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003004:	4b0c      	ldr	r3, [pc, #48]	@ (8003038 <MX_UART4_Init+0x4c>)
 8003006:	2200      	movs	r2, #0
 8003008:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800300a:	4b0b      	ldr	r3, [pc, #44]	@ (8003038 <MX_UART4_Init+0x4c>)
 800300c:	2200      	movs	r2, #0
 800300e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003010:	4b09      	ldr	r3, [pc, #36]	@ (8003038 <MX_UART4_Init+0x4c>)
 8003012:	220c      	movs	r2, #12
 8003014:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003016:	4b08      	ldr	r3, [pc, #32]	@ (8003038 <MX_UART4_Init+0x4c>)
 8003018:	2200      	movs	r2, #0
 800301a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800301c:	4b06      	ldr	r3, [pc, #24]	@ (8003038 <MX_UART4_Init+0x4c>)
 800301e:	2200      	movs	r2, #0
 8003020:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003022:	4805      	ldr	r0, [pc, #20]	@ (8003038 <MX_UART4_Init+0x4c>)
 8003024:	f005 fa72 	bl	800850c <HAL_UART_Init>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800302e:	f000 fa69 	bl	8003504 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003032:	bf00      	nop
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	20000594 	.word	0x20000594
 800303c:	40004c00 	.word	0x40004c00

08003040 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003044:	4b11      	ldr	r3, [pc, #68]	@ (800308c <MX_USART2_UART_Init+0x4c>)
 8003046:	4a12      	ldr	r2, [pc, #72]	@ (8003090 <MX_USART2_UART_Init+0x50>)
 8003048:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800304a:	4b10      	ldr	r3, [pc, #64]	@ (800308c <MX_USART2_UART_Init+0x4c>)
 800304c:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8003050:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003052:	4b0e      	ldr	r3, [pc, #56]	@ (800308c <MX_USART2_UART_Init+0x4c>)
 8003054:	2200      	movs	r2, #0
 8003056:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003058:	4b0c      	ldr	r3, [pc, #48]	@ (800308c <MX_USART2_UART_Init+0x4c>)
 800305a:	2200      	movs	r2, #0
 800305c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800305e:	4b0b      	ldr	r3, [pc, #44]	@ (800308c <MX_USART2_UART_Init+0x4c>)
 8003060:	2200      	movs	r2, #0
 8003062:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003064:	4b09      	ldr	r3, [pc, #36]	@ (800308c <MX_USART2_UART_Init+0x4c>)
 8003066:	220c      	movs	r2, #12
 8003068:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800306a:	4b08      	ldr	r3, [pc, #32]	@ (800308c <MX_USART2_UART_Init+0x4c>)
 800306c:	2200      	movs	r2, #0
 800306e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003070:	4b06      	ldr	r3, [pc, #24]	@ (800308c <MX_USART2_UART_Init+0x4c>)
 8003072:	2200      	movs	r2, #0
 8003074:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003076:	4805      	ldr	r0, [pc, #20]	@ (800308c <MX_USART2_UART_Init+0x4c>)
 8003078:	f005 fa48 	bl	800850c <HAL_UART_Init>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003082:	f000 fa3f 	bl	8003504 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003086:	bf00      	nop
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	200005dc 	.word	0x200005dc
 8003090:	40004400 	.word	0x40004400

08003094 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800309a:	2300      	movs	r3, #0
 800309c:	607b      	str	r3, [r7, #4]
 800309e:	4b1b      	ldr	r3, [pc, #108]	@ (800310c <MX_DMA_Init+0x78>)
 80030a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a2:	4a1a      	ldr	r2, [pc, #104]	@ (800310c <MX_DMA_Init+0x78>)
 80030a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80030a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80030aa:	4b18      	ldr	r3, [pc, #96]	@ (800310c <MX_DMA_Init+0x78>)
 80030ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030b2:	607b      	str	r3, [r7, #4]
 80030b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80030b6:	2300      	movs	r3, #0
 80030b8:	603b      	str	r3, [r7, #0]
 80030ba:	4b14      	ldr	r3, [pc, #80]	@ (800310c <MX_DMA_Init+0x78>)
 80030bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030be:	4a13      	ldr	r2, [pc, #76]	@ (800310c <MX_DMA_Init+0x78>)
 80030c0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80030c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80030c6:	4b11      	ldr	r3, [pc, #68]	@ (800310c <MX_DMA_Init+0x78>)
 80030c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030ce:	603b      	str	r3, [r7, #0]
 80030d0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80030d2:	2200      	movs	r2, #0
 80030d4:	2100      	movs	r1, #0
 80030d6:	200f      	movs	r0, #15
 80030d8:	f001 ffab 	bl	8005032 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80030dc:	200f      	movs	r0, #15
 80030de:	f001 ffc4 	bl	800506a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80030e2:	2200      	movs	r2, #0
 80030e4:	2100      	movs	r1, #0
 80030e6:	2011      	movs	r0, #17
 80030e8:	f001 ffa3 	bl	8005032 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80030ec:	2011      	movs	r0, #17
 80030ee:	f001 ffbc 	bl	800506a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80030f2:	2200      	movs	r2, #0
 80030f4:	2100      	movs	r1, #0
 80030f6:	203a      	movs	r0, #58	@ 0x3a
 80030f8:	f001 ff9b 	bl	8005032 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80030fc:	203a      	movs	r0, #58	@ 0x3a
 80030fe:	f001 ffb4 	bl	800506a <HAL_NVIC_EnableIRQ>

}
 8003102:	bf00      	nop
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	40023800 	.word	0x40023800

08003110 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b08a      	sub	sp, #40	@ 0x28
 8003114:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003116:	f107 0314 	add.w	r3, r7, #20
 800311a:	2200      	movs	r2, #0
 800311c:	601a      	str	r2, [r3, #0]
 800311e:	605a      	str	r2, [r3, #4]
 8003120:	609a      	str	r2, [r3, #8]
 8003122:	60da      	str	r2, [r3, #12]
 8003124:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003126:	2300      	movs	r3, #0
 8003128:	613b      	str	r3, [r7, #16]
 800312a:	4b2e      	ldr	r3, [pc, #184]	@ (80031e4 <MX_GPIO_Init+0xd4>)
 800312c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800312e:	4a2d      	ldr	r2, [pc, #180]	@ (80031e4 <MX_GPIO_Init+0xd4>)
 8003130:	f043 0304 	orr.w	r3, r3, #4
 8003134:	6313      	str	r3, [r2, #48]	@ 0x30
 8003136:	4b2b      	ldr	r3, [pc, #172]	@ (80031e4 <MX_GPIO_Init+0xd4>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800313a:	f003 0304 	and.w	r3, r3, #4
 800313e:	613b      	str	r3, [r7, #16]
 8003140:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003142:	2300      	movs	r3, #0
 8003144:	60fb      	str	r3, [r7, #12]
 8003146:	4b27      	ldr	r3, [pc, #156]	@ (80031e4 <MX_GPIO_Init+0xd4>)
 8003148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800314a:	4a26      	ldr	r2, [pc, #152]	@ (80031e4 <MX_GPIO_Init+0xd4>)
 800314c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003150:	6313      	str	r3, [r2, #48]	@ 0x30
 8003152:	4b24      	ldr	r3, [pc, #144]	@ (80031e4 <MX_GPIO_Init+0xd4>)
 8003154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003156:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800315a:	60fb      	str	r3, [r7, #12]
 800315c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800315e:	2300      	movs	r3, #0
 8003160:	60bb      	str	r3, [r7, #8]
 8003162:	4b20      	ldr	r3, [pc, #128]	@ (80031e4 <MX_GPIO_Init+0xd4>)
 8003164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003166:	4a1f      	ldr	r2, [pc, #124]	@ (80031e4 <MX_GPIO_Init+0xd4>)
 8003168:	f043 0301 	orr.w	r3, r3, #1
 800316c:	6313      	str	r3, [r2, #48]	@ 0x30
 800316e:	4b1d      	ldr	r3, [pc, #116]	@ (80031e4 <MX_GPIO_Init+0xd4>)
 8003170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	60bb      	str	r3, [r7, #8]
 8003178:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800317a:	2300      	movs	r3, #0
 800317c:	607b      	str	r3, [r7, #4]
 800317e:	4b19      	ldr	r3, [pc, #100]	@ (80031e4 <MX_GPIO_Init+0xd4>)
 8003180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003182:	4a18      	ldr	r2, [pc, #96]	@ (80031e4 <MX_GPIO_Init+0xd4>)
 8003184:	f043 0302 	orr.w	r3, r3, #2
 8003188:	6313      	str	r3, [r2, #48]	@ 0x30
 800318a:	4b16      	ldr	r3, [pc, #88]	@ (80031e4 <MX_GPIO_Init+0xd4>)
 800318c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	607b      	str	r3, [r7, #4]
 8003194:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8, GPIO_PIN_RESET);
 8003196:	2200      	movs	r2, #0
 8003198:	f44f 718c 	mov.w	r1, #280	@ 0x118
 800319c:	4812      	ldr	r0, [pc, #72]	@ (80031e8 <MX_GPIO_Init+0xd8>)
 800319e:	f002 fd15 	bl	8005bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80031a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80031a8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80031ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ae:	2300      	movs	r3, #0
 80031b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031b2:	f107 0314 	add.w	r3, r7, #20
 80031b6:	4619      	mov	r1, r3
 80031b8:	480c      	ldr	r0, [pc, #48]	@ (80031ec <MX_GPIO_Init+0xdc>)
 80031ba:	f002 fb73 	bl	80058a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8;
 80031be:	f44f 738c 	mov.w	r3, #280	@ 0x118
 80031c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031c4:	2301      	movs	r3, #1
 80031c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c8:	2300      	movs	r3, #0
 80031ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031cc:	2300      	movs	r3, #0
 80031ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031d0:	f107 0314 	add.w	r3, r7, #20
 80031d4:	4619      	mov	r1, r3
 80031d6:	4804      	ldr	r0, [pc, #16]	@ (80031e8 <MX_GPIO_Init+0xd8>)
 80031d8:	f002 fb64 	bl	80058a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80031dc:	bf00      	nop
 80031de:	3728      	adds	r7, #40	@ 0x28
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	40023800 	.word	0x40023800
 80031e8:	40020400 	.word	0x40020400
 80031ec:	40020000 	.word	0x40020000

080031f0 <HAL_ADCEx_InjectedConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1) {
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a6e      	ldr	r2, [pc, #440]	@ (80033b8 <HAL_ADCEx_InjectedConvCpltCallback+0x1c8>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	f040 80c4 	bne.w	800338c <HAL_ADCEx_InjectedConvCpltCallback+0x19c>
         adc_value_A0 = HAL_ADCEx_InjectedGetValue(hadc, ADC_INJECTED_RANK_1);
 8003204:	2101      	movs	r1, #1
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f001 fc66 	bl	8004ad8 <HAL_ADCEx_InjectedGetValue>
 800320c:	4603      	mov	r3, r0
 800320e:	4a6b      	ldr	r2, [pc, #428]	@ (80033bc <HAL_ADCEx_InjectedConvCpltCallback+0x1cc>)
 8003210:	6013      	str	r3, [r2, #0]
         adc_value_A2 = HAL_ADCEx_InjectedGetValue(hadc, ADC_INJECTED_RANK_2);
 8003212:	2102      	movs	r1, #2
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f001 fc5f 	bl	8004ad8 <HAL_ADCEx_InjectedGetValue>
 800321a:	4603      	mov	r3, r0
 800321c:	4a68      	ldr	r2, [pc, #416]	@ (80033c0 <HAL_ADCEx_InjectedConvCpltCallback+0x1d0>)
 800321e:	6013      	str	r3, [r2, #0]
         ia = (((adc_value_A0/4095.0)*3.3 - 1.65))/(50.0*0.01);
 8003220:	4b66      	ldr	r3, [pc, #408]	@ (80033bc <HAL_ADCEx_InjectedConvCpltCallback+0x1cc>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4618      	mov	r0, r3
 8003226:	f7fd f98d 	bl	8000544 <__aeabi_ui2d>
 800322a:	a35b      	add	r3, pc, #364	@ (adr r3, 8003398 <HAL_ADCEx_InjectedConvCpltCallback+0x1a8>)
 800322c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003230:	f7fd fb2c 	bl	800088c <__aeabi_ddiv>
 8003234:	4602      	mov	r2, r0
 8003236:	460b      	mov	r3, r1
 8003238:	4610      	mov	r0, r2
 800323a:	4619      	mov	r1, r3
 800323c:	a358      	add	r3, pc, #352	@ (adr r3, 80033a0 <HAL_ADCEx_InjectedConvCpltCallback+0x1b0>)
 800323e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003242:	f7fd f9f9 	bl	8000638 <__aeabi_dmul>
 8003246:	4602      	mov	r2, r0
 8003248:	460b      	mov	r3, r1
 800324a:	4610      	mov	r0, r2
 800324c:	4619      	mov	r1, r3
 800324e:	a356      	add	r3, pc, #344	@ (adr r3, 80033a8 <HAL_ADCEx_InjectedConvCpltCallback+0x1b8>)
 8003250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003254:	f7fd f838 	bl	80002c8 <__aeabi_dsub>
 8003258:	4602      	mov	r2, r0
 800325a:	460b      	mov	r3, r1
 800325c:	4610      	mov	r0, r2
 800325e:	4619      	mov	r1, r3
 8003260:	f04f 0200 	mov.w	r2, #0
 8003264:	4b57      	ldr	r3, [pc, #348]	@ (80033c4 <HAL_ADCEx_InjectedConvCpltCallback+0x1d4>)
 8003266:	f7fd fb11 	bl	800088c <__aeabi_ddiv>
 800326a:	4602      	mov	r2, r0
 800326c:	460b      	mov	r3, r1
 800326e:	4610      	mov	r0, r2
 8003270:	4619      	mov	r1, r3
 8003272:	f7fd fcd9 	bl	8000c28 <__aeabi_d2f>
 8003276:	4603      	mov	r3, r0
 8003278:	4a53      	ldr	r2, [pc, #332]	@ (80033c8 <HAL_ADCEx_InjectedConvCpltCallback+0x1d8>)
 800327a:	6013      	str	r3, [r2, #0]
         ib = (((adc_value_A2/4095.0)*3.3 - 1.65))/(50.0*0.01);
 800327c:	4b50      	ldr	r3, [pc, #320]	@ (80033c0 <HAL_ADCEx_InjectedConvCpltCallback+0x1d0>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4618      	mov	r0, r3
 8003282:	f7fd f95f 	bl	8000544 <__aeabi_ui2d>
 8003286:	a344      	add	r3, pc, #272	@ (adr r3, 8003398 <HAL_ADCEx_InjectedConvCpltCallback+0x1a8>)
 8003288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328c:	f7fd fafe 	bl	800088c <__aeabi_ddiv>
 8003290:	4602      	mov	r2, r0
 8003292:	460b      	mov	r3, r1
 8003294:	4610      	mov	r0, r2
 8003296:	4619      	mov	r1, r3
 8003298:	a341      	add	r3, pc, #260	@ (adr r3, 80033a0 <HAL_ADCEx_InjectedConvCpltCallback+0x1b0>)
 800329a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800329e:	f7fd f9cb 	bl	8000638 <__aeabi_dmul>
 80032a2:	4602      	mov	r2, r0
 80032a4:	460b      	mov	r3, r1
 80032a6:	4610      	mov	r0, r2
 80032a8:	4619      	mov	r1, r3
 80032aa:	a33f      	add	r3, pc, #252	@ (adr r3, 80033a8 <HAL_ADCEx_InjectedConvCpltCallback+0x1b8>)
 80032ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b0:	f7fd f80a 	bl	80002c8 <__aeabi_dsub>
 80032b4:	4602      	mov	r2, r0
 80032b6:	460b      	mov	r3, r1
 80032b8:	4610      	mov	r0, r2
 80032ba:	4619      	mov	r1, r3
 80032bc:	f04f 0200 	mov.w	r2, #0
 80032c0:	4b40      	ldr	r3, [pc, #256]	@ (80033c4 <HAL_ADCEx_InjectedConvCpltCallback+0x1d4>)
 80032c2:	f7fd fae3 	bl	800088c <__aeabi_ddiv>
 80032c6:	4602      	mov	r2, r0
 80032c8:	460b      	mov	r3, r1
 80032ca:	4610      	mov	r0, r2
 80032cc:	4619      	mov	r1, r3
 80032ce:	f7fd fcab 	bl	8000c28 <__aeabi_d2f>
 80032d2:	4603      	mov	r3, r0
 80032d4:	4a3d      	ldr	r2, [pc, #244]	@ (80033cc <HAL_ADCEx_InjectedConvCpltCallback+0x1dc>)
 80032d6:	6013      	str	r3, [r2, #0]
         ic= -( ia + ib);
 80032d8:	4b3b      	ldr	r3, [pc, #236]	@ (80033c8 <HAL_ADCEx_InjectedConvCpltCallback+0x1d8>)
 80032da:	ed93 7a00 	vldr	s14, [r3]
 80032de:	4b3b      	ldr	r3, [pc, #236]	@ (80033cc <HAL_ADCEx_InjectedConvCpltCallback+0x1dc>)
 80032e0:	edd3 7a00 	vldr	s15, [r3]
 80032e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032e8:	eef1 7a67 	vneg.f32	s15, s15
 80032ec:	4b38      	ldr	r3, [pc, #224]	@ (80033d0 <HAL_ADCEx_InjectedConvCpltCallback+0x1e0>)
 80032ee:	edc3 7a00 	vstr	s15, [r3]
    	 current_sq = ia*ia + ib*ib + ic*ic;
 80032f2:	4b35      	ldr	r3, [pc, #212]	@ (80033c8 <HAL_ADCEx_InjectedConvCpltCallback+0x1d8>)
 80032f4:	ed93 7a00 	vldr	s14, [r3]
 80032f8:	4b33      	ldr	r3, [pc, #204]	@ (80033c8 <HAL_ADCEx_InjectedConvCpltCallback+0x1d8>)
 80032fa:	edd3 7a00 	vldr	s15, [r3]
 80032fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003302:	4b32      	ldr	r3, [pc, #200]	@ (80033cc <HAL_ADCEx_InjectedConvCpltCallback+0x1dc>)
 8003304:	edd3 6a00 	vldr	s13, [r3]
 8003308:	4b30      	ldr	r3, [pc, #192]	@ (80033cc <HAL_ADCEx_InjectedConvCpltCallback+0x1dc>)
 800330a:	edd3 7a00 	vldr	s15, [r3]
 800330e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003312:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003316:	4b2e      	ldr	r3, [pc, #184]	@ (80033d0 <HAL_ADCEx_InjectedConvCpltCallback+0x1e0>)
 8003318:	edd3 6a00 	vldr	s13, [r3]
 800331c:	4b2c      	ldr	r3, [pc, #176]	@ (80033d0 <HAL_ADCEx_InjectedConvCpltCallback+0x1e0>)
 800331e:	edd3 7a00 	vldr	s15, [r3]
 8003322:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003326:	ee77 7a27 	vadd.f32	s15, s14, s15
 800332a:	4b2a      	ldr	r3, [pc, #168]	@ (80033d4 <HAL_ADCEx_InjectedConvCpltCallback+0x1e4>)
 800332c:	edc3 7a00 	vstr	s15, [r3]
    	 if ((current_sq > OVERCURRENT_LIMIT_SQ) ) {
 8003330:	4b28      	ldr	r3, [pc, #160]	@ (80033d4 <HAL_ADCEx_InjectedConvCpltCallback+0x1e4>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4618      	mov	r0, r3
 8003336:	f7fd f927 	bl	8000588 <__aeabi_f2d>
 800333a:	a31d      	add	r3, pc, #116	@ (adr r3, 80033b0 <HAL_ADCEx_InjectedConvCpltCallback+0x1c0>)
 800333c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003340:	f7fd fc0a 	bl	8000b58 <__aeabi_dcmpgt>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d016      	beq.n	8003378 <HAL_ADCEx_InjectedConvCpltCallback+0x188>
    		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 800334a:	2200      	movs	r2, #0
 800334c:	2110      	movs	r1, #16
 800334e:	4822      	ldr	r0, [pc, #136]	@ (80033d8 <HAL_ADCEx_InjectedConvCpltCallback+0x1e8>)
 8003350:	f002 fc3c 	bl	8005bcc <HAL_GPIO_WritePin>
    		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8003354:	2200      	movs	r2, #0
 8003356:	2108      	movs	r1, #8
 8003358:	481f      	ldr	r0, [pc, #124]	@ (80033d8 <HAL_ADCEx_InjectedConvCpltCallback+0x1e8>)
 800335a:	f002 fc37 	bl	8005bcc <HAL_GPIO_WritePin>
    		 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800335e:	4b1f      	ldr	r3, [pc, #124]	@ (80033dc <HAL_ADCEx_InjectedConvCpltCallback+0x1ec>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2200      	movs	r2, #0
 8003364:	635a      	str	r2, [r3, #52]	@ 0x34
    		 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8003366:	4b1d      	ldr	r3, [pc, #116]	@ (80033dc <HAL_ADCEx_InjectedConvCpltCallback+0x1ec>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2200      	movs	r2, #0
 800336c:	639a      	str	r2, [r3, #56]	@ 0x38
    		 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 800336e:	4b1b      	ldr	r3, [pc, #108]	@ (80033dc <HAL_ADCEx_InjectedConvCpltCallback+0x1ec>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2200      	movs	r2, #0
 8003374:	63da      	str	r2, [r3, #60]	@ 0x3c
    		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
    		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);

    	 }
    }
}
 8003376:	e009      	b.n	800338c <HAL_ADCEx_InjectedConvCpltCallback+0x19c>
    		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8003378:	2201      	movs	r2, #1
 800337a:	2110      	movs	r1, #16
 800337c:	4816      	ldr	r0, [pc, #88]	@ (80033d8 <HAL_ADCEx_InjectedConvCpltCallback+0x1e8>)
 800337e:	f002 fc25 	bl	8005bcc <HAL_GPIO_WritePin>
    		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8003382:	2201      	movs	r2, #1
 8003384:	2108      	movs	r1, #8
 8003386:	4814      	ldr	r0, [pc, #80]	@ (80033d8 <HAL_ADCEx_InjectedConvCpltCallback+0x1e8>)
 8003388:	f002 fc20 	bl	8005bcc <HAL_GPIO_WritePin>
}
 800338c:	bf00      	nop
 800338e:	3708      	adds	r7, #8
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	f3af 8000 	nop.w
 8003398:	00000000 	.word	0x00000000
 800339c:	40affe00 	.word	0x40affe00
 80033a0:	66666666 	.word	0x66666666
 80033a4:	400a6666 	.word	0x400a6666
 80033a8:	66666666 	.word	0x66666666
 80033ac:	3ffa6666 	.word	0x3ffa6666
 80033b0:	f5c28f5c 	.word	0xf5c28f5c
 80033b4:	3fff5c28 	.word	0x3fff5c28
 80033b8:	40012000 	.word	0x40012000
 80033bc:	20000234 	.word	0x20000234
 80033c0:	20000238 	.word	0x20000238
 80033c4:	3fe00000 	.word	0x3fe00000
 80033c8:	2000023c 	.word	0x2000023c
 80033cc:	20000240 	.word	0x20000240
 80033d0:	20000244 	.word	0x20000244
 80033d4:	200002cc 	.word	0x200002cc
 80033d8:	40020400 	.word	0x40020400
 80033dc:	20000474 	.word	0x20000474

080033e0 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM8)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a05      	ldr	r2, [pc, #20]	@ (8003404 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d102      	bne.n	80033f8 <HAL_TIM_PeriodElapsedCallback+0x18>
    {
        flag_current_loop = 1;
 80033f2:	4b05      	ldr	r3, [pc, #20]	@ (8003408 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80033f4:	2201      	movs	r2, #1
 80033f6:	701a      	strb	r2, [r3, #0]
    }
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr
 8003404:	40010400 	.word	0x40010400
 8003408:	200002e0 	.word	0x200002e0

0800340c <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)//
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a05      	ldr	r2, [pc, #20]	@ (8003430 <HAL_UART_TxCpltCallback+0x24>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d102      	bne.n	8003424 <HAL_UART_TxCpltCallback+0x18>
    {
        uart_busy = 0;
 800341e:	4b05      	ldr	r3, [pc, #20]	@ (8003434 <HAL_UART_TxCpltCallback+0x28>)
 8003420:	2200      	movs	r2, #0
 8003422:	701a      	strb	r2, [r3, #0]
    }
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	40004400 	.word	0x40004400
 8003434:	200002e1 	.word	0x200002e1

08003438 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC2)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a2a      	ldr	r2, [pc, #168]	@ (80034f0 <HAL_ADC_ConvCpltCallback+0xb8>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d144      	bne.n	80034d4 <HAL_ADC_ConvCpltCallback+0x9c>
    {
        adc_dma_voltage = (adc_dma_value / 4095.0) * 3.3;
 800344a:	4b2a      	ldr	r3, [pc, #168]	@ (80034f4 <HAL_ADC_ConvCpltCallback+0xbc>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4618      	mov	r0, r3
 8003450:	f7fd f878 	bl	8000544 <__aeabi_ui2d>
 8003454:	a322      	add	r3, pc, #136	@ (adr r3, 80034e0 <HAL_ADC_ConvCpltCallback+0xa8>)
 8003456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800345a:	f7fd fa17 	bl	800088c <__aeabi_ddiv>
 800345e:	4602      	mov	r2, r0
 8003460:	460b      	mov	r3, r1
 8003462:	4610      	mov	r0, r2
 8003464:	4619      	mov	r1, r3
 8003466:	a320      	add	r3, pc, #128	@ (adr r3, 80034e8 <HAL_ADC_ConvCpltCallback+0xb0>)
 8003468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800346c:	f7fd f8e4 	bl	8000638 <__aeabi_dmul>
 8003470:	4602      	mov	r2, r0
 8003472:	460b      	mov	r3, r1
 8003474:	4610      	mov	r0, r2
 8003476:	4619      	mov	r1, r3
 8003478:	f7fd fbd6 	bl	8000c28 <__aeabi_d2f>
 800347c:	4603      	mov	r3, r0
 800347e:	4a1e      	ldr	r2, [pc, #120]	@ (80034f8 <HAL_ADC_ConvCpltCallback+0xc0>)
 8003480:	6013      	str	r3, [r2, #0]
   	 if ( (adc_dma_voltage < 1.5f) || (adc_dma_voltage > 1.9f)) {
 8003482:	4b1d      	ldr	r3, [pc, #116]	@ (80034f8 <HAL_ADC_ConvCpltCallback+0xc0>)
 8003484:	edd3 7a00 	vldr	s15, [r3]
 8003488:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800348c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003494:	d409      	bmi.n	80034aa <HAL_ADC_ConvCpltCallback+0x72>
 8003496:	4b18      	ldr	r3, [pc, #96]	@ (80034f8 <HAL_ADC_ConvCpltCallback+0xc0>)
 8003498:	edd3 7a00 	vldr	s15, [r3]
 800349c:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80034fc <HAL_ADC_ConvCpltCallback+0xc4>
 80034a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034a8:	dd0a      	ble.n	80034c0 <HAL_ADC_ConvCpltCallback+0x88>
   		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80034aa:	2200      	movs	r2, #0
 80034ac:	2110      	movs	r1, #16
 80034ae:	4814      	ldr	r0, [pc, #80]	@ (8003500 <HAL_ADC_ConvCpltCallback+0xc8>)
 80034b0:	f002 fb8c 	bl	8005bcc <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80034b4:	2200      	movs	r2, #0
 80034b6:	2108      	movs	r1, #8
 80034b8:	4811      	ldr	r0, [pc, #68]	@ (8003500 <HAL_ADC_ConvCpltCallback+0xc8>)
 80034ba:	f002 fb87 	bl	8005bcc <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);

   	 }

    }
}
 80034be:	e009      	b.n	80034d4 <HAL_ADC_ConvCpltCallback+0x9c>
   		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80034c0:	2201      	movs	r2, #1
 80034c2:	2110      	movs	r1, #16
 80034c4:	480e      	ldr	r0, [pc, #56]	@ (8003500 <HAL_ADC_ConvCpltCallback+0xc8>)
 80034c6:	f002 fb81 	bl	8005bcc <HAL_GPIO_WritePin>
   		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 80034ca:	2201      	movs	r2, #1
 80034cc:	2108      	movs	r1, #8
 80034ce:	480c      	ldr	r0, [pc, #48]	@ (8003500 <HAL_ADC_ConvCpltCallback+0xc8>)
 80034d0:	f002 fb7c 	bl	8005bcc <HAL_GPIO_WritePin>
}
 80034d4:	bf00      	nop
 80034d6:	3708      	adds	r7, #8
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	f3af 8000 	nop.w
 80034e0:	00000000 	.word	0x00000000
 80034e4:	40affe00 	.word	0x40affe00
 80034e8:	66666666 	.word	0x66666666
 80034ec:	400a6666 	.word	0x400a6666
 80034f0:	40012100 	.word	0x40012100
 80034f4:	200002e4 	.word	0x200002e4
 80034f8:	200002b0 	.word	0x200002b0
 80034fc:	3ff33333 	.word	0x3ff33333
 8003500:	40020400 	.word	0x40020400

08003504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003508:	b672      	cpsid	i
}
 800350a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800350c:	bf00      	nop
 800350e:	e7fd      	b.n	800350c <Error_Handler+0x8>

08003510 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003516:	2300      	movs	r3, #0
 8003518:	607b      	str	r3, [r7, #4]
 800351a:	4b10      	ldr	r3, [pc, #64]	@ (800355c <HAL_MspInit+0x4c>)
 800351c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800351e:	4a0f      	ldr	r2, [pc, #60]	@ (800355c <HAL_MspInit+0x4c>)
 8003520:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003524:	6453      	str	r3, [r2, #68]	@ 0x44
 8003526:	4b0d      	ldr	r3, [pc, #52]	@ (800355c <HAL_MspInit+0x4c>)
 8003528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800352a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800352e:	607b      	str	r3, [r7, #4]
 8003530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003532:	2300      	movs	r3, #0
 8003534:	603b      	str	r3, [r7, #0]
 8003536:	4b09      	ldr	r3, [pc, #36]	@ (800355c <HAL_MspInit+0x4c>)
 8003538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800353a:	4a08      	ldr	r2, [pc, #32]	@ (800355c <HAL_MspInit+0x4c>)
 800353c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003540:	6413      	str	r3, [r2, #64]	@ 0x40
 8003542:	4b06      	ldr	r3, [pc, #24]	@ (800355c <HAL_MspInit+0x4c>)
 8003544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003546:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800354a:	603b      	str	r3, [r7, #0]
 800354c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800354e:	2007      	movs	r0, #7
 8003550:	f001 fd64 	bl	800501c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003554:	bf00      	nop
 8003556:	3708      	adds	r7, #8
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	40023800 	.word	0x40023800

08003560 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b08c      	sub	sp, #48	@ 0x30
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003568:	f107 031c 	add.w	r3, r7, #28
 800356c:	2200      	movs	r2, #0
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	605a      	str	r2, [r3, #4]
 8003572:	609a      	str	r2, [r3, #8]
 8003574:	60da      	str	r2, [r3, #12]
 8003576:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a4e      	ldr	r2, [pc, #312]	@ (80036b8 <HAL_ADC_MspInit+0x158>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d130      	bne.n	80035e4 <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003582:	2300      	movs	r3, #0
 8003584:	61bb      	str	r3, [r7, #24]
 8003586:	4b4d      	ldr	r3, [pc, #308]	@ (80036bc <HAL_ADC_MspInit+0x15c>)
 8003588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800358a:	4a4c      	ldr	r2, [pc, #304]	@ (80036bc <HAL_ADC_MspInit+0x15c>)
 800358c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003590:	6453      	str	r3, [r2, #68]	@ 0x44
 8003592:	4b4a      	ldr	r3, [pc, #296]	@ (80036bc <HAL_ADC_MspInit+0x15c>)
 8003594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800359a:	61bb      	str	r3, [r7, #24]
 800359c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800359e:	2300      	movs	r3, #0
 80035a0:	617b      	str	r3, [r7, #20]
 80035a2:	4b46      	ldr	r3, [pc, #280]	@ (80036bc <HAL_ADC_MspInit+0x15c>)
 80035a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a6:	4a45      	ldr	r2, [pc, #276]	@ (80036bc <HAL_ADC_MspInit+0x15c>)
 80035a8:	f043 0301 	orr.w	r3, r3, #1
 80035ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80035ae:	4b43      	ldr	r3, [pc, #268]	@ (80036bc <HAL_ADC_MspInit+0x15c>)
 80035b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	617b      	str	r3, [r7, #20]
 80035b8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 80035ba:	2311      	movs	r3, #17
 80035bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035be:	2303      	movs	r3, #3
 80035c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c2:	2300      	movs	r3, #0
 80035c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035c6:	f107 031c 	add.w	r3, r7, #28
 80035ca:	4619      	mov	r1, r3
 80035cc:	483c      	ldr	r0, [pc, #240]	@ (80036c0 <HAL_ADC_MspInit+0x160>)
 80035ce:	f002 f969 	bl	80058a4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80035d2:	2200      	movs	r2, #0
 80035d4:	2100      	movs	r1, #0
 80035d6:	2012      	movs	r0, #18
 80035d8:	f001 fd2b 	bl	8005032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80035dc:	2012      	movs	r0, #18
 80035de:	f001 fd44 	bl	800506a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80035e2:	e065      	b.n	80036b0 <HAL_ADC_MspInit+0x150>
  else if(hadc->Instance==ADC2)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a36      	ldr	r2, [pc, #216]	@ (80036c4 <HAL_ADC_MspInit+0x164>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d160      	bne.n	80036b0 <HAL_ADC_MspInit+0x150>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80035ee:	2300      	movs	r3, #0
 80035f0:	613b      	str	r3, [r7, #16]
 80035f2:	4b32      	ldr	r3, [pc, #200]	@ (80036bc <HAL_ADC_MspInit+0x15c>)
 80035f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035f6:	4a31      	ldr	r2, [pc, #196]	@ (80036bc <HAL_ADC_MspInit+0x15c>)
 80035f8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80035fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80035fe:	4b2f      	ldr	r3, [pc, #188]	@ (80036bc <HAL_ADC_MspInit+0x15c>)
 8003600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003602:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003606:	613b      	str	r3, [r7, #16]
 8003608:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800360a:	2300      	movs	r3, #0
 800360c:	60fb      	str	r3, [r7, #12]
 800360e:	4b2b      	ldr	r3, [pc, #172]	@ (80036bc <HAL_ADC_MspInit+0x15c>)
 8003610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003612:	4a2a      	ldr	r2, [pc, #168]	@ (80036bc <HAL_ADC_MspInit+0x15c>)
 8003614:	f043 0301 	orr.w	r3, r3, #1
 8003618:	6313      	str	r3, [r2, #48]	@ 0x30
 800361a:	4b28      	ldr	r3, [pc, #160]	@ (80036bc <HAL_ADC_MspInit+0x15c>)
 800361c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	60fb      	str	r3, [r7, #12]
 8003624:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003626:	2302      	movs	r3, #2
 8003628:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800362a:	2303      	movs	r3, #3
 800362c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800362e:	2300      	movs	r3, #0
 8003630:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003632:	f107 031c 	add.w	r3, r7, #28
 8003636:	4619      	mov	r1, r3
 8003638:	4821      	ldr	r0, [pc, #132]	@ (80036c0 <HAL_ADC_MspInit+0x160>)
 800363a:	f002 f933 	bl	80058a4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800363e:	4b22      	ldr	r3, [pc, #136]	@ (80036c8 <HAL_ADC_MspInit+0x168>)
 8003640:	4a22      	ldr	r2, [pc, #136]	@ (80036cc <HAL_ADC_MspInit+0x16c>)
 8003642:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8003644:	4b20      	ldr	r3, [pc, #128]	@ (80036c8 <HAL_ADC_MspInit+0x168>)
 8003646:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800364a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800364c:	4b1e      	ldr	r3, [pc, #120]	@ (80036c8 <HAL_ADC_MspInit+0x168>)
 800364e:	2200      	movs	r2, #0
 8003650:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003652:	4b1d      	ldr	r3, [pc, #116]	@ (80036c8 <HAL_ADC_MspInit+0x168>)
 8003654:	2200      	movs	r2, #0
 8003656:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003658:	4b1b      	ldr	r3, [pc, #108]	@ (80036c8 <HAL_ADC_MspInit+0x168>)
 800365a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800365e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003660:	4b19      	ldr	r3, [pc, #100]	@ (80036c8 <HAL_ADC_MspInit+0x168>)
 8003662:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003666:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003668:	4b17      	ldr	r3, [pc, #92]	@ (80036c8 <HAL_ADC_MspInit+0x168>)
 800366a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800366e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8003670:	4b15      	ldr	r3, [pc, #84]	@ (80036c8 <HAL_ADC_MspInit+0x168>)
 8003672:	2200      	movs	r2, #0
 8003674:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003676:	4b14      	ldr	r3, [pc, #80]	@ (80036c8 <HAL_ADC_MspInit+0x168>)
 8003678:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800367c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800367e:	4b12      	ldr	r3, [pc, #72]	@ (80036c8 <HAL_ADC_MspInit+0x168>)
 8003680:	2200      	movs	r2, #0
 8003682:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8003684:	4810      	ldr	r0, [pc, #64]	@ (80036c8 <HAL_ADC_MspInit+0x168>)
 8003686:	f001 fd0b 	bl	80050a0 <HAL_DMA_Init>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <HAL_ADC_MspInit+0x134>
      Error_Handler();
 8003690:	f7ff ff38 	bl	8003504 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a0c      	ldr	r2, [pc, #48]	@ (80036c8 <HAL_ADC_MspInit+0x168>)
 8003698:	639a      	str	r2, [r3, #56]	@ 0x38
 800369a:	4a0b      	ldr	r2, [pc, #44]	@ (80036c8 <HAL_ADC_MspInit+0x168>)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80036a0:	2200      	movs	r2, #0
 80036a2:	2100      	movs	r1, #0
 80036a4:	2012      	movs	r0, #18
 80036a6:	f001 fcc4 	bl	8005032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80036aa:	2012      	movs	r0, #18
 80036ac:	f001 fcdd 	bl	800506a <HAL_NVIC_EnableIRQ>
}
 80036b0:	bf00      	nop
 80036b2:	3730      	adds	r7, #48	@ 0x30
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	40012000 	.word	0x40012000
 80036bc:	40023800 	.word	0x40023800
 80036c0:	40020000 	.word	0x40020000
 80036c4:	40012100 	.word	0x40012100
 80036c8:	200003bc 	.word	0x200003bc
 80036cc:	40026440 	.word	0x40026440

080036d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b08a      	sub	sp, #40	@ 0x28
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036d8:	f107 0314 	add.w	r3, r7, #20
 80036dc:	2200      	movs	r2, #0
 80036de:	601a      	str	r2, [r3, #0]
 80036e0:	605a      	str	r2, [r3, #4]
 80036e2:	609a      	str	r2, [r3, #8]
 80036e4:	60da      	str	r2, [r3, #12]
 80036e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a1d      	ldr	r2, [pc, #116]	@ (8003764 <HAL_SPI_MspInit+0x94>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d133      	bne.n	800375a <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80036f2:	2300      	movs	r3, #0
 80036f4:	613b      	str	r3, [r7, #16]
 80036f6:	4b1c      	ldr	r3, [pc, #112]	@ (8003768 <HAL_SPI_MspInit+0x98>)
 80036f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036fa:	4a1b      	ldr	r2, [pc, #108]	@ (8003768 <HAL_SPI_MspInit+0x98>)
 80036fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003700:	6453      	str	r3, [r2, #68]	@ 0x44
 8003702:	4b19      	ldr	r3, [pc, #100]	@ (8003768 <HAL_SPI_MspInit+0x98>)
 8003704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003706:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800370a:	613b      	str	r3, [r7, #16]
 800370c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800370e:	2300      	movs	r3, #0
 8003710:	60fb      	str	r3, [r7, #12]
 8003712:	4b15      	ldr	r3, [pc, #84]	@ (8003768 <HAL_SPI_MspInit+0x98>)
 8003714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003716:	4a14      	ldr	r2, [pc, #80]	@ (8003768 <HAL_SPI_MspInit+0x98>)
 8003718:	f043 0301 	orr.w	r3, r3, #1
 800371c:	6313      	str	r3, [r2, #48]	@ 0x30
 800371e:	4b12      	ldr	r3, [pc, #72]	@ (8003768 <HAL_SPI_MspInit+0x98>)
 8003720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800372a:	23e0      	movs	r3, #224	@ 0xe0
 800372c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800372e:	2302      	movs	r3, #2
 8003730:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003732:	2300      	movs	r3, #0
 8003734:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003736:	2303      	movs	r3, #3
 8003738:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800373a:	2305      	movs	r3, #5
 800373c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800373e:	f107 0314 	add.w	r3, r7, #20
 8003742:	4619      	mov	r1, r3
 8003744:	4809      	ldr	r0, [pc, #36]	@ (800376c <HAL_SPI_MspInit+0x9c>)
 8003746:	f002 f8ad 	bl	80058a4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800374a:	2200      	movs	r2, #0
 800374c:	2100      	movs	r1, #0
 800374e:	2023      	movs	r0, #35	@ 0x23
 8003750:	f001 fc6f 	bl	8005032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003754:	2023      	movs	r0, #35	@ 0x23
 8003756:	f001 fc88 	bl	800506a <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800375a:	bf00      	nop
 800375c:	3728      	adds	r7, #40	@ 0x28
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	40013000 	.word	0x40013000
 8003768:	40023800 	.word	0x40023800
 800376c:	40020000 	.word	0x40020000

08003770 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a2c      	ldr	r2, [pc, #176]	@ (8003830 <HAL_TIM_Base_MspInit+0xc0>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d10e      	bne.n	80037a0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003782:	2300      	movs	r3, #0
 8003784:	617b      	str	r3, [r7, #20]
 8003786:	4b2b      	ldr	r3, [pc, #172]	@ (8003834 <HAL_TIM_Base_MspInit+0xc4>)
 8003788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800378a:	4a2a      	ldr	r2, [pc, #168]	@ (8003834 <HAL_TIM_Base_MspInit+0xc4>)
 800378c:	f043 0301 	orr.w	r3, r3, #1
 8003790:	6453      	str	r3, [r2, #68]	@ 0x44
 8003792:	4b28      	ldr	r3, [pc, #160]	@ (8003834 <HAL_TIM_Base_MspInit+0xc4>)
 8003794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	617b      	str	r3, [r7, #20]
 800379c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800379e:	e042      	b.n	8003826 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037a8:	d10e      	bne.n	80037c8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80037aa:	2300      	movs	r3, #0
 80037ac:	613b      	str	r3, [r7, #16]
 80037ae:	4b21      	ldr	r3, [pc, #132]	@ (8003834 <HAL_TIM_Base_MspInit+0xc4>)
 80037b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b2:	4a20      	ldr	r2, [pc, #128]	@ (8003834 <HAL_TIM_Base_MspInit+0xc4>)
 80037b4:	f043 0301 	orr.w	r3, r3, #1
 80037b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80037ba:	4b1e      	ldr	r3, [pc, #120]	@ (8003834 <HAL_TIM_Base_MspInit+0xc4>)
 80037bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	613b      	str	r3, [r7, #16]
 80037c4:	693b      	ldr	r3, [r7, #16]
}
 80037c6:	e02e      	b.n	8003826 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a1a      	ldr	r2, [pc, #104]	@ (8003838 <HAL_TIM_Base_MspInit+0xc8>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d10e      	bne.n	80037f0 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80037d2:	2300      	movs	r3, #0
 80037d4:	60fb      	str	r3, [r7, #12]
 80037d6:	4b17      	ldr	r3, [pc, #92]	@ (8003834 <HAL_TIM_Base_MspInit+0xc4>)
 80037d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037da:	4a16      	ldr	r2, [pc, #88]	@ (8003834 <HAL_TIM_Base_MspInit+0xc4>)
 80037dc:	f043 0302 	orr.w	r3, r3, #2
 80037e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80037e2:	4b14      	ldr	r3, [pc, #80]	@ (8003834 <HAL_TIM_Base_MspInit+0xc4>)
 80037e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	60fb      	str	r3, [r7, #12]
 80037ec:	68fb      	ldr	r3, [r7, #12]
}
 80037ee:	e01a      	b.n	8003826 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM8)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a11      	ldr	r2, [pc, #68]	@ (800383c <HAL_TIM_Base_MspInit+0xcc>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d115      	bne.n	8003826 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80037fa:	2300      	movs	r3, #0
 80037fc:	60bb      	str	r3, [r7, #8]
 80037fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003834 <HAL_TIM_Base_MspInit+0xc4>)
 8003800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003802:	4a0c      	ldr	r2, [pc, #48]	@ (8003834 <HAL_TIM_Base_MspInit+0xc4>)
 8003804:	f043 0302 	orr.w	r3, r3, #2
 8003808:	6453      	str	r3, [r2, #68]	@ 0x44
 800380a:	4b0a      	ldr	r3, [pc, #40]	@ (8003834 <HAL_TIM_Base_MspInit+0xc4>)
 800380c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	60bb      	str	r3, [r7, #8]
 8003814:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8003816:	2200      	movs	r2, #0
 8003818:	2100      	movs	r1, #0
 800381a:	202c      	movs	r0, #44	@ 0x2c
 800381c:	f001 fc09 	bl	8005032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003820:	202c      	movs	r0, #44	@ 0x2c
 8003822:	f001 fc22 	bl	800506a <HAL_NVIC_EnableIRQ>
}
 8003826:	bf00      	nop
 8003828:	3718      	adds	r7, #24
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	40010000 	.word	0x40010000
 8003834:	40023800 	.word	0x40023800
 8003838:	40000400 	.word	0x40000400
 800383c:	40010400 	.word	0x40010400

08003840 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b088      	sub	sp, #32
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003848:	f107 030c 	add.w	r3, r7, #12
 800384c:	2200      	movs	r2, #0
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	605a      	str	r2, [r3, #4]
 8003852:	609a      	str	r2, [r3, #8]
 8003854:	60da      	str	r2, [r3, #12]
 8003856:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a12      	ldr	r2, [pc, #72]	@ (80038a8 <HAL_TIM_MspPostInit+0x68>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d11e      	bne.n	80038a0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003862:	2300      	movs	r3, #0
 8003864:	60bb      	str	r3, [r7, #8]
 8003866:	4b11      	ldr	r3, [pc, #68]	@ (80038ac <HAL_TIM_MspPostInit+0x6c>)
 8003868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800386a:	4a10      	ldr	r2, [pc, #64]	@ (80038ac <HAL_TIM_MspPostInit+0x6c>)
 800386c:	f043 0301 	orr.w	r3, r3, #1
 8003870:	6313      	str	r3, [r2, #48]	@ 0x30
 8003872:	4b0e      	ldr	r3, [pc, #56]	@ (80038ac <HAL_TIM_MspPostInit+0x6c>)
 8003874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	60bb      	str	r3, [r7, #8]
 800387c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800387e:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8003882:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003884:	2302      	movs	r3, #2
 8003886:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003888:	2300      	movs	r3, #0
 800388a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800388c:	2300      	movs	r3, #0
 800388e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003890:	2301      	movs	r3, #1
 8003892:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003894:	f107 030c 	add.w	r3, r7, #12
 8003898:	4619      	mov	r1, r3
 800389a:	4805      	ldr	r0, [pc, #20]	@ (80038b0 <HAL_TIM_MspPostInit+0x70>)
 800389c:	f002 f802 	bl	80058a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80038a0:	bf00      	nop
 80038a2:	3720      	adds	r7, #32
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	40010000 	.word	0x40010000
 80038ac:	40023800 	.word	0x40023800
 80038b0:	40020000 	.word	0x40020000

080038b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b08c      	sub	sp, #48	@ 0x30
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038bc:	f107 031c 	add.w	r3, r7, #28
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	605a      	str	r2, [r3, #4]
 80038c6:	609a      	str	r2, [r3, #8]
 80038c8:	60da      	str	r2, [r3, #12]
 80038ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a68      	ldr	r2, [pc, #416]	@ (8003a74 <HAL_UART_MspInit+0x1c0>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d163      	bne.n	800399e <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80038d6:	2300      	movs	r3, #0
 80038d8:	61bb      	str	r3, [r7, #24]
 80038da:	4b67      	ldr	r3, [pc, #412]	@ (8003a78 <HAL_UART_MspInit+0x1c4>)
 80038dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038de:	4a66      	ldr	r2, [pc, #408]	@ (8003a78 <HAL_UART_MspInit+0x1c4>)
 80038e0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80038e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80038e6:	4b64      	ldr	r3, [pc, #400]	@ (8003a78 <HAL_UART_MspInit+0x1c4>)
 80038e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038ee:	61bb      	str	r3, [r7, #24]
 80038f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038f2:	2300      	movs	r3, #0
 80038f4:	617b      	str	r3, [r7, #20]
 80038f6:	4b60      	ldr	r3, [pc, #384]	@ (8003a78 <HAL_UART_MspInit+0x1c4>)
 80038f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038fa:	4a5f      	ldr	r2, [pc, #380]	@ (8003a78 <HAL_UART_MspInit+0x1c4>)
 80038fc:	f043 0304 	orr.w	r3, r3, #4
 8003900:	6313      	str	r3, [r2, #48]	@ 0x30
 8003902:	4b5d      	ldr	r3, [pc, #372]	@ (8003a78 <HAL_UART_MspInit+0x1c4>)
 8003904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003906:	f003 0304 	and.w	r3, r3, #4
 800390a:	617b      	str	r3, [r7, #20]
 800390c:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800390e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003914:	2302      	movs	r3, #2
 8003916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003918:	2300      	movs	r3, #0
 800391a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800391c:	2303      	movs	r3, #3
 800391e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003920:	2308      	movs	r3, #8
 8003922:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003924:	f107 031c 	add.w	r3, r7, #28
 8003928:	4619      	mov	r1, r3
 800392a:	4854      	ldr	r0, [pc, #336]	@ (8003a7c <HAL_UART_MspInit+0x1c8>)
 800392c:	f001 ffba 	bl	80058a4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8003930:	4b53      	ldr	r3, [pc, #332]	@ (8003a80 <HAL_UART_MspInit+0x1cc>)
 8003932:	4a54      	ldr	r2, [pc, #336]	@ (8003a84 <HAL_UART_MspInit+0x1d0>)
 8003934:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8003936:	4b52      	ldr	r3, [pc, #328]	@ (8003a80 <HAL_UART_MspInit+0x1cc>)
 8003938:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800393c:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800393e:	4b50      	ldr	r3, [pc, #320]	@ (8003a80 <HAL_UART_MspInit+0x1cc>)
 8003940:	2240      	movs	r2, #64	@ 0x40
 8003942:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003944:	4b4e      	ldr	r3, [pc, #312]	@ (8003a80 <HAL_UART_MspInit+0x1cc>)
 8003946:	2200      	movs	r2, #0
 8003948:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800394a:	4b4d      	ldr	r3, [pc, #308]	@ (8003a80 <HAL_UART_MspInit+0x1cc>)
 800394c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003950:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003952:	4b4b      	ldr	r3, [pc, #300]	@ (8003a80 <HAL_UART_MspInit+0x1cc>)
 8003954:	2200      	movs	r2, #0
 8003956:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003958:	4b49      	ldr	r3, [pc, #292]	@ (8003a80 <HAL_UART_MspInit+0x1cc>)
 800395a:	2200      	movs	r2, #0
 800395c:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800395e:	4b48      	ldr	r3, [pc, #288]	@ (8003a80 <HAL_UART_MspInit+0x1cc>)
 8003960:	2200      	movs	r2, #0
 8003962:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003964:	4b46      	ldr	r3, [pc, #280]	@ (8003a80 <HAL_UART_MspInit+0x1cc>)
 8003966:	2200      	movs	r2, #0
 8003968:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800396a:	4b45      	ldr	r3, [pc, #276]	@ (8003a80 <HAL_UART_MspInit+0x1cc>)
 800396c:	2200      	movs	r2, #0
 800396e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8003970:	4843      	ldr	r0, [pc, #268]	@ (8003a80 <HAL_UART_MspInit+0x1cc>)
 8003972:	f001 fb95 	bl	80050a0 <HAL_DMA_Init>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800397c:	f7ff fdc2 	bl	8003504 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a3f      	ldr	r2, [pc, #252]	@ (8003a80 <HAL_UART_MspInit+0x1cc>)
 8003984:	639a      	str	r2, [r3, #56]	@ 0x38
 8003986:	4a3e      	ldr	r2, [pc, #248]	@ (8003a80 <HAL_UART_MspInit+0x1cc>)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800398c:	2200      	movs	r2, #0
 800398e:	2100      	movs	r1, #0
 8003990:	2034      	movs	r0, #52	@ 0x34
 8003992:	f001 fb4e 	bl	8005032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003996:	2034      	movs	r0, #52	@ 0x34
 8003998:	f001 fb67 	bl	800506a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800399c:	e066      	b.n	8003a6c <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART2)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a39      	ldr	r2, [pc, #228]	@ (8003a88 <HAL_UART_MspInit+0x1d4>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d161      	bne.n	8003a6c <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80039a8:	2300      	movs	r3, #0
 80039aa:	613b      	str	r3, [r7, #16]
 80039ac:	4b32      	ldr	r3, [pc, #200]	@ (8003a78 <HAL_UART_MspInit+0x1c4>)
 80039ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b0:	4a31      	ldr	r2, [pc, #196]	@ (8003a78 <HAL_UART_MspInit+0x1c4>)
 80039b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80039b8:	4b2f      	ldr	r3, [pc, #188]	@ (8003a78 <HAL_UART_MspInit+0x1c4>)
 80039ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039c0:	613b      	str	r3, [r7, #16]
 80039c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039c4:	2300      	movs	r3, #0
 80039c6:	60fb      	str	r3, [r7, #12]
 80039c8:	4b2b      	ldr	r3, [pc, #172]	@ (8003a78 <HAL_UART_MspInit+0x1c4>)
 80039ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039cc:	4a2a      	ldr	r2, [pc, #168]	@ (8003a78 <HAL_UART_MspInit+0x1c4>)
 80039ce:	f043 0301 	orr.w	r3, r3, #1
 80039d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80039d4:	4b28      	ldr	r3, [pc, #160]	@ (8003a78 <HAL_UART_MspInit+0x1c4>)
 80039d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d8:	f003 0301 	and.w	r3, r3, #1
 80039dc:	60fb      	str	r3, [r7, #12]
 80039de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80039e0:	230c      	movs	r3, #12
 80039e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039e4:	2302      	movs	r3, #2
 80039e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e8:	2300      	movs	r3, #0
 80039ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039ec:	2303      	movs	r3, #3
 80039ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80039f0:	2307      	movs	r3, #7
 80039f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039f4:	f107 031c 	add.w	r3, r7, #28
 80039f8:	4619      	mov	r1, r3
 80039fa:	4824      	ldr	r0, [pc, #144]	@ (8003a8c <HAL_UART_MspInit+0x1d8>)
 80039fc:	f001 ff52 	bl	80058a4 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003a00:	4b23      	ldr	r3, [pc, #140]	@ (8003a90 <HAL_UART_MspInit+0x1dc>)
 8003a02:	4a24      	ldr	r2, [pc, #144]	@ (8003a94 <HAL_UART_MspInit+0x1e0>)
 8003a04:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003a06:	4b22      	ldr	r3, [pc, #136]	@ (8003a90 <HAL_UART_MspInit+0x1dc>)
 8003a08:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003a0c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a0e:	4b20      	ldr	r3, [pc, #128]	@ (8003a90 <HAL_UART_MspInit+0x1dc>)
 8003a10:	2240      	movs	r2, #64	@ 0x40
 8003a12:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a14:	4b1e      	ldr	r3, [pc, #120]	@ (8003a90 <HAL_UART_MspInit+0x1dc>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a1a:	4b1d      	ldr	r3, [pc, #116]	@ (8003a90 <HAL_UART_MspInit+0x1dc>)
 8003a1c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a20:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a22:	4b1b      	ldr	r3, [pc, #108]	@ (8003a90 <HAL_UART_MspInit+0x1dc>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a28:	4b19      	ldr	r3, [pc, #100]	@ (8003a90 <HAL_UART_MspInit+0x1dc>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003a2e:	4b18      	ldr	r3, [pc, #96]	@ (8003a90 <HAL_UART_MspInit+0x1dc>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003a34:	4b16      	ldr	r3, [pc, #88]	@ (8003a90 <HAL_UART_MspInit+0x1dc>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a3a:	4b15      	ldr	r3, [pc, #84]	@ (8003a90 <HAL_UART_MspInit+0x1dc>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003a40:	4813      	ldr	r0, [pc, #76]	@ (8003a90 <HAL_UART_MspInit+0x1dc>)
 8003a42:	f001 fb2d 	bl	80050a0 <HAL_DMA_Init>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d001      	beq.n	8003a50 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8003a4c:	f7ff fd5a 	bl	8003504 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a0f      	ldr	r2, [pc, #60]	@ (8003a90 <HAL_UART_MspInit+0x1dc>)
 8003a54:	639a      	str	r2, [r3, #56]	@ 0x38
 8003a56:	4a0e      	ldr	r2, [pc, #56]	@ (8003a90 <HAL_UART_MspInit+0x1dc>)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	2100      	movs	r1, #0
 8003a60:	2026      	movs	r0, #38	@ 0x26
 8003a62:	f001 fae6 	bl	8005032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003a66:	2026      	movs	r0, #38	@ 0x26
 8003a68:	f001 faff 	bl	800506a <HAL_NVIC_EnableIRQ>
}
 8003a6c:	bf00      	nop
 8003a6e:	3730      	adds	r7, #48	@ 0x30
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	40004c00 	.word	0x40004c00
 8003a78:	40023800 	.word	0x40023800
 8003a7c:	40020800 	.word	0x40020800
 8003a80:	20000624 	.word	0x20000624
 8003a84:	40026070 	.word	0x40026070
 8003a88:	40004400 	.word	0x40004400
 8003a8c:	40020000 	.word	0x40020000
 8003a90:	20000684 	.word	0x20000684
 8003a94:	400260a0 	.word	0x400260a0

08003a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003a9c:	bf00      	nop
 8003a9e:	e7fd      	b.n	8003a9c <NMI_Handler+0x4>

08003aa0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003aa4:	bf00      	nop
 8003aa6:	e7fd      	b.n	8003aa4 <HardFault_Handler+0x4>

08003aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003aac:	bf00      	nop
 8003aae:	e7fd      	b.n	8003aac <MemManage_Handler+0x4>

08003ab0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ab4:	bf00      	nop
 8003ab6:	e7fd      	b.n	8003ab4 <BusFault_Handler+0x4>

08003ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003abc:	bf00      	nop
 8003abe:	e7fd      	b.n	8003abc <UsageFault_Handler+0x4>

08003ac0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ac4:	bf00      	nop
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr

08003ace <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ad2:	bf00      	nop
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ae0:	bf00      	nop
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr

08003aea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003aee:	f000 f9ab 	bl	8003e48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003af2:	bf00      	nop
 8003af4:	bd80      	pop	{r7, pc}
	...

08003af8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8003afc:	4802      	ldr	r0, [pc, #8]	@ (8003b08 <DMA1_Stream4_IRQHandler+0x10>)
 8003afe:	f001 fc67 	bl	80053d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003b02:	bf00      	nop
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	20000624 	.word	0x20000624

08003b0c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003b10:	4802      	ldr	r0, [pc, #8]	@ (8003b1c <DMA1_Stream6_IRQHandler+0x10>)
 8003b12:	f001 fc5d 	bl	80053d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003b16:	bf00      	nop
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	20000684 	.word	0x20000684

08003b20 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003b24:	4803      	ldr	r0, [pc, #12]	@ (8003b34 <ADC_IRQHandler+0x14>)
 8003b26:	f000 fa16 	bl	8003f56 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8003b2a:	4803      	ldr	r0, [pc, #12]	@ (8003b38 <ADC_IRQHandler+0x18>)
 8003b2c:	f000 fa13 	bl	8003f56 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003b30:	bf00      	nop
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	2000032c 	.word	0x2000032c
 8003b38:	20000374 	.word	0x20000374

08003b3c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003b40:	4802      	ldr	r0, [pc, #8]	@ (8003b4c <SPI1_IRQHandler+0x10>)
 8003b42:	f003 fa0b 	bl	8006f5c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003b46:	bf00      	nop
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	2000041c 	.word	0x2000041c

08003b50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003b54:	4802      	ldr	r0, [pc, #8]	@ (8003b60 <USART2_IRQHandler+0x10>)
 8003b56:	f004 fd99 	bl	800868c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003b5a:	bf00      	nop
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	200005dc 	.word	0x200005dc

08003b64 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003b68:	4802      	ldr	r0, [pc, #8]	@ (8003b74 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8003b6a:	f003 fe2f 	bl	80077cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003b6e:	bf00      	nop
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	2000054c 	.word	0x2000054c

08003b78 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003b7c:	4802      	ldr	r0, [pc, #8]	@ (8003b88 <UART4_IRQHandler+0x10>)
 8003b7e:	f004 fd85 	bl	800868c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003b82:	bf00      	nop
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	20000594 	.word	0x20000594

08003b8c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003b90:	4802      	ldr	r0, [pc, #8]	@ (8003b9c <DMA2_Stream2_IRQHandler+0x10>)
 8003b92:	f001 fc1d 	bl	80053d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003b96:	bf00      	nop
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	200003bc 	.word	0x200003bc

08003ba0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
  return 1;
 8003ba4:	2301      	movs	r3, #1
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <_kill>:

int _kill(int pid, int sig)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003bba:	f006 fad1 	bl	800a160 <__errno>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2216      	movs	r2, #22
 8003bc2:	601a      	str	r2, [r3, #0]
  return -1;
 8003bc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3708      	adds	r7, #8
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <_exit>:

void _exit (int status)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f7ff ffe7 	bl	8003bb0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003be2:	bf00      	nop
 8003be4:	e7fd      	b.n	8003be2 <_exit+0x12>

08003be6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b086      	sub	sp, #24
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	60f8      	str	r0, [r7, #12]
 8003bee:	60b9      	str	r1, [r7, #8]
 8003bf0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	617b      	str	r3, [r7, #20]
 8003bf6:	e00a      	b.n	8003c0e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003bf8:	f3af 8000 	nop.w
 8003bfc:	4601      	mov	r1, r0
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	1c5a      	adds	r2, r3, #1
 8003c02:	60ba      	str	r2, [r7, #8]
 8003c04:	b2ca      	uxtb	r2, r1
 8003c06:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	617b      	str	r3, [r7, #20]
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	dbf0      	blt.n	8003bf8 <_read+0x12>
  }

  return len;
 8003c16:	687b      	ldr	r3, [r7, #4]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3718      	adds	r7, #24
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	617b      	str	r3, [r7, #20]
 8003c30:	e009      	b.n	8003c46 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	1c5a      	adds	r2, r3, #1
 8003c36:	60ba      	str	r2, [r7, #8]
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	3301      	adds	r3, #1
 8003c44:	617b      	str	r3, [r7, #20]
 8003c46:	697a      	ldr	r2, [r7, #20]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	dbf1      	blt.n	8003c32 <_write+0x12>
  }
  return len;
 8003c4e:	687b      	ldr	r3, [r7, #4]
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3718      	adds	r7, #24
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <_close>:

int _close(int file)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003c60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003c80:	605a      	str	r2, [r3, #4]
  return 0;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <_isatty>:

int _isatty(int file)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003c98:	2301      	movs	r3, #1
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr

08003ca6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b085      	sub	sp, #20
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	60f8      	str	r0, [r7, #12]
 8003cae:	60b9      	str	r1, [r7, #8]
 8003cb0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3714      	adds	r7, #20
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003cc8:	4a14      	ldr	r2, [pc, #80]	@ (8003d1c <_sbrk+0x5c>)
 8003cca:	4b15      	ldr	r3, [pc, #84]	@ (8003d20 <_sbrk+0x60>)
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003cd4:	4b13      	ldr	r3, [pc, #76]	@ (8003d24 <_sbrk+0x64>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d102      	bne.n	8003ce2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003cdc:	4b11      	ldr	r3, [pc, #68]	@ (8003d24 <_sbrk+0x64>)
 8003cde:	4a12      	ldr	r2, [pc, #72]	@ (8003d28 <_sbrk+0x68>)
 8003ce0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ce2:	4b10      	ldr	r3, [pc, #64]	@ (8003d24 <_sbrk+0x64>)
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4413      	add	r3, r2
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d207      	bcs.n	8003d00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003cf0:	f006 fa36 	bl	800a160 <__errno>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	220c      	movs	r2, #12
 8003cf8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8003cfe:	e009      	b.n	8003d14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d00:	4b08      	ldr	r3, [pc, #32]	@ (8003d24 <_sbrk+0x64>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d06:	4b07      	ldr	r3, [pc, #28]	@ (8003d24 <_sbrk+0x64>)
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	4a05      	ldr	r2, [pc, #20]	@ (8003d24 <_sbrk+0x64>)
 8003d10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d12:	68fb      	ldr	r3, [r7, #12]
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3718      	adds	r7, #24
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	20020000 	.word	0x20020000
 8003d20:	00000400 	.word	0x00000400
 8003d24:	2000070c 	.word	0x2000070c
 8003d28:	20000860 	.word	0x20000860

08003d2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d30:	4b06      	ldr	r3, [pc, #24]	@ (8003d4c <SystemInit+0x20>)
 8003d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d36:	4a05      	ldr	r2, [pc, #20]	@ (8003d4c <SystemInit+0x20>)
 8003d38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003d3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d40:	bf00      	nop
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	e000ed00 	.word	0xe000ed00

08003d50 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

 	  ldr   sp, =_estack      /* set stack pointer */
 8003d50:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003d88 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003d54:	f7ff ffea 	bl	8003d2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003d58:	480c      	ldr	r0, [pc, #48]	@ (8003d8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003d5a:	490d      	ldr	r1, [pc, #52]	@ (8003d90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003d5c:	4a0d      	ldr	r2, [pc, #52]	@ (8003d94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003d5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d60:	e002      	b.n	8003d68 <LoopCopyDataInit>

08003d62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d66:	3304      	adds	r3, #4

08003d68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d6c:	d3f9      	bcc.n	8003d62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d6e:	4a0a      	ldr	r2, [pc, #40]	@ (8003d98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003d70:	4c0a      	ldr	r4, [pc, #40]	@ (8003d9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003d72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d74:	e001      	b.n	8003d7a <LoopFillZerobss>

08003d76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d78:	3204      	adds	r2, #4

08003d7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d7c:	d3fb      	bcc.n	8003d76 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003d7e:	f006 f9f5 	bl	800a16c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d82:	f7fe fd05 	bl	8002790 <main>
  bx  lr    
 8003d86:	4770      	bx	lr
 	  ldr   sp, =_estack      /* set stack pointer */
 8003d88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003d8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d90:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8003d94:	0800dbb8 	.word	0x0800dbb8
  ldr r2, =_sbss
 8003d98:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8003d9c:	20000860 	.word	0x20000860

08003da0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003da0:	e7fe      	b.n	8003da0 <CAN1_RX0_IRQHandler>
	...

08003da4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003da8:	4b0e      	ldr	r3, [pc, #56]	@ (8003de4 <HAL_Init+0x40>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a0d      	ldr	r2, [pc, #52]	@ (8003de4 <HAL_Init+0x40>)
 8003dae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003db2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003db4:	4b0b      	ldr	r3, [pc, #44]	@ (8003de4 <HAL_Init+0x40>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a0a      	ldr	r2, [pc, #40]	@ (8003de4 <HAL_Init+0x40>)
 8003dba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003dbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003dc0:	4b08      	ldr	r3, [pc, #32]	@ (8003de4 <HAL_Init+0x40>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a07      	ldr	r2, [pc, #28]	@ (8003de4 <HAL_Init+0x40>)
 8003dc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003dcc:	2003      	movs	r0, #3
 8003dce:	f001 f925 	bl	800501c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003dd2:	2000      	movs	r0, #0
 8003dd4:	f000 f808 	bl	8003de8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003dd8:	f7ff fb9a 	bl	8003510 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	40023c00 	.word	0x40023c00

08003de8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003df0:	4b12      	ldr	r3, [pc, #72]	@ (8003e3c <HAL_InitTick+0x54>)
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	4b12      	ldr	r3, [pc, #72]	@ (8003e40 <HAL_InitTick+0x58>)
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	4619      	mov	r1, r3
 8003dfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003dfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e06:	4618      	mov	r0, r3
 8003e08:	f001 f93d 	bl	8005086 <HAL_SYSTICK_Config>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e00e      	b.n	8003e34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2b0f      	cmp	r3, #15
 8003e1a:	d80a      	bhi.n	8003e32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	6879      	ldr	r1, [r7, #4]
 8003e20:	f04f 30ff 	mov.w	r0, #4294967295
 8003e24:	f001 f905 	bl	8005032 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e28:	4a06      	ldr	r2, [pc, #24]	@ (8003e44 <HAL_InitTick+0x5c>)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	e000      	b.n	8003e34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3708      	adds	r7, #8
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	20000034 	.word	0x20000034
 8003e40:	2000003c 	.word	0x2000003c
 8003e44:	20000038 	.word	0x20000038

08003e48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e4c:	4b06      	ldr	r3, [pc, #24]	@ (8003e68 <HAL_IncTick+0x20>)
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	461a      	mov	r2, r3
 8003e52:	4b06      	ldr	r3, [pc, #24]	@ (8003e6c <HAL_IncTick+0x24>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4413      	add	r3, r2
 8003e58:	4a04      	ldr	r2, [pc, #16]	@ (8003e6c <HAL_IncTick+0x24>)
 8003e5a:	6013      	str	r3, [r2, #0]
}
 8003e5c:	bf00      	nop
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	2000003c 	.word	0x2000003c
 8003e6c:	20000710 	.word	0x20000710

08003e70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e70:	b480      	push	{r7}
 8003e72:	af00      	add	r7, sp, #0
  return uwTick;
 8003e74:	4b03      	ldr	r3, [pc, #12]	@ (8003e84 <HAL_GetTick+0x14>)
 8003e76:	681b      	ldr	r3, [r3, #0]
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	20000710 	.word	0x20000710

08003e88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e90:	f7ff ffee 	bl	8003e70 <HAL_GetTick>
 8003e94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea0:	d005      	beq.n	8003eae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8003ecc <HAL_Delay+0x44>)
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	4413      	add	r3, r2
 8003eac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003eae:	bf00      	nop
 8003eb0:	f7ff ffde 	bl	8003e70 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d8f7      	bhi.n	8003eb0 <HAL_Delay+0x28>
  {
  }
}
 8003ec0:	bf00      	nop
 8003ec2:	bf00      	nop
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	2000003c 	.word	0x2000003c

08003ed0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d101      	bne.n	8003ee6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e033      	b.n	8003f4e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d109      	bne.n	8003f02 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7ff fb36 	bl	8003560 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f06:	f003 0310 	and.w	r3, r3, #16
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d118      	bne.n	8003f40 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f12:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003f16:	f023 0302 	bic.w	r3, r3, #2
 8003f1a:	f043 0202 	orr.w	r2, r3, #2
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 fb88 	bl	8004638 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f32:	f023 0303 	bic.w	r3, r3, #3
 8003f36:	f043 0201 	orr.w	r2, r3, #1
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	641a      	str	r2, [r3, #64]	@ 0x40
 8003f3e:	e001      	b.n	8003f44 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b086      	sub	sp, #24
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	617b      	str	r3, [r7, #20]
 8003f62:	2300      	movs	r3, #0
 8003f64:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	f003 0320 	and.w	r3, r3, #32
 8003f84:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d049      	beq.n	8004020 <HAL_ADC_IRQHandler+0xca>
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d046      	beq.n	8004020 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f96:	f003 0310 	and.w	r3, r3, #16
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d105      	bne.n	8003faa <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d12b      	bne.n	8004010 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d127      	bne.n	8004010 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d006      	beq.n	8003fdc <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d119      	bne.n	8004010 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f022 0220 	bic.w	r2, r2, #32
 8003fea:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ffc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d105      	bne.n	8004010 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004008:	f043 0201 	orr.w	r2, r3, #1
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f7ff fa11 	bl	8003438 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f06f 0212 	mvn.w	r2, #18
 800401e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f003 0304 	and.w	r3, r3, #4
 8004026:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800402e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d057      	beq.n	80040e6 <HAL_ADC_IRQHandler+0x190>
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d054      	beq.n	80040e6 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004040:	f003 0310 	and.w	r3, r3, #16
 8004044:	2b00      	cmp	r3, #0
 8004046:	d105      	bne.n	8004054 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d139      	bne.n	80040d6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004068:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800406c:	2b00      	cmp	r3, #0
 800406e:	d006      	beq.n	800407e <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800407a:	2b00      	cmp	r3, #0
 800407c:	d12b      	bne.n	80040d6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8004088:	2b00      	cmp	r3, #0
 800408a:	d124      	bne.n	80040d6 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004096:	2b00      	cmp	r3, #0
 8004098:	d11d      	bne.n	80040d6 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d119      	bne.n	80040d6 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	685a      	ldr	r2, [r3, #4]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80040b0:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d105      	bne.n	80040d6 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ce:	f043 0201 	orr.w	r2, r3, #1
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7ff f88a 	bl	80031f0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f06f 020c 	mvn.w	r2, #12
 80040e4:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040f4:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d017      	beq.n	800412c <HAL_ADC_IRQHandler+0x1d6>
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d014      	beq.n	800412c <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0301 	and.w	r3, r3, #1
 800410c:	2b01      	cmp	r3, #1
 800410e:	d10d      	bne.n	800412c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004114:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 f945 	bl	80043ac <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f06f 0201 	mvn.w	r2, #1
 800412a:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f003 0320 	and.w	r3, r3, #32
 8004132:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800413a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d015      	beq.n	800416e <HAL_ADC_IRQHandler+0x218>
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d012      	beq.n	800416e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800414c:	f043 0202 	orr.w	r2, r3, #2
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f06f 0220 	mvn.w	r2, #32
 800415c:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 f92e 	bl	80043c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f06f 0220 	mvn.w	r2, #32
 800416c:	601a      	str	r2, [r3, #0]
  }
}
 800416e:	bf00      	nop
 8004170:	3718      	adds	r7, #24
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
	...

08004178 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b086      	sub	sp, #24
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004184:	2300      	movs	r3, #0
 8004186:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800418e:	2b01      	cmp	r3, #1
 8004190:	d101      	bne.n	8004196 <HAL_ADC_Start_DMA+0x1e>
 8004192:	2302      	movs	r3, #2
 8004194:	e0e9      	b.n	800436a <HAL_ADC_Start_DMA+0x1f2>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2201      	movs	r2, #1
 800419a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f003 0301 	and.w	r3, r3, #1
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d018      	beq.n	80041de <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	689a      	ldr	r2, [r3, #8]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f042 0201 	orr.w	r2, r2, #1
 80041ba:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80041bc:	4b6d      	ldr	r3, [pc, #436]	@ (8004374 <HAL_ADC_Start_DMA+0x1fc>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a6d      	ldr	r2, [pc, #436]	@ (8004378 <HAL_ADC_Start_DMA+0x200>)
 80041c2:	fba2 2303 	umull	r2, r3, r2, r3
 80041c6:	0c9a      	lsrs	r2, r3, #18
 80041c8:	4613      	mov	r3, r2
 80041ca:	005b      	lsls	r3, r3, #1
 80041cc:	4413      	add	r3, r2
 80041ce:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80041d0:	e002      	b.n	80041d8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	3b01      	subs	r3, #1
 80041d6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1f9      	bne.n	80041d2 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041ec:	d107      	bne.n	80041fe <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	689a      	ldr	r2, [r3, #8]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80041fc:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f003 0301 	and.w	r3, r3, #1
 8004208:	2b01      	cmp	r3, #1
 800420a:	f040 80a1 	bne.w	8004350 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004212:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004216:	f023 0301 	bic.w	r3, r3, #1
 800421a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800422c:	2b00      	cmp	r3, #0
 800422e:	d007      	beq.n	8004240 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004234:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004238:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004244:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004248:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800424c:	d106      	bne.n	800425c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004252:	f023 0206 	bic.w	r2, r3, #6
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	645a      	str	r2, [r3, #68]	@ 0x44
 800425a:	e002      	b.n	8004262 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800426a:	4b44      	ldr	r3, [pc, #272]	@ (800437c <HAL_ADC_Start_DMA+0x204>)
 800426c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004272:	4a43      	ldr	r2, [pc, #268]	@ (8004380 <HAL_ADC_Start_DMA+0x208>)
 8004274:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800427a:	4a42      	ldr	r2, [pc, #264]	@ (8004384 <HAL_ADC_Start_DMA+0x20c>)
 800427c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004282:	4a41      	ldr	r2, [pc, #260]	@ (8004388 <HAL_ADC_Start_DMA+0x210>)
 8004284:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800428e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800429e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	689a      	ldr	r2, [r3, #8]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042ae:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	334c      	adds	r3, #76	@ 0x4c
 80042ba:	4619      	mov	r1, r3
 80042bc:	68ba      	ldr	r2, [r7, #8]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f000 ff9c 	bl	80051fc <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f003 031f 	and.w	r3, r3, #31
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d12a      	bne.n	8004326 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a2d      	ldr	r2, [pc, #180]	@ (800438c <HAL_ADC_Start_DMA+0x214>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d015      	beq.n	8004306 <HAL_ADC_Start_DMA+0x18e>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a2c      	ldr	r2, [pc, #176]	@ (8004390 <HAL_ADC_Start_DMA+0x218>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d105      	bne.n	80042f0 <HAL_ADC_Start_DMA+0x178>
 80042e4:	4b25      	ldr	r3, [pc, #148]	@ (800437c <HAL_ADC_Start_DMA+0x204>)
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f003 031f 	and.w	r3, r3, #31
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00a      	beq.n	8004306 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a27      	ldr	r2, [pc, #156]	@ (8004394 <HAL_ADC_Start_DMA+0x21c>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d136      	bne.n	8004368 <HAL_ADC_Start_DMA+0x1f0>
 80042fa:	4b20      	ldr	r3, [pc, #128]	@ (800437c <HAL_ADC_Start_DMA+0x204>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f003 0310 	and.w	r3, r3, #16
 8004302:	2b00      	cmp	r3, #0
 8004304:	d130      	bne.n	8004368 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d129      	bne.n	8004368 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	689a      	ldr	r2, [r3, #8]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004322:	609a      	str	r2, [r3, #8]
 8004324:	e020      	b.n	8004368 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a18      	ldr	r2, [pc, #96]	@ (800438c <HAL_ADC_Start_DMA+0x214>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d11b      	bne.n	8004368 <HAL_ADC_Start_DMA+0x1f0>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d114      	bne.n	8004368 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	689a      	ldr	r2, [r3, #8]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800434c:	609a      	str	r2, [r3, #8]
 800434e:	e00b      	b.n	8004368 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004354:	f043 0210 	orr.w	r2, r3, #16
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004360:	f043 0201 	orr.w	r2, r3, #1
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3718      	adds	r7, #24
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	20000034 	.word	0x20000034
 8004378:	431bde83 	.word	0x431bde83
 800437c:	40012300 	.word	0x40012300
 8004380:	08004831 	.word	0x08004831
 8004384:	080048eb 	.word	0x080048eb
 8004388:	08004907 	.word	0x08004907
 800438c:	40012000 	.word	0x40012000
 8004390:	40012100 	.word	0x40012100
 8004394:	40012200 	.word	0x40012200

08004398 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80043a0:	bf00      	nop
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80043b4:	bf00      	nop
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80043de:	2300      	movs	r3, #0
 80043e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d101      	bne.n	80043f0 <HAL_ADC_ConfigChannel+0x1c>
 80043ec:	2302      	movs	r3, #2
 80043ee:	e113      	b.n	8004618 <HAL_ADC_ConfigChannel+0x244>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2b09      	cmp	r3, #9
 80043fe:	d925      	bls.n	800444c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68d9      	ldr	r1, [r3, #12]
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	b29b      	uxth	r3, r3
 800440c:	461a      	mov	r2, r3
 800440e:	4613      	mov	r3, r2
 8004410:	005b      	lsls	r3, r3, #1
 8004412:	4413      	add	r3, r2
 8004414:	3b1e      	subs	r3, #30
 8004416:	2207      	movs	r2, #7
 8004418:	fa02 f303 	lsl.w	r3, r2, r3
 800441c:	43da      	mvns	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	400a      	ands	r2, r1
 8004424:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68d9      	ldr	r1, [r3, #12]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	689a      	ldr	r2, [r3, #8]
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	b29b      	uxth	r3, r3
 8004436:	4618      	mov	r0, r3
 8004438:	4603      	mov	r3, r0
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	4403      	add	r3, r0
 800443e:	3b1e      	subs	r3, #30
 8004440:	409a      	lsls	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	430a      	orrs	r2, r1
 8004448:	60da      	str	r2, [r3, #12]
 800444a:	e022      	b.n	8004492 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6919      	ldr	r1, [r3, #16]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	b29b      	uxth	r3, r3
 8004458:	461a      	mov	r2, r3
 800445a:	4613      	mov	r3, r2
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	4413      	add	r3, r2
 8004460:	2207      	movs	r2, #7
 8004462:	fa02 f303 	lsl.w	r3, r2, r3
 8004466:	43da      	mvns	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	400a      	ands	r2, r1
 800446e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6919      	ldr	r1, [r3, #16]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	689a      	ldr	r2, [r3, #8]
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	b29b      	uxth	r3, r3
 8004480:	4618      	mov	r0, r3
 8004482:	4603      	mov	r3, r0
 8004484:	005b      	lsls	r3, r3, #1
 8004486:	4403      	add	r3, r0
 8004488:	409a      	lsls	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	430a      	orrs	r2, r1
 8004490:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	2b06      	cmp	r3, #6
 8004498:	d824      	bhi.n	80044e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685a      	ldr	r2, [r3, #4]
 80044a4:	4613      	mov	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	4413      	add	r3, r2
 80044aa:	3b05      	subs	r3, #5
 80044ac:	221f      	movs	r2, #31
 80044ae:	fa02 f303 	lsl.w	r3, r2, r3
 80044b2:	43da      	mvns	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	400a      	ands	r2, r1
 80044ba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	4618      	mov	r0, r3
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	685a      	ldr	r2, [r3, #4]
 80044ce:	4613      	mov	r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	4413      	add	r3, r2
 80044d4:	3b05      	subs	r3, #5
 80044d6:	fa00 f203 	lsl.w	r2, r0, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80044e2:	e04c      	b.n	800457e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	2b0c      	cmp	r3, #12
 80044ea:	d824      	bhi.n	8004536 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	4613      	mov	r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	4413      	add	r3, r2
 80044fc:	3b23      	subs	r3, #35	@ 0x23
 80044fe:	221f      	movs	r2, #31
 8004500:	fa02 f303 	lsl.w	r3, r2, r3
 8004504:	43da      	mvns	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	400a      	ands	r2, r1
 800450c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	b29b      	uxth	r3, r3
 800451a:	4618      	mov	r0, r3
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	685a      	ldr	r2, [r3, #4]
 8004520:	4613      	mov	r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	4413      	add	r3, r2
 8004526:	3b23      	subs	r3, #35	@ 0x23
 8004528:	fa00 f203 	lsl.w	r2, r0, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	430a      	orrs	r2, r1
 8004532:	631a      	str	r2, [r3, #48]	@ 0x30
 8004534:	e023      	b.n	800457e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	4613      	mov	r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	4413      	add	r3, r2
 8004546:	3b41      	subs	r3, #65	@ 0x41
 8004548:	221f      	movs	r2, #31
 800454a:	fa02 f303 	lsl.w	r3, r2, r3
 800454e:	43da      	mvns	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	400a      	ands	r2, r1
 8004556:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	b29b      	uxth	r3, r3
 8004564:	4618      	mov	r0, r3
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685a      	ldr	r2, [r3, #4]
 800456a:	4613      	mov	r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	4413      	add	r3, r2
 8004570:	3b41      	subs	r3, #65	@ 0x41
 8004572:	fa00 f203 	lsl.w	r2, r0, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	430a      	orrs	r2, r1
 800457c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800457e:	4b29      	ldr	r3, [pc, #164]	@ (8004624 <HAL_ADC_ConfigChannel+0x250>)
 8004580:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a28      	ldr	r2, [pc, #160]	@ (8004628 <HAL_ADC_ConfigChannel+0x254>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d10f      	bne.n	80045ac <HAL_ADC_ConfigChannel+0x1d8>
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2b12      	cmp	r3, #18
 8004592:	d10b      	bne.n	80045ac <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a1d      	ldr	r2, [pc, #116]	@ (8004628 <HAL_ADC_ConfigChannel+0x254>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d12b      	bne.n	800460e <HAL_ADC_ConfigChannel+0x23a>
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a1c      	ldr	r2, [pc, #112]	@ (800462c <HAL_ADC_ConfigChannel+0x258>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d003      	beq.n	80045c8 <HAL_ADC_ConfigChannel+0x1f4>
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2b11      	cmp	r3, #17
 80045c6:	d122      	bne.n	800460e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a11      	ldr	r2, [pc, #68]	@ (800462c <HAL_ADC_ConfigChannel+0x258>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d111      	bne.n	800460e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80045ea:	4b11      	ldr	r3, [pc, #68]	@ (8004630 <HAL_ADC_ConfigChannel+0x25c>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a11      	ldr	r2, [pc, #68]	@ (8004634 <HAL_ADC_ConfigChannel+0x260>)
 80045f0:	fba2 2303 	umull	r2, r3, r2, r3
 80045f4:	0c9a      	lsrs	r2, r3, #18
 80045f6:	4613      	mov	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	4413      	add	r3, r2
 80045fc:	005b      	lsls	r3, r3, #1
 80045fe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004600:	e002      	b.n	8004608 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	3b01      	subs	r3, #1
 8004606:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1f9      	bne.n	8004602 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3714      	adds	r7, #20
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr
 8004624:	40012300 	.word	0x40012300
 8004628:	40012000 	.word	0x40012000
 800462c:	10000012 	.word	0x10000012
 8004630:	20000034 	.word	0x20000034
 8004634:	431bde83 	.word	0x431bde83

08004638 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004640:	4b79      	ldr	r3, [pc, #484]	@ (8004828 <ADC_Init+0x1f0>)
 8004642:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	685a      	ldr	r2, [r3, #4]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	431a      	orrs	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	685a      	ldr	r2, [r3, #4]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800466c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	6859      	ldr	r1, [r3, #4]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	021a      	lsls	r2, r3, #8
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	430a      	orrs	r2, r1
 8004680:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	685a      	ldr	r2, [r3, #4]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004690:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	6859      	ldr	r1, [r3, #4]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689a      	ldr	r2, [r3, #8]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	430a      	orrs	r2, r1
 80046a2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	689a      	ldr	r2, [r3, #8]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	6899      	ldr	r1, [r3, #8]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68da      	ldr	r2, [r3, #12]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	430a      	orrs	r2, r1
 80046c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ca:	4a58      	ldr	r2, [pc, #352]	@ (800482c <ADC_Init+0x1f4>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d022      	beq.n	8004716 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689a      	ldr	r2, [r3, #8]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80046de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6899      	ldr	r1, [r3, #8]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	689a      	ldr	r2, [r3, #8]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004700:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	6899      	ldr	r1, [r3, #8]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	430a      	orrs	r2, r1
 8004712:	609a      	str	r2, [r3, #8]
 8004714:	e00f      	b.n	8004736 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	689a      	ldr	r2, [r3, #8]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004724:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	689a      	ldr	r2, [r3, #8]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004734:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	689a      	ldr	r2, [r3, #8]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f022 0202 	bic.w	r2, r2, #2
 8004744:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	6899      	ldr	r1, [r3, #8]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	7e1b      	ldrb	r3, [r3, #24]
 8004750:	005a      	lsls	r2, r3, #1
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	430a      	orrs	r2, r1
 8004758:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d01b      	beq.n	800479c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	685a      	ldr	r2, [r3, #4]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004772:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	685a      	ldr	r2, [r3, #4]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004782:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	6859      	ldr	r1, [r3, #4]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800478e:	3b01      	subs	r3, #1
 8004790:	035a      	lsls	r2, r3, #13
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	430a      	orrs	r2, r1
 8004798:	605a      	str	r2, [r3, #4]
 800479a:	e007      	b.n	80047ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	685a      	ldr	r2, [r3, #4]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047aa:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80047ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	69db      	ldr	r3, [r3, #28]
 80047c6:	3b01      	subs	r3, #1
 80047c8:	051a      	lsls	r2, r3, #20
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	430a      	orrs	r2, r1
 80047d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	689a      	ldr	r2, [r3, #8]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80047e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6899      	ldr	r1, [r3, #8]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80047ee:	025a      	lsls	r2, r3, #9
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	430a      	orrs	r2, r1
 80047f6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	689a      	ldr	r2, [r3, #8]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004806:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6899      	ldr	r1, [r3, #8]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	029a      	lsls	r2, r3, #10
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	430a      	orrs	r2, r1
 800481a:	609a      	str	r2, [r3, #8]
}
 800481c:	bf00      	nop
 800481e:	3714      	adds	r7, #20
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr
 8004828:	40012300 	.word	0x40012300
 800482c:	0f000001 	.word	0x0f000001

08004830 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800483c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004842:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004846:	2b00      	cmp	r3, #0
 8004848:	d13c      	bne.n	80048c4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800484e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d12b      	bne.n	80048bc <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004868:	2b00      	cmp	r3, #0
 800486a:	d127      	bne.n	80048bc <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004872:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004876:	2b00      	cmp	r3, #0
 8004878:	d006      	beq.n	8004888 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004884:	2b00      	cmp	r3, #0
 8004886:	d119      	bne.n	80048bc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	685a      	ldr	r2, [r3, #4]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f022 0220 	bic.w	r2, r2, #32
 8004896:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d105      	bne.n	80048bc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b4:	f043 0201 	orr.w	r2, r3, #1
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80048bc:	68f8      	ldr	r0, [r7, #12]
 80048be:	f7fe fdbb 	bl	8003438 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80048c2:	e00e      	b.n	80048e2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c8:	f003 0310 	and.w	r3, r3, #16
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d003      	beq.n	80048d8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f7ff fd75 	bl	80043c0 <HAL_ADC_ErrorCallback>
}
 80048d6:	e004      	b.n	80048e2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	4798      	blx	r3
}
 80048e2:	bf00      	nop
 80048e4:	3710      	adds	r7, #16
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}

080048ea <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b084      	sub	sp, #16
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048f6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	f7ff fd4d 	bl	8004398 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80048fe:	bf00      	nop
 8004900:	3710      	adds	r7, #16
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}

08004906 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004906:	b580      	push	{r7, lr}
 8004908:	b084      	sub	sp, #16
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004912:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2240      	movs	r2, #64	@ 0x40
 8004918:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800491e:	f043 0204 	orr.w	r2, r3, #4
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f7ff fd4a 	bl	80043c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800492c:	bf00      	nop
 800492e:	3710      	adds	r7, #16
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <HAL_ADCEx_InjectedStart_IT>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8004934:	b480      	push	{r7}
 8004936:	b087      	sub	sp, #28
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800493c:	2300      	movs	r3, #0
 800493e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8004940:	2300      	movs	r3, #0
 8004942:	617b      	str	r3, [r7, #20]
 8004944:	2300      	movs	r3, #0
 8004946:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;

  /* Process locked */
  __HAL_LOCK(hadc);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800494e:	2b01      	cmp	r3, #1
 8004950:	d101      	bne.n	8004956 <HAL_ADCEx_InjectedStart_IT+0x22>
 8004952:	2302      	movs	r3, #2
 8004954:	e0b2      	b.n	8004abc <HAL_ADCEx_InjectedStart_IT+0x188>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2201      	movs	r2, #1
 800495a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */

  /* Check if ADC peripheral is disabled in order to enable it and wait during
     Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f003 0301 	and.w	r3, r3, #1
 8004968:	2b01      	cmp	r3, #1
 800496a:	d018      	beq.n	800499e <HAL_ADCEx_InjectedStart_IT+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	689a      	ldr	r2, [r3, #8]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f042 0201 	orr.w	r2, r2, #1
 800497a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800497c:	4b52      	ldr	r3, [pc, #328]	@ (8004ac8 <HAL_ADCEx_InjectedStart_IT+0x194>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a52      	ldr	r2, [pc, #328]	@ (8004acc <HAL_ADCEx_InjectedStart_IT+0x198>)
 8004982:	fba2 2303 	umull	r2, r3, r2, r3
 8004986:	0c9a      	lsrs	r2, r3, #18
 8004988:	4613      	mov	r3, r2
 800498a:	005b      	lsls	r3, r3, #1
 800498c:	4413      	add	r3, r2
 800498e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004990:	e002      	b.n	8004998 <HAL_ADCEx_InjectedStart_IT+0x64>
    {
      counter--;
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	3b01      	subs	r3, #1
 8004996:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1f9      	bne.n	8004992 <HAL_ADCEx_InjectedStart_IT+0x5e>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f003 0301 	and.w	r3, r3, #1
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d17a      	bne.n	8004aa2 <HAL_ADCEx_InjectedStart_IT+0x16e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80049b4:	f023 0301 	bic.w	r3, r3, #1
 80049b8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d102      	bne.n	80049d2 <HAL_ADCEx_InjectedStart_IT+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f06f 0204 	mvn.w	r2, #4
 80049e2:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for injected channels */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80049f2:	605a      	str	r2, [r3, #4]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80049f4:	4b36      	ldr	r3, [pc, #216]	@ (8004ad0 <HAL_ADCEx_InjectedStart_IT+0x19c>)
 80049f6:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f003 031f 	and.w	r3, r3, #31
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d124      	bne.n	8004a4e <HAL_ADCEx_InjectedStart_IT+0x11a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	bf0c      	ite	eq
 8004a12:	2301      	moveq	r3, #1
 8004a14:	2300      	movne	r3, #0
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	bf0c      	ite	eq
 8004a28:	2301      	moveq	r3, #1
 8004a2a:	2300      	movne	r3, #0
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	613b      	str	r3, [r7, #16]
      if (tmp1 && tmp2)
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d041      	beq.n	8004aba <HAL_ADCEx_InjectedStart_IT+0x186>
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d03e      	beq.n	8004aba <HAL_ADCEx_InjectedStart_IT+0x186>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	689a      	ldr	r2, [r3, #8]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8004a4a:	609a      	str	r2, [r3, #8]
 8004a4c:	e035      	b.n	8004aba <HAL_ADCEx_InjectedStart_IT+0x186>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	bf0c      	ite	eq
 8004a5c:	2301      	moveq	r3, #1
 8004a5e:	2300      	movne	r3, #0
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	bf0c      	ite	eq
 8004a72:	2301      	moveq	r3, #1
 8004a74:	2300      	movne	r3, #0
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	613b      	str	r3, [r7, #16]
      if ((hadc->Instance == ADC1) && tmp1 && tmp2)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a15      	ldr	r2, [pc, #84]	@ (8004ad4 <HAL_ADCEx_InjectedStart_IT+0x1a0>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d11a      	bne.n	8004aba <HAL_ADCEx_InjectedStart_IT+0x186>
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d017      	beq.n	8004aba <HAL_ADCEx_InjectedStart_IT+0x186>
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d014      	beq.n	8004aba <HAL_ADCEx_InjectedStart_IT+0x186>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	689a      	ldr	r2, [r3, #8]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8004a9e:	609a      	str	r2, [r3, #8]
 8004aa0:	e00b      	b.n	8004aba <HAL_ADCEx_InjectedStart_IT+0x186>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa6:	f043 0210 	orr.w	r2, r3, #16
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ab2:	f043 0201 	orr.w	r2, r3, #1
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	371c      	adds	r7, #28
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr
 8004ac8:	20000034 	.word	0x20000034
 8004acc:	431bde83 	.word	0x431bde83
 8004ad0:	40012300 	.word	0x40012300
 8004ad4:	40012000 	.word	0x40012000

08004ad8 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef *hadc, uint32_t InjectedRank)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));

  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f06f 0204 	mvn.w	r2, #4
 8004aee:	601a      	str	r2, [r3, #0]

  /* Return the selected ADC converted value */
  switch (InjectedRank)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	3b01      	subs	r3, #1
 8004af4:	2b03      	cmp	r3, #3
 8004af6:	d81f      	bhi.n	8004b38 <HAL_ADCEx_InjectedGetValue+0x60>
 8004af8:	a201      	add	r2, pc, #4	@ (adr r2, 8004b00 <HAL_ADCEx_InjectedGetValue+0x28>)
 8004afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afe:	bf00      	nop
 8004b00:	08004b2f 	.word	0x08004b2f
 8004b04:	08004b25 	.word	0x08004b25
 8004b08:	08004b1b 	.word	0x08004b1b
 8004b0c:	08004b11 	.word	0x08004b11
  {
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b16:	60fb      	str	r3, [r7, #12]
    }
    break;
 8004b18:	e00f      	b.n	8004b3a <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3:
    {
      tmp =  hadc->Instance->JDR3;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b20:	60fb      	str	r3, [r7, #12]
    }
    break;
 8004b22:	e00a      	b.n	8004b3a <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2:
    {
      tmp =  hadc->Instance->JDR2;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2a:	60fb      	str	r3, [r7, #12]
    }
    break;
 8004b2c:	e005      	b.n	8004b3a <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b34:	60fb      	str	r3, [r7, #12]
    }
    break;
 8004b36:	e000      	b.n	8004b3a <HAL_ADCEx_InjectedGetValue+0x62>
    default:
      break;
 8004b38:	bf00      	nop
  }
  return tmp;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3714      	adds	r7, #20
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d101      	bne.n	8004b60 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	e17e      	b.n	8004e5e <HAL_ADCEx_InjectedConfigChannel+0x316>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2b09      	cmp	r3, #9
 8004b6e:	d925      	bls.n	8004bbc <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68d9      	ldr	r1, [r3, #12]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	4613      	mov	r3, r2
 8004b80:	005b      	lsls	r3, r3, #1
 8004b82:	4413      	add	r3, r2
 8004b84:	3b1e      	subs	r3, #30
 8004b86:	2207      	movs	r2, #7
 8004b88:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8c:	43da      	mvns	r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	400a      	ands	r2, r1
 8004b94:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68d9      	ldr	r1, [r3, #12]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	689a      	ldr	r2, [r3, #8]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	4603      	mov	r3, r0
 8004baa:	005b      	lsls	r3, r3, #1
 8004bac:	4403      	add	r3, r0
 8004bae:	3b1e      	subs	r3, #30
 8004bb0:	409a      	lsls	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	60da      	str	r2, [r3, #12]
 8004bba:	e022      	b.n	8004c02 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6919      	ldr	r1, [r3, #16]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	461a      	mov	r2, r3
 8004bca:	4613      	mov	r3, r2
 8004bcc:	005b      	lsls	r3, r3, #1
 8004bce:	4413      	add	r3, r2
 8004bd0:	2207      	movs	r2, #7
 8004bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd6:	43da      	mvns	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	400a      	ands	r2, r1
 8004bde:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	6919      	ldr	r1, [r3, #16]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	689a      	ldr	r2, [r3, #8]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	005b      	lsls	r3, r3, #1
 8004bf6:	4403      	add	r3, r0
 8004bf8:	409a      	lsls	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	611a      	str	r2, [r3, #16]
  }

  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8004c10:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	051a      	lsls	r2, r3, #20
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	430a      	orrs	r2, r1
 8004c26:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Rank configuration */

  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	b2da      	uxtb	r2, r3
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	3303      	adds	r3, #3
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	461a      	mov	r2, r3
 8004c44:	4613      	mov	r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	4413      	add	r3, r2
 8004c4a:	221f      	movs	r2, #31
 8004c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c50:	43da      	mvns	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	400a      	ands	r2, r1
 8004c58:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank, sConfigInjected->InjectedNbrOfConversion);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	4618      	mov	r0, r3
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	b2da      	uxtb	r2, r3
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	3303      	adds	r3, #3
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	4613      	mov	r3, r2
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	4413      	add	r3, r2
 8004c84:	fa00 f203 	lsl.w	r2, r0, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	430a      	orrs	r2, r1
 8004c8e:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	4a75      	ldr	r2, [pc, #468]	@ (8004e6c <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d022      	beq.n	8004ce0 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	689a      	ldr	r2, [r3, #8]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 8004ca8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	6899      	ldr	r1, [r3, #8]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	699a      	ldr	r2, [r3, #24]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	689a      	ldr	r2, [r3, #8]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8004cca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	6899      	ldr	r1, [r3, #8]
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	69da      	ldr	r2, [r3, #28]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	609a      	str	r2, [r3, #8]
 8004cde:	e00f      	b.n	8004d00 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	689a      	ldr	r2, [r3, #8]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f422 2270 	bic.w	r2, r2, #983040	@ 0xf0000
 8004cee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	689a      	ldr	r2, [r3, #8]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8004cfe:	609a      	str	r2, [r3, #8]
  }

  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	7d5b      	ldrb	r3, [r3, #21]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d008      	beq.n	8004d1a <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	685a      	ldr	r2, [r3, #4]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004d16:	605a      	str	r2, [r3, #4]
 8004d18:	e007      	b.n	8004d2a <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	685a      	ldr	r2, [r3, #4]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d28:	605a      	str	r2, [r3, #4]
  }

  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	7d1b      	ldrb	r3, [r3, #20]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d008      	beq.n	8004d44 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	685a      	ldr	r2, [r3, #4]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004d40:	605a      	str	r2, [r3, #4]
 8004d42:	e007      	b.n	8004d54 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	685a      	ldr	r2, [r3, #4]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004d52:	605a      	str	r2, [r3, #4]
  }

  switch (sConfigInjected->InjectedRank)
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	2b03      	cmp	r3, #3
 8004d5a:	d02e      	beq.n	8004dba <HAL_ADCEx_InjectedConfigChannel+0x272>
 8004d5c:	2b03      	cmp	r3, #3
 8004d5e:	d840      	bhi.n	8004de2 <HAL_ADCEx_InjectedConfigChannel+0x29a>
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d002      	beq.n	8004d6a <HAL_ADCEx_InjectedConfigChannel+0x222>
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d014      	beq.n	8004d92 <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8004d68:	e03b      	b.n	8004de2 <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	695b      	ldr	r3, [r3, #20]
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	6812      	ldr	r2, [r2, #0]
 8004d74:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8004d78:	f023 030f 	bic.w	r3, r3, #15
 8004d7c:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	6959      	ldr	r1, [r3, #20]
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	68da      	ldr	r2, [r3, #12]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	615a      	str	r2, [r3, #20]
      break;
 8004d90:	e03b      	b.n	8004e0a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	699b      	ldr	r3, [r3, #24]
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	6812      	ldr	r2, [r2, #0]
 8004d9c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8004da0:	f023 030f 	bic.w	r3, r3, #15
 8004da4:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	6999      	ldr	r1, [r3, #24]
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	68da      	ldr	r2, [r3, #12]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	430a      	orrs	r2, r1
 8004db6:	619a      	str	r2, [r3, #24]
      break;
 8004db8:	e027      	b.n	8004e0a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	69db      	ldr	r3, [r3, #28]
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	6812      	ldr	r2, [r2, #0]
 8004dc4:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8004dc8:	f023 030f 	bic.w	r3, r3, #15
 8004dcc:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	69d9      	ldr	r1, [r3, #28]
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	68da      	ldr	r2, [r3, #12]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	61da      	str	r2, [r3, #28]
      break;
 8004de0:	e013      	b.n	8004e0a <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	6a1b      	ldr	r3, [r3, #32]
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	6812      	ldr	r2, [r2, #0]
 8004dec:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8004df0:	f023 030f 	bic.w	r3, r3, #15
 8004df4:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	6a19      	ldr	r1, [r3, #32]
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	68da      	ldr	r2, [r3, #12]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	430a      	orrs	r2, r1
 8004e06:	621a      	str	r2, [r3, #32]
      break;
 8004e08:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004e0a:	4b19      	ldr	r3, [pc, #100]	@ (8004e70 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8004e0c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a18      	ldr	r2, [pc, #96]	@ (8004e74 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d109      	bne.n	8004e2c <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2b12      	cmp	r3, #18
 8004e1e:	d105      	bne.n	8004e2c <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a10      	ldr	r2, [pc, #64]	@ (8004e74 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d10e      	bne.n	8004e54 <HAL_ADCEx_InjectedConfigChannel+0x30c>
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a0f      	ldr	r2, [pc, #60]	@ (8004e78 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d003      	beq.n	8004e48 <HAL_ADCEx_InjectedConfigChannel+0x300>
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2b11      	cmp	r3, #17
 8004e46:	d105      	bne.n	8004e54 <HAL_ADCEx_InjectedConfigChannel+0x30c>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	605a      	str	r2, [r3, #4]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3714      	adds	r7, #20
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	000f0001 	.word	0x000f0001
 8004e70:	40012300 	.word	0x40012300
 8004e74:	40012000 	.word	0x40012000
 8004e78:	10000012 	.word	0x10000012

08004e7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b085      	sub	sp, #20
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f003 0307 	and.w	r3, r3, #7
 8004e8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8004ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e92:	68ba      	ldr	r2, [r7, #8]
 8004e94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004e98:	4013      	ands	r3, r2
 8004e9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ea4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004ea8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004eac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004eae:	4a04      	ldr	r2, [pc, #16]	@ (8004ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	60d3      	str	r3, [r2, #12]
}
 8004eb4:	bf00      	nop
 8004eb6:	3714      	adds	r7, #20
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr
 8004ec0:	e000ed00 	.word	0xe000ed00

08004ec4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ec8:	4b04      	ldr	r3, [pc, #16]	@ (8004edc <__NVIC_GetPriorityGrouping+0x18>)
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	0a1b      	lsrs	r3, r3, #8
 8004ece:	f003 0307 	and.w	r3, r3, #7
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr
 8004edc:	e000ed00 	.word	0xe000ed00

08004ee0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	db0b      	blt.n	8004f0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ef2:	79fb      	ldrb	r3, [r7, #7]
 8004ef4:	f003 021f 	and.w	r2, r3, #31
 8004ef8:	4907      	ldr	r1, [pc, #28]	@ (8004f18 <__NVIC_EnableIRQ+0x38>)
 8004efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004efe:	095b      	lsrs	r3, r3, #5
 8004f00:	2001      	movs	r0, #1
 8004f02:	fa00 f202 	lsl.w	r2, r0, r2
 8004f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004f0a:	bf00      	nop
 8004f0c:	370c      	adds	r7, #12
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	e000e100 	.word	0xe000e100

08004f1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	4603      	mov	r3, r0
 8004f24:	6039      	str	r1, [r7, #0]
 8004f26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	db0a      	blt.n	8004f46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	b2da      	uxtb	r2, r3
 8004f34:	490c      	ldr	r1, [pc, #48]	@ (8004f68 <__NVIC_SetPriority+0x4c>)
 8004f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f3a:	0112      	lsls	r2, r2, #4
 8004f3c:	b2d2      	uxtb	r2, r2
 8004f3e:	440b      	add	r3, r1
 8004f40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f44:	e00a      	b.n	8004f5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	b2da      	uxtb	r2, r3
 8004f4a:	4908      	ldr	r1, [pc, #32]	@ (8004f6c <__NVIC_SetPriority+0x50>)
 8004f4c:	79fb      	ldrb	r3, [r7, #7]
 8004f4e:	f003 030f 	and.w	r3, r3, #15
 8004f52:	3b04      	subs	r3, #4
 8004f54:	0112      	lsls	r2, r2, #4
 8004f56:	b2d2      	uxtb	r2, r2
 8004f58:	440b      	add	r3, r1
 8004f5a:	761a      	strb	r2, [r3, #24]
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr
 8004f68:	e000e100 	.word	0xe000e100
 8004f6c:	e000ed00 	.word	0xe000ed00

08004f70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b089      	sub	sp, #36	@ 0x24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f003 0307 	and.w	r3, r3, #7
 8004f82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	f1c3 0307 	rsb	r3, r3, #7
 8004f8a:	2b04      	cmp	r3, #4
 8004f8c:	bf28      	it	cs
 8004f8e:	2304      	movcs	r3, #4
 8004f90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	3304      	adds	r3, #4
 8004f96:	2b06      	cmp	r3, #6
 8004f98:	d902      	bls.n	8004fa0 <NVIC_EncodePriority+0x30>
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	3b03      	subs	r3, #3
 8004f9e:	e000      	b.n	8004fa2 <NVIC_EncodePriority+0x32>
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	fa02 f303 	lsl.w	r3, r2, r3
 8004fae:	43da      	mvns	r2, r3
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	401a      	ands	r2, r3
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8004fc2:	43d9      	mvns	r1, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fc8:	4313      	orrs	r3, r2
         );
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3724      	adds	r7, #36	@ 0x24
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
	...

08004fd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004fe8:	d301      	bcc.n	8004fee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004fea:	2301      	movs	r3, #1
 8004fec:	e00f      	b.n	800500e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004fee:	4a0a      	ldr	r2, [pc, #40]	@ (8005018 <SysTick_Config+0x40>)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ff6:	210f      	movs	r1, #15
 8004ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ffc:	f7ff ff8e 	bl	8004f1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005000:	4b05      	ldr	r3, [pc, #20]	@ (8005018 <SysTick_Config+0x40>)
 8005002:	2200      	movs	r2, #0
 8005004:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005006:	4b04      	ldr	r3, [pc, #16]	@ (8005018 <SysTick_Config+0x40>)
 8005008:	2207      	movs	r2, #7
 800500a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3708      	adds	r7, #8
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	e000e010 	.word	0xe000e010

0800501c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f7ff ff29 	bl	8004e7c <__NVIC_SetPriorityGrouping>
}
 800502a:	bf00      	nop
 800502c:	3708      	adds	r7, #8
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005032:	b580      	push	{r7, lr}
 8005034:	b086      	sub	sp, #24
 8005036:	af00      	add	r7, sp, #0
 8005038:	4603      	mov	r3, r0
 800503a:	60b9      	str	r1, [r7, #8]
 800503c:	607a      	str	r2, [r7, #4]
 800503e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005040:	2300      	movs	r3, #0
 8005042:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005044:	f7ff ff3e 	bl	8004ec4 <__NVIC_GetPriorityGrouping>
 8005048:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	68b9      	ldr	r1, [r7, #8]
 800504e:	6978      	ldr	r0, [r7, #20]
 8005050:	f7ff ff8e 	bl	8004f70 <NVIC_EncodePriority>
 8005054:	4602      	mov	r2, r0
 8005056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800505a:	4611      	mov	r1, r2
 800505c:	4618      	mov	r0, r3
 800505e:	f7ff ff5d 	bl	8004f1c <__NVIC_SetPriority>
}
 8005062:	bf00      	nop
 8005064:	3718      	adds	r7, #24
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800506a:	b580      	push	{r7, lr}
 800506c:	b082      	sub	sp, #8
 800506e:	af00      	add	r7, sp, #0
 8005070:	4603      	mov	r3, r0
 8005072:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005078:	4618      	mov	r0, r3
 800507a:	f7ff ff31 	bl	8004ee0 <__NVIC_EnableIRQ>
}
 800507e:	bf00      	nop
 8005080:	3708      	adds	r7, #8
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b082      	sub	sp, #8
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f7ff ffa2 	bl	8004fd8 <SysTick_Config>
 8005094:	4603      	mov	r3, r0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3708      	adds	r7, #8
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
	...

080050a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80050a8:	2300      	movs	r3, #0
 80050aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80050ac:	f7fe fee0 	bl	8003e70 <HAL_GetTick>
 80050b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d101      	bne.n	80050bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e099      	b.n	80051f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2202      	movs	r2, #2
 80050c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f022 0201 	bic.w	r2, r2, #1
 80050da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050dc:	e00f      	b.n	80050fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80050de:	f7fe fec7 	bl	8003e70 <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	2b05      	cmp	r3, #5
 80050ea:	d908      	bls.n	80050fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2220      	movs	r2, #32
 80050f0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2203      	movs	r2, #3
 80050f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e078      	b.n	80051f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0301 	and.w	r3, r3, #1
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1e8      	bne.n	80050de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005114:	697a      	ldr	r2, [r7, #20]
 8005116:	4b38      	ldr	r3, [pc, #224]	@ (80051f8 <HAL_DMA_Init+0x158>)
 8005118:	4013      	ands	r3, r2
 800511a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800512a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005136:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005142:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a1b      	ldr	r3, [r3, #32]
 8005148:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	4313      	orrs	r3, r2
 800514e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005154:	2b04      	cmp	r3, #4
 8005156:	d107      	bne.n	8005168 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005160:	4313      	orrs	r3, r2
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	4313      	orrs	r3, r2
 8005166:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	697a      	ldr	r2, [r7, #20]
 800516e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	f023 0307 	bic.w	r3, r3, #7
 800517e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	4313      	orrs	r3, r2
 8005188:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800518e:	2b04      	cmp	r3, #4
 8005190:	d117      	bne.n	80051c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005196:	697a      	ldr	r2, [r7, #20]
 8005198:	4313      	orrs	r3, r2
 800519a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d00e      	beq.n	80051c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 fb01 	bl	80057ac <DMA_CheckFifoParam>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d008      	beq.n	80051c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2240      	movs	r2, #64	@ 0x40
 80051b4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80051be:	2301      	movs	r3, #1
 80051c0:	e016      	b.n	80051f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 fab8 	bl	8005740 <DMA_CalcBaseAndBitshift>
 80051d0:	4603      	mov	r3, r0
 80051d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051d8:	223f      	movs	r2, #63	@ 0x3f
 80051da:	409a      	lsls	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2201      	movs	r2, #1
 80051ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3718      	adds	r7, #24
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	f010803f 	.word	0xf010803f

080051fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b086      	sub	sp, #24
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	607a      	str	r2, [r7, #4]
 8005208:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800520a:	2300      	movs	r3, #0
 800520c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005212:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800521a:	2b01      	cmp	r3, #1
 800521c:	d101      	bne.n	8005222 <HAL_DMA_Start_IT+0x26>
 800521e:	2302      	movs	r3, #2
 8005220:	e040      	b.n	80052a4 <HAL_DMA_Start_IT+0xa8>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2201      	movs	r2, #1
 8005226:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b01      	cmp	r3, #1
 8005234:	d12f      	bne.n	8005296 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2202      	movs	r2, #2
 800523a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2200      	movs	r2, #0
 8005242:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	68b9      	ldr	r1, [r7, #8]
 800524a:	68f8      	ldr	r0, [r7, #12]
 800524c:	f000 fa4a 	bl	80056e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005254:	223f      	movs	r2, #63	@ 0x3f
 8005256:	409a      	lsls	r2, r3
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f042 0216 	orr.w	r2, r2, #22
 800526a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005270:	2b00      	cmp	r3, #0
 8005272:	d007      	beq.n	8005284 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f042 0208 	orr.w	r2, r2, #8
 8005282:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f042 0201 	orr.w	r2, r2, #1
 8005292:	601a      	str	r2, [r3, #0]
 8005294:	e005      	b.n	80052a2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800529e:	2302      	movs	r3, #2
 80052a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80052a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3718      	adds	r7, #24
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052b8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80052ba:	f7fe fdd9 	bl	8003e70 <HAL_GetTick>
 80052be:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d008      	beq.n	80052de <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2280      	movs	r2, #128	@ 0x80
 80052d0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e052      	b.n	8005384 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f022 0216 	bic.w	r2, r2, #22
 80052ec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	695a      	ldr	r2, [r3, #20]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80052fc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005302:	2b00      	cmp	r3, #0
 8005304:	d103      	bne.n	800530e <HAL_DMA_Abort+0x62>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800530a:	2b00      	cmp	r3, #0
 800530c:	d007      	beq.n	800531e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f022 0208 	bic.w	r2, r2, #8
 800531c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f022 0201 	bic.w	r2, r2, #1
 800532c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800532e:	e013      	b.n	8005358 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005330:	f7fe fd9e 	bl	8003e70 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	2b05      	cmp	r3, #5
 800533c:	d90c      	bls.n	8005358 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2220      	movs	r2, #32
 8005342:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2203      	movs	r2, #3
 8005348:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005354:	2303      	movs	r3, #3
 8005356:	e015      	b.n	8005384 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0301 	and.w	r3, r3, #1
 8005362:	2b00      	cmp	r3, #0
 8005364:	d1e4      	bne.n	8005330 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800536a:	223f      	movs	r2, #63	@ 0x3f
 800536c:	409a      	lsls	r2, r3
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2201      	movs	r2, #1
 8005376:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800539a:	b2db      	uxtb	r3, r3
 800539c:	2b02      	cmp	r3, #2
 800539e:	d004      	beq.n	80053aa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2280      	movs	r2, #128	@ 0x80
 80053a4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e00c      	b.n	80053c4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2205      	movs	r2, #5
 80053ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f022 0201 	bic.w	r2, r2, #1
 80053c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b086      	sub	sp, #24
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80053d8:	2300      	movs	r3, #0
 80053da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80053dc:	4b8e      	ldr	r3, [pc, #568]	@ (8005618 <HAL_DMA_IRQHandler+0x248>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a8e      	ldr	r2, [pc, #568]	@ (800561c <HAL_DMA_IRQHandler+0x24c>)
 80053e2:	fba2 2303 	umull	r2, r3, r2, r3
 80053e6:	0a9b      	lsrs	r3, r3, #10
 80053e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053fa:	2208      	movs	r2, #8
 80053fc:	409a      	lsls	r2, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	4013      	ands	r3, r2
 8005402:	2b00      	cmp	r3, #0
 8005404:	d01a      	beq.n	800543c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0304 	and.w	r3, r3, #4
 8005410:	2b00      	cmp	r3, #0
 8005412:	d013      	beq.n	800543c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f022 0204 	bic.w	r2, r2, #4
 8005422:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005428:	2208      	movs	r2, #8
 800542a:	409a      	lsls	r2, r3
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005434:	f043 0201 	orr.w	r2, r3, #1
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005440:	2201      	movs	r2, #1
 8005442:	409a      	lsls	r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	4013      	ands	r3, r2
 8005448:	2b00      	cmp	r3, #0
 800544a:	d012      	beq.n	8005472 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00b      	beq.n	8005472 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800545e:	2201      	movs	r2, #1
 8005460:	409a      	lsls	r2, r3
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800546a:	f043 0202 	orr.w	r2, r3, #2
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005476:	2204      	movs	r2, #4
 8005478:	409a      	lsls	r2, r3
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	4013      	ands	r3, r2
 800547e:	2b00      	cmp	r3, #0
 8005480:	d012      	beq.n	80054a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0302 	and.w	r3, r3, #2
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00b      	beq.n	80054a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005494:	2204      	movs	r2, #4
 8005496:	409a      	lsls	r2, r3
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054a0:	f043 0204 	orr.w	r2, r3, #4
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054ac:	2210      	movs	r2, #16
 80054ae:	409a      	lsls	r2, r3
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	4013      	ands	r3, r2
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d043      	beq.n	8005540 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0308 	and.w	r3, r3, #8
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d03c      	beq.n	8005540 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054ca:	2210      	movs	r2, #16
 80054cc:	409a      	lsls	r2, r3
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d018      	beq.n	8005512 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d108      	bne.n	8005500 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d024      	beq.n	8005540 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	4798      	blx	r3
 80054fe:	e01f      	b.n	8005540 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005504:	2b00      	cmp	r3, #0
 8005506:	d01b      	beq.n	8005540 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	4798      	blx	r3
 8005510:	e016      	b.n	8005540 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800551c:	2b00      	cmp	r3, #0
 800551e:	d107      	bne.n	8005530 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f022 0208 	bic.w	r2, r2, #8
 800552e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005534:	2b00      	cmp	r3, #0
 8005536:	d003      	beq.n	8005540 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005544:	2220      	movs	r2, #32
 8005546:	409a      	lsls	r2, r3
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	4013      	ands	r3, r2
 800554c:	2b00      	cmp	r3, #0
 800554e:	f000 808f 	beq.w	8005670 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0310 	and.w	r3, r3, #16
 800555c:	2b00      	cmp	r3, #0
 800555e:	f000 8087 	beq.w	8005670 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005566:	2220      	movs	r2, #32
 8005568:	409a      	lsls	r2, r3
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b05      	cmp	r3, #5
 8005578:	d136      	bne.n	80055e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f022 0216 	bic.w	r2, r2, #22
 8005588:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	695a      	ldr	r2, [r3, #20]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005598:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d103      	bne.n	80055aa <HAL_DMA_IRQHandler+0x1da>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d007      	beq.n	80055ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f022 0208 	bic.w	r2, r2, #8
 80055b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055be:	223f      	movs	r2, #63	@ 0x3f
 80055c0:	409a      	lsls	r2, r3
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d07e      	beq.n	80056dc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	4798      	blx	r3
        }
        return;
 80055e6:	e079      	b.n	80056dc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d01d      	beq.n	8005632 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005600:	2b00      	cmp	r3, #0
 8005602:	d10d      	bne.n	8005620 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005608:	2b00      	cmp	r3, #0
 800560a:	d031      	beq.n	8005670 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	4798      	blx	r3
 8005614:	e02c      	b.n	8005670 <HAL_DMA_IRQHandler+0x2a0>
 8005616:	bf00      	nop
 8005618:	20000034 	.word	0x20000034
 800561c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005624:	2b00      	cmp	r3, #0
 8005626:	d023      	beq.n	8005670 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	4798      	blx	r3
 8005630:	e01e      	b.n	8005670 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800563c:	2b00      	cmp	r3, #0
 800563e:	d10f      	bne.n	8005660 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f022 0210 	bic.w	r2, r2, #16
 800564e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005664:	2b00      	cmp	r3, #0
 8005666:	d003      	beq.n	8005670 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005674:	2b00      	cmp	r3, #0
 8005676:	d032      	beq.n	80056de <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800567c:	f003 0301 	and.w	r3, r3, #1
 8005680:	2b00      	cmp	r3, #0
 8005682:	d022      	beq.n	80056ca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2205      	movs	r2, #5
 8005688:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f022 0201 	bic.w	r2, r2, #1
 800569a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	3301      	adds	r3, #1
 80056a0:	60bb      	str	r3, [r7, #8]
 80056a2:	697a      	ldr	r2, [r7, #20]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d307      	bcc.n	80056b8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0301 	and.w	r3, r3, #1
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1f2      	bne.n	800569c <HAL_DMA_IRQHandler+0x2cc>
 80056b6:	e000      	b.n	80056ba <HAL_DMA_IRQHandler+0x2ea>
          break;
 80056b8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2201      	movs	r2, #1
 80056be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d005      	beq.n	80056de <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	4798      	blx	r3
 80056da:	e000      	b.n	80056de <HAL_DMA_IRQHandler+0x30e>
        return;
 80056dc:	bf00      	nop
    }
  }
}
 80056de:	3718      	adds	r7, #24
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	607a      	str	r2, [r7, #4]
 80056f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005700:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	683a      	ldr	r2, [r7, #0]
 8005708:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	2b40      	cmp	r3, #64	@ 0x40
 8005710:	d108      	bne.n	8005724 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68ba      	ldr	r2, [r7, #8]
 8005720:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005722:	e007      	b.n	8005734 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68ba      	ldr	r2, [r7, #8]
 800572a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	60da      	str	r2, [r3, #12]
}
 8005734:	bf00      	nop
 8005736:	3714      	adds	r7, #20
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	b2db      	uxtb	r3, r3
 800574e:	3b10      	subs	r3, #16
 8005750:	4a14      	ldr	r2, [pc, #80]	@ (80057a4 <DMA_CalcBaseAndBitshift+0x64>)
 8005752:	fba2 2303 	umull	r2, r3, r2, r3
 8005756:	091b      	lsrs	r3, r3, #4
 8005758:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800575a:	4a13      	ldr	r2, [pc, #76]	@ (80057a8 <DMA_CalcBaseAndBitshift+0x68>)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	4413      	add	r3, r2
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	461a      	mov	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2b03      	cmp	r3, #3
 800576c:	d909      	bls.n	8005782 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005776:	f023 0303 	bic.w	r3, r3, #3
 800577a:	1d1a      	adds	r2, r3, #4
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	659a      	str	r2, [r3, #88]	@ 0x58
 8005780:	e007      	b.n	8005792 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800578a:	f023 0303 	bic.w	r3, r3, #3
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005796:	4618      	mov	r0, r3
 8005798:	3714      	adds	r7, #20
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	aaaaaaab 	.word	0xaaaaaaab
 80057a8:	0800d658 	.word	0x0800d658

080057ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b085      	sub	sp, #20
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057b4:	2300      	movs	r3, #0
 80057b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d11f      	bne.n	8005806 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	2b03      	cmp	r3, #3
 80057ca:	d856      	bhi.n	800587a <DMA_CheckFifoParam+0xce>
 80057cc:	a201      	add	r2, pc, #4	@ (adr r2, 80057d4 <DMA_CheckFifoParam+0x28>)
 80057ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d2:	bf00      	nop
 80057d4:	080057e5 	.word	0x080057e5
 80057d8:	080057f7 	.word	0x080057f7
 80057dc:	080057e5 	.word	0x080057e5
 80057e0:	0800587b 	.word	0x0800587b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d046      	beq.n	800587e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057f4:	e043      	b.n	800587e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057fa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80057fe:	d140      	bne.n	8005882 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005804:	e03d      	b.n	8005882 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800580e:	d121      	bne.n	8005854 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	2b03      	cmp	r3, #3
 8005814:	d837      	bhi.n	8005886 <DMA_CheckFifoParam+0xda>
 8005816:	a201      	add	r2, pc, #4	@ (adr r2, 800581c <DMA_CheckFifoParam+0x70>)
 8005818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800581c:	0800582d 	.word	0x0800582d
 8005820:	08005833 	.word	0x08005833
 8005824:	0800582d 	.word	0x0800582d
 8005828:	08005845 	.word	0x08005845
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	73fb      	strb	r3, [r7, #15]
      break;
 8005830:	e030      	b.n	8005894 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005836:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d025      	beq.n	800588a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005842:	e022      	b.n	800588a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005848:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800584c:	d11f      	bne.n	800588e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005852:	e01c      	b.n	800588e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	2b02      	cmp	r3, #2
 8005858:	d903      	bls.n	8005862 <DMA_CheckFifoParam+0xb6>
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	2b03      	cmp	r3, #3
 800585e:	d003      	beq.n	8005868 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005860:	e018      	b.n	8005894 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	73fb      	strb	r3, [r7, #15]
      break;
 8005866:	e015      	b.n	8005894 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800586c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00e      	beq.n	8005892 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	73fb      	strb	r3, [r7, #15]
      break;
 8005878:	e00b      	b.n	8005892 <DMA_CheckFifoParam+0xe6>
      break;
 800587a:	bf00      	nop
 800587c:	e00a      	b.n	8005894 <DMA_CheckFifoParam+0xe8>
      break;
 800587e:	bf00      	nop
 8005880:	e008      	b.n	8005894 <DMA_CheckFifoParam+0xe8>
      break;
 8005882:	bf00      	nop
 8005884:	e006      	b.n	8005894 <DMA_CheckFifoParam+0xe8>
      break;
 8005886:	bf00      	nop
 8005888:	e004      	b.n	8005894 <DMA_CheckFifoParam+0xe8>
      break;
 800588a:	bf00      	nop
 800588c:	e002      	b.n	8005894 <DMA_CheckFifoParam+0xe8>
      break;   
 800588e:	bf00      	nop
 8005890:	e000      	b.n	8005894 <DMA_CheckFifoParam+0xe8>
      break;
 8005892:	bf00      	nop
    }
  } 
  
  return status; 
 8005894:	7bfb      	ldrb	r3, [r7, #15]
}
 8005896:	4618      	mov	r0, r3
 8005898:	3714      	adds	r7, #20
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop

080058a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b089      	sub	sp, #36	@ 0x24
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80058ae:	2300      	movs	r3, #0
 80058b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80058b2:	2300      	movs	r3, #0
 80058b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80058b6:	2300      	movs	r3, #0
 80058b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80058ba:	2300      	movs	r3, #0
 80058bc:	61fb      	str	r3, [r7, #28]
 80058be:	e165      	b.n	8005b8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80058c0:	2201      	movs	r2, #1
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	fa02 f303 	lsl.w	r3, r2, r3
 80058c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	697a      	ldr	r2, [r7, #20]
 80058d0:	4013      	ands	r3, r2
 80058d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80058d4:	693a      	ldr	r2, [r7, #16]
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	429a      	cmp	r2, r3
 80058da:	f040 8154 	bne.w	8005b86 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	f003 0303 	and.w	r3, r3, #3
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d005      	beq.n	80058f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d130      	bne.n	8005958 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	005b      	lsls	r3, r3, #1
 8005900:	2203      	movs	r2, #3
 8005902:	fa02 f303 	lsl.w	r3, r2, r3
 8005906:	43db      	mvns	r3, r3
 8005908:	69ba      	ldr	r2, [r7, #24]
 800590a:	4013      	ands	r3, r2
 800590c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	68da      	ldr	r2, [r3, #12]
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	005b      	lsls	r3, r3, #1
 8005916:	fa02 f303 	lsl.w	r3, r2, r3
 800591a:	69ba      	ldr	r2, [r7, #24]
 800591c:	4313      	orrs	r3, r2
 800591e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	69ba      	ldr	r2, [r7, #24]
 8005924:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800592c:	2201      	movs	r2, #1
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	fa02 f303 	lsl.w	r3, r2, r3
 8005934:	43db      	mvns	r3, r3
 8005936:	69ba      	ldr	r2, [r7, #24]
 8005938:	4013      	ands	r3, r2
 800593a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	091b      	lsrs	r3, r3, #4
 8005942:	f003 0201 	and.w	r2, r3, #1
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	fa02 f303 	lsl.w	r3, r2, r3
 800594c:	69ba      	ldr	r2, [r7, #24]
 800594e:	4313      	orrs	r3, r2
 8005950:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	69ba      	ldr	r2, [r7, #24]
 8005956:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	f003 0303 	and.w	r3, r3, #3
 8005960:	2b03      	cmp	r3, #3
 8005962:	d017      	beq.n	8005994 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	005b      	lsls	r3, r3, #1
 800596e:	2203      	movs	r2, #3
 8005970:	fa02 f303 	lsl.w	r3, r2, r3
 8005974:	43db      	mvns	r3, r3
 8005976:	69ba      	ldr	r2, [r7, #24]
 8005978:	4013      	ands	r3, r2
 800597a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	689a      	ldr	r2, [r3, #8]
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	005b      	lsls	r3, r3, #1
 8005984:	fa02 f303 	lsl.w	r3, r2, r3
 8005988:	69ba      	ldr	r2, [r7, #24]
 800598a:	4313      	orrs	r3, r2
 800598c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	69ba      	ldr	r2, [r7, #24]
 8005992:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	f003 0303 	and.w	r3, r3, #3
 800599c:	2b02      	cmp	r3, #2
 800599e:	d123      	bne.n	80059e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	08da      	lsrs	r2, r3, #3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	3208      	adds	r2, #8
 80059a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	f003 0307 	and.w	r3, r3, #7
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	220f      	movs	r2, #15
 80059b8:	fa02 f303 	lsl.w	r3, r2, r3
 80059bc:	43db      	mvns	r3, r3
 80059be:	69ba      	ldr	r2, [r7, #24]
 80059c0:	4013      	ands	r3, r2
 80059c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	691a      	ldr	r2, [r3, #16]
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	f003 0307 	and.w	r3, r3, #7
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	fa02 f303 	lsl.w	r3, r2, r3
 80059d4:	69ba      	ldr	r2, [r7, #24]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	08da      	lsrs	r2, r3, #3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	3208      	adds	r2, #8
 80059e2:	69b9      	ldr	r1, [r7, #24]
 80059e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	005b      	lsls	r3, r3, #1
 80059f2:	2203      	movs	r2, #3
 80059f4:	fa02 f303 	lsl.w	r3, r2, r3
 80059f8:	43db      	mvns	r3, r3
 80059fa:	69ba      	ldr	r2, [r7, #24]
 80059fc:	4013      	ands	r3, r2
 80059fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	f003 0203 	and.w	r2, r3, #3
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	005b      	lsls	r3, r3, #1
 8005a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a10:	69ba      	ldr	r2, [r7, #24]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	69ba      	ldr	r2, [r7, #24]
 8005a1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f000 80ae 	beq.w	8005b86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	60fb      	str	r3, [r7, #12]
 8005a2e:	4b5d      	ldr	r3, [pc, #372]	@ (8005ba4 <HAL_GPIO_Init+0x300>)
 8005a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a32:	4a5c      	ldr	r2, [pc, #368]	@ (8005ba4 <HAL_GPIO_Init+0x300>)
 8005a34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005a38:	6453      	str	r3, [r2, #68]	@ 0x44
 8005a3a:	4b5a      	ldr	r3, [pc, #360]	@ (8005ba4 <HAL_GPIO_Init+0x300>)
 8005a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a42:	60fb      	str	r3, [r7, #12]
 8005a44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005a46:	4a58      	ldr	r2, [pc, #352]	@ (8005ba8 <HAL_GPIO_Init+0x304>)
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	089b      	lsrs	r3, r3, #2
 8005a4c:	3302      	adds	r3, #2
 8005a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	f003 0303 	and.w	r3, r3, #3
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	220f      	movs	r2, #15
 8005a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a62:	43db      	mvns	r3, r3
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	4013      	ands	r3, r2
 8005a68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a4f      	ldr	r2, [pc, #316]	@ (8005bac <HAL_GPIO_Init+0x308>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d025      	beq.n	8005abe <HAL_GPIO_Init+0x21a>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a4e      	ldr	r2, [pc, #312]	@ (8005bb0 <HAL_GPIO_Init+0x30c>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d01f      	beq.n	8005aba <HAL_GPIO_Init+0x216>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a4d      	ldr	r2, [pc, #308]	@ (8005bb4 <HAL_GPIO_Init+0x310>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d019      	beq.n	8005ab6 <HAL_GPIO_Init+0x212>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a4c      	ldr	r2, [pc, #304]	@ (8005bb8 <HAL_GPIO_Init+0x314>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d013      	beq.n	8005ab2 <HAL_GPIO_Init+0x20e>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a4b      	ldr	r2, [pc, #300]	@ (8005bbc <HAL_GPIO_Init+0x318>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d00d      	beq.n	8005aae <HAL_GPIO_Init+0x20a>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a4a      	ldr	r2, [pc, #296]	@ (8005bc0 <HAL_GPIO_Init+0x31c>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d007      	beq.n	8005aaa <HAL_GPIO_Init+0x206>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a49      	ldr	r2, [pc, #292]	@ (8005bc4 <HAL_GPIO_Init+0x320>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d101      	bne.n	8005aa6 <HAL_GPIO_Init+0x202>
 8005aa2:	2306      	movs	r3, #6
 8005aa4:	e00c      	b.n	8005ac0 <HAL_GPIO_Init+0x21c>
 8005aa6:	2307      	movs	r3, #7
 8005aa8:	e00a      	b.n	8005ac0 <HAL_GPIO_Init+0x21c>
 8005aaa:	2305      	movs	r3, #5
 8005aac:	e008      	b.n	8005ac0 <HAL_GPIO_Init+0x21c>
 8005aae:	2304      	movs	r3, #4
 8005ab0:	e006      	b.n	8005ac0 <HAL_GPIO_Init+0x21c>
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e004      	b.n	8005ac0 <HAL_GPIO_Init+0x21c>
 8005ab6:	2302      	movs	r3, #2
 8005ab8:	e002      	b.n	8005ac0 <HAL_GPIO_Init+0x21c>
 8005aba:	2301      	movs	r3, #1
 8005abc:	e000      	b.n	8005ac0 <HAL_GPIO_Init+0x21c>
 8005abe:	2300      	movs	r3, #0
 8005ac0:	69fa      	ldr	r2, [r7, #28]
 8005ac2:	f002 0203 	and.w	r2, r2, #3
 8005ac6:	0092      	lsls	r2, r2, #2
 8005ac8:	4093      	lsls	r3, r2
 8005aca:	69ba      	ldr	r2, [r7, #24]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005ad0:	4935      	ldr	r1, [pc, #212]	@ (8005ba8 <HAL_GPIO_Init+0x304>)
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	089b      	lsrs	r3, r3, #2
 8005ad6:	3302      	adds	r3, #2
 8005ad8:	69ba      	ldr	r2, [r7, #24]
 8005ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005ade:	4b3a      	ldr	r3, [pc, #232]	@ (8005bc8 <HAL_GPIO_Init+0x324>)
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	43db      	mvns	r3, r3
 8005ae8:	69ba      	ldr	r2, [r7, #24]
 8005aea:	4013      	ands	r3, r2
 8005aec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d003      	beq.n	8005b02 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005afa:	69ba      	ldr	r2, [r7, #24]
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005b02:	4a31      	ldr	r2, [pc, #196]	@ (8005bc8 <HAL_GPIO_Init+0x324>)
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005b08:	4b2f      	ldr	r3, [pc, #188]	@ (8005bc8 <HAL_GPIO_Init+0x324>)
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	43db      	mvns	r3, r3
 8005b12:	69ba      	ldr	r2, [r7, #24]
 8005b14:	4013      	ands	r3, r2
 8005b16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d003      	beq.n	8005b2c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005b24:	69ba      	ldr	r2, [r7, #24]
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005b2c:	4a26      	ldr	r2, [pc, #152]	@ (8005bc8 <HAL_GPIO_Init+0x324>)
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005b32:	4b25      	ldr	r3, [pc, #148]	@ (8005bc8 <HAL_GPIO_Init+0x324>)
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	43db      	mvns	r3, r3
 8005b3c:	69ba      	ldr	r2, [r7, #24]
 8005b3e:	4013      	ands	r3, r2
 8005b40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d003      	beq.n	8005b56 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005b4e:	69ba      	ldr	r2, [r7, #24]
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005b56:	4a1c      	ldr	r2, [pc, #112]	@ (8005bc8 <HAL_GPIO_Init+0x324>)
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005b5c:	4b1a      	ldr	r3, [pc, #104]	@ (8005bc8 <HAL_GPIO_Init+0x324>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	43db      	mvns	r3, r3
 8005b66:	69ba      	ldr	r2, [r7, #24]
 8005b68:	4013      	ands	r3, r2
 8005b6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d003      	beq.n	8005b80 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005b78:	69ba      	ldr	r2, [r7, #24]
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005b80:	4a11      	ldr	r2, [pc, #68]	@ (8005bc8 <HAL_GPIO_Init+0x324>)
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	61fb      	str	r3, [r7, #28]
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	2b0f      	cmp	r3, #15
 8005b90:	f67f ae96 	bls.w	80058c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005b94:	bf00      	nop
 8005b96:	bf00      	nop
 8005b98:	3724      	adds	r7, #36	@ 0x24
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	40023800 	.word	0x40023800
 8005ba8:	40013800 	.word	0x40013800
 8005bac:	40020000 	.word	0x40020000
 8005bb0:	40020400 	.word	0x40020400
 8005bb4:	40020800 	.word	0x40020800
 8005bb8:	40020c00 	.word	0x40020c00
 8005bbc:	40021000 	.word	0x40021000
 8005bc0:	40021400 	.word	0x40021400
 8005bc4:	40021800 	.word	0x40021800
 8005bc8:	40013c00 	.word	0x40013c00

08005bcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	807b      	strh	r3, [r7, #2]
 8005bd8:	4613      	mov	r3, r2
 8005bda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005bdc:	787b      	ldrb	r3, [r7, #1]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d003      	beq.n	8005bea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005be2:	887a      	ldrh	r2, [r7, #2]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005be8:	e003      	b.n	8005bf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005bea:	887b      	ldrh	r3, [r7, #2]
 8005bec:	041a      	lsls	r2, r3, #16
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	619a      	str	r2, [r3, #24]
}
 8005bf2:	bf00      	nop
 8005bf4:	370c      	adds	r7, #12
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
	...

08005c00 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005c06:	2300      	movs	r3, #0
 8005c08:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	603b      	str	r3, [r7, #0]
 8005c0e:	4b20      	ldr	r3, [pc, #128]	@ (8005c90 <HAL_PWREx_EnableOverDrive+0x90>)
 8005c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c12:	4a1f      	ldr	r2, [pc, #124]	@ (8005c90 <HAL_PWREx_EnableOverDrive+0x90>)
 8005c14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c18:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c1a:	4b1d      	ldr	r3, [pc, #116]	@ (8005c90 <HAL_PWREx_EnableOverDrive+0x90>)
 8005c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c22:	603b      	str	r3, [r7, #0]
 8005c24:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005c26:	4b1b      	ldr	r3, [pc, #108]	@ (8005c94 <HAL_PWREx_EnableOverDrive+0x94>)
 8005c28:	2201      	movs	r2, #1
 8005c2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c2c:	f7fe f920 	bl	8003e70 <HAL_GetTick>
 8005c30:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005c32:	e009      	b.n	8005c48 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005c34:	f7fe f91c 	bl	8003e70 <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005c42:	d901      	bls.n	8005c48 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	e01f      	b.n	8005c88 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005c48:	4b13      	ldr	r3, [pc, #76]	@ (8005c98 <HAL_PWREx_EnableOverDrive+0x98>)
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c54:	d1ee      	bne.n	8005c34 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005c56:	4b11      	ldr	r3, [pc, #68]	@ (8005c9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8005c58:	2201      	movs	r2, #1
 8005c5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c5c:	f7fe f908 	bl	8003e70 <HAL_GetTick>
 8005c60:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005c62:	e009      	b.n	8005c78 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005c64:	f7fe f904 	bl	8003e70 <HAL_GetTick>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005c72:	d901      	bls.n	8005c78 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005c74:	2303      	movs	r3, #3
 8005c76:	e007      	b.n	8005c88 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005c78:	4b07      	ldr	r3, [pc, #28]	@ (8005c98 <HAL_PWREx_EnableOverDrive+0x98>)
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c84:	d1ee      	bne.n	8005c64 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3708      	adds	r7, #8
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	40023800 	.word	0x40023800
 8005c94:	420e0040 	.word	0x420e0040
 8005c98:	40007000 	.word	0x40007000
 8005c9c:	420e0044 	.word	0x420e0044

08005ca0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d101      	bne.n	8005cb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e0cc      	b.n	8005e4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005cb4:	4b68      	ldr	r3, [pc, #416]	@ (8005e58 <HAL_RCC_ClockConfig+0x1b8>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 030f 	and.w	r3, r3, #15
 8005cbc:	683a      	ldr	r2, [r7, #0]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d90c      	bls.n	8005cdc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cc2:	4b65      	ldr	r3, [pc, #404]	@ (8005e58 <HAL_RCC_ClockConfig+0x1b8>)
 8005cc4:	683a      	ldr	r2, [r7, #0]
 8005cc6:	b2d2      	uxtb	r2, r2
 8005cc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cca:	4b63      	ldr	r3, [pc, #396]	@ (8005e58 <HAL_RCC_ClockConfig+0x1b8>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 030f 	and.w	r3, r3, #15
 8005cd2:	683a      	ldr	r2, [r7, #0]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d001      	beq.n	8005cdc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e0b8      	b.n	8005e4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 0302 	and.w	r3, r3, #2
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d020      	beq.n	8005d2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0304 	and.w	r3, r3, #4
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d005      	beq.n	8005d00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005cf4:	4b59      	ldr	r3, [pc, #356]	@ (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	4a58      	ldr	r2, [pc, #352]	@ (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005cfa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005cfe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0308 	and.w	r3, r3, #8
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d005      	beq.n	8005d18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d0c:	4b53      	ldr	r3, [pc, #332]	@ (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	4a52      	ldr	r2, [pc, #328]	@ (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d12:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005d16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d18:	4b50      	ldr	r3, [pc, #320]	@ (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	494d      	ldr	r1, [pc, #308]	@ (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d26:	4313      	orrs	r3, r2
 8005d28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 0301 	and.w	r3, r3, #1
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d044      	beq.n	8005dc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d107      	bne.n	8005d4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d3e:	4b47      	ldr	r3, [pc, #284]	@ (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d119      	bne.n	8005d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e07f      	b.n	8005e4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d003      	beq.n	8005d5e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d5a:	2b03      	cmp	r3, #3
 8005d5c:	d107      	bne.n	8005d6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d5e:	4b3f      	ldr	r3, [pc, #252]	@ (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d109      	bne.n	8005d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e06f      	b.n	8005e4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d6e:	4b3b      	ldr	r3, [pc, #236]	@ (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0302 	and.w	r3, r3, #2
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d101      	bne.n	8005d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e067      	b.n	8005e4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d7e:	4b37      	ldr	r3, [pc, #220]	@ (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	f023 0203 	bic.w	r2, r3, #3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	4934      	ldr	r1, [pc, #208]	@ (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d90:	f7fe f86e 	bl	8003e70 <HAL_GetTick>
 8005d94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d96:	e00a      	b.n	8005dae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d98:	f7fe f86a 	bl	8003e70 <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d901      	bls.n	8005dae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e04f      	b.n	8005e4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dae:	4b2b      	ldr	r3, [pc, #172]	@ (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f003 020c 	and.w	r2, r3, #12
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d1eb      	bne.n	8005d98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005dc0:	4b25      	ldr	r3, [pc, #148]	@ (8005e58 <HAL_RCC_ClockConfig+0x1b8>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 030f 	and.w	r3, r3, #15
 8005dc8:	683a      	ldr	r2, [r7, #0]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d20c      	bcs.n	8005de8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dce:	4b22      	ldr	r3, [pc, #136]	@ (8005e58 <HAL_RCC_ClockConfig+0x1b8>)
 8005dd0:	683a      	ldr	r2, [r7, #0]
 8005dd2:	b2d2      	uxtb	r2, r2
 8005dd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dd6:	4b20      	ldr	r3, [pc, #128]	@ (8005e58 <HAL_RCC_ClockConfig+0x1b8>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 030f 	and.w	r3, r3, #15
 8005dde:	683a      	ldr	r2, [r7, #0]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d001      	beq.n	8005de8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e032      	b.n	8005e4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 0304 	and.w	r3, r3, #4
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d008      	beq.n	8005e06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005df4:	4b19      	ldr	r3, [pc, #100]	@ (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	4916      	ldr	r1, [pc, #88]	@ (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005e02:	4313      	orrs	r3, r2
 8005e04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 0308 	and.w	r3, r3, #8
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d009      	beq.n	8005e26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e12:	4b12      	ldr	r3, [pc, #72]	@ (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	00db      	lsls	r3, r3, #3
 8005e20:	490e      	ldr	r1, [pc, #56]	@ (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005e22:	4313      	orrs	r3, r2
 8005e24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005e26:	f000 f855 	bl	8005ed4 <HAL_RCC_GetSysClockFreq>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8005e5c <HAL_RCC_ClockConfig+0x1bc>)
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	091b      	lsrs	r3, r3, #4
 8005e32:	f003 030f 	and.w	r3, r3, #15
 8005e36:	490a      	ldr	r1, [pc, #40]	@ (8005e60 <HAL_RCC_ClockConfig+0x1c0>)
 8005e38:	5ccb      	ldrb	r3, [r1, r3]
 8005e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e3e:	4a09      	ldr	r2, [pc, #36]	@ (8005e64 <HAL_RCC_ClockConfig+0x1c4>)
 8005e40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005e42:	4b09      	ldr	r3, [pc, #36]	@ (8005e68 <HAL_RCC_ClockConfig+0x1c8>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4618      	mov	r0, r3
 8005e48:	f7fd ffce 	bl	8003de8 <HAL_InitTick>

  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3710      	adds	r7, #16
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	40023c00 	.word	0x40023c00
 8005e5c:	40023800 	.word	0x40023800
 8005e60:	0800d640 	.word	0x0800d640
 8005e64:	20000034 	.word	0x20000034
 8005e68:	20000038 	.word	0x20000038

08005e6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e70:	4b03      	ldr	r3, [pc, #12]	@ (8005e80 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e72:	681b      	ldr	r3, [r3, #0]
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop
 8005e80:	20000034 	.word	0x20000034

08005e84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005e88:	f7ff fff0 	bl	8005e6c <HAL_RCC_GetHCLKFreq>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	4b05      	ldr	r3, [pc, #20]	@ (8005ea4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	0a9b      	lsrs	r3, r3, #10
 8005e94:	f003 0307 	and.w	r3, r3, #7
 8005e98:	4903      	ldr	r1, [pc, #12]	@ (8005ea8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e9a:	5ccb      	ldrb	r3, [r1, r3]
 8005e9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	40023800 	.word	0x40023800
 8005ea8:	0800d650 	.word	0x0800d650

08005eac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005eb0:	f7ff ffdc 	bl	8005e6c <HAL_RCC_GetHCLKFreq>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	4b05      	ldr	r3, [pc, #20]	@ (8005ecc <HAL_RCC_GetPCLK2Freq+0x20>)
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	0b5b      	lsrs	r3, r3, #13
 8005ebc:	f003 0307 	and.w	r3, r3, #7
 8005ec0:	4903      	ldr	r1, [pc, #12]	@ (8005ed0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ec2:	5ccb      	ldrb	r3, [r1, r3]
 8005ec4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	40023800 	.word	0x40023800
 8005ed0:	0800d650 	.word	0x0800d650

08005ed4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ed4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ed8:	b0ae      	sub	sp, #184	@ 0xb8
 8005eda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005edc:	2300      	movs	r3, #0
 8005ede:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005efa:	4bcb      	ldr	r3, [pc, #812]	@ (8006228 <HAL_RCC_GetSysClockFreq+0x354>)
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	f003 030c 	and.w	r3, r3, #12
 8005f02:	2b0c      	cmp	r3, #12
 8005f04:	f200 8206 	bhi.w	8006314 <HAL_RCC_GetSysClockFreq+0x440>
 8005f08:	a201      	add	r2, pc, #4	@ (adr r2, 8005f10 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f0e:	bf00      	nop
 8005f10:	08005f45 	.word	0x08005f45
 8005f14:	08006315 	.word	0x08006315
 8005f18:	08006315 	.word	0x08006315
 8005f1c:	08006315 	.word	0x08006315
 8005f20:	08005f4d 	.word	0x08005f4d
 8005f24:	08006315 	.word	0x08006315
 8005f28:	08006315 	.word	0x08006315
 8005f2c:	08006315 	.word	0x08006315
 8005f30:	08005f55 	.word	0x08005f55
 8005f34:	08006315 	.word	0x08006315
 8005f38:	08006315 	.word	0x08006315
 8005f3c:	08006315 	.word	0x08006315
 8005f40:	08006145 	.word	0x08006145
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f44:	4bb9      	ldr	r3, [pc, #740]	@ (800622c <HAL_RCC_GetSysClockFreq+0x358>)
 8005f46:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005f4a:	e1e7      	b.n	800631c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f4c:	4bb8      	ldr	r3, [pc, #736]	@ (8006230 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005f4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005f52:	e1e3      	b.n	800631c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f54:	4bb4      	ldr	r3, [pc, #720]	@ (8006228 <HAL_RCC_GetSysClockFreq+0x354>)
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f60:	4bb1      	ldr	r3, [pc, #708]	@ (8006228 <HAL_RCC_GetSysClockFreq+0x354>)
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d071      	beq.n	8006050 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f6c:	4bae      	ldr	r3, [pc, #696]	@ (8006228 <HAL_RCC_GetSysClockFreq+0x354>)
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	099b      	lsrs	r3, r3, #6
 8005f72:	2200      	movs	r2, #0
 8005f74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005f78:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005f7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f84:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005f88:	2300      	movs	r3, #0
 8005f8a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005f8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005f92:	4622      	mov	r2, r4
 8005f94:	462b      	mov	r3, r5
 8005f96:	f04f 0000 	mov.w	r0, #0
 8005f9a:	f04f 0100 	mov.w	r1, #0
 8005f9e:	0159      	lsls	r1, r3, #5
 8005fa0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005fa4:	0150      	lsls	r0, r2, #5
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	460b      	mov	r3, r1
 8005faa:	4621      	mov	r1, r4
 8005fac:	1a51      	subs	r1, r2, r1
 8005fae:	6439      	str	r1, [r7, #64]	@ 0x40
 8005fb0:	4629      	mov	r1, r5
 8005fb2:	eb63 0301 	sbc.w	r3, r3, r1
 8005fb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fb8:	f04f 0200 	mov.w	r2, #0
 8005fbc:	f04f 0300 	mov.w	r3, #0
 8005fc0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8005fc4:	4649      	mov	r1, r9
 8005fc6:	018b      	lsls	r3, r1, #6
 8005fc8:	4641      	mov	r1, r8
 8005fca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005fce:	4641      	mov	r1, r8
 8005fd0:	018a      	lsls	r2, r1, #6
 8005fd2:	4641      	mov	r1, r8
 8005fd4:	1a51      	subs	r1, r2, r1
 8005fd6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005fd8:	4649      	mov	r1, r9
 8005fda:	eb63 0301 	sbc.w	r3, r3, r1
 8005fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fe0:	f04f 0200 	mov.w	r2, #0
 8005fe4:	f04f 0300 	mov.w	r3, #0
 8005fe8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8005fec:	4649      	mov	r1, r9
 8005fee:	00cb      	lsls	r3, r1, #3
 8005ff0:	4641      	mov	r1, r8
 8005ff2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ff6:	4641      	mov	r1, r8
 8005ff8:	00ca      	lsls	r2, r1, #3
 8005ffa:	4610      	mov	r0, r2
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	4603      	mov	r3, r0
 8006000:	4622      	mov	r2, r4
 8006002:	189b      	adds	r3, r3, r2
 8006004:	633b      	str	r3, [r7, #48]	@ 0x30
 8006006:	462b      	mov	r3, r5
 8006008:	460a      	mov	r2, r1
 800600a:	eb42 0303 	adc.w	r3, r2, r3
 800600e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006010:	f04f 0200 	mov.w	r2, #0
 8006014:	f04f 0300 	mov.w	r3, #0
 8006018:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800601c:	4629      	mov	r1, r5
 800601e:	024b      	lsls	r3, r1, #9
 8006020:	4621      	mov	r1, r4
 8006022:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006026:	4621      	mov	r1, r4
 8006028:	024a      	lsls	r2, r1, #9
 800602a:	4610      	mov	r0, r2
 800602c:	4619      	mov	r1, r3
 800602e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006032:	2200      	movs	r2, #0
 8006034:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006038:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800603c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8006040:	f7fa fe42 	bl	8000cc8 <__aeabi_uldivmod>
 8006044:	4602      	mov	r2, r0
 8006046:	460b      	mov	r3, r1
 8006048:	4613      	mov	r3, r2
 800604a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800604e:	e067      	b.n	8006120 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006050:	4b75      	ldr	r3, [pc, #468]	@ (8006228 <HAL_RCC_GetSysClockFreq+0x354>)
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	099b      	lsrs	r3, r3, #6
 8006056:	2200      	movs	r2, #0
 8006058:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800605c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8006060:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006064:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006068:	67bb      	str	r3, [r7, #120]	@ 0x78
 800606a:	2300      	movs	r3, #0
 800606c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800606e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8006072:	4622      	mov	r2, r4
 8006074:	462b      	mov	r3, r5
 8006076:	f04f 0000 	mov.w	r0, #0
 800607a:	f04f 0100 	mov.w	r1, #0
 800607e:	0159      	lsls	r1, r3, #5
 8006080:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006084:	0150      	lsls	r0, r2, #5
 8006086:	4602      	mov	r2, r0
 8006088:	460b      	mov	r3, r1
 800608a:	4621      	mov	r1, r4
 800608c:	1a51      	subs	r1, r2, r1
 800608e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006090:	4629      	mov	r1, r5
 8006092:	eb63 0301 	sbc.w	r3, r3, r1
 8006096:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006098:	f04f 0200 	mov.w	r2, #0
 800609c:	f04f 0300 	mov.w	r3, #0
 80060a0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80060a4:	4649      	mov	r1, r9
 80060a6:	018b      	lsls	r3, r1, #6
 80060a8:	4641      	mov	r1, r8
 80060aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80060ae:	4641      	mov	r1, r8
 80060b0:	018a      	lsls	r2, r1, #6
 80060b2:	4641      	mov	r1, r8
 80060b4:	ebb2 0a01 	subs.w	sl, r2, r1
 80060b8:	4649      	mov	r1, r9
 80060ba:	eb63 0b01 	sbc.w	fp, r3, r1
 80060be:	f04f 0200 	mov.w	r2, #0
 80060c2:	f04f 0300 	mov.w	r3, #0
 80060c6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80060ca:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80060ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060d2:	4692      	mov	sl, r2
 80060d4:	469b      	mov	fp, r3
 80060d6:	4623      	mov	r3, r4
 80060d8:	eb1a 0303 	adds.w	r3, sl, r3
 80060dc:	623b      	str	r3, [r7, #32]
 80060de:	462b      	mov	r3, r5
 80060e0:	eb4b 0303 	adc.w	r3, fp, r3
 80060e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80060e6:	f04f 0200 	mov.w	r2, #0
 80060ea:	f04f 0300 	mov.w	r3, #0
 80060ee:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80060f2:	4629      	mov	r1, r5
 80060f4:	028b      	lsls	r3, r1, #10
 80060f6:	4621      	mov	r1, r4
 80060f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80060fc:	4621      	mov	r1, r4
 80060fe:	028a      	lsls	r2, r1, #10
 8006100:	4610      	mov	r0, r2
 8006102:	4619      	mov	r1, r3
 8006104:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006108:	2200      	movs	r2, #0
 800610a:	673b      	str	r3, [r7, #112]	@ 0x70
 800610c:	677a      	str	r2, [r7, #116]	@ 0x74
 800610e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8006112:	f7fa fdd9 	bl	8000cc8 <__aeabi_uldivmod>
 8006116:	4602      	mov	r2, r0
 8006118:	460b      	mov	r3, r1
 800611a:	4613      	mov	r3, r2
 800611c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006120:	4b41      	ldr	r3, [pc, #260]	@ (8006228 <HAL_RCC_GetSysClockFreq+0x354>)
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	0c1b      	lsrs	r3, r3, #16
 8006126:	f003 0303 	and.w	r3, r3, #3
 800612a:	3301      	adds	r3, #1
 800612c:	005b      	lsls	r3, r3, #1
 800612e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8006132:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006136:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800613a:	fbb2 f3f3 	udiv	r3, r2, r3
 800613e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006142:	e0eb      	b.n	800631c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006144:	4b38      	ldr	r3, [pc, #224]	@ (8006228 <HAL_RCC_GetSysClockFreq+0x354>)
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800614c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006150:	4b35      	ldr	r3, [pc, #212]	@ (8006228 <HAL_RCC_GetSysClockFreq+0x354>)
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006158:	2b00      	cmp	r3, #0
 800615a:	d06b      	beq.n	8006234 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800615c:	4b32      	ldr	r3, [pc, #200]	@ (8006228 <HAL_RCC_GetSysClockFreq+0x354>)
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	099b      	lsrs	r3, r3, #6
 8006162:	2200      	movs	r2, #0
 8006164:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006166:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006168:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800616a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800616e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006170:	2300      	movs	r3, #0
 8006172:	667b      	str	r3, [r7, #100]	@ 0x64
 8006174:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8006178:	4622      	mov	r2, r4
 800617a:	462b      	mov	r3, r5
 800617c:	f04f 0000 	mov.w	r0, #0
 8006180:	f04f 0100 	mov.w	r1, #0
 8006184:	0159      	lsls	r1, r3, #5
 8006186:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800618a:	0150      	lsls	r0, r2, #5
 800618c:	4602      	mov	r2, r0
 800618e:	460b      	mov	r3, r1
 8006190:	4621      	mov	r1, r4
 8006192:	1a51      	subs	r1, r2, r1
 8006194:	61b9      	str	r1, [r7, #24]
 8006196:	4629      	mov	r1, r5
 8006198:	eb63 0301 	sbc.w	r3, r3, r1
 800619c:	61fb      	str	r3, [r7, #28]
 800619e:	f04f 0200 	mov.w	r2, #0
 80061a2:	f04f 0300 	mov.w	r3, #0
 80061a6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80061aa:	4659      	mov	r1, fp
 80061ac:	018b      	lsls	r3, r1, #6
 80061ae:	4651      	mov	r1, sl
 80061b0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80061b4:	4651      	mov	r1, sl
 80061b6:	018a      	lsls	r2, r1, #6
 80061b8:	4651      	mov	r1, sl
 80061ba:	ebb2 0801 	subs.w	r8, r2, r1
 80061be:	4659      	mov	r1, fp
 80061c0:	eb63 0901 	sbc.w	r9, r3, r1
 80061c4:	f04f 0200 	mov.w	r2, #0
 80061c8:	f04f 0300 	mov.w	r3, #0
 80061cc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061d0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061d4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061d8:	4690      	mov	r8, r2
 80061da:	4699      	mov	r9, r3
 80061dc:	4623      	mov	r3, r4
 80061de:	eb18 0303 	adds.w	r3, r8, r3
 80061e2:	613b      	str	r3, [r7, #16]
 80061e4:	462b      	mov	r3, r5
 80061e6:	eb49 0303 	adc.w	r3, r9, r3
 80061ea:	617b      	str	r3, [r7, #20]
 80061ec:	f04f 0200 	mov.w	r2, #0
 80061f0:	f04f 0300 	mov.w	r3, #0
 80061f4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80061f8:	4629      	mov	r1, r5
 80061fa:	024b      	lsls	r3, r1, #9
 80061fc:	4621      	mov	r1, r4
 80061fe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006202:	4621      	mov	r1, r4
 8006204:	024a      	lsls	r2, r1, #9
 8006206:	4610      	mov	r0, r2
 8006208:	4619      	mov	r1, r3
 800620a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800620e:	2200      	movs	r2, #0
 8006210:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006212:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8006214:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006218:	f7fa fd56 	bl	8000cc8 <__aeabi_uldivmod>
 800621c:	4602      	mov	r2, r0
 800621e:	460b      	mov	r3, r1
 8006220:	4613      	mov	r3, r2
 8006222:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006226:	e065      	b.n	80062f4 <HAL_RCC_GetSysClockFreq+0x420>
 8006228:	40023800 	.word	0x40023800
 800622c:	00f42400 	.word	0x00f42400
 8006230:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006234:	4b3d      	ldr	r3, [pc, #244]	@ (800632c <HAL_RCC_GetSysClockFreq+0x458>)
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	099b      	lsrs	r3, r3, #6
 800623a:	2200      	movs	r2, #0
 800623c:	4618      	mov	r0, r3
 800623e:	4611      	mov	r1, r2
 8006240:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006244:	653b      	str	r3, [r7, #80]	@ 0x50
 8006246:	2300      	movs	r3, #0
 8006248:	657b      	str	r3, [r7, #84]	@ 0x54
 800624a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800624e:	4642      	mov	r2, r8
 8006250:	464b      	mov	r3, r9
 8006252:	f04f 0000 	mov.w	r0, #0
 8006256:	f04f 0100 	mov.w	r1, #0
 800625a:	0159      	lsls	r1, r3, #5
 800625c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006260:	0150      	lsls	r0, r2, #5
 8006262:	4602      	mov	r2, r0
 8006264:	460b      	mov	r3, r1
 8006266:	4641      	mov	r1, r8
 8006268:	1a51      	subs	r1, r2, r1
 800626a:	60b9      	str	r1, [r7, #8]
 800626c:	4649      	mov	r1, r9
 800626e:	eb63 0301 	sbc.w	r3, r3, r1
 8006272:	60fb      	str	r3, [r7, #12]
 8006274:	f04f 0200 	mov.w	r2, #0
 8006278:	f04f 0300 	mov.w	r3, #0
 800627c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006280:	4659      	mov	r1, fp
 8006282:	018b      	lsls	r3, r1, #6
 8006284:	4651      	mov	r1, sl
 8006286:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800628a:	4651      	mov	r1, sl
 800628c:	018a      	lsls	r2, r1, #6
 800628e:	4651      	mov	r1, sl
 8006290:	1a54      	subs	r4, r2, r1
 8006292:	4659      	mov	r1, fp
 8006294:	eb63 0501 	sbc.w	r5, r3, r1
 8006298:	f04f 0200 	mov.w	r2, #0
 800629c:	f04f 0300 	mov.w	r3, #0
 80062a0:	00eb      	lsls	r3, r5, #3
 80062a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062a6:	00e2      	lsls	r2, r4, #3
 80062a8:	4614      	mov	r4, r2
 80062aa:	461d      	mov	r5, r3
 80062ac:	4643      	mov	r3, r8
 80062ae:	18e3      	adds	r3, r4, r3
 80062b0:	603b      	str	r3, [r7, #0]
 80062b2:	464b      	mov	r3, r9
 80062b4:	eb45 0303 	adc.w	r3, r5, r3
 80062b8:	607b      	str	r3, [r7, #4]
 80062ba:	f04f 0200 	mov.w	r2, #0
 80062be:	f04f 0300 	mov.w	r3, #0
 80062c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80062c6:	4629      	mov	r1, r5
 80062c8:	028b      	lsls	r3, r1, #10
 80062ca:	4621      	mov	r1, r4
 80062cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80062d0:	4621      	mov	r1, r4
 80062d2:	028a      	lsls	r2, r1, #10
 80062d4:	4610      	mov	r0, r2
 80062d6:	4619      	mov	r1, r3
 80062d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80062dc:	2200      	movs	r2, #0
 80062de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80062e0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80062e2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80062e6:	f7fa fcef 	bl	8000cc8 <__aeabi_uldivmod>
 80062ea:	4602      	mov	r2, r0
 80062ec:	460b      	mov	r3, r1
 80062ee:	4613      	mov	r3, r2
 80062f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80062f4:	4b0d      	ldr	r3, [pc, #52]	@ (800632c <HAL_RCC_GetSysClockFreq+0x458>)
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	0f1b      	lsrs	r3, r3, #28
 80062fa:	f003 0307 	and.w	r3, r3, #7
 80062fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8006302:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006306:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800630a:	fbb2 f3f3 	udiv	r3, r2, r3
 800630e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006312:	e003      	b.n	800631c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006314:	4b06      	ldr	r3, [pc, #24]	@ (8006330 <HAL_RCC_GetSysClockFreq+0x45c>)
 8006316:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800631a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800631c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8006320:	4618      	mov	r0, r3
 8006322:	37b8      	adds	r7, #184	@ 0xb8
 8006324:	46bd      	mov	sp, r7
 8006326:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800632a:	bf00      	nop
 800632c:	40023800 	.word	0x40023800
 8006330:	00f42400 	.word	0x00f42400

08006334 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b086      	sub	sp, #24
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d101      	bne.n	8006346 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e28d      	b.n	8006862 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	2b00      	cmp	r3, #0
 8006350:	f000 8083 	beq.w	800645a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006354:	4b94      	ldr	r3, [pc, #592]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	f003 030c 	and.w	r3, r3, #12
 800635c:	2b04      	cmp	r3, #4
 800635e:	d019      	beq.n	8006394 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006360:	4b91      	ldr	r3, [pc, #580]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	f003 030c 	and.w	r3, r3, #12
        || \
 8006368:	2b08      	cmp	r3, #8
 800636a:	d106      	bne.n	800637a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800636c:	4b8e      	ldr	r3, [pc, #568]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006374:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006378:	d00c      	beq.n	8006394 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800637a:	4b8b      	ldr	r3, [pc, #556]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006382:	2b0c      	cmp	r3, #12
 8006384:	d112      	bne.n	80063ac <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006386:	4b88      	ldr	r3, [pc, #544]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800638e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006392:	d10b      	bne.n	80063ac <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006394:	4b84      	ldr	r3, [pc, #528]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800639c:	2b00      	cmp	r3, #0
 800639e:	d05b      	beq.n	8006458 <HAL_RCC_OscConfig+0x124>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d157      	bne.n	8006458 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	e25a      	b.n	8006862 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063b4:	d106      	bne.n	80063c4 <HAL_RCC_OscConfig+0x90>
 80063b6:	4b7c      	ldr	r3, [pc, #496]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a7b      	ldr	r2, [pc, #492]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 80063bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063c0:	6013      	str	r3, [r2, #0]
 80063c2:	e01d      	b.n	8006400 <HAL_RCC_OscConfig+0xcc>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80063cc:	d10c      	bne.n	80063e8 <HAL_RCC_OscConfig+0xb4>
 80063ce:	4b76      	ldr	r3, [pc, #472]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a75      	ldr	r2, [pc, #468]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 80063d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80063d8:	6013      	str	r3, [r2, #0]
 80063da:	4b73      	ldr	r3, [pc, #460]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a72      	ldr	r2, [pc, #456]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 80063e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063e4:	6013      	str	r3, [r2, #0]
 80063e6:	e00b      	b.n	8006400 <HAL_RCC_OscConfig+0xcc>
 80063e8:	4b6f      	ldr	r3, [pc, #444]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a6e      	ldr	r2, [pc, #440]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 80063ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063f2:	6013      	str	r3, [r2, #0]
 80063f4:	4b6c      	ldr	r3, [pc, #432]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a6b      	ldr	r2, [pc, #428]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 80063fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80063fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d013      	beq.n	8006430 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006408:	f7fd fd32 	bl	8003e70 <HAL_GetTick>
 800640c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800640e:	e008      	b.n	8006422 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006410:	f7fd fd2e 	bl	8003e70 <HAL_GetTick>
 8006414:	4602      	mov	r2, r0
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	2b64      	cmp	r3, #100	@ 0x64
 800641c:	d901      	bls.n	8006422 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800641e:	2303      	movs	r3, #3
 8006420:	e21f      	b.n	8006862 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006422:	4b61      	ldr	r3, [pc, #388]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800642a:	2b00      	cmp	r3, #0
 800642c:	d0f0      	beq.n	8006410 <HAL_RCC_OscConfig+0xdc>
 800642e:	e014      	b.n	800645a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006430:	f7fd fd1e 	bl	8003e70 <HAL_GetTick>
 8006434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006436:	e008      	b.n	800644a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006438:	f7fd fd1a 	bl	8003e70 <HAL_GetTick>
 800643c:	4602      	mov	r2, r0
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	2b64      	cmp	r3, #100	@ 0x64
 8006444:	d901      	bls.n	800644a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006446:	2303      	movs	r3, #3
 8006448:	e20b      	b.n	8006862 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800644a:	4b57      	ldr	r3, [pc, #348]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006452:	2b00      	cmp	r3, #0
 8006454:	d1f0      	bne.n	8006438 <HAL_RCC_OscConfig+0x104>
 8006456:	e000      	b.n	800645a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006458:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 0302 	and.w	r3, r3, #2
 8006462:	2b00      	cmp	r3, #0
 8006464:	d06f      	beq.n	8006546 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006466:	4b50      	ldr	r3, [pc, #320]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	f003 030c 	and.w	r3, r3, #12
 800646e:	2b00      	cmp	r3, #0
 8006470:	d017      	beq.n	80064a2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006472:	4b4d      	ldr	r3, [pc, #308]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f003 030c 	and.w	r3, r3, #12
        || \
 800647a:	2b08      	cmp	r3, #8
 800647c:	d105      	bne.n	800648a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800647e:	4b4a      	ldr	r3, [pc, #296]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00b      	beq.n	80064a2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800648a:	4b47      	ldr	r3, [pc, #284]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8006492:	2b0c      	cmp	r3, #12
 8006494:	d11c      	bne.n	80064d0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006496:	4b44      	ldr	r3, [pc, #272]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d116      	bne.n	80064d0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064a2:	4b41      	ldr	r3, [pc, #260]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 0302 	and.w	r3, r3, #2
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d005      	beq.n	80064ba <HAL_RCC_OscConfig+0x186>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d001      	beq.n	80064ba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e1d3      	b.n	8006862 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064ba:	4b3b      	ldr	r3, [pc, #236]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	00db      	lsls	r3, r3, #3
 80064c8:	4937      	ldr	r1, [pc, #220]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 80064ca:	4313      	orrs	r3, r2
 80064cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064ce:	e03a      	b.n	8006546 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d020      	beq.n	800651a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064d8:	4b34      	ldr	r3, [pc, #208]	@ (80065ac <HAL_RCC_OscConfig+0x278>)
 80064da:	2201      	movs	r2, #1
 80064dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064de:	f7fd fcc7 	bl	8003e70 <HAL_GetTick>
 80064e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064e4:	e008      	b.n	80064f8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064e6:	f7fd fcc3 	bl	8003e70 <HAL_GetTick>
 80064ea:	4602      	mov	r2, r0
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d901      	bls.n	80064f8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e1b4      	b.n	8006862 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064f8:	4b2b      	ldr	r3, [pc, #172]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 0302 	and.w	r3, r3, #2
 8006500:	2b00      	cmp	r3, #0
 8006502:	d0f0      	beq.n	80064e6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006504:	4b28      	ldr	r3, [pc, #160]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	00db      	lsls	r3, r3, #3
 8006512:	4925      	ldr	r1, [pc, #148]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 8006514:	4313      	orrs	r3, r2
 8006516:	600b      	str	r3, [r1, #0]
 8006518:	e015      	b.n	8006546 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800651a:	4b24      	ldr	r3, [pc, #144]	@ (80065ac <HAL_RCC_OscConfig+0x278>)
 800651c:	2200      	movs	r2, #0
 800651e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006520:	f7fd fca6 	bl	8003e70 <HAL_GetTick>
 8006524:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006526:	e008      	b.n	800653a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006528:	f7fd fca2 	bl	8003e70 <HAL_GetTick>
 800652c:	4602      	mov	r2, r0
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	2b02      	cmp	r3, #2
 8006534:	d901      	bls.n	800653a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006536:	2303      	movs	r3, #3
 8006538:	e193      	b.n	8006862 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800653a:	4b1b      	ldr	r3, [pc, #108]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0302 	and.w	r3, r3, #2
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1f0      	bne.n	8006528 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 0308 	and.w	r3, r3, #8
 800654e:	2b00      	cmp	r3, #0
 8006550:	d036      	beq.n	80065c0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	695b      	ldr	r3, [r3, #20]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d016      	beq.n	8006588 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800655a:	4b15      	ldr	r3, [pc, #84]	@ (80065b0 <HAL_RCC_OscConfig+0x27c>)
 800655c:	2201      	movs	r2, #1
 800655e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006560:	f7fd fc86 	bl	8003e70 <HAL_GetTick>
 8006564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006566:	e008      	b.n	800657a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006568:	f7fd fc82 	bl	8003e70 <HAL_GetTick>
 800656c:	4602      	mov	r2, r0
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	2b02      	cmp	r3, #2
 8006574:	d901      	bls.n	800657a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e173      	b.n	8006862 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800657a:	4b0b      	ldr	r3, [pc, #44]	@ (80065a8 <HAL_RCC_OscConfig+0x274>)
 800657c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800657e:	f003 0302 	and.w	r3, r3, #2
 8006582:	2b00      	cmp	r3, #0
 8006584:	d0f0      	beq.n	8006568 <HAL_RCC_OscConfig+0x234>
 8006586:	e01b      	b.n	80065c0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006588:	4b09      	ldr	r3, [pc, #36]	@ (80065b0 <HAL_RCC_OscConfig+0x27c>)
 800658a:	2200      	movs	r2, #0
 800658c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800658e:	f7fd fc6f 	bl	8003e70 <HAL_GetTick>
 8006592:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006594:	e00e      	b.n	80065b4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006596:	f7fd fc6b 	bl	8003e70 <HAL_GetTick>
 800659a:	4602      	mov	r2, r0
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	2b02      	cmp	r3, #2
 80065a2:	d907      	bls.n	80065b4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80065a4:	2303      	movs	r3, #3
 80065a6:	e15c      	b.n	8006862 <HAL_RCC_OscConfig+0x52e>
 80065a8:	40023800 	.word	0x40023800
 80065ac:	42470000 	.word	0x42470000
 80065b0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065b4:	4b8a      	ldr	r3, [pc, #552]	@ (80067e0 <HAL_RCC_OscConfig+0x4ac>)
 80065b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065b8:	f003 0302 	and.w	r3, r3, #2
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d1ea      	bne.n	8006596 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 0304 	and.w	r3, r3, #4
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	f000 8097 	beq.w	80066fc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065ce:	2300      	movs	r3, #0
 80065d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065d2:	4b83      	ldr	r3, [pc, #524]	@ (80067e0 <HAL_RCC_OscConfig+0x4ac>)
 80065d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d10f      	bne.n	80065fe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065de:	2300      	movs	r3, #0
 80065e0:	60bb      	str	r3, [r7, #8]
 80065e2:	4b7f      	ldr	r3, [pc, #508]	@ (80067e0 <HAL_RCC_OscConfig+0x4ac>)
 80065e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065e6:	4a7e      	ldr	r2, [pc, #504]	@ (80067e0 <HAL_RCC_OscConfig+0x4ac>)
 80065e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80065ee:	4b7c      	ldr	r3, [pc, #496]	@ (80067e0 <HAL_RCC_OscConfig+0x4ac>)
 80065f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065f6:	60bb      	str	r3, [r7, #8]
 80065f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065fa:	2301      	movs	r3, #1
 80065fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065fe:	4b79      	ldr	r3, [pc, #484]	@ (80067e4 <HAL_RCC_OscConfig+0x4b0>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006606:	2b00      	cmp	r3, #0
 8006608:	d118      	bne.n	800663c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800660a:	4b76      	ldr	r3, [pc, #472]	@ (80067e4 <HAL_RCC_OscConfig+0x4b0>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a75      	ldr	r2, [pc, #468]	@ (80067e4 <HAL_RCC_OscConfig+0x4b0>)
 8006610:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006614:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006616:	f7fd fc2b 	bl	8003e70 <HAL_GetTick>
 800661a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800661c:	e008      	b.n	8006630 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800661e:	f7fd fc27 	bl	8003e70 <HAL_GetTick>
 8006622:	4602      	mov	r2, r0
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	2b02      	cmp	r3, #2
 800662a:	d901      	bls.n	8006630 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800662c:	2303      	movs	r3, #3
 800662e:	e118      	b.n	8006862 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006630:	4b6c      	ldr	r3, [pc, #432]	@ (80067e4 <HAL_RCC_OscConfig+0x4b0>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006638:	2b00      	cmp	r3, #0
 800663a:	d0f0      	beq.n	800661e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	2b01      	cmp	r3, #1
 8006642:	d106      	bne.n	8006652 <HAL_RCC_OscConfig+0x31e>
 8006644:	4b66      	ldr	r3, [pc, #408]	@ (80067e0 <HAL_RCC_OscConfig+0x4ac>)
 8006646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006648:	4a65      	ldr	r2, [pc, #404]	@ (80067e0 <HAL_RCC_OscConfig+0x4ac>)
 800664a:	f043 0301 	orr.w	r3, r3, #1
 800664e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006650:	e01c      	b.n	800668c <HAL_RCC_OscConfig+0x358>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	2b05      	cmp	r3, #5
 8006658:	d10c      	bne.n	8006674 <HAL_RCC_OscConfig+0x340>
 800665a:	4b61      	ldr	r3, [pc, #388]	@ (80067e0 <HAL_RCC_OscConfig+0x4ac>)
 800665c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800665e:	4a60      	ldr	r2, [pc, #384]	@ (80067e0 <HAL_RCC_OscConfig+0x4ac>)
 8006660:	f043 0304 	orr.w	r3, r3, #4
 8006664:	6713      	str	r3, [r2, #112]	@ 0x70
 8006666:	4b5e      	ldr	r3, [pc, #376]	@ (80067e0 <HAL_RCC_OscConfig+0x4ac>)
 8006668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800666a:	4a5d      	ldr	r2, [pc, #372]	@ (80067e0 <HAL_RCC_OscConfig+0x4ac>)
 800666c:	f043 0301 	orr.w	r3, r3, #1
 8006670:	6713      	str	r3, [r2, #112]	@ 0x70
 8006672:	e00b      	b.n	800668c <HAL_RCC_OscConfig+0x358>
 8006674:	4b5a      	ldr	r3, [pc, #360]	@ (80067e0 <HAL_RCC_OscConfig+0x4ac>)
 8006676:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006678:	4a59      	ldr	r2, [pc, #356]	@ (80067e0 <HAL_RCC_OscConfig+0x4ac>)
 800667a:	f023 0301 	bic.w	r3, r3, #1
 800667e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006680:	4b57      	ldr	r3, [pc, #348]	@ (80067e0 <HAL_RCC_OscConfig+0x4ac>)
 8006682:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006684:	4a56      	ldr	r2, [pc, #344]	@ (80067e0 <HAL_RCC_OscConfig+0x4ac>)
 8006686:	f023 0304 	bic.w	r3, r3, #4
 800668a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d015      	beq.n	80066c0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006694:	f7fd fbec 	bl	8003e70 <HAL_GetTick>
 8006698:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800669a:	e00a      	b.n	80066b2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800669c:	f7fd fbe8 	bl	8003e70 <HAL_GetTick>
 80066a0:	4602      	mov	r2, r0
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d901      	bls.n	80066b2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80066ae:	2303      	movs	r3, #3
 80066b0:	e0d7      	b.n	8006862 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066b2:	4b4b      	ldr	r3, [pc, #300]	@ (80067e0 <HAL_RCC_OscConfig+0x4ac>)
 80066b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066b6:	f003 0302 	and.w	r3, r3, #2
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d0ee      	beq.n	800669c <HAL_RCC_OscConfig+0x368>
 80066be:	e014      	b.n	80066ea <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066c0:	f7fd fbd6 	bl	8003e70 <HAL_GetTick>
 80066c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066c6:	e00a      	b.n	80066de <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066c8:	f7fd fbd2 	bl	8003e70 <HAL_GetTick>
 80066cc:	4602      	mov	r2, r0
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d901      	bls.n	80066de <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	e0c1      	b.n	8006862 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066de:	4b40      	ldr	r3, [pc, #256]	@ (80067e0 <HAL_RCC_OscConfig+0x4ac>)
 80066e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066e2:	f003 0302 	and.w	r3, r3, #2
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1ee      	bne.n	80066c8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80066ea:	7dfb      	ldrb	r3, [r7, #23]
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d105      	bne.n	80066fc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066f0:	4b3b      	ldr	r3, [pc, #236]	@ (80067e0 <HAL_RCC_OscConfig+0x4ac>)
 80066f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066f4:	4a3a      	ldr	r2, [pc, #232]	@ (80067e0 <HAL_RCC_OscConfig+0x4ac>)
 80066f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80066fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	699b      	ldr	r3, [r3, #24]
 8006700:	2b00      	cmp	r3, #0
 8006702:	f000 80ad 	beq.w	8006860 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006706:	4b36      	ldr	r3, [pc, #216]	@ (80067e0 <HAL_RCC_OscConfig+0x4ac>)
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	f003 030c 	and.w	r3, r3, #12
 800670e:	2b08      	cmp	r3, #8
 8006710:	d060      	beq.n	80067d4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	699b      	ldr	r3, [r3, #24]
 8006716:	2b02      	cmp	r3, #2
 8006718:	d145      	bne.n	80067a6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800671a:	4b33      	ldr	r3, [pc, #204]	@ (80067e8 <HAL_RCC_OscConfig+0x4b4>)
 800671c:	2200      	movs	r2, #0
 800671e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006720:	f7fd fba6 	bl	8003e70 <HAL_GetTick>
 8006724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006726:	e008      	b.n	800673a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006728:	f7fd fba2 	bl	8003e70 <HAL_GetTick>
 800672c:	4602      	mov	r2, r0
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	2b02      	cmp	r3, #2
 8006734:	d901      	bls.n	800673a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	e093      	b.n	8006862 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800673a:	4b29      	ldr	r3, [pc, #164]	@ (80067e0 <HAL_RCC_OscConfig+0x4ac>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006742:	2b00      	cmp	r3, #0
 8006744:	d1f0      	bne.n	8006728 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	69da      	ldr	r2, [r3, #28]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6a1b      	ldr	r3, [r3, #32]
 800674e:	431a      	orrs	r2, r3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006754:	019b      	lsls	r3, r3, #6
 8006756:	431a      	orrs	r2, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800675c:	085b      	lsrs	r3, r3, #1
 800675e:	3b01      	subs	r3, #1
 8006760:	041b      	lsls	r3, r3, #16
 8006762:	431a      	orrs	r2, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006768:	061b      	lsls	r3, r3, #24
 800676a:	431a      	orrs	r2, r3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006770:	071b      	lsls	r3, r3, #28
 8006772:	491b      	ldr	r1, [pc, #108]	@ (80067e0 <HAL_RCC_OscConfig+0x4ac>)
 8006774:	4313      	orrs	r3, r2
 8006776:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006778:	4b1b      	ldr	r3, [pc, #108]	@ (80067e8 <HAL_RCC_OscConfig+0x4b4>)
 800677a:	2201      	movs	r2, #1
 800677c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800677e:	f7fd fb77 	bl	8003e70 <HAL_GetTick>
 8006782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006784:	e008      	b.n	8006798 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006786:	f7fd fb73 	bl	8003e70 <HAL_GetTick>
 800678a:	4602      	mov	r2, r0
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	2b02      	cmp	r3, #2
 8006792:	d901      	bls.n	8006798 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006794:	2303      	movs	r3, #3
 8006796:	e064      	b.n	8006862 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006798:	4b11      	ldr	r3, [pc, #68]	@ (80067e0 <HAL_RCC_OscConfig+0x4ac>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d0f0      	beq.n	8006786 <HAL_RCC_OscConfig+0x452>
 80067a4:	e05c      	b.n	8006860 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067a6:	4b10      	ldr	r3, [pc, #64]	@ (80067e8 <HAL_RCC_OscConfig+0x4b4>)
 80067a8:	2200      	movs	r2, #0
 80067aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067ac:	f7fd fb60 	bl	8003e70 <HAL_GetTick>
 80067b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067b2:	e008      	b.n	80067c6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067b4:	f7fd fb5c 	bl	8003e70 <HAL_GetTick>
 80067b8:	4602      	mov	r2, r0
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d901      	bls.n	80067c6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80067c2:	2303      	movs	r3, #3
 80067c4:	e04d      	b.n	8006862 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067c6:	4b06      	ldr	r3, [pc, #24]	@ (80067e0 <HAL_RCC_OscConfig+0x4ac>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1f0      	bne.n	80067b4 <HAL_RCC_OscConfig+0x480>
 80067d2:	e045      	b.n	8006860 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	699b      	ldr	r3, [r3, #24]
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d107      	bne.n	80067ec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	e040      	b.n	8006862 <HAL_RCC_OscConfig+0x52e>
 80067e0:	40023800 	.word	0x40023800
 80067e4:	40007000 	.word	0x40007000
 80067e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80067ec:	4b1f      	ldr	r3, [pc, #124]	@ (800686c <HAL_RCC_OscConfig+0x538>)
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	699b      	ldr	r3, [r3, #24]
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d030      	beq.n	800685c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006804:	429a      	cmp	r2, r3
 8006806:	d129      	bne.n	800685c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006812:	429a      	cmp	r2, r3
 8006814:	d122      	bne.n	800685c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800681c:	4013      	ands	r3, r2
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006822:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006824:	4293      	cmp	r3, r2
 8006826:	d119      	bne.n	800685c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006832:	085b      	lsrs	r3, r3, #1
 8006834:	3b01      	subs	r3, #1
 8006836:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006838:	429a      	cmp	r2, r3
 800683a:	d10f      	bne.n	800685c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006846:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006848:	429a      	cmp	r2, r3
 800684a:	d107      	bne.n	800685c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006856:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006858:	429a      	cmp	r2, r3
 800685a:	d001      	beq.n	8006860 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	e000      	b.n	8006862 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3718      	adds	r7, #24
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	40023800 	.word	0x40023800

08006870 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d101      	bne.n	8006882 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e07b      	b.n	800697a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006886:	2b00      	cmp	r3, #0
 8006888:	d108      	bne.n	800689c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006892:	d009      	beq.n	80068a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	61da      	str	r2, [r3, #28]
 800689a:	e005      	b.n	80068a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d106      	bne.n	80068c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f7fc ff04 	bl	80036d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2202      	movs	r2, #2
 80068cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80068de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80068f0:	431a      	orrs	r2, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068fa:	431a      	orrs	r2, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	f003 0302 	and.w	r3, r3, #2
 8006904:	431a      	orrs	r2, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	695b      	ldr	r3, [r3, #20]
 800690a:	f003 0301 	and.w	r3, r3, #1
 800690e:	431a      	orrs	r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	699b      	ldr	r3, [r3, #24]
 8006914:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006918:	431a      	orrs	r2, r3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	69db      	ldr	r3, [r3, #28]
 800691e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006922:	431a      	orrs	r2, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a1b      	ldr	r3, [r3, #32]
 8006928:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800692c:	ea42 0103 	orr.w	r1, r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006934:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	430a      	orrs	r2, r1
 800693e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	699b      	ldr	r3, [r3, #24]
 8006944:	0c1b      	lsrs	r3, r3, #16
 8006946:	f003 0104 	and.w	r1, r3, #4
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800694e:	f003 0210 	and.w	r2, r3, #16
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	430a      	orrs	r2, r1
 8006958:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	69da      	ldr	r2, [r3, #28]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006968:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3708      	adds	r7, #8
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}

08006982 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006982:	b580      	push	{r7, lr}
 8006984:	b088      	sub	sp, #32
 8006986:	af00      	add	r7, sp, #0
 8006988:	60f8      	str	r0, [r7, #12]
 800698a:	60b9      	str	r1, [r7, #8]
 800698c:	603b      	str	r3, [r7, #0]
 800698e:	4613      	mov	r3, r2
 8006990:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006992:	f7fd fa6d 	bl	8003e70 <HAL_GetTick>
 8006996:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006998:	88fb      	ldrh	r3, [r7, #6]
 800699a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d001      	beq.n	80069ac <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80069a8:	2302      	movs	r3, #2
 80069aa:	e12a      	b.n	8006c02 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d002      	beq.n	80069b8 <HAL_SPI_Transmit+0x36>
 80069b2:	88fb      	ldrh	r3, [r7, #6]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d101      	bne.n	80069bc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	e122      	b.n	8006c02 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d101      	bne.n	80069ca <HAL_SPI_Transmit+0x48>
 80069c6:	2302      	movs	r3, #2
 80069c8:	e11b      	b.n	8006c02 <HAL_SPI_Transmit+0x280>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2201      	movs	r2, #1
 80069ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2203      	movs	r2, #3
 80069d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2200      	movs	r2, #0
 80069de:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	68ba      	ldr	r2, [r7, #8]
 80069e4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	88fa      	ldrh	r2, [r7, #6]
 80069ea:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	88fa      	ldrh	r2, [r7, #6]
 80069f0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2200      	movs	r2, #0
 80069f6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2200      	movs	r2, #0
 80069fc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2200      	movs	r2, #0
 8006a02:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2200      	movs	r2, #0
 8006a08:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a18:	d10f      	bne.n	8006a3a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a28:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006a38:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a44:	2b40      	cmp	r3, #64	@ 0x40
 8006a46:	d007      	beq.n	8006a58 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a60:	d152      	bne.n	8006b08 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d002      	beq.n	8006a70 <HAL_SPI_Transmit+0xee>
 8006a6a:	8b7b      	ldrh	r3, [r7, #26]
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d145      	bne.n	8006afc <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a74:	881a      	ldrh	r2, [r3, #0]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a80:	1c9a      	adds	r2, r3, #2
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	3b01      	subs	r3, #1
 8006a8e:	b29a      	uxth	r2, r3
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006a94:	e032      	b.n	8006afc <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	f003 0302 	and.w	r3, r3, #2
 8006aa0:	2b02      	cmp	r3, #2
 8006aa2:	d112      	bne.n	8006aca <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aa8:	881a      	ldrh	r2, [r3, #0]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ab4:	1c9a      	adds	r2, r3, #2
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006ac8:	e018      	b.n	8006afc <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006aca:	f7fd f9d1 	bl	8003e70 <HAL_GetTick>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	1ad3      	subs	r3, r2, r3
 8006ad4:	683a      	ldr	r2, [r7, #0]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d803      	bhi.n	8006ae2 <HAL_SPI_Transmit+0x160>
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ae0:	d102      	bne.n	8006ae8 <HAL_SPI_Transmit+0x166>
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d109      	bne.n	8006afc <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006af8:	2303      	movs	r3, #3
 8006afa:	e082      	b.n	8006c02 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d1c7      	bne.n	8006a96 <HAL_SPI_Transmit+0x114>
 8006b06:	e053      	b.n	8006bb0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d002      	beq.n	8006b16 <HAL_SPI_Transmit+0x194>
 8006b10:	8b7b      	ldrh	r3, [r7, #26]
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d147      	bne.n	8006ba6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	330c      	adds	r3, #12
 8006b20:	7812      	ldrb	r2, [r2, #0]
 8006b22:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b28:	1c5a      	adds	r2, r3, #1
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	3b01      	subs	r3, #1
 8006b36:	b29a      	uxth	r2, r3
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006b3c:	e033      	b.n	8006ba6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	f003 0302 	and.w	r3, r3, #2
 8006b48:	2b02      	cmp	r3, #2
 8006b4a:	d113      	bne.n	8006b74 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	330c      	adds	r3, #12
 8006b56:	7812      	ldrb	r2, [r2, #0]
 8006b58:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b5e:	1c5a      	adds	r2, r3, #1
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006b72:	e018      	b.n	8006ba6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b74:	f7fd f97c 	bl	8003e70 <HAL_GetTick>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	69fb      	ldr	r3, [r7, #28]
 8006b7c:	1ad3      	subs	r3, r2, r3
 8006b7e:	683a      	ldr	r2, [r7, #0]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d803      	bhi.n	8006b8c <HAL_SPI_Transmit+0x20a>
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b8a:	d102      	bne.n	8006b92 <HAL_SPI_Transmit+0x210>
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d109      	bne.n	8006ba6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2201      	movs	r2, #1
 8006b96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006ba2:	2303      	movs	r3, #3
 8006ba4:	e02d      	b.n	8006c02 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d1c6      	bne.n	8006b3e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006bb0:	69fa      	ldr	r2, [r7, #28]
 8006bb2:	6839      	ldr	r1, [r7, #0]
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f000 fb6b 	bl	8007290 <SPI_EndRxTxTransaction>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d002      	beq.n	8006bc6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2220      	movs	r2, #32
 8006bc4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d10a      	bne.n	8006be4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006bce:	2300      	movs	r3, #0
 8006bd0:	617b      	str	r3, [r7, #20]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	617b      	str	r3, [r7, #20]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	617b      	str	r3, [r7, #20]
 8006be2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d001      	beq.n	8006c00 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e000      	b.n	8006c02 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006c00:	2300      	movs	r3, #0
  }
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3720      	adds	r7, #32
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b08a      	sub	sp, #40	@ 0x28
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	60f8      	str	r0, [r7, #12]
 8006c12:	60b9      	str	r1, [r7, #8]
 8006c14:	607a      	str	r2, [r7, #4]
 8006c16:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c1c:	f7fd f928 	bl	8003e70 <HAL_GetTick>
 8006c20:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006c28:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006c30:	887b      	ldrh	r3, [r7, #2]
 8006c32:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006c34:	7ffb      	ldrb	r3, [r7, #31]
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d00c      	beq.n	8006c54 <HAL_SPI_TransmitReceive+0x4a>
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c40:	d106      	bne.n	8006c50 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d102      	bne.n	8006c50 <HAL_SPI_TransmitReceive+0x46>
 8006c4a:	7ffb      	ldrb	r3, [r7, #31]
 8006c4c:	2b04      	cmp	r3, #4
 8006c4e:	d001      	beq.n	8006c54 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8006c50:	2302      	movs	r3, #2
 8006c52:	e17f      	b.n	8006f54 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d005      	beq.n	8006c66 <HAL_SPI_TransmitReceive+0x5c>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d002      	beq.n	8006c66 <HAL_SPI_TransmitReceive+0x5c>
 8006c60:	887b      	ldrh	r3, [r7, #2]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d101      	bne.n	8006c6a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e174      	b.n	8006f54 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d101      	bne.n	8006c78 <HAL_SPI_TransmitReceive+0x6e>
 8006c74:	2302      	movs	r3, #2
 8006c76:	e16d      	b.n	8006f54 <HAL_SPI_TransmitReceive+0x34a>
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	2b04      	cmp	r3, #4
 8006c8a:	d003      	beq.n	8006c94 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	2205      	movs	r2, #5
 8006c90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2200      	movs	r2, #0
 8006c98:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	887a      	ldrh	r2, [r7, #2]
 8006ca4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	887a      	ldrh	r2, [r7, #2]
 8006caa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	68ba      	ldr	r2, [r7, #8]
 8006cb0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	887a      	ldrh	r2, [r7, #2]
 8006cb6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	887a      	ldrh	r2, [r7, #2]
 8006cbc:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cd4:	2b40      	cmp	r3, #64	@ 0x40
 8006cd6:	d007      	beq.n	8006ce8 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ce6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cf0:	d17e      	bne.n	8006df0 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d002      	beq.n	8006d00 <HAL_SPI_TransmitReceive+0xf6>
 8006cfa:	8afb      	ldrh	r3, [r7, #22]
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d16c      	bne.n	8006dda <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d04:	881a      	ldrh	r2, [r3, #0]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d10:	1c9a      	adds	r2, r3, #2
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	3b01      	subs	r3, #1
 8006d1e:	b29a      	uxth	r2, r3
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d24:	e059      	b.n	8006dda <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	f003 0302 	and.w	r3, r3, #2
 8006d30:	2b02      	cmp	r3, #2
 8006d32:	d11b      	bne.n	8006d6c <HAL_SPI_TransmitReceive+0x162>
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d016      	beq.n	8006d6c <HAL_SPI_TransmitReceive+0x162>
 8006d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d113      	bne.n	8006d6c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d48:	881a      	ldrh	r2, [r3, #0]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d54:	1c9a      	adds	r2, r3, #2
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	3b01      	subs	r3, #1
 8006d62:	b29a      	uxth	r2, r3
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	f003 0301 	and.w	r3, r3, #1
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d119      	bne.n	8006dae <HAL_SPI_TransmitReceive+0x1a4>
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d014      	beq.n	8006dae <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68da      	ldr	r2, [r3, #12]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d8e:	b292      	uxth	r2, r2
 8006d90:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d96:	1c9a      	adds	r2, r3, #2
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	3b01      	subs	r3, #1
 8006da4:	b29a      	uxth	r2, r3
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006daa:	2301      	movs	r3, #1
 8006dac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006dae:	f7fd f85f 	bl	8003e70 <HAL_GetTick>
 8006db2:	4602      	mov	r2, r0
 8006db4:	6a3b      	ldr	r3, [r7, #32]
 8006db6:	1ad3      	subs	r3, r2, r3
 8006db8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d80d      	bhi.n	8006dda <HAL_SPI_TransmitReceive+0x1d0>
 8006dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dc4:	d009      	beq.n	8006dda <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2201      	movs	r2, #1
 8006dca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	e0bc      	b.n	8006f54 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d1a0      	bne.n	8006d26 <HAL_SPI_TransmitReceive+0x11c>
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d19b      	bne.n	8006d26 <HAL_SPI_TransmitReceive+0x11c>
 8006dee:	e082      	b.n	8006ef6 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d002      	beq.n	8006dfe <HAL_SPI_TransmitReceive+0x1f4>
 8006df8:	8afb      	ldrh	r3, [r7, #22]
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d171      	bne.n	8006ee2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	330c      	adds	r3, #12
 8006e08:	7812      	ldrb	r2, [r2, #0]
 8006e0a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e10:	1c5a      	adds	r2, r3, #1
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	3b01      	subs	r3, #1
 8006e1e:	b29a      	uxth	r2, r3
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e24:	e05d      	b.n	8006ee2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	f003 0302 	and.w	r3, r3, #2
 8006e30:	2b02      	cmp	r3, #2
 8006e32:	d11c      	bne.n	8006e6e <HAL_SPI_TransmitReceive+0x264>
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d017      	beq.n	8006e6e <HAL_SPI_TransmitReceive+0x264>
 8006e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d114      	bne.n	8006e6e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	330c      	adds	r3, #12
 8006e4e:	7812      	ldrb	r2, [r2, #0]
 8006e50:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e56:	1c5a      	adds	r2, r3, #1
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	3b01      	subs	r3, #1
 8006e64:	b29a      	uxth	r2, r3
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	f003 0301 	and.w	r3, r3, #1
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d119      	bne.n	8006eb0 <HAL_SPI_TransmitReceive+0x2a6>
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d014      	beq.n	8006eb0 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	68da      	ldr	r2, [r3, #12]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e90:	b2d2      	uxtb	r2, r2
 8006e92:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e98:	1c5a      	adds	r2, r3, #1
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	3b01      	subs	r3, #1
 8006ea6:	b29a      	uxth	r2, r3
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006eac:	2301      	movs	r3, #1
 8006eae:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006eb0:	f7fc ffde 	bl	8003e70 <HAL_GetTick>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	6a3b      	ldr	r3, [r7, #32]
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d803      	bhi.n	8006ec8 <HAL_SPI_TransmitReceive+0x2be>
 8006ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ec6:	d102      	bne.n	8006ece <HAL_SPI_TransmitReceive+0x2c4>
 8006ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d109      	bne.n	8006ee2 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	e038      	b.n	8006f54 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d19c      	bne.n	8006e26 <HAL_SPI_TransmitReceive+0x21c>
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d197      	bne.n	8006e26 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ef6:	6a3a      	ldr	r2, [r7, #32]
 8006ef8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006efa:	68f8      	ldr	r0, [r7, #12]
 8006efc:	f000 f9c8 	bl	8007290 <SPI_EndRxTxTransaction>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d008      	beq.n	8006f18 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2220      	movs	r2, #32
 8006f0a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	e01d      	b.n	8006f54 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d10a      	bne.n	8006f36 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f20:	2300      	movs	r3, #0
 8006f22:	613b      	str	r3, [r7, #16]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	613b      	str	r3, [r7, #16]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	613b      	str	r3, [r7, #16]
 8006f34:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d001      	beq.n	8006f52 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e000      	b.n	8006f54 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006f52:	2300      	movs	r3, #0
  }
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3728      	adds	r7, #40	@ 0x28
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b088      	sub	sp, #32
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d10e      	bne.n	8006f9c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d009      	beq.n	8006f9c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d004      	beq.n	8006f9c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	4798      	blx	r3
    return;
 8006f9a:	e0ce      	b.n	800713a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	f003 0302 	and.w	r3, r3, #2
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d009      	beq.n	8006fba <HAL_SPI_IRQHandler+0x5e>
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d004      	beq.n	8006fba <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	4798      	blx	r3
    return;
 8006fb8:	e0bf      	b.n	800713a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	f003 0320 	and.w	r3, r3, #32
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d10a      	bne.n	8006fda <HAL_SPI_IRQHandler+0x7e>
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d105      	bne.n	8006fda <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f000 80b0 	beq.w	800713a <HAL_SPI_IRQHandler+0x1de>
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	f003 0320 	and.w	r3, r3, #32
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	f000 80aa 	beq.w	800713a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006fe6:	69bb      	ldr	r3, [r7, #24]
 8006fe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d023      	beq.n	8007038 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	2b03      	cmp	r3, #3
 8006ffa:	d011      	beq.n	8007020 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007000:	f043 0204 	orr.w	r2, r3, #4
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007008:	2300      	movs	r3, #0
 800700a:	617b      	str	r3, [r7, #20]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	617b      	str	r3, [r7, #20]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	617b      	str	r3, [r7, #20]
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	e00b      	b.n	8007038 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007020:	2300      	movs	r3, #0
 8007022:	613b      	str	r3, [r7, #16]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	613b      	str	r3, [r7, #16]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	613b      	str	r3, [r7, #16]
 8007034:	693b      	ldr	r3, [r7, #16]
        return;
 8007036:	e080      	b.n	800713a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	f003 0320 	and.w	r3, r3, #32
 800703e:	2b00      	cmp	r3, #0
 8007040:	d014      	beq.n	800706c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007046:	f043 0201 	orr.w	r2, r3, #1
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800704e:	2300      	movs	r3, #0
 8007050:	60fb      	str	r3, [r7, #12]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	60fb      	str	r3, [r7, #12]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007068:	601a      	str	r2, [r3, #0]
 800706a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00c      	beq.n	8007090 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800707a:	f043 0208 	orr.w	r2, r3, #8
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007082:	2300      	movs	r3, #0
 8007084:	60bb      	str	r3, [r7, #8]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	60bb      	str	r3, [r7, #8]
 800708e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007094:	2b00      	cmp	r3, #0
 8007096:	d04f      	beq.n	8007138 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	685a      	ldr	r2, [r3, #4]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80070a6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80070b0:	69fb      	ldr	r3, [r7, #28]
 80070b2:	f003 0302 	and.w	r3, r3, #2
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d104      	bne.n	80070c4 <HAL_SPI_IRQHandler+0x168>
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	f003 0301 	and.w	r3, r3, #1
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d034      	beq.n	800712e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	685a      	ldr	r2, [r3, #4]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f022 0203 	bic.w	r2, r2, #3
 80070d2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d011      	beq.n	8007100 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070e0:	4a17      	ldr	r2, [pc, #92]	@ (8007140 <HAL_SPI_IRQHandler+0x1e4>)
 80070e2:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070e8:	4618      	mov	r0, r3
 80070ea:	f7fe f94f 	bl	800538c <HAL_DMA_Abort_IT>
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d005      	beq.n	8007100 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070f8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007104:	2b00      	cmp	r3, #0
 8007106:	d016      	beq.n	8007136 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800710c:	4a0c      	ldr	r2, [pc, #48]	@ (8007140 <HAL_SPI_IRQHandler+0x1e4>)
 800710e:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007114:	4618      	mov	r0, r3
 8007116:	f7fe f939 	bl	800538c <HAL_DMA_Abort_IT>
 800711a:	4603      	mov	r3, r0
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00a      	beq.n	8007136 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007124:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 800712c:	e003      	b.n	8007136 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 f808 	bl	8007144 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007134:	e000      	b.n	8007138 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8007136:	bf00      	nop
    return;
 8007138:	bf00      	nop
  }
}
 800713a:	3720      	adds	r7, #32
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}
 8007140:	08007159 	.word	0x08007159

08007144 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800714c:	bf00      	nop
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007164:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2200      	movs	r2, #0
 800716a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2200      	movs	r2, #0
 8007170:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007172:	68f8      	ldr	r0, [r7, #12]
 8007174:	f7ff ffe6 	bl	8007144 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007178:	bf00      	nop
 800717a:	3710      	adds	r7, #16
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b088      	sub	sp, #32
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	603b      	str	r3, [r7, #0]
 800718c:	4613      	mov	r3, r2
 800718e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007190:	f7fc fe6e 	bl	8003e70 <HAL_GetTick>
 8007194:	4602      	mov	r2, r0
 8007196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007198:	1a9b      	subs	r3, r3, r2
 800719a:	683a      	ldr	r2, [r7, #0]
 800719c:	4413      	add	r3, r2
 800719e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80071a0:	f7fc fe66 	bl	8003e70 <HAL_GetTick>
 80071a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80071a6:	4b39      	ldr	r3, [pc, #228]	@ (800728c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	015b      	lsls	r3, r3, #5
 80071ac:	0d1b      	lsrs	r3, r3, #20
 80071ae:	69fa      	ldr	r2, [r7, #28]
 80071b0:	fb02 f303 	mul.w	r3, r2, r3
 80071b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80071b6:	e054      	b.n	8007262 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071be:	d050      	beq.n	8007262 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80071c0:	f7fc fe56 	bl	8003e70 <HAL_GetTick>
 80071c4:	4602      	mov	r2, r0
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	1ad3      	subs	r3, r2, r3
 80071ca:	69fa      	ldr	r2, [r7, #28]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d902      	bls.n	80071d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d13d      	bne.n	8007252 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	685a      	ldr	r2, [r3, #4]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80071e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80071ee:	d111      	bne.n	8007214 <SPI_WaitFlagStateUntilTimeout+0x94>
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071f8:	d004      	beq.n	8007204 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007202:	d107      	bne.n	8007214 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007212:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007218:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800721c:	d10f      	bne.n	800723e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800722c:	601a      	str	r2, [r3, #0]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800723c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2201      	movs	r2, #1
 8007242:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2200      	movs	r2, #0
 800724a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800724e:	2303      	movs	r3, #3
 8007250:	e017      	b.n	8007282 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d101      	bne.n	800725c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007258:	2300      	movs	r3, #0
 800725a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	3b01      	subs	r3, #1
 8007260:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	689a      	ldr	r2, [r3, #8]
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	4013      	ands	r3, r2
 800726c:	68ba      	ldr	r2, [r7, #8]
 800726e:	429a      	cmp	r2, r3
 8007270:	bf0c      	ite	eq
 8007272:	2301      	moveq	r3, #1
 8007274:	2300      	movne	r3, #0
 8007276:	b2db      	uxtb	r3, r3
 8007278:	461a      	mov	r2, r3
 800727a:	79fb      	ldrb	r3, [r7, #7]
 800727c:	429a      	cmp	r2, r3
 800727e:	d19b      	bne.n	80071b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3720      	adds	r7, #32
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	20000034 	.word	0x20000034

08007290 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b088      	sub	sp, #32
 8007294:	af02      	add	r7, sp, #8
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	9300      	str	r3, [sp, #0]
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	2201      	movs	r2, #1
 80072a4:	2102      	movs	r1, #2
 80072a6:	68f8      	ldr	r0, [r7, #12]
 80072a8:	f7ff ff6a 	bl	8007180 <SPI_WaitFlagStateUntilTimeout>
 80072ac:	4603      	mov	r3, r0
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d007      	beq.n	80072c2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072b6:	f043 0220 	orr.w	r2, r3, #32
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80072be:	2303      	movs	r3, #3
 80072c0:	e032      	b.n	8007328 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80072c2:	4b1b      	ldr	r3, [pc, #108]	@ (8007330 <SPI_EndRxTxTransaction+0xa0>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a1b      	ldr	r2, [pc, #108]	@ (8007334 <SPI_EndRxTxTransaction+0xa4>)
 80072c8:	fba2 2303 	umull	r2, r3, r2, r3
 80072cc:	0d5b      	lsrs	r3, r3, #21
 80072ce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80072d2:	fb02 f303 	mul.w	r3, r2, r3
 80072d6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80072e0:	d112      	bne.n	8007308 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	9300      	str	r3, [sp, #0]
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	2200      	movs	r2, #0
 80072ea:	2180      	movs	r1, #128	@ 0x80
 80072ec:	68f8      	ldr	r0, [r7, #12]
 80072ee:	f7ff ff47 	bl	8007180 <SPI_WaitFlagStateUntilTimeout>
 80072f2:	4603      	mov	r3, r0
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d016      	beq.n	8007326 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072fc:	f043 0220 	orr.w	r2, r3, #32
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007304:	2303      	movs	r3, #3
 8007306:	e00f      	b.n	8007328 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00a      	beq.n	8007324 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	3b01      	subs	r3, #1
 8007312:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800731e:	2b80      	cmp	r3, #128	@ 0x80
 8007320:	d0f2      	beq.n	8007308 <SPI_EndRxTxTransaction+0x78>
 8007322:	e000      	b.n	8007326 <SPI_EndRxTxTransaction+0x96>
        break;
 8007324:	bf00      	nop
  }

  return HAL_OK;
 8007326:	2300      	movs	r3, #0
}
 8007328:	4618      	mov	r0, r3
 800732a:	3718      	adds	r7, #24
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}
 8007330:	20000034 	.word	0x20000034
 8007334:	165e9f81 	.word	0x165e9f81

08007338 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d101      	bne.n	800734a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	e041      	b.n	80073ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007350:	b2db      	uxtb	r3, r3
 8007352:	2b00      	cmp	r3, #0
 8007354:	d106      	bne.n	8007364 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f7fc fa06 	bl	8003770 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2202      	movs	r2, #2
 8007368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	3304      	adds	r3, #4
 8007374:	4619      	mov	r1, r3
 8007376:	4610      	mov	r0, r2
 8007378:	f000 fcca 	bl	8007d10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2201      	movs	r2, #1
 8007380:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2201      	movs	r2, #1
 8007390:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2201      	movs	r2, #1
 8007398:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2201      	movs	r2, #1
 80073a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2201      	movs	r2, #1
 80073a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2201      	movs	r2, #1
 80073b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2201      	movs	r2, #1
 80073c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3708      	adds	r7, #8
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
	...

080073d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80073d8:	b480      	push	{r7}
 80073da:	b085      	sub	sp, #20
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d001      	beq.n	80073f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	e046      	b.n	800747e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2202      	movs	r2, #2
 80073f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a23      	ldr	r2, [pc, #140]	@ (800748c <HAL_TIM_Base_Start+0xb4>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d022      	beq.n	8007448 <HAL_TIM_Base_Start+0x70>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800740a:	d01d      	beq.n	8007448 <HAL_TIM_Base_Start+0x70>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a1f      	ldr	r2, [pc, #124]	@ (8007490 <HAL_TIM_Base_Start+0xb8>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d018      	beq.n	8007448 <HAL_TIM_Base_Start+0x70>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a1e      	ldr	r2, [pc, #120]	@ (8007494 <HAL_TIM_Base_Start+0xbc>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d013      	beq.n	8007448 <HAL_TIM_Base_Start+0x70>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a1c      	ldr	r2, [pc, #112]	@ (8007498 <HAL_TIM_Base_Start+0xc0>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d00e      	beq.n	8007448 <HAL_TIM_Base_Start+0x70>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a1b      	ldr	r2, [pc, #108]	@ (800749c <HAL_TIM_Base_Start+0xc4>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d009      	beq.n	8007448 <HAL_TIM_Base_Start+0x70>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a19      	ldr	r2, [pc, #100]	@ (80074a0 <HAL_TIM_Base_Start+0xc8>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d004      	beq.n	8007448 <HAL_TIM_Base_Start+0x70>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a18      	ldr	r2, [pc, #96]	@ (80074a4 <HAL_TIM_Base_Start+0xcc>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d111      	bne.n	800746c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	f003 0307 	and.w	r3, r3, #7
 8007452:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2b06      	cmp	r3, #6
 8007458:	d010      	beq.n	800747c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f042 0201 	orr.w	r2, r2, #1
 8007468:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800746a:	e007      	b.n	800747c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f042 0201 	orr.w	r2, r2, #1
 800747a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3714      	adds	r7, #20
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr
 800748a:	bf00      	nop
 800748c:	40010000 	.word	0x40010000
 8007490:	40000400 	.word	0x40000400
 8007494:	40000800 	.word	0x40000800
 8007498:	40000c00 	.word	0x40000c00
 800749c:	40010400 	.word	0x40010400
 80074a0:	40014000 	.word	0x40014000
 80074a4:	40001800 	.word	0x40001800

080074a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b085      	sub	sp, #20
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d001      	beq.n	80074c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80074bc:	2301      	movs	r3, #1
 80074be:	e04e      	b.n	800755e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2202      	movs	r2, #2
 80074c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	68da      	ldr	r2, [r3, #12]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f042 0201 	orr.w	r2, r2, #1
 80074d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a23      	ldr	r2, [pc, #140]	@ (800756c <HAL_TIM_Base_Start_IT+0xc4>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d022      	beq.n	8007528 <HAL_TIM_Base_Start_IT+0x80>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074ea:	d01d      	beq.n	8007528 <HAL_TIM_Base_Start_IT+0x80>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a1f      	ldr	r2, [pc, #124]	@ (8007570 <HAL_TIM_Base_Start_IT+0xc8>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d018      	beq.n	8007528 <HAL_TIM_Base_Start_IT+0x80>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a1e      	ldr	r2, [pc, #120]	@ (8007574 <HAL_TIM_Base_Start_IT+0xcc>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d013      	beq.n	8007528 <HAL_TIM_Base_Start_IT+0x80>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a1c      	ldr	r2, [pc, #112]	@ (8007578 <HAL_TIM_Base_Start_IT+0xd0>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d00e      	beq.n	8007528 <HAL_TIM_Base_Start_IT+0x80>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a1b      	ldr	r2, [pc, #108]	@ (800757c <HAL_TIM_Base_Start_IT+0xd4>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d009      	beq.n	8007528 <HAL_TIM_Base_Start_IT+0x80>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a19      	ldr	r2, [pc, #100]	@ (8007580 <HAL_TIM_Base_Start_IT+0xd8>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d004      	beq.n	8007528 <HAL_TIM_Base_Start_IT+0x80>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a18      	ldr	r2, [pc, #96]	@ (8007584 <HAL_TIM_Base_Start_IT+0xdc>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d111      	bne.n	800754c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	f003 0307 	and.w	r3, r3, #7
 8007532:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2b06      	cmp	r3, #6
 8007538:	d010      	beq.n	800755c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f042 0201 	orr.w	r2, r2, #1
 8007548:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800754a:	e007      	b.n	800755c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f042 0201 	orr.w	r2, r2, #1
 800755a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800755c:	2300      	movs	r3, #0
}
 800755e:	4618      	mov	r0, r3
 8007560:	3714      	adds	r7, #20
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr
 800756a:	bf00      	nop
 800756c:	40010000 	.word	0x40010000
 8007570:	40000400 	.word	0x40000400
 8007574:	40000800 	.word	0x40000800
 8007578:	40000c00 	.word	0x40000c00
 800757c:	40010400 	.word	0x40010400
 8007580:	40014000 	.word	0x40014000
 8007584:	40001800 	.word	0x40001800

08007588 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b082      	sub	sp, #8
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d101      	bne.n	800759a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	e041      	b.n	800761e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d106      	bne.n	80075b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2200      	movs	r2, #0
 80075aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 f839 	bl	8007626 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2202      	movs	r2, #2
 80075b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	3304      	adds	r3, #4
 80075c4:	4619      	mov	r1, r3
 80075c6:	4610      	mov	r0, r2
 80075c8:	f000 fba2 	bl	8007d10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2201      	movs	r2, #1
 80075d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2201      	movs	r2, #1
 80075e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2201      	movs	r2, #1
 80075f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2201      	movs	r2, #1
 8007600:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	3708      	adds	r7, #8
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007626:	b480      	push	{r7}
 8007628:	b083      	sub	sp, #12
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800762e:	bf00      	nop
 8007630:	370c      	adds	r7, #12
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr
	...

0800763c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d109      	bne.n	8007660 <HAL_TIM_PWM_Start+0x24>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007652:	b2db      	uxtb	r3, r3
 8007654:	2b01      	cmp	r3, #1
 8007656:	bf14      	ite	ne
 8007658:	2301      	movne	r3, #1
 800765a:	2300      	moveq	r3, #0
 800765c:	b2db      	uxtb	r3, r3
 800765e:	e022      	b.n	80076a6 <HAL_TIM_PWM_Start+0x6a>
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	2b04      	cmp	r3, #4
 8007664:	d109      	bne.n	800767a <HAL_TIM_PWM_Start+0x3e>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800766c:	b2db      	uxtb	r3, r3
 800766e:	2b01      	cmp	r3, #1
 8007670:	bf14      	ite	ne
 8007672:	2301      	movne	r3, #1
 8007674:	2300      	moveq	r3, #0
 8007676:	b2db      	uxtb	r3, r3
 8007678:	e015      	b.n	80076a6 <HAL_TIM_PWM_Start+0x6a>
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	2b08      	cmp	r3, #8
 800767e:	d109      	bne.n	8007694 <HAL_TIM_PWM_Start+0x58>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007686:	b2db      	uxtb	r3, r3
 8007688:	2b01      	cmp	r3, #1
 800768a:	bf14      	ite	ne
 800768c:	2301      	movne	r3, #1
 800768e:	2300      	moveq	r3, #0
 8007690:	b2db      	uxtb	r3, r3
 8007692:	e008      	b.n	80076a6 <HAL_TIM_PWM_Start+0x6a>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800769a:	b2db      	uxtb	r3, r3
 800769c:	2b01      	cmp	r3, #1
 800769e:	bf14      	ite	ne
 80076a0:	2301      	movne	r3, #1
 80076a2:	2300      	moveq	r3, #0
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d001      	beq.n	80076ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	e07c      	b.n	80077a8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d104      	bne.n	80076be <HAL_TIM_PWM_Start+0x82>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2202      	movs	r2, #2
 80076b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80076bc:	e013      	b.n	80076e6 <HAL_TIM_PWM_Start+0xaa>
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	2b04      	cmp	r3, #4
 80076c2:	d104      	bne.n	80076ce <HAL_TIM_PWM_Start+0x92>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2202      	movs	r2, #2
 80076c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80076cc:	e00b      	b.n	80076e6 <HAL_TIM_PWM_Start+0xaa>
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	2b08      	cmp	r3, #8
 80076d2:	d104      	bne.n	80076de <HAL_TIM_PWM_Start+0xa2>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2202      	movs	r2, #2
 80076d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80076dc:	e003      	b.n	80076e6 <HAL_TIM_PWM_Start+0xaa>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2202      	movs	r2, #2
 80076e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	2201      	movs	r2, #1
 80076ec:	6839      	ldr	r1, [r7, #0]
 80076ee:	4618      	mov	r0, r3
 80076f0:	f000 fe04 	bl	80082fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a2d      	ldr	r2, [pc, #180]	@ (80077b0 <HAL_TIM_PWM_Start+0x174>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d004      	beq.n	8007708 <HAL_TIM_PWM_Start+0xcc>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a2c      	ldr	r2, [pc, #176]	@ (80077b4 <HAL_TIM_PWM_Start+0x178>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d101      	bne.n	800770c <HAL_TIM_PWM_Start+0xd0>
 8007708:	2301      	movs	r3, #1
 800770a:	e000      	b.n	800770e <HAL_TIM_PWM_Start+0xd2>
 800770c:	2300      	movs	r3, #0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d007      	beq.n	8007722 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007720:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a22      	ldr	r2, [pc, #136]	@ (80077b0 <HAL_TIM_PWM_Start+0x174>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d022      	beq.n	8007772 <HAL_TIM_PWM_Start+0x136>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007734:	d01d      	beq.n	8007772 <HAL_TIM_PWM_Start+0x136>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a1f      	ldr	r2, [pc, #124]	@ (80077b8 <HAL_TIM_PWM_Start+0x17c>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d018      	beq.n	8007772 <HAL_TIM_PWM_Start+0x136>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a1d      	ldr	r2, [pc, #116]	@ (80077bc <HAL_TIM_PWM_Start+0x180>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d013      	beq.n	8007772 <HAL_TIM_PWM_Start+0x136>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a1c      	ldr	r2, [pc, #112]	@ (80077c0 <HAL_TIM_PWM_Start+0x184>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d00e      	beq.n	8007772 <HAL_TIM_PWM_Start+0x136>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a16      	ldr	r2, [pc, #88]	@ (80077b4 <HAL_TIM_PWM_Start+0x178>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d009      	beq.n	8007772 <HAL_TIM_PWM_Start+0x136>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a18      	ldr	r2, [pc, #96]	@ (80077c4 <HAL_TIM_PWM_Start+0x188>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d004      	beq.n	8007772 <HAL_TIM_PWM_Start+0x136>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a16      	ldr	r2, [pc, #88]	@ (80077c8 <HAL_TIM_PWM_Start+0x18c>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d111      	bne.n	8007796 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	f003 0307 	and.w	r3, r3, #7
 800777c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2b06      	cmp	r3, #6
 8007782:	d010      	beq.n	80077a6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f042 0201 	orr.w	r2, r2, #1
 8007792:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007794:	e007      	b.n	80077a6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f042 0201 	orr.w	r2, r2, #1
 80077a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3710      	adds	r7, #16
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	40010000 	.word	0x40010000
 80077b4:	40010400 	.word	0x40010400
 80077b8:	40000400 	.word	0x40000400
 80077bc:	40000800 	.word	0x40000800
 80077c0:	40000c00 	.word	0x40000c00
 80077c4:	40014000 	.word	0x40014000
 80077c8:	40001800 	.word	0x40001800

080077cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	68db      	ldr	r3, [r3, #12]
 80077da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	f003 0302 	and.w	r3, r3, #2
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d020      	beq.n	8007830 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f003 0302 	and.w	r3, r3, #2
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d01b      	beq.n	8007830 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f06f 0202 	mvn.w	r2, #2
 8007800:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2201      	movs	r2, #1
 8007806:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	699b      	ldr	r3, [r3, #24]
 800780e:	f003 0303 	and.w	r3, r3, #3
 8007812:	2b00      	cmp	r3, #0
 8007814:	d003      	beq.n	800781e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 fa5b 	bl	8007cd2 <HAL_TIM_IC_CaptureCallback>
 800781c:	e005      	b.n	800782a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 fa4d 	bl	8007cbe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 fa5e 	bl	8007ce6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2200      	movs	r2, #0
 800782e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	f003 0304 	and.w	r3, r3, #4
 8007836:	2b00      	cmp	r3, #0
 8007838:	d020      	beq.n	800787c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f003 0304 	and.w	r3, r3, #4
 8007840:	2b00      	cmp	r3, #0
 8007842:	d01b      	beq.n	800787c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f06f 0204 	mvn.w	r2, #4
 800784c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2202      	movs	r2, #2
 8007852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	699b      	ldr	r3, [r3, #24]
 800785a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800785e:	2b00      	cmp	r3, #0
 8007860:	d003      	beq.n	800786a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 fa35 	bl	8007cd2 <HAL_TIM_IC_CaptureCallback>
 8007868:	e005      	b.n	8007876 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 fa27 	bl	8007cbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 fa38 	bl	8007ce6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	f003 0308 	and.w	r3, r3, #8
 8007882:	2b00      	cmp	r3, #0
 8007884:	d020      	beq.n	80078c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f003 0308 	and.w	r3, r3, #8
 800788c:	2b00      	cmp	r3, #0
 800788e:	d01b      	beq.n	80078c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f06f 0208 	mvn.w	r2, #8
 8007898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2204      	movs	r2, #4
 800789e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	69db      	ldr	r3, [r3, #28]
 80078a6:	f003 0303 	and.w	r3, r3, #3
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d003      	beq.n	80078b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 fa0f 	bl	8007cd2 <HAL_TIM_IC_CaptureCallback>
 80078b4:	e005      	b.n	80078c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 fa01 	bl	8007cbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 fa12 	bl	8007ce6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	f003 0310 	and.w	r3, r3, #16
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d020      	beq.n	8007914 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f003 0310 	and.w	r3, r3, #16
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d01b      	beq.n	8007914 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f06f 0210 	mvn.w	r2, #16
 80078e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2208      	movs	r2, #8
 80078ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	69db      	ldr	r3, [r3, #28]
 80078f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d003      	beq.n	8007902 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 f9e9 	bl	8007cd2 <HAL_TIM_IC_CaptureCallback>
 8007900:	e005      	b.n	800790e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 f9db 	bl	8007cbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 f9ec 	bl	8007ce6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	f003 0301 	and.w	r3, r3, #1
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00c      	beq.n	8007938 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f003 0301 	and.w	r3, r3, #1
 8007924:	2b00      	cmp	r3, #0
 8007926:	d007      	beq.n	8007938 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f06f 0201 	mvn.w	r2, #1
 8007930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f7fb fd54 	bl	80033e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800793e:	2b00      	cmp	r3, #0
 8007940:	d00c      	beq.n	800795c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007948:	2b00      	cmp	r3, #0
 800794a:	d007      	beq.n	800795c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 fdce 	bl	80084f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007962:	2b00      	cmp	r3, #0
 8007964:	d00c      	beq.n	8007980 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800796c:	2b00      	cmp	r3, #0
 800796e:	d007      	beq.n	8007980 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 f9bd 	bl	8007cfa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	f003 0320 	and.w	r3, r3, #32
 8007986:	2b00      	cmp	r3, #0
 8007988:	d00c      	beq.n	80079a4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f003 0320 	and.w	r3, r3, #32
 8007990:	2b00      	cmp	r3, #0
 8007992:	d007      	beq.n	80079a4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f06f 0220 	mvn.w	r2, #32
 800799c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 fda0 	bl	80084e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80079a4:	bf00      	nop
 80079a6:	3710      	adds	r7, #16
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b086      	sub	sp, #24
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	60b9      	str	r1, [r7, #8]
 80079b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079b8:	2300      	movs	r3, #0
 80079ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d101      	bne.n	80079ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80079c6:	2302      	movs	r3, #2
 80079c8:	e0ae      	b.n	8007b28 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2201      	movs	r2, #1
 80079ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2b0c      	cmp	r3, #12
 80079d6:	f200 809f 	bhi.w	8007b18 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80079da:	a201      	add	r2, pc, #4	@ (adr r2, 80079e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80079dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e0:	08007a15 	.word	0x08007a15
 80079e4:	08007b19 	.word	0x08007b19
 80079e8:	08007b19 	.word	0x08007b19
 80079ec:	08007b19 	.word	0x08007b19
 80079f0:	08007a55 	.word	0x08007a55
 80079f4:	08007b19 	.word	0x08007b19
 80079f8:	08007b19 	.word	0x08007b19
 80079fc:	08007b19 	.word	0x08007b19
 8007a00:	08007a97 	.word	0x08007a97
 8007a04:	08007b19 	.word	0x08007b19
 8007a08:	08007b19 	.word	0x08007b19
 8007a0c:	08007b19 	.word	0x08007b19
 8007a10:	08007ad7 	.word	0x08007ad7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	68b9      	ldr	r1, [r7, #8]
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f000 fa24 	bl	8007e68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	699a      	ldr	r2, [r3, #24]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f042 0208 	orr.w	r2, r2, #8
 8007a2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	699a      	ldr	r2, [r3, #24]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f022 0204 	bic.w	r2, r2, #4
 8007a3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	6999      	ldr	r1, [r3, #24]
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	691a      	ldr	r2, [r3, #16]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	430a      	orrs	r2, r1
 8007a50:	619a      	str	r2, [r3, #24]
      break;
 8007a52:	e064      	b.n	8007b1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	68b9      	ldr	r1, [r7, #8]
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f000 fa74 	bl	8007f48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	699a      	ldr	r2, [r3, #24]
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	699a      	ldr	r2, [r3, #24]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	6999      	ldr	r1, [r3, #24]
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	691b      	ldr	r3, [r3, #16]
 8007a8a:	021a      	lsls	r2, r3, #8
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	430a      	orrs	r2, r1
 8007a92:	619a      	str	r2, [r3, #24]
      break;
 8007a94:	e043      	b.n	8007b1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	68b9      	ldr	r1, [r7, #8]
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f000 fac9 	bl	8008034 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	69da      	ldr	r2, [r3, #28]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f042 0208 	orr.w	r2, r2, #8
 8007ab0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	69da      	ldr	r2, [r3, #28]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f022 0204 	bic.w	r2, r2, #4
 8007ac0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	69d9      	ldr	r1, [r3, #28]
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	691a      	ldr	r2, [r3, #16]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	430a      	orrs	r2, r1
 8007ad2:	61da      	str	r2, [r3, #28]
      break;
 8007ad4:	e023      	b.n	8007b1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	68b9      	ldr	r1, [r7, #8]
 8007adc:	4618      	mov	r0, r3
 8007ade:	f000 fb1d 	bl	800811c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	69da      	ldr	r2, [r3, #28]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007af0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	69da      	ldr	r2, [r3, #28]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007b00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	69d9      	ldr	r1, [r3, #28]
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	691b      	ldr	r3, [r3, #16]
 8007b0c:	021a      	lsls	r2, r3, #8
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	430a      	orrs	r2, r1
 8007b14:	61da      	str	r2, [r3, #28]
      break;
 8007b16:	e002      	b.n	8007b1e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	75fb      	strb	r3, [r7, #23]
      break;
 8007b1c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2200      	movs	r2, #0
 8007b22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007b26:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3718      	adds	r7, #24
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b084      	sub	sp, #16
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d101      	bne.n	8007b4c <HAL_TIM_ConfigClockSource+0x1c>
 8007b48:	2302      	movs	r3, #2
 8007b4a:	e0b4      	b.n	8007cb6 <HAL_TIM_ConfigClockSource+0x186>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2202      	movs	r2, #2
 8007b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007b6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007b72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	68ba      	ldr	r2, [r7, #8]
 8007b7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b84:	d03e      	beq.n	8007c04 <HAL_TIM_ConfigClockSource+0xd4>
 8007b86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b8a:	f200 8087 	bhi.w	8007c9c <HAL_TIM_ConfigClockSource+0x16c>
 8007b8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b92:	f000 8086 	beq.w	8007ca2 <HAL_TIM_ConfigClockSource+0x172>
 8007b96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b9a:	d87f      	bhi.n	8007c9c <HAL_TIM_ConfigClockSource+0x16c>
 8007b9c:	2b70      	cmp	r3, #112	@ 0x70
 8007b9e:	d01a      	beq.n	8007bd6 <HAL_TIM_ConfigClockSource+0xa6>
 8007ba0:	2b70      	cmp	r3, #112	@ 0x70
 8007ba2:	d87b      	bhi.n	8007c9c <HAL_TIM_ConfigClockSource+0x16c>
 8007ba4:	2b60      	cmp	r3, #96	@ 0x60
 8007ba6:	d050      	beq.n	8007c4a <HAL_TIM_ConfigClockSource+0x11a>
 8007ba8:	2b60      	cmp	r3, #96	@ 0x60
 8007baa:	d877      	bhi.n	8007c9c <HAL_TIM_ConfigClockSource+0x16c>
 8007bac:	2b50      	cmp	r3, #80	@ 0x50
 8007bae:	d03c      	beq.n	8007c2a <HAL_TIM_ConfigClockSource+0xfa>
 8007bb0:	2b50      	cmp	r3, #80	@ 0x50
 8007bb2:	d873      	bhi.n	8007c9c <HAL_TIM_ConfigClockSource+0x16c>
 8007bb4:	2b40      	cmp	r3, #64	@ 0x40
 8007bb6:	d058      	beq.n	8007c6a <HAL_TIM_ConfigClockSource+0x13a>
 8007bb8:	2b40      	cmp	r3, #64	@ 0x40
 8007bba:	d86f      	bhi.n	8007c9c <HAL_TIM_ConfigClockSource+0x16c>
 8007bbc:	2b30      	cmp	r3, #48	@ 0x30
 8007bbe:	d064      	beq.n	8007c8a <HAL_TIM_ConfigClockSource+0x15a>
 8007bc0:	2b30      	cmp	r3, #48	@ 0x30
 8007bc2:	d86b      	bhi.n	8007c9c <HAL_TIM_ConfigClockSource+0x16c>
 8007bc4:	2b20      	cmp	r3, #32
 8007bc6:	d060      	beq.n	8007c8a <HAL_TIM_ConfigClockSource+0x15a>
 8007bc8:	2b20      	cmp	r3, #32
 8007bca:	d867      	bhi.n	8007c9c <HAL_TIM_ConfigClockSource+0x16c>
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d05c      	beq.n	8007c8a <HAL_TIM_ConfigClockSource+0x15a>
 8007bd0:	2b10      	cmp	r3, #16
 8007bd2:	d05a      	beq.n	8007c8a <HAL_TIM_ConfigClockSource+0x15a>
 8007bd4:	e062      	b.n	8007c9c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007be6:	f000 fb69 	bl	80082bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007bf8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	68ba      	ldr	r2, [r7, #8]
 8007c00:	609a      	str	r2, [r3, #8]
      break;
 8007c02:	e04f      	b.n	8007ca4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007c14:	f000 fb52 	bl	80082bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	689a      	ldr	r2, [r3, #8]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007c26:	609a      	str	r2, [r3, #8]
      break;
 8007c28:	e03c      	b.n	8007ca4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c36:	461a      	mov	r2, r3
 8007c38:	f000 fac6 	bl	80081c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	2150      	movs	r1, #80	@ 0x50
 8007c42:	4618      	mov	r0, r3
 8007c44:	f000 fb1f 	bl	8008286 <TIM_ITRx_SetConfig>
      break;
 8007c48:	e02c      	b.n	8007ca4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c56:	461a      	mov	r2, r3
 8007c58:	f000 fae5 	bl	8008226 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	2160      	movs	r1, #96	@ 0x60
 8007c62:	4618      	mov	r0, r3
 8007c64:	f000 fb0f 	bl	8008286 <TIM_ITRx_SetConfig>
      break;
 8007c68:	e01c      	b.n	8007ca4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c76:	461a      	mov	r2, r3
 8007c78:	f000 faa6 	bl	80081c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	2140      	movs	r1, #64	@ 0x40
 8007c82:	4618      	mov	r0, r3
 8007c84:	f000 faff 	bl	8008286 <TIM_ITRx_SetConfig>
      break;
 8007c88:	e00c      	b.n	8007ca4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4619      	mov	r1, r3
 8007c94:	4610      	mov	r0, r2
 8007c96:	f000 faf6 	bl	8008286 <TIM_ITRx_SetConfig>
      break;
 8007c9a:	e003      	b.n	8007ca4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	73fb      	strb	r3, [r7, #15]
      break;
 8007ca0:	e000      	b.n	8007ca4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007ca2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3710      	adds	r7, #16
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}

08007cbe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007cbe:	b480      	push	{r7}
 8007cc0:	b083      	sub	sp, #12
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007cc6:	bf00      	nop
 8007cc8:	370c      	adds	r7, #12
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr

08007cd2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007cd2:	b480      	push	{r7}
 8007cd4:	b083      	sub	sp, #12
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007cda:	bf00      	nop
 8007cdc:	370c      	adds	r7, #12
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr

08007ce6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ce6:	b480      	push	{r7}
 8007ce8:	b083      	sub	sp, #12
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007cee:	bf00      	nop
 8007cf0:	370c      	adds	r7, #12
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr

08007cfa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007cfa:	b480      	push	{r7}
 8007cfc:	b083      	sub	sp, #12
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d02:	bf00      	nop
 8007d04:	370c      	adds	r7, #12
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr
	...

08007d10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b085      	sub	sp, #20
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	4a46      	ldr	r2, [pc, #280]	@ (8007e3c <TIM_Base_SetConfig+0x12c>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d013      	beq.n	8007d50 <TIM_Base_SetConfig+0x40>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d2e:	d00f      	beq.n	8007d50 <TIM_Base_SetConfig+0x40>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	4a43      	ldr	r2, [pc, #268]	@ (8007e40 <TIM_Base_SetConfig+0x130>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d00b      	beq.n	8007d50 <TIM_Base_SetConfig+0x40>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	4a42      	ldr	r2, [pc, #264]	@ (8007e44 <TIM_Base_SetConfig+0x134>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d007      	beq.n	8007d50 <TIM_Base_SetConfig+0x40>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	4a41      	ldr	r2, [pc, #260]	@ (8007e48 <TIM_Base_SetConfig+0x138>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d003      	beq.n	8007d50 <TIM_Base_SetConfig+0x40>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	4a40      	ldr	r2, [pc, #256]	@ (8007e4c <TIM_Base_SetConfig+0x13c>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d108      	bne.n	8007d62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	68fa      	ldr	r2, [r7, #12]
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4a35      	ldr	r2, [pc, #212]	@ (8007e3c <TIM_Base_SetConfig+0x12c>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d02b      	beq.n	8007dc2 <TIM_Base_SetConfig+0xb2>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d70:	d027      	beq.n	8007dc2 <TIM_Base_SetConfig+0xb2>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	4a32      	ldr	r2, [pc, #200]	@ (8007e40 <TIM_Base_SetConfig+0x130>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d023      	beq.n	8007dc2 <TIM_Base_SetConfig+0xb2>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	4a31      	ldr	r2, [pc, #196]	@ (8007e44 <TIM_Base_SetConfig+0x134>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d01f      	beq.n	8007dc2 <TIM_Base_SetConfig+0xb2>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4a30      	ldr	r2, [pc, #192]	@ (8007e48 <TIM_Base_SetConfig+0x138>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d01b      	beq.n	8007dc2 <TIM_Base_SetConfig+0xb2>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4a2f      	ldr	r2, [pc, #188]	@ (8007e4c <TIM_Base_SetConfig+0x13c>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d017      	beq.n	8007dc2 <TIM_Base_SetConfig+0xb2>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	4a2e      	ldr	r2, [pc, #184]	@ (8007e50 <TIM_Base_SetConfig+0x140>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d013      	beq.n	8007dc2 <TIM_Base_SetConfig+0xb2>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4a2d      	ldr	r2, [pc, #180]	@ (8007e54 <TIM_Base_SetConfig+0x144>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d00f      	beq.n	8007dc2 <TIM_Base_SetConfig+0xb2>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4a2c      	ldr	r2, [pc, #176]	@ (8007e58 <TIM_Base_SetConfig+0x148>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d00b      	beq.n	8007dc2 <TIM_Base_SetConfig+0xb2>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4a2b      	ldr	r2, [pc, #172]	@ (8007e5c <TIM_Base_SetConfig+0x14c>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d007      	beq.n	8007dc2 <TIM_Base_SetConfig+0xb2>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4a2a      	ldr	r2, [pc, #168]	@ (8007e60 <TIM_Base_SetConfig+0x150>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d003      	beq.n	8007dc2 <TIM_Base_SetConfig+0xb2>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4a29      	ldr	r2, [pc, #164]	@ (8007e64 <TIM_Base_SetConfig+0x154>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d108      	bne.n	8007dd4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007dc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	68db      	ldr	r3, [r3, #12]
 8007dce:	68fa      	ldr	r2, [r7, #12]
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	695b      	ldr	r3, [r3, #20]
 8007dde:	4313      	orrs	r3, r2
 8007de0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	68fa      	ldr	r2, [r7, #12]
 8007de6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	689a      	ldr	r2, [r3, #8]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	4a10      	ldr	r2, [pc, #64]	@ (8007e3c <TIM_Base_SetConfig+0x12c>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d003      	beq.n	8007e08 <TIM_Base_SetConfig+0xf8>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	4a12      	ldr	r2, [pc, #72]	@ (8007e4c <TIM_Base_SetConfig+0x13c>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d103      	bne.n	8007e10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	691a      	ldr	r2, [r3, #16]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2201      	movs	r2, #1
 8007e14:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	691b      	ldr	r3, [r3, #16]
 8007e1a:	f003 0301 	and.w	r3, r3, #1
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d105      	bne.n	8007e2e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	691b      	ldr	r3, [r3, #16]
 8007e26:	f023 0201 	bic.w	r2, r3, #1
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	611a      	str	r2, [r3, #16]
  }
}
 8007e2e:	bf00      	nop
 8007e30:	3714      	adds	r7, #20
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr
 8007e3a:	bf00      	nop
 8007e3c:	40010000 	.word	0x40010000
 8007e40:	40000400 	.word	0x40000400
 8007e44:	40000800 	.word	0x40000800
 8007e48:	40000c00 	.word	0x40000c00
 8007e4c:	40010400 	.word	0x40010400
 8007e50:	40014000 	.word	0x40014000
 8007e54:	40014400 	.word	0x40014400
 8007e58:	40014800 	.word	0x40014800
 8007e5c:	40001800 	.word	0x40001800
 8007e60:	40001c00 	.word	0x40001c00
 8007e64:	40002000 	.word	0x40002000

08007e68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b087      	sub	sp, #28
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6a1b      	ldr	r3, [r3, #32]
 8007e76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6a1b      	ldr	r3, [r3, #32]
 8007e7c:	f023 0201 	bic.w	r2, r3, #1
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	699b      	ldr	r3, [r3, #24]
 8007e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f023 0303 	bic.w	r3, r3, #3
 8007e9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	68fa      	ldr	r2, [r7, #12]
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	f023 0302 	bic.w	r3, r3, #2
 8007eb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	697a      	ldr	r2, [r7, #20]
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	4a20      	ldr	r2, [pc, #128]	@ (8007f40 <TIM_OC1_SetConfig+0xd8>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d003      	beq.n	8007ecc <TIM_OC1_SetConfig+0x64>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	4a1f      	ldr	r2, [pc, #124]	@ (8007f44 <TIM_OC1_SetConfig+0xdc>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d10c      	bne.n	8007ee6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	f023 0308 	bic.w	r3, r3, #8
 8007ed2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	697a      	ldr	r2, [r7, #20]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	f023 0304 	bic.w	r3, r3, #4
 8007ee4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4a15      	ldr	r2, [pc, #84]	@ (8007f40 <TIM_OC1_SetConfig+0xd8>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d003      	beq.n	8007ef6 <TIM_OC1_SetConfig+0x8e>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	4a14      	ldr	r2, [pc, #80]	@ (8007f44 <TIM_OC1_SetConfig+0xdc>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d111      	bne.n	8007f1a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007efc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007f04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	695b      	ldr	r3, [r3, #20]
 8007f0a:	693a      	ldr	r2, [r7, #16]
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	699b      	ldr	r3, [r3, #24]
 8007f14:	693a      	ldr	r2, [r7, #16]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	693a      	ldr	r2, [r7, #16]
 8007f1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	68fa      	ldr	r2, [r7, #12]
 8007f24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	685a      	ldr	r2, [r3, #4]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	697a      	ldr	r2, [r7, #20]
 8007f32:	621a      	str	r2, [r3, #32]
}
 8007f34:	bf00      	nop
 8007f36:	371c      	adds	r7, #28
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr
 8007f40:	40010000 	.word	0x40010000
 8007f44:	40010400 	.word	0x40010400

08007f48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b087      	sub	sp, #28
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6a1b      	ldr	r3, [r3, #32]
 8007f56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6a1b      	ldr	r3, [r3, #32]
 8007f5c:	f023 0210 	bic.w	r2, r3, #16
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	699b      	ldr	r3, [r3, #24]
 8007f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	021b      	lsls	r3, r3, #8
 8007f86:	68fa      	ldr	r2, [r7, #12]
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	f023 0320 	bic.w	r3, r3, #32
 8007f92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	689b      	ldr	r3, [r3, #8]
 8007f98:	011b      	lsls	r3, r3, #4
 8007f9a:	697a      	ldr	r2, [r7, #20]
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	4a22      	ldr	r2, [pc, #136]	@ (800802c <TIM_OC2_SetConfig+0xe4>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d003      	beq.n	8007fb0 <TIM_OC2_SetConfig+0x68>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	4a21      	ldr	r2, [pc, #132]	@ (8008030 <TIM_OC2_SetConfig+0xe8>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d10d      	bne.n	8007fcc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007fb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	68db      	ldr	r3, [r3, #12]
 8007fbc:	011b      	lsls	r3, r3, #4
 8007fbe:	697a      	ldr	r2, [r7, #20]
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007fca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	4a17      	ldr	r2, [pc, #92]	@ (800802c <TIM_OC2_SetConfig+0xe4>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d003      	beq.n	8007fdc <TIM_OC2_SetConfig+0x94>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	4a16      	ldr	r2, [pc, #88]	@ (8008030 <TIM_OC2_SetConfig+0xe8>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d113      	bne.n	8008004 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007fe2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007fea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	695b      	ldr	r3, [r3, #20]
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	693a      	ldr	r2, [r7, #16]
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	699b      	ldr	r3, [r3, #24]
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	693a      	ldr	r2, [r7, #16]
 8008000:	4313      	orrs	r3, r2
 8008002:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	693a      	ldr	r2, [r7, #16]
 8008008:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	68fa      	ldr	r2, [r7, #12]
 800800e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	685a      	ldr	r2, [r3, #4]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	697a      	ldr	r2, [r7, #20]
 800801c:	621a      	str	r2, [r3, #32]
}
 800801e:	bf00      	nop
 8008020:	371c      	adds	r7, #28
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr
 800802a:	bf00      	nop
 800802c:	40010000 	.word	0x40010000
 8008030:	40010400 	.word	0x40010400

08008034 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008034:	b480      	push	{r7}
 8008036:	b087      	sub	sp, #28
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6a1b      	ldr	r3, [r3, #32]
 8008042:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6a1b      	ldr	r3, [r3, #32]
 8008048:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	69db      	ldr	r3, [r3, #28]
 800805a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008062:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f023 0303 	bic.w	r3, r3, #3
 800806a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	68fa      	ldr	r2, [r7, #12]
 8008072:	4313      	orrs	r3, r2
 8008074:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800807c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	021b      	lsls	r3, r3, #8
 8008084:	697a      	ldr	r2, [r7, #20]
 8008086:	4313      	orrs	r3, r2
 8008088:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	4a21      	ldr	r2, [pc, #132]	@ (8008114 <TIM_OC3_SetConfig+0xe0>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d003      	beq.n	800809a <TIM_OC3_SetConfig+0x66>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	4a20      	ldr	r2, [pc, #128]	@ (8008118 <TIM_OC3_SetConfig+0xe4>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d10d      	bne.n	80080b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80080a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	68db      	ldr	r3, [r3, #12]
 80080a6:	021b      	lsls	r3, r3, #8
 80080a8:	697a      	ldr	r2, [r7, #20]
 80080aa:	4313      	orrs	r3, r2
 80080ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80080b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	4a16      	ldr	r2, [pc, #88]	@ (8008114 <TIM_OC3_SetConfig+0xe0>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d003      	beq.n	80080c6 <TIM_OC3_SetConfig+0x92>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	4a15      	ldr	r2, [pc, #84]	@ (8008118 <TIM_OC3_SetConfig+0xe4>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d113      	bne.n	80080ee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80080cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80080d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	695b      	ldr	r3, [r3, #20]
 80080da:	011b      	lsls	r3, r3, #4
 80080dc:	693a      	ldr	r2, [r7, #16]
 80080de:	4313      	orrs	r3, r2
 80080e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	699b      	ldr	r3, [r3, #24]
 80080e6:	011b      	lsls	r3, r3, #4
 80080e8:	693a      	ldr	r2, [r7, #16]
 80080ea:	4313      	orrs	r3, r2
 80080ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	693a      	ldr	r2, [r7, #16]
 80080f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	68fa      	ldr	r2, [r7, #12]
 80080f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	685a      	ldr	r2, [r3, #4]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	697a      	ldr	r2, [r7, #20]
 8008106:	621a      	str	r2, [r3, #32]
}
 8008108:	bf00      	nop
 800810a:	371c      	adds	r7, #28
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr
 8008114:	40010000 	.word	0x40010000
 8008118:	40010400 	.word	0x40010400

0800811c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800811c:	b480      	push	{r7}
 800811e:	b087      	sub	sp, #28
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6a1b      	ldr	r3, [r3, #32]
 800812a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6a1b      	ldr	r3, [r3, #32]
 8008130:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	69db      	ldr	r3, [r3, #28]
 8008142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800814a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008152:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	021b      	lsls	r3, r3, #8
 800815a:	68fa      	ldr	r2, [r7, #12]
 800815c:	4313      	orrs	r3, r2
 800815e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008166:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	031b      	lsls	r3, r3, #12
 800816e:	693a      	ldr	r2, [r7, #16]
 8008170:	4313      	orrs	r3, r2
 8008172:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	4a12      	ldr	r2, [pc, #72]	@ (80081c0 <TIM_OC4_SetConfig+0xa4>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d003      	beq.n	8008184 <TIM_OC4_SetConfig+0x68>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	4a11      	ldr	r2, [pc, #68]	@ (80081c4 <TIM_OC4_SetConfig+0xa8>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d109      	bne.n	8008198 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800818a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	695b      	ldr	r3, [r3, #20]
 8008190:	019b      	lsls	r3, r3, #6
 8008192:	697a      	ldr	r2, [r7, #20]
 8008194:	4313      	orrs	r3, r2
 8008196:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	697a      	ldr	r2, [r7, #20]
 800819c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	68fa      	ldr	r2, [r7, #12]
 80081a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	685a      	ldr	r2, [r3, #4]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	693a      	ldr	r2, [r7, #16]
 80081b0:	621a      	str	r2, [r3, #32]
}
 80081b2:	bf00      	nop
 80081b4:	371c      	adds	r7, #28
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr
 80081be:	bf00      	nop
 80081c0:	40010000 	.word	0x40010000
 80081c4:	40010400 	.word	0x40010400

080081c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b087      	sub	sp, #28
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6a1b      	ldr	r3, [r3, #32]
 80081d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	6a1b      	ldr	r3, [r3, #32]
 80081de:	f023 0201 	bic.w	r2, r3, #1
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	699b      	ldr	r3, [r3, #24]
 80081ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80081f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	011b      	lsls	r3, r3, #4
 80081f8:	693a      	ldr	r2, [r7, #16]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	f023 030a 	bic.w	r3, r3, #10
 8008204:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008206:	697a      	ldr	r2, [r7, #20]
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	4313      	orrs	r3, r2
 800820c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	693a      	ldr	r2, [r7, #16]
 8008212:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	697a      	ldr	r2, [r7, #20]
 8008218:	621a      	str	r2, [r3, #32]
}
 800821a:	bf00      	nop
 800821c:	371c      	adds	r7, #28
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr

08008226 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008226:	b480      	push	{r7}
 8008228:	b087      	sub	sp, #28
 800822a:	af00      	add	r7, sp, #0
 800822c:	60f8      	str	r0, [r7, #12]
 800822e:	60b9      	str	r1, [r7, #8]
 8008230:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6a1b      	ldr	r3, [r3, #32]
 8008236:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	6a1b      	ldr	r3, [r3, #32]
 800823c:	f023 0210 	bic.w	r2, r3, #16
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	699b      	ldr	r3, [r3, #24]
 8008248:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008250:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	031b      	lsls	r3, r3, #12
 8008256:	693a      	ldr	r2, [r7, #16]
 8008258:	4313      	orrs	r3, r2
 800825a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008262:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	011b      	lsls	r3, r3, #4
 8008268:	697a      	ldr	r2, [r7, #20]
 800826a:	4313      	orrs	r3, r2
 800826c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	693a      	ldr	r2, [r7, #16]
 8008272:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	697a      	ldr	r2, [r7, #20]
 8008278:	621a      	str	r2, [r3, #32]
}
 800827a:	bf00      	nop
 800827c:	371c      	adds	r7, #28
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr

08008286 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008286:	b480      	push	{r7}
 8008288:	b085      	sub	sp, #20
 800828a:	af00      	add	r7, sp, #0
 800828c:	6078      	str	r0, [r7, #4]
 800828e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800829c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800829e:	683a      	ldr	r2, [r7, #0]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	f043 0307 	orr.w	r3, r3, #7
 80082a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	68fa      	ldr	r2, [r7, #12]
 80082ae:	609a      	str	r2, [r3, #8]
}
 80082b0:	bf00      	nop
 80082b2:	3714      	adds	r7, #20
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr

080082bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80082bc:	b480      	push	{r7}
 80082be:	b087      	sub	sp, #28
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	60f8      	str	r0, [r7, #12]
 80082c4:	60b9      	str	r1, [r7, #8]
 80082c6:	607a      	str	r2, [r7, #4]
 80082c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80082d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	021a      	lsls	r2, r3, #8
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	431a      	orrs	r2, r3
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	4313      	orrs	r3, r2
 80082e4:	697a      	ldr	r2, [r7, #20]
 80082e6:	4313      	orrs	r3, r2
 80082e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	697a      	ldr	r2, [r7, #20]
 80082ee:	609a      	str	r2, [r3, #8]
}
 80082f0:	bf00      	nop
 80082f2:	371c      	adds	r7, #28
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b087      	sub	sp, #28
 8008300:	af00      	add	r7, sp, #0
 8008302:	60f8      	str	r0, [r7, #12]
 8008304:	60b9      	str	r1, [r7, #8]
 8008306:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	f003 031f 	and.w	r3, r3, #31
 800830e:	2201      	movs	r2, #1
 8008310:	fa02 f303 	lsl.w	r3, r2, r3
 8008314:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	6a1a      	ldr	r2, [r3, #32]
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	43db      	mvns	r3, r3
 800831e:	401a      	ands	r2, r3
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	6a1a      	ldr	r2, [r3, #32]
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	f003 031f 	and.w	r3, r3, #31
 800832e:	6879      	ldr	r1, [r7, #4]
 8008330:	fa01 f303 	lsl.w	r3, r1, r3
 8008334:	431a      	orrs	r2, r3
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	621a      	str	r2, [r3, #32]
}
 800833a:	bf00      	nop
 800833c:	371c      	adds	r7, #28
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr
	...

08008348 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008348:	b480      	push	{r7}
 800834a:	b085      	sub	sp, #20
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008358:	2b01      	cmp	r3, #1
 800835a:	d101      	bne.n	8008360 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800835c:	2302      	movs	r3, #2
 800835e:	e05a      	b.n	8008416 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2201      	movs	r2, #1
 8008364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2202      	movs	r2, #2
 800836c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	689b      	ldr	r3, [r3, #8]
 800837e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008386:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	68fa      	ldr	r2, [r7, #12]
 800838e:	4313      	orrs	r3, r2
 8008390:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	68fa      	ldr	r2, [r7, #12]
 8008398:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4a21      	ldr	r2, [pc, #132]	@ (8008424 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d022      	beq.n	80083ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083ac:	d01d      	beq.n	80083ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a1d      	ldr	r2, [pc, #116]	@ (8008428 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d018      	beq.n	80083ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a1b      	ldr	r2, [pc, #108]	@ (800842c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d013      	beq.n	80083ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a1a      	ldr	r2, [pc, #104]	@ (8008430 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d00e      	beq.n	80083ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a18      	ldr	r2, [pc, #96]	@ (8008434 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d009      	beq.n	80083ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a17      	ldr	r2, [pc, #92]	@ (8008438 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d004      	beq.n	80083ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a15      	ldr	r2, [pc, #84]	@ (800843c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d10c      	bne.n	8008404 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80083f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	68ba      	ldr	r2, [r7, #8]
 80083f8:	4313      	orrs	r3, r2
 80083fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	68ba      	ldr	r2, [r7, #8]
 8008402:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2201      	movs	r2, #1
 8008408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008414:	2300      	movs	r3, #0
}
 8008416:	4618      	mov	r0, r3
 8008418:	3714      	adds	r7, #20
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr
 8008422:	bf00      	nop
 8008424:	40010000 	.word	0x40010000
 8008428:	40000400 	.word	0x40000400
 800842c:	40000800 	.word	0x40000800
 8008430:	40000c00 	.word	0x40000c00
 8008434:	40010400 	.word	0x40010400
 8008438:	40014000 	.word	0x40014000
 800843c:	40001800 	.word	0x40001800

08008440 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008440:	b480      	push	{r7}
 8008442:	b085      	sub	sp, #20
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800844a:	2300      	movs	r3, #0
 800844c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008454:	2b01      	cmp	r3, #1
 8008456:	d101      	bne.n	800845c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008458:	2302      	movs	r3, #2
 800845a:	e03d      	b.n	80084d8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2201      	movs	r2, #1
 8008460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	68db      	ldr	r3, [r3, #12]
 800846e:	4313      	orrs	r3, r2
 8008470:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	689b      	ldr	r3, [r3, #8]
 800847c:	4313      	orrs	r3, r2
 800847e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	4313      	orrs	r3, r2
 800848c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4313      	orrs	r3, r2
 800849a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	691b      	ldr	r3, [r3, #16]
 80084a6:	4313      	orrs	r3, r2
 80084a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	695b      	ldr	r3, [r3, #20]
 80084b4:	4313      	orrs	r3, r2
 80084b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	69db      	ldr	r3, [r3, #28]
 80084c2:	4313      	orrs	r3, r2
 80084c4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	68fa      	ldr	r2, [r7, #12]
 80084cc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2200      	movs	r2, #0
 80084d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3714      	adds	r7, #20
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr

080084e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b083      	sub	sp, #12
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80084ec:	bf00      	nop
 80084ee:	370c      	adds	r7, #12
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008500:	bf00      	nop
 8008502:	370c      	adds	r7, #12
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr

0800850c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b082      	sub	sp, #8
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d101      	bne.n	800851e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800851a:	2301      	movs	r3, #1
 800851c:	e042      	b.n	80085a4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008524:	b2db      	uxtb	r3, r3
 8008526:	2b00      	cmp	r3, #0
 8008528:	d106      	bne.n	8008538 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2200      	movs	r2, #0
 800852e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f7fb f9be 	bl	80038b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2224      	movs	r2, #36	@ 0x24
 800853c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	68da      	ldr	r2, [r3, #12]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800854e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 fdc1 	bl	80090d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	691a      	ldr	r2, [r3, #16]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008564:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	695a      	ldr	r2, [r3, #20]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008574:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	68da      	ldr	r2, [r3, #12]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008584:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2200      	movs	r2, #0
 800858a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2220      	movs	r2, #32
 8008590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2220      	movs	r2, #32
 8008598:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2200      	movs	r2, #0
 80085a0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80085a2:	2300      	movs	r3, #0
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3708      	adds	r7, #8
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b08c      	sub	sp, #48	@ 0x30
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	60b9      	str	r1, [r7, #8]
 80085b6:	4613      	mov	r3, r2
 80085b8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80085c0:	b2db      	uxtb	r3, r3
 80085c2:	2b20      	cmp	r3, #32
 80085c4:	d156      	bne.n	8008674 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d002      	beq.n	80085d2 <HAL_UART_Transmit_DMA+0x26>
 80085cc:	88fb      	ldrh	r3, [r7, #6]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d101      	bne.n	80085d6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80085d2:	2301      	movs	r3, #1
 80085d4:	e04f      	b.n	8008676 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80085d6:	68ba      	ldr	r2, [r7, #8]
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	88fa      	ldrh	r2, [r7, #6]
 80085e0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	88fa      	ldrh	r2, [r7, #6]
 80085e6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2200      	movs	r2, #0
 80085ec:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2221      	movs	r2, #33	@ 0x21
 80085f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085fa:	4a21      	ldr	r2, [pc, #132]	@ (8008680 <HAL_UART_Transmit_DMA+0xd4>)
 80085fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008602:	4a20      	ldr	r2, [pc, #128]	@ (8008684 <HAL_UART_Transmit_DMA+0xd8>)
 8008604:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800860a:	4a1f      	ldr	r2, [pc, #124]	@ (8008688 <HAL_UART_Transmit_DMA+0xdc>)
 800860c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008612:	2200      	movs	r2, #0
 8008614:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008616:	f107 0308 	add.w	r3, r7, #8
 800861a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8008620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008622:	6819      	ldr	r1, [r3, #0]
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	3304      	adds	r3, #4
 800862a:	461a      	mov	r2, r3
 800862c:	88fb      	ldrh	r3, [r7, #6]
 800862e:	f7fc fde5 	bl	80051fc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800863a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	3314      	adds	r3, #20
 8008642:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008644:	69bb      	ldr	r3, [r7, #24]
 8008646:	e853 3f00 	ldrex	r3, [r3]
 800864a:	617b      	str	r3, [r7, #20]
   return(result);
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008652:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	3314      	adds	r3, #20
 800865a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800865c:	627a      	str	r2, [r7, #36]	@ 0x24
 800865e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008660:	6a39      	ldr	r1, [r7, #32]
 8008662:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008664:	e841 2300 	strex	r3, r2, [r1]
 8008668:	61fb      	str	r3, [r7, #28]
   return(result);
 800866a:	69fb      	ldr	r3, [r7, #28]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d1e5      	bne.n	800863c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8008670:	2300      	movs	r3, #0
 8008672:	e000      	b.n	8008676 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8008674:	2302      	movs	r3, #2
  }
}
 8008676:	4618      	mov	r0, r3
 8008678:	3730      	adds	r7, #48	@ 0x30
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
 800867e:	bf00      	nop
 8008680:	08008c05 	.word	0x08008c05
 8008684:	08008c9f 	.word	0x08008c9f
 8008688:	08008cbb 	.word	0x08008cbb

0800868c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b0ba      	sub	sp, #232	@ 0xe8
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	68db      	ldr	r3, [r3, #12]
 80086a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	695b      	ldr	r3, [r3, #20]
 80086ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80086b2:	2300      	movs	r3, #0
 80086b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80086b8:	2300      	movs	r3, #0
 80086ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80086be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086c2:	f003 030f 	and.w	r3, r3, #15
 80086c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80086ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d10f      	bne.n	80086f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80086d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086d6:	f003 0320 	and.w	r3, r3, #32
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d009      	beq.n	80086f2 <HAL_UART_IRQHandler+0x66>
 80086de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086e2:	f003 0320 	and.w	r3, r3, #32
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d003      	beq.n	80086f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 fc36 	bl	8008f5c <UART_Receive_IT>
      return;
 80086f0:	e25b      	b.n	8008baa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80086f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	f000 80de 	beq.w	80088b8 <HAL_UART_IRQHandler+0x22c>
 80086fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008700:	f003 0301 	and.w	r3, r3, #1
 8008704:	2b00      	cmp	r3, #0
 8008706:	d106      	bne.n	8008716 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800870c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008710:	2b00      	cmp	r3, #0
 8008712:	f000 80d1 	beq.w	80088b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800871a:	f003 0301 	and.w	r3, r3, #1
 800871e:	2b00      	cmp	r3, #0
 8008720:	d00b      	beq.n	800873a <HAL_UART_IRQHandler+0xae>
 8008722:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800872a:	2b00      	cmp	r3, #0
 800872c:	d005      	beq.n	800873a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008732:	f043 0201 	orr.w	r2, r3, #1
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800873a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800873e:	f003 0304 	and.w	r3, r3, #4
 8008742:	2b00      	cmp	r3, #0
 8008744:	d00b      	beq.n	800875e <HAL_UART_IRQHandler+0xd2>
 8008746:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800874a:	f003 0301 	and.w	r3, r3, #1
 800874e:	2b00      	cmp	r3, #0
 8008750:	d005      	beq.n	800875e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008756:	f043 0202 	orr.w	r2, r3, #2
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800875e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008762:	f003 0302 	and.w	r3, r3, #2
 8008766:	2b00      	cmp	r3, #0
 8008768:	d00b      	beq.n	8008782 <HAL_UART_IRQHandler+0xf6>
 800876a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800876e:	f003 0301 	and.w	r3, r3, #1
 8008772:	2b00      	cmp	r3, #0
 8008774:	d005      	beq.n	8008782 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800877a:	f043 0204 	orr.w	r2, r3, #4
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008786:	f003 0308 	and.w	r3, r3, #8
 800878a:	2b00      	cmp	r3, #0
 800878c:	d011      	beq.n	80087b2 <HAL_UART_IRQHandler+0x126>
 800878e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008792:	f003 0320 	and.w	r3, r3, #32
 8008796:	2b00      	cmp	r3, #0
 8008798:	d105      	bne.n	80087a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800879a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800879e:	f003 0301 	and.w	r3, r3, #1
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d005      	beq.n	80087b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087aa:	f043 0208 	orr.w	r2, r3, #8
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	f000 81f2 	beq.w	8008ba0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80087bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087c0:	f003 0320 	and.w	r3, r3, #32
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d008      	beq.n	80087da <HAL_UART_IRQHandler+0x14e>
 80087c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087cc:	f003 0320 	and.w	r3, r3, #32
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d002      	beq.n	80087da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 fbc1 	bl	8008f5c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	695b      	ldr	r3, [r3, #20]
 80087e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087e4:	2b40      	cmp	r3, #64	@ 0x40
 80087e6:	bf0c      	ite	eq
 80087e8:	2301      	moveq	r3, #1
 80087ea:	2300      	movne	r3, #0
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087f6:	f003 0308 	and.w	r3, r3, #8
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d103      	bne.n	8008806 <HAL_UART_IRQHandler+0x17a>
 80087fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008802:	2b00      	cmp	r3, #0
 8008804:	d04f      	beq.n	80088a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 fac9 	bl	8008d9e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	695b      	ldr	r3, [r3, #20]
 8008812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008816:	2b40      	cmp	r3, #64	@ 0x40
 8008818:	d141      	bne.n	800889e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	3314      	adds	r3, #20
 8008820:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008824:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008828:	e853 3f00 	ldrex	r3, [r3]
 800882c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008830:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008834:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008838:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	3314      	adds	r3, #20
 8008842:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008846:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800884a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800884e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008852:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008856:	e841 2300 	strex	r3, r2, [r1]
 800885a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800885e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008862:	2b00      	cmp	r3, #0
 8008864:	d1d9      	bne.n	800881a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800886a:	2b00      	cmp	r3, #0
 800886c:	d013      	beq.n	8008896 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008872:	4a7e      	ldr	r2, [pc, #504]	@ (8008a6c <HAL_UART_IRQHandler+0x3e0>)
 8008874:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800887a:	4618      	mov	r0, r3
 800887c:	f7fc fd86 	bl	800538c <HAL_DMA_Abort_IT>
 8008880:	4603      	mov	r3, r0
 8008882:	2b00      	cmp	r3, #0
 8008884:	d016      	beq.n	80088b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800888a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008890:	4610      	mov	r0, r2
 8008892:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008894:	e00e      	b.n	80088b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 f99e 	bl	8008bd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800889c:	e00a      	b.n	80088b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 f99a 	bl	8008bd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088a4:	e006      	b.n	80088b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f000 f996 	bl	8008bd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2200      	movs	r2, #0
 80088b0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80088b2:	e175      	b.n	8008ba0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088b4:	bf00      	nop
    return;
 80088b6:	e173      	b.n	8008ba0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088bc:	2b01      	cmp	r3, #1
 80088be:	f040 814f 	bne.w	8008b60 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80088c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088c6:	f003 0310 	and.w	r3, r3, #16
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	f000 8148 	beq.w	8008b60 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80088d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088d4:	f003 0310 	and.w	r3, r3, #16
 80088d8:	2b00      	cmp	r3, #0
 80088da:	f000 8141 	beq.w	8008b60 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80088de:	2300      	movs	r3, #0
 80088e0:	60bb      	str	r3, [r7, #8]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	60bb      	str	r3, [r7, #8]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	60bb      	str	r3, [r7, #8]
 80088f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	695b      	ldr	r3, [r3, #20]
 80088fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088fe:	2b40      	cmp	r3, #64	@ 0x40
 8008900:	f040 80b6 	bne.w	8008a70 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008910:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008914:	2b00      	cmp	r3, #0
 8008916:	f000 8145 	beq.w	8008ba4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800891e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008922:	429a      	cmp	r2, r3
 8008924:	f080 813e 	bcs.w	8008ba4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800892e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008934:	69db      	ldr	r3, [r3, #28]
 8008936:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800893a:	f000 8088 	beq.w	8008a4e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	330c      	adds	r3, #12
 8008944:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008948:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800894c:	e853 3f00 	ldrex	r3, [r3]
 8008950:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008954:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008958:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800895c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	330c      	adds	r3, #12
 8008966:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800896a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800896e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008972:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008976:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800897a:	e841 2300 	strex	r3, r2, [r1]
 800897e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008982:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008986:	2b00      	cmp	r3, #0
 8008988:	d1d9      	bne.n	800893e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	3314      	adds	r3, #20
 8008990:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008992:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008994:	e853 3f00 	ldrex	r3, [r3]
 8008998:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800899a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800899c:	f023 0301 	bic.w	r3, r3, #1
 80089a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	3314      	adds	r3, #20
 80089aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80089ae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80089b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80089b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80089ba:	e841 2300 	strex	r3, r2, [r1]
 80089be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80089c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d1e1      	bne.n	800898a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	3314      	adds	r3, #20
 80089cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80089d0:	e853 3f00 	ldrex	r3, [r3]
 80089d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80089d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	3314      	adds	r3, #20
 80089e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80089ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80089ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80089f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80089f2:	e841 2300 	strex	r3, r2, [r1]
 80089f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80089f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d1e3      	bne.n	80089c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2220      	movs	r2, #32
 8008a02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	330c      	adds	r3, #12
 8008a12:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a16:	e853 3f00 	ldrex	r3, [r3]
 8008a1a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008a1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a1e:	f023 0310 	bic.w	r3, r3, #16
 8008a22:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	330c      	adds	r3, #12
 8008a2c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008a30:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008a32:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a34:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008a36:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008a38:	e841 2300 	strex	r3, r2, [r1]
 8008a3c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008a3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d1e3      	bne.n	8008a0c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f7fc fc2f 	bl	80052ac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2202      	movs	r2, #2
 8008a52:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	1ad3      	subs	r3, r2, r3
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	4619      	mov	r1, r3
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 f8c1 	bl	8008bec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008a6a:	e09b      	b.n	8008ba4 <HAL_UART_IRQHandler+0x518>
 8008a6c:	08008e65 	.word	0x08008e65
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	1ad3      	subs	r3, r2, r3
 8008a7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008a84:	b29b      	uxth	r3, r3
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	f000 808e 	beq.w	8008ba8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008a8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	f000 8089 	beq.w	8008ba8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	330c      	adds	r3, #12
 8008a9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aa0:	e853 3f00 	ldrex	r3, [r3]
 8008aa4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008aa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008aa8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008aac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	330c      	adds	r3, #12
 8008ab6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008aba:	647a      	str	r2, [r7, #68]	@ 0x44
 8008abc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008abe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008ac0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ac2:	e841 2300 	strex	r3, r2, [r1]
 8008ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008ac8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d1e3      	bne.n	8008a96 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	3314      	adds	r3, #20
 8008ad4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ad8:	e853 3f00 	ldrex	r3, [r3]
 8008adc:	623b      	str	r3, [r7, #32]
   return(result);
 8008ade:	6a3b      	ldr	r3, [r7, #32]
 8008ae0:	f023 0301 	bic.w	r3, r3, #1
 8008ae4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	3314      	adds	r3, #20
 8008aee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008af2:	633a      	str	r2, [r7, #48]	@ 0x30
 8008af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008af8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008afa:	e841 2300 	strex	r3, r2, [r1]
 8008afe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d1e3      	bne.n	8008ace <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2220      	movs	r2, #32
 8008b0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2200      	movs	r2, #0
 8008b12:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	330c      	adds	r3, #12
 8008b1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	e853 3f00 	ldrex	r3, [r3]
 8008b22:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f023 0310 	bic.w	r3, r3, #16
 8008b2a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	330c      	adds	r3, #12
 8008b34:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008b38:	61fa      	str	r2, [r7, #28]
 8008b3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b3c:	69b9      	ldr	r1, [r7, #24]
 8008b3e:	69fa      	ldr	r2, [r7, #28]
 8008b40:	e841 2300 	strex	r3, r2, [r1]
 8008b44:	617b      	str	r3, [r7, #20]
   return(result);
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d1e3      	bne.n	8008b14 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2202      	movs	r2, #2
 8008b50:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008b52:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008b56:	4619      	mov	r1, r3
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 f847 	bl	8008bec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008b5e:	e023      	b.n	8008ba8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d009      	beq.n	8008b80 <HAL_UART_IRQHandler+0x4f4>
 8008b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d003      	beq.n	8008b80 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f000 f987 	bl	8008e8c <UART_Transmit_IT>
    return;
 8008b7e:	e014      	b.n	8008baa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d00e      	beq.n	8008baa <HAL_UART_IRQHandler+0x51e>
 8008b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d008      	beq.n	8008baa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 f9c7 	bl	8008f2c <UART_EndTransmit_IT>
    return;
 8008b9e:	e004      	b.n	8008baa <HAL_UART_IRQHandler+0x51e>
    return;
 8008ba0:	bf00      	nop
 8008ba2:	e002      	b.n	8008baa <HAL_UART_IRQHandler+0x51e>
      return;
 8008ba4:	bf00      	nop
 8008ba6:	e000      	b.n	8008baa <HAL_UART_IRQHandler+0x51e>
      return;
 8008ba8:	bf00      	nop
  }
}
 8008baa:	37e8      	adds	r7, #232	@ 0xe8
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b083      	sub	sp, #12
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008bb8:	bf00      	nop
 8008bba:	370c      	adds	r7, #12
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr

08008bc4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b083      	sub	sp, #12
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008bcc:	bf00      	nop
 8008bce:	370c      	adds	r7, #12
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr

08008bd8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b083      	sub	sp, #12
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008be0:	bf00      	nop
 8008be2:	370c      	adds	r7, #12
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr

08008bec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b083      	sub	sp, #12
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	460b      	mov	r3, r1
 8008bf6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008bf8:	bf00      	nop
 8008bfa:	370c      	adds	r7, #12
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr

08008c04 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b090      	sub	sp, #64	@ 0x40
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d137      	bne.n	8008c90 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008c20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c22:	2200      	movs	r2, #0
 8008c24:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008c26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	3314      	adds	r3, #20
 8008c2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c30:	e853 3f00 	ldrex	r3, [r3]
 8008c34:	623b      	str	r3, [r7, #32]
   return(result);
 8008c36:	6a3b      	ldr	r3, [r7, #32]
 8008c38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c3c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008c3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	3314      	adds	r3, #20
 8008c44:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c46:	633a      	str	r2, [r7, #48]	@ 0x30
 8008c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c4e:	e841 2300 	strex	r3, r2, [r1]
 8008c52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d1e5      	bne.n	8008c26 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008c5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	330c      	adds	r3, #12
 8008c60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	e853 3f00 	ldrex	r3, [r3]
 8008c68:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c70:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	330c      	adds	r3, #12
 8008c78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008c7a:	61fa      	str	r2, [r7, #28]
 8008c7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c7e:	69b9      	ldr	r1, [r7, #24]
 8008c80:	69fa      	ldr	r2, [r7, #28]
 8008c82:	e841 2300 	strex	r3, r2, [r1]
 8008c86:	617b      	str	r3, [r7, #20]
   return(result);
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d1e5      	bne.n	8008c5a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008c8e:	e002      	b.n	8008c96 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008c90:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008c92:	f7fa fbbb 	bl	800340c <HAL_UART_TxCpltCallback>
}
 8008c96:	bf00      	nop
 8008c98:	3740      	adds	r7, #64	@ 0x40
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}

08008c9e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008c9e:	b580      	push	{r7, lr}
 8008ca0:	b084      	sub	sp, #16
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008caa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008cac:	68f8      	ldr	r0, [r7, #12]
 8008cae:	f7ff ff7f 	bl	8008bb0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008cb2:	bf00      	nop
 8008cb4:	3710      	adds	r7, #16
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}

08008cba <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008cba:	b580      	push	{r7, lr}
 8008cbc:	b084      	sub	sp, #16
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cca:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	695b      	ldr	r3, [r3, #20]
 8008cd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cd6:	2b80      	cmp	r3, #128	@ 0x80
 8008cd8:	bf0c      	ite	eq
 8008cda:	2301      	moveq	r3, #1
 8008cdc:	2300      	movne	r3, #0
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008ce8:	b2db      	uxtb	r3, r3
 8008cea:	2b21      	cmp	r3, #33	@ 0x21
 8008cec:	d108      	bne.n	8008d00 <UART_DMAError+0x46>
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d005      	beq.n	8008d00 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8008cfa:	68b8      	ldr	r0, [r7, #8]
 8008cfc:	f000 f827 	bl	8008d4e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	695b      	ldr	r3, [r3, #20]
 8008d06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d0a:	2b40      	cmp	r3, #64	@ 0x40
 8008d0c:	bf0c      	ite	eq
 8008d0e:	2301      	moveq	r3, #1
 8008d10:	2300      	movne	r3, #0
 8008d12:	b2db      	uxtb	r3, r3
 8008d14:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008d1c:	b2db      	uxtb	r3, r3
 8008d1e:	2b22      	cmp	r3, #34	@ 0x22
 8008d20:	d108      	bne.n	8008d34 <UART_DMAError+0x7a>
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d005      	beq.n	8008d34 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8008d2e:	68b8      	ldr	r0, [r7, #8]
 8008d30:	f000 f835 	bl	8008d9e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d38:	f043 0210 	orr.w	r2, r3, #16
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d40:	68b8      	ldr	r0, [r7, #8]
 8008d42:	f7ff ff49 	bl	8008bd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d46:	bf00      	nop
 8008d48:	3710      	adds	r7, #16
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}

08008d4e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008d4e:	b480      	push	{r7}
 8008d50:	b089      	sub	sp, #36	@ 0x24
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	330c      	adds	r3, #12
 8008d5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	e853 3f00 	ldrex	r3, [r3]
 8008d64:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008d6c:	61fb      	str	r3, [r7, #28]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	330c      	adds	r3, #12
 8008d74:	69fa      	ldr	r2, [r7, #28]
 8008d76:	61ba      	str	r2, [r7, #24]
 8008d78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d7a:	6979      	ldr	r1, [r7, #20]
 8008d7c:	69ba      	ldr	r2, [r7, #24]
 8008d7e:	e841 2300 	strex	r3, r2, [r1]
 8008d82:	613b      	str	r3, [r7, #16]
   return(result);
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d1e5      	bne.n	8008d56 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2220      	movs	r2, #32
 8008d8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8008d92:	bf00      	nop
 8008d94:	3724      	adds	r7, #36	@ 0x24
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr

08008d9e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d9e:	b480      	push	{r7}
 8008da0:	b095      	sub	sp, #84	@ 0x54
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	330c      	adds	r3, #12
 8008dac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008db0:	e853 3f00 	ldrex	r3, [r3]
 8008db4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008db8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008dbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	330c      	adds	r3, #12
 8008dc4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008dc6:	643a      	str	r2, [r7, #64]	@ 0x40
 8008dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008dcc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008dce:	e841 2300 	strex	r3, r2, [r1]
 8008dd2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d1e5      	bne.n	8008da6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	3314      	adds	r3, #20
 8008de0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008de2:	6a3b      	ldr	r3, [r7, #32]
 8008de4:	e853 3f00 	ldrex	r3, [r3]
 8008de8:	61fb      	str	r3, [r7, #28]
   return(result);
 8008dea:	69fb      	ldr	r3, [r7, #28]
 8008dec:	f023 0301 	bic.w	r3, r3, #1
 8008df0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	3314      	adds	r3, #20
 8008df8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008dfa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dfe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e02:	e841 2300 	strex	r3, r2, [r1]
 8008e06:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d1e5      	bne.n	8008dda <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d119      	bne.n	8008e4a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	330c      	adds	r3, #12
 8008e1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	e853 3f00 	ldrex	r3, [r3]
 8008e24:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	f023 0310 	bic.w	r3, r3, #16
 8008e2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	330c      	adds	r3, #12
 8008e34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008e36:	61ba      	str	r2, [r7, #24]
 8008e38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e3a:	6979      	ldr	r1, [r7, #20]
 8008e3c:	69ba      	ldr	r2, [r7, #24]
 8008e3e:	e841 2300 	strex	r3, r2, [r1]
 8008e42:	613b      	str	r3, [r7, #16]
   return(result);
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d1e5      	bne.n	8008e16 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2220      	movs	r2, #32
 8008e4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2200      	movs	r2, #0
 8008e56:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008e58:	bf00      	nop
 8008e5a:	3754      	adds	r7, #84	@ 0x54
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr

08008e64 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b084      	sub	sp, #16
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e70:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2200      	movs	r2, #0
 8008e76:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e7e:	68f8      	ldr	r0, [r7, #12]
 8008e80:	f7ff feaa 	bl	8008bd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e84:	bf00      	nop
 8008e86:	3710      	adds	r7, #16
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b085      	sub	sp, #20
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	2b21      	cmp	r3, #33	@ 0x21
 8008e9e:	d13e      	bne.n	8008f1e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	689b      	ldr	r3, [r3, #8]
 8008ea4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ea8:	d114      	bne.n	8008ed4 <UART_Transmit_IT+0x48>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	691b      	ldr	r3, [r3, #16]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d110      	bne.n	8008ed4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6a1b      	ldr	r3, [r3, #32]
 8008eb6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	881b      	ldrh	r3, [r3, #0]
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ec6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6a1b      	ldr	r3, [r3, #32]
 8008ecc:	1c9a      	adds	r2, r3, #2
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	621a      	str	r2, [r3, #32]
 8008ed2:	e008      	b.n	8008ee6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6a1b      	ldr	r3, [r3, #32]
 8008ed8:	1c59      	adds	r1, r3, #1
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	6211      	str	r1, [r2, #32]
 8008ede:	781a      	ldrb	r2, [r3, #0]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	3b01      	subs	r3, #1
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	687a      	ldr	r2, [r7, #4]
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d10f      	bne.n	8008f1a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	68da      	ldr	r2, [r3, #12]
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008f08:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	68da      	ldr	r2, [r3, #12]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008f18:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	e000      	b.n	8008f20 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008f1e:	2302      	movs	r3, #2
  }
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3714      	adds	r7, #20
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	68da      	ldr	r2, [r3, #12]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008f42:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2220      	movs	r2, #32
 8008f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f7fa fa5d 	bl	800340c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008f52:	2300      	movs	r3, #0
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3708      	adds	r7, #8
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b08c      	sub	sp, #48	@ 0x30
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	2b22      	cmp	r3, #34	@ 0x22
 8008f6e:	f040 80ae 	bne.w	80090ce <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	689b      	ldr	r3, [r3, #8]
 8008f76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f7a:	d117      	bne.n	8008fac <UART_Receive_IT+0x50>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	691b      	ldr	r3, [r3, #16]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d113      	bne.n	8008fac <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008f84:	2300      	movs	r3, #0
 8008f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f9a:	b29a      	uxth	r2, r3
 8008f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f9e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fa4:	1c9a      	adds	r2, r3, #2
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	629a      	str	r2, [r3, #40]	@ 0x28
 8008faa:	e026      	b.n	8008ffa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	689b      	ldr	r3, [r3, #8]
 8008fba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008fbe:	d007      	beq.n	8008fd0 <UART_Receive_IT+0x74>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	689b      	ldr	r3, [r3, #8]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d10a      	bne.n	8008fde <UART_Receive_IT+0x82>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	691b      	ldr	r3, [r3, #16]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d106      	bne.n	8008fde <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	b2da      	uxtb	r2, r3
 8008fd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fda:	701a      	strb	r2, [r3, #0]
 8008fdc:	e008      	b.n	8008ff0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	b2db      	uxtb	r3, r3
 8008fe6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008fea:	b2da      	uxtb	r2, r3
 8008fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fee:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ff4:	1c5a      	adds	r2, r3, #1
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008ffe:	b29b      	uxth	r3, r3
 8009000:	3b01      	subs	r3, #1
 8009002:	b29b      	uxth	r3, r3
 8009004:	687a      	ldr	r2, [r7, #4]
 8009006:	4619      	mov	r1, r3
 8009008:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800900a:	2b00      	cmp	r3, #0
 800900c:	d15d      	bne.n	80090ca <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	68da      	ldr	r2, [r3, #12]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f022 0220 	bic.w	r2, r2, #32
 800901c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	68da      	ldr	r2, [r3, #12]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800902c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	695a      	ldr	r2, [r3, #20]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f022 0201 	bic.w	r2, r2, #1
 800903c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2220      	movs	r2, #32
 8009042:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2200      	movs	r2, #0
 800904a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009050:	2b01      	cmp	r3, #1
 8009052:	d135      	bne.n	80090c0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2200      	movs	r2, #0
 8009058:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	330c      	adds	r3, #12
 8009060:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	e853 3f00 	ldrex	r3, [r3]
 8009068:	613b      	str	r3, [r7, #16]
   return(result);
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	f023 0310 	bic.w	r3, r3, #16
 8009070:	627b      	str	r3, [r7, #36]	@ 0x24
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	330c      	adds	r3, #12
 8009078:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800907a:	623a      	str	r2, [r7, #32]
 800907c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800907e:	69f9      	ldr	r1, [r7, #28]
 8009080:	6a3a      	ldr	r2, [r7, #32]
 8009082:	e841 2300 	strex	r3, r2, [r1]
 8009086:	61bb      	str	r3, [r7, #24]
   return(result);
 8009088:	69bb      	ldr	r3, [r7, #24]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d1e5      	bne.n	800905a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f003 0310 	and.w	r3, r3, #16
 8009098:	2b10      	cmp	r3, #16
 800909a:	d10a      	bne.n	80090b2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800909c:	2300      	movs	r3, #0
 800909e:	60fb      	str	r3, [r7, #12]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	60fb      	str	r3, [r7, #12]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	60fb      	str	r3, [r7, #12]
 80090b0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80090b6:	4619      	mov	r1, r3
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f7ff fd97 	bl	8008bec <HAL_UARTEx_RxEventCallback>
 80090be:	e002      	b.n	80090c6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f7ff fd7f 	bl	8008bc4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80090c6:	2300      	movs	r3, #0
 80090c8:	e002      	b.n	80090d0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80090ca:	2300      	movs	r3, #0
 80090cc:	e000      	b.n	80090d0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80090ce:	2302      	movs	r3, #2
  }
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3730      	adds	r7, #48	@ 0x30
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80090d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80090dc:	b0c0      	sub	sp, #256	@ 0x100
 80090de:	af00      	add	r7, sp, #0
 80090e0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80090e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	691b      	ldr	r3, [r3, #16]
 80090ec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80090f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090f4:	68d9      	ldr	r1, [r3, #12]
 80090f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	ea40 0301 	orr.w	r3, r0, r1
 8009100:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009106:	689a      	ldr	r2, [r3, #8]
 8009108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800910c:	691b      	ldr	r3, [r3, #16]
 800910e:	431a      	orrs	r2, r3
 8009110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009114:	695b      	ldr	r3, [r3, #20]
 8009116:	431a      	orrs	r2, r3
 8009118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800911c:	69db      	ldr	r3, [r3, #28]
 800911e:	4313      	orrs	r3, r2
 8009120:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	68db      	ldr	r3, [r3, #12]
 800912c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009130:	f021 010c 	bic.w	r1, r1, #12
 8009134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800913e:	430b      	orrs	r3, r1
 8009140:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	695b      	ldr	r3, [r3, #20]
 800914a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800914e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009152:	6999      	ldr	r1, [r3, #24]
 8009154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009158:	681a      	ldr	r2, [r3, #0]
 800915a:	ea40 0301 	orr.w	r3, r0, r1
 800915e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009164:	681a      	ldr	r2, [r3, #0]
 8009166:	4b8f      	ldr	r3, [pc, #572]	@ (80093a4 <UART_SetConfig+0x2cc>)
 8009168:	429a      	cmp	r2, r3
 800916a:	d005      	beq.n	8009178 <UART_SetConfig+0xa0>
 800916c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009170:	681a      	ldr	r2, [r3, #0]
 8009172:	4b8d      	ldr	r3, [pc, #564]	@ (80093a8 <UART_SetConfig+0x2d0>)
 8009174:	429a      	cmp	r2, r3
 8009176:	d104      	bne.n	8009182 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009178:	f7fc fe98 	bl	8005eac <HAL_RCC_GetPCLK2Freq>
 800917c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009180:	e003      	b.n	800918a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009182:	f7fc fe7f 	bl	8005e84 <HAL_RCC_GetPCLK1Freq>
 8009186:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800918a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800918e:	69db      	ldr	r3, [r3, #28]
 8009190:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009194:	f040 810c 	bne.w	80093b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009198:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800919c:	2200      	movs	r2, #0
 800919e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80091a2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80091a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80091aa:	4622      	mov	r2, r4
 80091ac:	462b      	mov	r3, r5
 80091ae:	1891      	adds	r1, r2, r2
 80091b0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80091b2:	415b      	adcs	r3, r3
 80091b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80091b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80091ba:	4621      	mov	r1, r4
 80091bc:	eb12 0801 	adds.w	r8, r2, r1
 80091c0:	4629      	mov	r1, r5
 80091c2:	eb43 0901 	adc.w	r9, r3, r1
 80091c6:	f04f 0200 	mov.w	r2, #0
 80091ca:	f04f 0300 	mov.w	r3, #0
 80091ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80091d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80091d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80091da:	4690      	mov	r8, r2
 80091dc:	4699      	mov	r9, r3
 80091de:	4623      	mov	r3, r4
 80091e0:	eb18 0303 	adds.w	r3, r8, r3
 80091e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80091e8:	462b      	mov	r3, r5
 80091ea:	eb49 0303 	adc.w	r3, r9, r3
 80091ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80091f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	2200      	movs	r2, #0
 80091fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80091fe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009202:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009206:	460b      	mov	r3, r1
 8009208:	18db      	adds	r3, r3, r3
 800920a:	653b      	str	r3, [r7, #80]	@ 0x50
 800920c:	4613      	mov	r3, r2
 800920e:	eb42 0303 	adc.w	r3, r2, r3
 8009212:	657b      	str	r3, [r7, #84]	@ 0x54
 8009214:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009218:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800921c:	f7f7 fd54 	bl	8000cc8 <__aeabi_uldivmod>
 8009220:	4602      	mov	r2, r0
 8009222:	460b      	mov	r3, r1
 8009224:	4b61      	ldr	r3, [pc, #388]	@ (80093ac <UART_SetConfig+0x2d4>)
 8009226:	fba3 2302 	umull	r2, r3, r3, r2
 800922a:	095b      	lsrs	r3, r3, #5
 800922c:	011c      	lsls	r4, r3, #4
 800922e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009232:	2200      	movs	r2, #0
 8009234:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009238:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800923c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009240:	4642      	mov	r2, r8
 8009242:	464b      	mov	r3, r9
 8009244:	1891      	adds	r1, r2, r2
 8009246:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009248:	415b      	adcs	r3, r3
 800924a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800924c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009250:	4641      	mov	r1, r8
 8009252:	eb12 0a01 	adds.w	sl, r2, r1
 8009256:	4649      	mov	r1, r9
 8009258:	eb43 0b01 	adc.w	fp, r3, r1
 800925c:	f04f 0200 	mov.w	r2, #0
 8009260:	f04f 0300 	mov.w	r3, #0
 8009264:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009268:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800926c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009270:	4692      	mov	sl, r2
 8009272:	469b      	mov	fp, r3
 8009274:	4643      	mov	r3, r8
 8009276:	eb1a 0303 	adds.w	r3, sl, r3
 800927a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800927e:	464b      	mov	r3, r9
 8009280:	eb4b 0303 	adc.w	r3, fp, r3
 8009284:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	2200      	movs	r2, #0
 8009290:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009294:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009298:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800929c:	460b      	mov	r3, r1
 800929e:	18db      	adds	r3, r3, r3
 80092a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80092a2:	4613      	mov	r3, r2
 80092a4:	eb42 0303 	adc.w	r3, r2, r3
 80092a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80092aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80092ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80092b2:	f7f7 fd09 	bl	8000cc8 <__aeabi_uldivmod>
 80092b6:	4602      	mov	r2, r0
 80092b8:	460b      	mov	r3, r1
 80092ba:	4611      	mov	r1, r2
 80092bc:	4b3b      	ldr	r3, [pc, #236]	@ (80093ac <UART_SetConfig+0x2d4>)
 80092be:	fba3 2301 	umull	r2, r3, r3, r1
 80092c2:	095b      	lsrs	r3, r3, #5
 80092c4:	2264      	movs	r2, #100	@ 0x64
 80092c6:	fb02 f303 	mul.w	r3, r2, r3
 80092ca:	1acb      	subs	r3, r1, r3
 80092cc:	00db      	lsls	r3, r3, #3
 80092ce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80092d2:	4b36      	ldr	r3, [pc, #216]	@ (80093ac <UART_SetConfig+0x2d4>)
 80092d4:	fba3 2302 	umull	r2, r3, r3, r2
 80092d8:	095b      	lsrs	r3, r3, #5
 80092da:	005b      	lsls	r3, r3, #1
 80092dc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80092e0:	441c      	add	r4, r3
 80092e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80092e6:	2200      	movs	r2, #0
 80092e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80092ec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80092f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80092f4:	4642      	mov	r2, r8
 80092f6:	464b      	mov	r3, r9
 80092f8:	1891      	adds	r1, r2, r2
 80092fa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80092fc:	415b      	adcs	r3, r3
 80092fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009300:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009304:	4641      	mov	r1, r8
 8009306:	1851      	adds	r1, r2, r1
 8009308:	6339      	str	r1, [r7, #48]	@ 0x30
 800930a:	4649      	mov	r1, r9
 800930c:	414b      	adcs	r3, r1
 800930e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009310:	f04f 0200 	mov.w	r2, #0
 8009314:	f04f 0300 	mov.w	r3, #0
 8009318:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800931c:	4659      	mov	r1, fp
 800931e:	00cb      	lsls	r3, r1, #3
 8009320:	4651      	mov	r1, sl
 8009322:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009326:	4651      	mov	r1, sl
 8009328:	00ca      	lsls	r2, r1, #3
 800932a:	4610      	mov	r0, r2
 800932c:	4619      	mov	r1, r3
 800932e:	4603      	mov	r3, r0
 8009330:	4642      	mov	r2, r8
 8009332:	189b      	adds	r3, r3, r2
 8009334:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009338:	464b      	mov	r3, r9
 800933a:	460a      	mov	r2, r1
 800933c:	eb42 0303 	adc.w	r3, r2, r3
 8009340:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009348:	685b      	ldr	r3, [r3, #4]
 800934a:	2200      	movs	r2, #0
 800934c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009350:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009354:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009358:	460b      	mov	r3, r1
 800935a:	18db      	adds	r3, r3, r3
 800935c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800935e:	4613      	mov	r3, r2
 8009360:	eb42 0303 	adc.w	r3, r2, r3
 8009364:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009366:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800936a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800936e:	f7f7 fcab 	bl	8000cc8 <__aeabi_uldivmod>
 8009372:	4602      	mov	r2, r0
 8009374:	460b      	mov	r3, r1
 8009376:	4b0d      	ldr	r3, [pc, #52]	@ (80093ac <UART_SetConfig+0x2d4>)
 8009378:	fba3 1302 	umull	r1, r3, r3, r2
 800937c:	095b      	lsrs	r3, r3, #5
 800937e:	2164      	movs	r1, #100	@ 0x64
 8009380:	fb01 f303 	mul.w	r3, r1, r3
 8009384:	1ad3      	subs	r3, r2, r3
 8009386:	00db      	lsls	r3, r3, #3
 8009388:	3332      	adds	r3, #50	@ 0x32
 800938a:	4a08      	ldr	r2, [pc, #32]	@ (80093ac <UART_SetConfig+0x2d4>)
 800938c:	fba2 2303 	umull	r2, r3, r2, r3
 8009390:	095b      	lsrs	r3, r3, #5
 8009392:	f003 0207 	and.w	r2, r3, #7
 8009396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4422      	add	r2, r4
 800939e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80093a0:	e106      	b.n	80095b0 <UART_SetConfig+0x4d8>
 80093a2:	bf00      	nop
 80093a4:	40011000 	.word	0x40011000
 80093a8:	40011400 	.word	0x40011400
 80093ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80093b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80093b4:	2200      	movs	r2, #0
 80093b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80093ba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80093be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80093c2:	4642      	mov	r2, r8
 80093c4:	464b      	mov	r3, r9
 80093c6:	1891      	adds	r1, r2, r2
 80093c8:	6239      	str	r1, [r7, #32]
 80093ca:	415b      	adcs	r3, r3
 80093cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80093ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80093d2:	4641      	mov	r1, r8
 80093d4:	1854      	adds	r4, r2, r1
 80093d6:	4649      	mov	r1, r9
 80093d8:	eb43 0501 	adc.w	r5, r3, r1
 80093dc:	f04f 0200 	mov.w	r2, #0
 80093e0:	f04f 0300 	mov.w	r3, #0
 80093e4:	00eb      	lsls	r3, r5, #3
 80093e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80093ea:	00e2      	lsls	r2, r4, #3
 80093ec:	4614      	mov	r4, r2
 80093ee:	461d      	mov	r5, r3
 80093f0:	4643      	mov	r3, r8
 80093f2:	18e3      	adds	r3, r4, r3
 80093f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80093f8:	464b      	mov	r3, r9
 80093fa:	eb45 0303 	adc.w	r3, r5, r3
 80093fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	2200      	movs	r2, #0
 800940a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800940e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009412:	f04f 0200 	mov.w	r2, #0
 8009416:	f04f 0300 	mov.w	r3, #0
 800941a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800941e:	4629      	mov	r1, r5
 8009420:	008b      	lsls	r3, r1, #2
 8009422:	4621      	mov	r1, r4
 8009424:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009428:	4621      	mov	r1, r4
 800942a:	008a      	lsls	r2, r1, #2
 800942c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009430:	f7f7 fc4a 	bl	8000cc8 <__aeabi_uldivmod>
 8009434:	4602      	mov	r2, r0
 8009436:	460b      	mov	r3, r1
 8009438:	4b60      	ldr	r3, [pc, #384]	@ (80095bc <UART_SetConfig+0x4e4>)
 800943a:	fba3 2302 	umull	r2, r3, r3, r2
 800943e:	095b      	lsrs	r3, r3, #5
 8009440:	011c      	lsls	r4, r3, #4
 8009442:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009446:	2200      	movs	r2, #0
 8009448:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800944c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009450:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009454:	4642      	mov	r2, r8
 8009456:	464b      	mov	r3, r9
 8009458:	1891      	adds	r1, r2, r2
 800945a:	61b9      	str	r1, [r7, #24]
 800945c:	415b      	adcs	r3, r3
 800945e:	61fb      	str	r3, [r7, #28]
 8009460:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009464:	4641      	mov	r1, r8
 8009466:	1851      	adds	r1, r2, r1
 8009468:	6139      	str	r1, [r7, #16]
 800946a:	4649      	mov	r1, r9
 800946c:	414b      	adcs	r3, r1
 800946e:	617b      	str	r3, [r7, #20]
 8009470:	f04f 0200 	mov.w	r2, #0
 8009474:	f04f 0300 	mov.w	r3, #0
 8009478:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800947c:	4659      	mov	r1, fp
 800947e:	00cb      	lsls	r3, r1, #3
 8009480:	4651      	mov	r1, sl
 8009482:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009486:	4651      	mov	r1, sl
 8009488:	00ca      	lsls	r2, r1, #3
 800948a:	4610      	mov	r0, r2
 800948c:	4619      	mov	r1, r3
 800948e:	4603      	mov	r3, r0
 8009490:	4642      	mov	r2, r8
 8009492:	189b      	adds	r3, r3, r2
 8009494:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009498:	464b      	mov	r3, r9
 800949a:	460a      	mov	r2, r1
 800949c:	eb42 0303 	adc.w	r3, r2, r3
 80094a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80094a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094a8:	685b      	ldr	r3, [r3, #4]
 80094aa:	2200      	movs	r2, #0
 80094ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80094ae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80094b0:	f04f 0200 	mov.w	r2, #0
 80094b4:	f04f 0300 	mov.w	r3, #0
 80094b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80094bc:	4649      	mov	r1, r9
 80094be:	008b      	lsls	r3, r1, #2
 80094c0:	4641      	mov	r1, r8
 80094c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80094c6:	4641      	mov	r1, r8
 80094c8:	008a      	lsls	r2, r1, #2
 80094ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80094ce:	f7f7 fbfb 	bl	8000cc8 <__aeabi_uldivmod>
 80094d2:	4602      	mov	r2, r0
 80094d4:	460b      	mov	r3, r1
 80094d6:	4611      	mov	r1, r2
 80094d8:	4b38      	ldr	r3, [pc, #224]	@ (80095bc <UART_SetConfig+0x4e4>)
 80094da:	fba3 2301 	umull	r2, r3, r3, r1
 80094de:	095b      	lsrs	r3, r3, #5
 80094e0:	2264      	movs	r2, #100	@ 0x64
 80094e2:	fb02 f303 	mul.w	r3, r2, r3
 80094e6:	1acb      	subs	r3, r1, r3
 80094e8:	011b      	lsls	r3, r3, #4
 80094ea:	3332      	adds	r3, #50	@ 0x32
 80094ec:	4a33      	ldr	r2, [pc, #204]	@ (80095bc <UART_SetConfig+0x4e4>)
 80094ee:	fba2 2303 	umull	r2, r3, r2, r3
 80094f2:	095b      	lsrs	r3, r3, #5
 80094f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80094f8:	441c      	add	r4, r3
 80094fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80094fe:	2200      	movs	r2, #0
 8009500:	673b      	str	r3, [r7, #112]	@ 0x70
 8009502:	677a      	str	r2, [r7, #116]	@ 0x74
 8009504:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009508:	4642      	mov	r2, r8
 800950a:	464b      	mov	r3, r9
 800950c:	1891      	adds	r1, r2, r2
 800950e:	60b9      	str	r1, [r7, #8]
 8009510:	415b      	adcs	r3, r3
 8009512:	60fb      	str	r3, [r7, #12]
 8009514:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009518:	4641      	mov	r1, r8
 800951a:	1851      	adds	r1, r2, r1
 800951c:	6039      	str	r1, [r7, #0]
 800951e:	4649      	mov	r1, r9
 8009520:	414b      	adcs	r3, r1
 8009522:	607b      	str	r3, [r7, #4]
 8009524:	f04f 0200 	mov.w	r2, #0
 8009528:	f04f 0300 	mov.w	r3, #0
 800952c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009530:	4659      	mov	r1, fp
 8009532:	00cb      	lsls	r3, r1, #3
 8009534:	4651      	mov	r1, sl
 8009536:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800953a:	4651      	mov	r1, sl
 800953c:	00ca      	lsls	r2, r1, #3
 800953e:	4610      	mov	r0, r2
 8009540:	4619      	mov	r1, r3
 8009542:	4603      	mov	r3, r0
 8009544:	4642      	mov	r2, r8
 8009546:	189b      	adds	r3, r3, r2
 8009548:	66bb      	str	r3, [r7, #104]	@ 0x68
 800954a:	464b      	mov	r3, r9
 800954c:	460a      	mov	r2, r1
 800954e:	eb42 0303 	adc.w	r3, r2, r3
 8009552:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	2200      	movs	r2, #0
 800955c:	663b      	str	r3, [r7, #96]	@ 0x60
 800955e:	667a      	str	r2, [r7, #100]	@ 0x64
 8009560:	f04f 0200 	mov.w	r2, #0
 8009564:	f04f 0300 	mov.w	r3, #0
 8009568:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800956c:	4649      	mov	r1, r9
 800956e:	008b      	lsls	r3, r1, #2
 8009570:	4641      	mov	r1, r8
 8009572:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009576:	4641      	mov	r1, r8
 8009578:	008a      	lsls	r2, r1, #2
 800957a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800957e:	f7f7 fba3 	bl	8000cc8 <__aeabi_uldivmod>
 8009582:	4602      	mov	r2, r0
 8009584:	460b      	mov	r3, r1
 8009586:	4b0d      	ldr	r3, [pc, #52]	@ (80095bc <UART_SetConfig+0x4e4>)
 8009588:	fba3 1302 	umull	r1, r3, r3, r2
 800958c:	095b      	lsrs	r3, r3, #5
 800958e:	2164      	movs	r1, #100	@ 0x64
 8009590:	fb01 f303 	mul.w	r3, r1, r3
 8009594:	1ad3      	subs	r3, r2, r3
 8009596:	011b      	lsls	r3, r3, #4
 8009598:	3332      	adds	r3, #50	@ 0x32
 800959a:	4a08      	ldr	r2, [pc, #32]	@ (80095bc <UART_SetConfig+0x4e4>)
 800959c:	fba2 2303 	umull	r2, r3, r2, r3
 80095a0:	095b      	lsrs	r3, r3, #5
 80095a2:	f003 020f 	and.w	r2, r3, #15
 80095a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4422      	add	r2, r4
 80095ae:	609a      	str	r2, [r3, #8]
}
 80095b0:	bf00      	nop
 80095b2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80095b6:	46bd      	mov	sp, r7
 80095b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80095bc:	51eb851f 	.word	0x51eb851f

080095c0 <__cvt>:
 80095c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095c4:	ec57 6b10 	vmov	r6, r7, d0
 80095c8:	2f00      	cmp	r7, #0
 80095ca:	460c      	mov	r4, r1
 80095cc:	4619      	mov	r1, r3
 80095ce:	463b      	mov	r3, r7
 80095d0:	bfbb      	ittet	lt
 80095d2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80095d6:	461f      	movlt	r7, r3
 80095d8:	2300      	movge	r3, #0
 80095da:	232d      	movlt	r3, #45	@ 0x2d
 80095dc:	700b      	strb	r3, [r1, #0]
 80095de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80095e0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80095e4:	4691      	mov	r9, r2
 80095e6:	f023 0820 	bic.w	r8, r3, #32
 80095ea:	bfbc      	itt	lt
 80095ec:	4632      	movlt	r2, r6
 80095ee:	4616      	movlt	r6, r2
 80095f0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80095f4:	d005      	beq.n	8009602 <__cvt+0x42>
 80095f6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80095fa:	d100      	bne.n	80095fe <__cvt+0x3e>
 80095fc:	3401      	adds	r4, #1
 80095fe:	2102      	movs	r1, #2
 8009600:	e000      	b.n	8009604 <__cvt+0x44>
 8009602:	2103      	movs	r1, #3
 8009604:	ab03      	add	r3, sp, #12
 8009606:	9301      	str	r3, [sp, #4]
 8009608:	ab02      	add	r3, sp, #8
 800960a:	9300      	str	r3, [sp, #0]
 800960c:	ec47 6b10 	vmov	d0, r6, r7
 8009610:	4653      	mov	r3, sl
 8009612:	4622      	mov	r2, r4
 8009614:	f000 fe5c 	bl	800a2d0 <_dtoa_r>
 8009618:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800961c:	4605      	mov	r5, r0
 800961e:	d119      	bne.n	8009654 <__cvt+0x94>
 8009620:	f019 0f01 	tst.w	r9, #1
 8009624:	d00e      	beq.n	8009644 <__cvt+0x84>
 8009626:	eb00 0904 	add.w	r9, r0, r4
 800962a:	2200      	movs	r2, #0
 800962c:	2300      	movs	r3, #0
 800962e:	4630      	mov	r0, r6
 8009630:	4639      	mov	r1, r7
 8009632:	f7f7 fa69 	bl	8000b08 <__aeabi_dcmpeq>
 8009636:	b108      	cbz	r0, 800963c <__cvt+0x7c>
 8009638:	f8cd 900c 	str.w	r9, [sp, #12]
 800963c:	2230      	movs	r2, #48	@ 0x30
 800963e:	9b03      	ldr	r3, [sp, #12]
 8009640:	454b      	cmp	r3, r9
 8009642:	d31e      	bcc.n	8009682 <__cvt+0xc2>
 8009644:	9b03      	ldr	r3, [sp, #12]
 8009646:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009648:	1b5b      	subs	r3, r3, r5
 800964a:	4628      	mov	r0, r5
 800964c:	6013      	str	r3, [r2, #0]
 800964e:	b004      	add	sp, #16
 8009650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009654:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009658:	eb00 0904 	add.w	r9, r0, r4
 800965c:	d1e5      	bne.n	800962a <__cvt+0x6a>
 800965e:	7803      	ldrb	r3, [r0, #0]
 8009660:	2b30      	cmp	r3, #48	@ 0x30
 8009662:	d10a      	bne.n	800967a <__cvt+0xba>
 8009664:	2200      	movs	r2, #0
 8009666:	2300      	movs	r3, #0
 8009668:	4630      	mov	r0, r6
 800966a:	4639      	mov	r1, r7
 800966c:	f7f7 fa4c 	bl	8000b08 <__aeabi_dcmpeq>
 8009670:	b918      	cbnz	r0, 800967a <__cvt+0xba>
 8009672:	f1c4 0401 	rsb	r4, r4, #1
 8009676:	f8ca 4000 	str.w	r4, [sl]
 800967a:	f8da 3000 	ldr.w	r3, [sl]
 800967e:	4499      	add	r9, r3
 8009680:	e7d3      	b.n	800962a <__cvt+0x6a>
 8009682:	1c59      	adds	r1, r3, #1
 8009684:	9103      	str	r1, [sp, #12]
 8009686:	701a      	strb	r2, [r3, #0]
 8009688:	e7d9      	b.n	800963e <__cvt+0x7e>

0800968a <__exponent>:
 800968a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800968c:	2900      	cmp	r1, #0
 800968e:	bfba      	itte	lt
 8009690:	4249      	neglt	r1, r1
 8009692:	232d      	movlt	r3, #45	@ 0x2d
 8009694:	232b      	movge	r3, #43	@ 0x2b
 8009696:	2909      	cmp	r1, #9
 8009698:	7002      	strb	r2, [r0, #0]
 800969a:	7043      	strb	r3, [r0, #1]
 800969c:	dd29      	ble.n	80096f2 <__exponent+0x68>
 800969e:	f10d 0307 	add.w	r3, sp, #7
 80096a2:	461d      	mov	r5, r3
 80096a4:	270a      	movs	r7, #10
 80096a6:	461a      	mov	r2, r3
 80096a8:	fbb1 f6f7 	udiv	r6, r1, r7
 80096ac:	fb07 1416 	mls	r4, r7, r6, r1
 80096b0:	3430      	adds	r4, #48	@ 0x30
 80096b2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80096b6:	460c      	mov	r4, r1
 80096b8:	2c63      	cmp	r4, #99	@ 0x63
 80096ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80096be:	4631      	mov	r1, r6
 80096c0:	dcf1      	bgt.n	80096a6 <__exponent+0x1c>
 80096c2:	3130      	adds	r1, #48	@ 0x30
 80096c4:	1e94      	subs	r4, r2, #2
 80096c6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80096ca:	1c41      	adds	r1, r0, #1
 80096cc:	4623      	mov	r3, r4
 80096ce:	42ab      	cmp	r3, r5
 80096d0:	d30a      	bcc.n	80096e8 <__exponent+0x5e>
 80096d2:	f10d 0309 	add.w	r3, sp, #9
 80096d6:	1a9b      	subs	r3, r3, r2
 80096d8:	42ac      	cmp	r4, r5
 80096da:	bf88      	it	hi
 80096dc:	2300      	movhi	r3, #0
 80096de:	3302      	adds	r3, #2
 80096e0:	4403      	add	r3, r0
 80096e2:	1a18      	subs	r0, r3, r0
 80096e4:	b003      	add	sp, #12
 80096e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096e8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80096ec:	f801 6f01 	strb.w	r6, [r1, #1]!
 80096f0:	e7ed      	b.n	80096ce <__exponent+0x44>
 80096f2:	2330      	movs	r3, #48	@ 0x30
 80096f4:	3130      	adds	r1, #48	@ 0x30
 80096f6:	7083      	strb	r3, [r0, #2]
 80096f8:	70c1      	strb	r1, [r0, #3]
 80096fa:	1d03      	adds	r3, r0, #4
 80096fc:	e7f1      	b.n	80096e2 <__exponent+0x58>
	...

08009700 <_printf_float>:
 8009700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009704:	b08d      	sub	sp, #52	@ 0x34
 8009706:	460c      	mov	r4, r1
 8009708:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800970c:	4616      	mov	r6, r2
 800970e:	461f      	mov	r7, r3
 8009710:	4605      	mov	r5, r0
 8009712:	f000 fcdb 	bl	800a0cc <_localeconv_r>
 8009716:	6803      	ldr	r3, [r0, #0]
 8009718:	9304      	str	r3, [sp, #16]
 800971a:	4618      	mov	r0, r3
 800971c:	f7f6 fdc8 	bl	80002b0 <strlen>
 8009720:	2300      	movs	r3, #0
 8009722:	930a      	str	r3, [sp, #40]	@ 0x28
 8009724:	f8d8 3000 	ldr.w	r3, [r8]
 8009728:	9005      	str	r0, [sp, #20]
 800972a:	3307      	adds	r3, #7
 800972c:	f023 0307 	bic.w	r3, r3, #7
 8009730:	f103 0208 	add.w	r2, r3, #8
 8009734:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009738:	f8d4 b000 	ldr.w	fp, [r4]
 800973c:	f8c8 2000 	str.w	r2, [r8]
 8009740:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009744:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009748:	9307      	str	r3, [sp, #28]
 800974a:	f8cd 8018 	str.w	r8, [sp, #24]
 800974e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009752:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009756:	4b9c      	ldr	r3, [pc, #624]	@ (80099c8 <_printf_float+0x2c8>)
 8009758:	f04f 32ff 	mov.w	r2, #4294967295
 800975c:	f7f7 fa06 	bl	8000b6c <__aeabi_dcmpun>
 8009760:	bb70      	cbnz	r0, 80097c0 <_printf_float+0xc0>
 8009762:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009766:	4b98      	ldr	r3, [pc, #608]	@ (80099c8 <_printf_float+0x2c8>)
 8009768:	f04f 32ff 	mov.w	r2, #4294967295
 800976c:	f7f7 f9e0 	bl	8000b30 <__aeabi_dcmple>
 8009770:	bb30      	cbnz	r0, 80097c0 <_printf_float+0xc0>
 8009772:	2200      	movs	r2, #0
 8009774:	2300      	movs	r3, #0
 8009776:	4640      	mov	r0, r8
 8009778:	4649      	mov	r1, r9
 800977a:	f7f7 f9cf 	bl	8000b1c <__aeabi_dcmplt>
 800977e:	b110      	cbz	r0, 8009786 <_printf_float+0x86>
 8009780:	232d      	movs	r3, #45	@ 0x2d
 8009782:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009786:	4a91      	ldr	r2, [pc, #580]	@ (80099cc <_printf_float+0x2cc>)
 8009788:	4b91      	ldr	r3, [pc, #580]	@ (80099d0 <_printf_float+0x2d0>)
 800978a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800978e:	bf94      	ite	ls
 8009790:	4690      	movls	r8, r2
 8009792:	4698      	movhi	r8, r3
 8009794:	2303      	movs	r3, #3
 8009796:	6123      	str	r3, [r4, #16]
 8009798:	f02b 0304 	bic.w	r3, fp, #4
 800979c:	6023      	str	r3, [r4, #0]
 800979e:	f04f 0900 	mov.w	r9, #0
 80097a2:	9700      	str	r7, [sp, #0]
 80097a4:	4633      	mov	r3, r6
 80097a6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80097a8:	4621      	mov	r1, r4
 80097aa:	4628      	mov	r0, r5
 80097ac:	f000 f9d2 	bl	8009b54 <_printf_common>
 80097b0:	3001      	adds	r0, #1
 80097b2:	f040 808d 	bne.w	80098d0 <_printf_float+0x1d0>
 80097b6:	f04f 30ff 	mov.w	r0, #4294967295
 80097ba:	b00d      	add	sp, #52	@ 0x34
 80097bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097c0:	4642      	mov	r2, r8
 80097c2:	464b      	mov	r3, r9
 80097c4:	4640      	mov	r0, r8
 80097c6:	4649      	mov	r1, r9
 80097c8:	f7f7 f9d0 	bl	8000b6c <__aeabi_dcmpun>
 80097cc:	b140      	cbz	r0, 80097e0 <_printf_float+0xe0>
 80097ce:	464b      	mov	r3, r9
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	bfbc      	itt	lt
 80097d4:	232d      	movlt	r3, #45	@ 0x2d
 80097d6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80097da:	4a7e      	ldr	r2, [pc, #504]	@ (80099d4 <_printf_float+0x2d4>)
 80097dc:	4b7e      	ldr	r3, [pc, #504]	@ (80099d8 <_printf_float+0x2d8>)
 80097de:	e7d4      	b.n	800978a <_printf_float+0x8a>
 80097e0:	6863      	ldr	r3, [r4, #4]
 80097e2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80097e6:	9206      	str	r2, [sp, #24]
 80097e8:	1c5a      	adds	r2, r3, #1
 80097ea:	d13b      	bne.n	8009864 <_printf_float+0x164>
 80097ec:	2306      	movs	r3, #6
 80097ee:	6063      	str	r3, [r4, #4]
 80097f0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80097f4:	2300      	movs	r3, #0
 80097f6:	6022      	str	r2, [r4, #0]
 80097f8:	9303      	str	r3, [sp, #12]
 80097fa:	ab0a      	add	r3, sp, #40	@ 0x28
 80097fc:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009800:	ab09      	add	r3, sp, #36	@ 0x24
 8009802:	9300      	str	r3, [sp, #0]
 8009804:	6861      	ldr	r1, [r4, #4]
 8009806:	ec49 8b10 	vmov	d0, r8, r9
 800980a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800980e:	4628      	mov	r0, r5
 8009810:	f7ff fed6 	bl	80095c0 <__cvt>
 8009814:	9b06      	ldr	r3, [sp, #24]
 8009816:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009818:	2b47      	cmp	r3, #71	@ 0x47
 800981a:	4680      	mov	r8, r0
 800981c:	d129      	bne.n	8009872 <_printf_float+0x172>
 800981e:	1cc8      	adds	r0, r1, #3
 8009820:	db02      	blt.n	8009828 <_printf_float+0x128>
 8009822:	6863      	ldr	r3, [r4, #4]
 8009824:	4299      	cmp	r1, r3
 8009826:	dd41      	ble.n	80098ac <_printf_float+0x1ac>
 8009828:	f1aa 0a02 	sub.w	sl, sl, #2
 800982c:	fa5f fa8a 	uxtb.w	sl, sl
 8009830:	3901      	subs	r1, #1
 8009832:	4652      	mov	r2, sl
 8009834:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009838:	9109      	str	r1, [sp, #36]	@ 0x24
 800983a:	f7ff ff26 	bl	800968a <__exponent>
 800983e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009840:	1813      	adds	r3, r2, r0
 8009842:	2a01      	cmp	r2, #1
 8009844:	4681      	mov	r9, r0
 8009846:	6123      	str	r3, [r4, #16]
 8009848:	dc02      	bgt.n	8009850 <_printf_float+0x150>
 800984a:	6822      	ldr	r2, [r4, #0]
 800984c:	07d2      	lsls	r2, r2, #31
 800984e:	d501      	bpl.n	8009854 <_printf_float+0x154>
 8009850:	3301      	adds	r3, #1
 8009852:	6123      	str	r3, [r4, #16]
 8009854:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009858:	2b00      	cmp	r3, #0
 800985a:	d0a2      	beq.n	80097a2 <_printf_float+0xa2>
 800985c:	232d      	movs	r3, #45	@ 0x2d
 800985e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009862:	e79e      	b.n	80097a2 <_printf_float+0xa2>
 8009864:	9a06      	ldr	r2, [sp, #24]
 8009866:	2a47      	cmp	r2, #71	@ 0x47
 8009868:	d1c2      	bne.n	80097f0 <_printf_float+0xf0>
 800986a:	2b00      	cmp	r3, #0
 800986c:	d1c0      	bne.n	80097f0 <_printf_float+0xf0>
 800986e:	2301      	movs	r3, #1
 8009870:	e7bd      	b.n	80097ee <_printf_float+0xee>
 8009872:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009876:	d9db      	bls.n	8009830 <_printf_float+0x130>
 8009878:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800987c:	d118      	bne.n	80098b0 <_printf_float+0x1b0>
 800987e:	2900      	cmp	r1, #0
 8009880:	6863      	ldr	r3, [r4, #4]
 8009882:	dd0b      	ble.n	800989c <_printf_float+0x19c>
 8009884:	6121      	str	r1, [r4, #16]
 8009886:	b913      	cbnz	r3, 800988e <_printf_float+0x18e>
 8009888:	6822      	ldr	r2, [r4, #0]
 800988a:	07d0      	lsls	r0, r2, #31
 800988c:	d502      	bpl.n	8009894 <_printf_float+0x194>
 800988e:	3301      	adds	r3, #1
 8009890:	440b      	add	r3, r1
 8009892:	6123      	str	r3, [r4, #16]
 8009894:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009896:	f04f 0900 	mov.w	r9, #0
 800989a:	e7db      	b.n	8009854 <_printf_float+0x154>
 800989c:	b913      	cbnz	r3, 80098a4 <_printf_float+0x1a4>
 800989e:	6822      	ldr	r2, [r4, #0]
 80098a0:	07d2      	lsls	r2, r2, #31
 80098a2:	d501      	bpl.n	80098a8 <_printf_float+0x1a8>
 80098a4:	3302      	adds	r3, #2
 80098a6:	e7f4      	b.n	8009892 <_printf_float+0x192>
 80098a8:	2301      	movs	r3, #1
 80098aa:	e7f2      	b.n	8009892 <_printf_float+0x192>
 80098ac:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80098b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098b2:	4299      	cmp	r1, r3
 80098b4:	db05      	blt.n	80098c2 <_printf_float+0x1c2>
 80098b6:	6823      	ldr	r3, [r4, #0]
 80098b8:	6121      	str	r1, [r4, #16]
 80098ba:	07d8      	lsls	r0, r3, #31
 80098bc:	d5ea      	bpl.n	8009894 <_printf_float+0x194>
 80098be:	1c4b      	adds	r3, r1, #1
 80098c0:	e7e7      	b.n	8009892 <_printf_float+0x192>
 80098c2:	2900      	cmp	r1, #0
 80098c4:	bfd4      	ite	le
 80098c6:	f1c1 0202 	rsble	r2, r1, #2
 80098ca:	2201      	movgt	r2, #1
 80098cc:	4413      	add	r3, r2
 80098ce:	e7e0      	b.n	8009892 <_printf_float+0x192>
 80098d0:	6823      	ldr	r3, [r4, #0]
 80098d2:	055a      	lsls	r2, r3, #21
 80098d4:	d407      	bmi.n	80098e6 <_printf_float+0x1e6>
 80098d6:	6923      	ldr	r3, [r4, #16]
 80098d8:	4642      	mov	r2, r8
 80098da:	4631      	mov	r1, r6
 80098dc:	4628      	mov	r0, r5
 80098de:	47b8      	blx	r7
 80098e0:	3001      	adds	r0, #1
 80098e2:	d12b      	bne.n	800993c <_printf_float+0x23c>
 80098e4:	e767      	b.n	80097b6 <_printf_float+0xb6>
 80098e6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80098ea:	f240 80dd 	bls.w	8009aa8 <_printf_float+0x3a8>
 80098ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80098f2:	2200      	movs	r2, #0
 80098f4:	2300      	movs	r3, #0
 80098f6:	f7f7 f907 	bl	8000b08 <__aeabi_dcmpeq>
 80098fa:	2800      	cmp	r0, #0
 80098fc:	d033      	beq.n	8009966 <_printf_float+0x266>
 80098fe:	4a37      	ldr	r2, [pc, #220]	@ (80099dc <_printf_float+0x2dc>)
 8009900:	2301      	movs	r3, #1
 8009902:	4631      	mov	r1, r6
 8009904:	4628      	mov	r0, r5
 8009906:	47b8      	blx	r7
 8009908:	3001      	adds	r0, #1
 800990a:	f43f af54 	beq.w	80097b6 <_printf_float+0xb6>
 800990e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009912:	4543      	cmp	r3, r8
 8009914:	db02      	blt.n	800991c <_printf_float+0x21c>
 8009916:	6823      	ldr	r3, [r4, #0]
 8009918:	07d8      	lsls	r0, r3, #31
 800991a:	d50f      	bpl.n	800993c <_printf_float+0x23c>
 800991c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009920:	4631      	mov	r1, r6
 8009922:	4628      	mov	r0, r5
 8009924:	47b8      	blx	r7
 8009926:	3001      	adds	r0, #1
 8009928:	f43f af45 	beq.w	80097b6 <_printf_float+0xb6>
 800992c:	f04f 0900 	mov.w	r9, #0
 8009930:	f108 38ff 	add.w	r8, r8, #4294967295
 8009934:	f104 0a1a 	add.w	sl, r4, #26
 8009938:	45c8      	cmp	r8, r9
 800993a:	dc09      	bgt.n	8009950 <_printf_float+0x250>
 800993c:	6823      	ldr	r3, [r4, #0]
 800993e:	079b      	lsls	r3, r3, #30
 8009940:	f100 8103 	bmi.w	8009b4a <_printf_float+0x44a>
 8009944:	68e0      	ldr	r0, [r4, #12]
 8009946:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009948:	4298      	cmp	r0, r3
 800994a:	bfb8      	it	lt
 800994c:	4618      	movlt	r0, r3
 800994e:	e734      	b.n	80097ba <_printf_float+0xba>
 8009950:	2301      	movs	r3, #1
 8009952:	4652      	mov	r2, sl
 8009954:	4631      	mov	r1, r6
 8009956:	4628      	mov	r0, r5
 8009958:	47b8      	blx	r7
 800995a:	3001      	adds	r0, #1
 800995c:	f43f af2b 	beq.w	80097b6 <_printf_float+0xb6>
 8009960:	f109 0901 	add.w	r9, r9, #1
 8009964:	e7e8      	b.n	8009938 <_printf_float+0x238>
 8009966:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009968:	2b00      	cmp	r3, #0
 800996a:	dc39      	bgt.n	80099e0 <_printf_float+0x2e0>
 800996c:	4a1b      	ldr	r2, [pc, #108]	@ (80099dc <_printf_float+0x2dc>)
 800996e:	2301      	movs	r3, #1
 8009970:	4631      	mov	r1, r6
 8009972:	4628      	mov	r0, r5
 8009974:	47b8      	blx	r7
 8009976:	3001      	adds	r0, #1
 8009978:	f43f af1d 	beq.w	80097b6 <_printf_float+0xb6>
 800997c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009980:	ea59 0303 	orrs.w	r3, r9, r3
 8009984:	d102      	bne.n	800998c <_printf_float+0x28c>
 8009986:	6823      	ldr	r3, [r4, #0]
 8009988:	07d9      	lsls	r1, r3, #31
 800998a:	d5d7      	bpl.n	800993c <_printf_float+0x23c>
 800998c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009990:	4631      	mov	r1, r6
 8009992:	4628      	mov	r0, r5
 8009994:	47b8      	blx	r7
 8009996:	3001      	adds	r0, #1
 8009998:	f43f af0d 	beq.w	80097b6 <_printf_float+0xb6>
 800999c:	f04f 0a00 	mov.w	sl, #0
 80099a0:	f104 0b1a 	add.w	fp, r4, #26
 80099a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099a6:	425b      	negs	r3, r3
 80099a8:	4553      	cmp	r3, sl
 80099aa:	dc01      	bgt.n	80099b0 <_printf_float+0x2b0>
 80099ac:	464b      	mov	r3, r9
 80099ae:	e793      	b.n	80098d8 <_printf_float+0x1d8>
 80099b0:	2301      	movs	r3, #1
 80099b2:	465a      	mov	r2, fp
 80099b4:	4631      	mov	r1, r6
 80099b6:	4628      	mov	r0, r5
 80099b8:	47b8      	blx	r7
 80099ba:	3001      	adds	r0, #1
 80099bc:	f43f aefb 	beq.w	80097b6 <_printf_float+0xb6>
 80099c0:	f10a 0a01 	add.w	sl, sl, #1
 80099c4:	e7ee      	b.n	80099a4 <_printf_float+0x2a4>
 80099c6:	bf00      	nop
 80099c8:	7fefffff 	.word	0x7fefffff
 80099cc:	0800d660 	.word	0x0800d660
 80099d0:	0800d664 	.word	0x0800d664
 80099d4:	0800d668 	.word	0x0800d668
 80099d8:	0800d66c 	.word	0x0800d66c
 80099dc:	0800d670 	.word	0x0800d670
 80099e0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80099e2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80099e6:	4553      	cmp	r3, sl
 80099e8:	bfa8      	it	ge
 80099ea:	4653      	movge	r3, sl
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	4699      	mov	r9, r3
 80099f0:	dc36      	bgt.n	8009a60 <_printf_float+0x360>
 80099f2:	f04f 0b00 	mov.w	fp, #0
 80099f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80099fa:	f104 021a 	add.w	r2, r4, #26
 80099fe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009a00:	9306      	str	r3, [sp, #24]
 8009a02:	eba3 0309 	sub.w	r3, r3, r9
 8009a06:	455b      	cmp	r3, fp
 8009a08:	dc31      	bgt.n	8009a6e <_printf_float+0x36e>
 8009a0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a0c:	459a      	cmp	sl, r3
 8009a0e:	dc3a      	bgt.n	8009a86 <_printf_float+0x386>
 8009a10:	6823      	ldr	r3, [r4, #0]
 8009a12:	07da      	lsls	r2, r3, #31
 8009a14:	d437      	bmi.n	8009a86 <_printf_float+0x386>
 8009a16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a18:	ebaa 0903 	sub.w	r9, sl, r3
 8009a1c:	9b06      	ldr	r3, [sp, #24]
 8009a1e:	ebaa 0303 	sub.w	r3, sl, r3
 8009a22:	4599      	cmp	r9, r3
 8009a24:	bfa8      	it	ge
 8009a26:	4699      	movge	r9, r3
 8009a28:	f1b9 0f00 	cmp.w	r9, #0
 8009a2c:	dc33      	bgt.n	8009a96 <_printf_float+0x396>
 8009a2e:	f04f 0800 	mov.w	r8, #0
 8009a32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a36:	f104 0b1a 	add.w	fp, r4, #26
 8009a3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a3c:	ebaa 0303 	sub.w	r3, sl, r3
 8009a40:	eba3 0309 	sub.w	r3, r3, r9
 8009a44:	4543      	cmp	r3, r8
 8009a46:	f77f af79 	ble.w	800993c <_printf_float+0x23c>
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	465a      	mov	r2, fp
 8009a4e:	4631      	mov	r1, r6
 8009a50:	4628      	mov	r0, r5
 8009a52:	47b8      	blx	r7
 8009a54:	3001      	adds	r0, #1
 8009a56:	f43f aeae 	beq.w	80097b6 <_printf_float+0xb6>
 8009a5a:	f108 0801 	add.w	r8, r8, #1
 8009a5e:	e7ec      	b.n	8009a3a <_printf_float+0x33a>
 8009a60:	4642      	mov	r2, r8
 8009a62:	4631      	mov	r1, r6
 8009a64:	4628      	mov	r0, r5
 8009a66:	47b8      	blx	r7
 8009a68:	3001      	adds	r0, #1
 8009a6a:	d1c2      	bne.n	80099f2 <_printf_float+0x2f2>
 8009a6c:	e6a3      	b.n	80097b6 <_printf_float+0xb6>
 8009a6e:	2301      	movs	r3, #1
 8009a70:	4631      	mov	r1, r6
 8009a72:	4628      	mov	r0, r5
 8009a74:	9206      	str	r2, [sp, #24]
 8009a76:	47b8      	blx	r7
 8009a78:	3001      	adds	r0, #1
 8009a7a:	f43f ae9c 	beq.w	80097b6 <_printf_float+0xb6>
 8009a7e:	9a06      	ldr	r2, [sp, #24]
 8009a80:	f10b 0b01 	add.w	fp, fp, #1
 8009a84:	e7bb      	b.n	80099fe <_printf_float+0x2fe>
 8009a86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a8a:	4631      	mov	r1, r6
 8009a8c:	4628      	mov	r0, r5
 8009a8e:	47b8      	blx	r7
 8009a90:	3001      	adds	r0, #1
 8009a92:	d1c0      	bne.n	8009a16 <_printf_float+0x316>
 8009a94:	e68f      	b.n	80097b6 <_printf_float+0xb6>
 8009a96:	9a06      	ldr	r2, [sp, #24]
 8009a98:	464b      	mov	r3, r9
 8009a9a:	4442      	add	r2, r8
 8009a9c:	4631      	mov	r1, r6
 8009a9e:	4628      	mov	r0, r5
 8009aa0:	47b8      	blx	r7
 8009aa2:	3001      	adds	r0, #1
 8009aa4:	d1c3      	bne.n	8009a2e <_printf_float+0x32e>
 8009aa6:	e686      	b.n	80097b6 <_printf_float+0xb6>
 8009aa8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009aac:	f1ba 0f01 	cmp.w	sl, #1
 8009ab0:	dc01      	bgt.n	8009ab6 <_printf_float+0x3b6>
 8009ab2:	07db      	lsls	r3, r3, #31
 8009ab4:	d536      	bpl.n	8009b24 <_printf_float+0x424>
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	4642      	mov	r2, r8
 8009aba:	4631      	mov	r1, r6
 8009abc:	4628      	mov	r0, r5
 8009abe:	47b8      	blx	r7
 8009ac0:	3001      	adds	r0, #1
 8009ac2:	f43f ae78 	beq.w	80097b6 <_printf_float+0xb6>
 8009ac6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009aca:	4631      	mov	r1, r6
 8009acc:	4628      	mov	r0, r5
 8009ace:	47b8      	blx	r7
 8009ad0:	3001      	adds	r0, #1
 8009ad2:	f43f ae70 	beq.w	80097b6 <_printf_float+0xb6>
 8009ad6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009ada:	2200      	movs	r2, #0
 8009adc:	2300      	movs	r3, #0
 8009ade:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009ae2:	f7f7 f811 	bl	8000b08 <__aeabi_dcmpeq>
 8009ae6:	b9c0      	cbnz	r0, 8009b1a <_printf_float+0x41a>
 8009ae8:	4653      	mov	r3, sl
 8009aea:	f108 0201 	add.w	r2, r8, #1
 8009aee:	4631      	mov	r1, r6
 8009af0:	4628      	mov	r0, r5
 8009af2:	47b8      	blx	r7
 8009af4:	3001      	adds	r0, #1
 8009af6:	d10c      	bne.n	8009b12 <_printf_float+0x412>
 8009af8:	e65d      	b.n	80097b6 <_printf_float+0xb6>
 8009afa:	2301      	movs	r3, #1
 8009afc:	465a      	mov	r2, fp
 8009afe:	4631      	mov	r1, r6
 8009b00:	4628      	mov	r0, r5
 8009b02:	47b8      	blx	r7
 8009b04:	3001      	adds	r0, #1
 8009b06:	f43f ae56 	beq.w	80097b6 <_printf_float+0xb6>
 8009b0a:	f108 0801 	add.w	r8, r8, #1
 8009b0e:	45d0      	cmp	r8, sl
 8009b10:	dbf3      	blt.n	8009afa <_printf_float+0x3fa>
 8009b12:	464b      	mov	r3, r9
 8009b14:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009b18:	e6df      	b.n	80098da <_printf_float+0x1da>
 8009b1a:	f04f 0800 	mov.w	r8, #0
 8009b1e:	f104 0b1a 	add.w	fp, r4, #26
 8009b22:	e7f4      	b.n	8009b0e <_printf_float+0x40e>
 8009b24:	2301      	movs	r3, #1
 8009b26:	4642      	mov	r2, r8
 8009b28:	e7e1      	b.n	8009aee <_printf_float+0x3ee>
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	464a      	mov	r2, r9
 8009b2e:	4631      	mov	r1, r6
 8009b30:	4628      	mov	r0, r5
 8009b32:	47b8      	blx	r7
 8009b34:	3001      	adds	r0, #1
 8009b36:	f43f ae3e 	beq.w	80097b6 <_printf_float+0xb6>
 8009b3a:	f108 0801 	add.w	r8, r8, #1
 8009b3e:	68e3      	ldr	r3, [r4, #12]
 8009b40:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009b42:	1a5b      	subs	r3, r3, r1
 8009b44:	4543      	cmp	r3, r8
 8009b46:	dcf0      	bgt.n	8009b2a <_printf_float+0x42a>
 8009b48:	e6fc      	b.n	8009944 <_printf_float+0x244>
 8009b4a:	f04f 0800 	mov.w	r8, #0
 8009b4e:	f104 0919 	add.w	r9, r4, #25
 8009b52:	e7f4      	b.n	8009b3e <_printf_float+0x43e>

08009b54 <_printf_common>:
 8009b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b58:	4616      	mov	r6, r2
 8009b5a:	4698      	mov	r8, r3
 8009b5c:	688a      	ldr	r2, [r1, #8]
 8009b5e:	690b      	ldr	r3, [r1, #16]
 8009b60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009b64:	4293      	cmp	r3, r2
 8009b66:	bfb8      	it	lt
 8009b68:	4613      	movlt	r3, r2
 8009b6a:	6033      	str	r3, [r6, #0]
 8009b6c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009b70:	4607      	mov	r7, r0
 8009b72:	460c      	mov	r4, r1
 8009b74:	b10a      	cbz	r2, 8009b7a <_printf_common+0x26>
 8009b76:	3301      	adds	r3, #1
 8009b78:	6033      	str	r3, [r6, #0]
 8009b7a:	6823      	ldr	r3, [r4, #0]
 8009b7c:	0699      	lsls	r1, r3, #26
 8009b7e:	bf42      	ittt	mi
 8009b80:	6833      	ldrmi	r3, [r6, #0]
 8009b82:	3302      	addmi	r3, #2
 8009b84:	6033      	strmi	r3, [r6, #0]
 8009b86:	6825      	ldr	r5, [r4, #0]
 8009b88:	f015 0506 	ands.w	r5, r5, #6
 8009b8c:	d106      	bne.n	8009b9c <_printf_common+0x48>
 8009b8e:	f104 0a19 	add.w	sl, r4, #25
 8009b92:	68e3      	ldr	r3, [r4, #12]
 8009b94:	6832      	ldr	r2, [r6, #0]
 8009b96:	1a9b      	subs	r3, r3, r2
 8009b98:	42ab      	cmp	r3, r5
 8009b9a:	dc26      	bgt.n	8009bea <_printf_common+0x96>
 8009b9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009ba0:	6822      	ldr	r2, [r4, #0]
 8009ba2:	3b00      	subs	r3, #0
 8009ba4:	bf18      	it	ne
 8009ba6:	2301      	movne	r3, #1
 8009ba8:	0692      	lsls	r2, r2, #26
 8009baa:	d42b      	bmi.n	8009c04 <_printf_common+0xb0>
 8009bac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009bb0:	4641      	mov	r1, r8
 8009bb2:	4638      	mov	r0, r7
 8009bb4:	47c8      	blx	r9
 8009bb6:	3001      	adds	r0, #1
 8009bb8:	d01e      	beq.n	8009bf8 <_printf_common+0xa4>
 8009bba:	6823      	ldr	r3, [r4, #0]
 8009bbc:	6922      	ldr	r2, [r4, #16]
 8009bbe:	f003 0306 	and.w	r3, r3, #6
 8009bc2:	2b04      	cmp	r3, #4
 8009bc4:	bf02      	ittt	eq
 8009bc6:	68e5      	ldreq	r5, [r4, #12]
 8009bc8:	6833      	ldreq	r3, [r6, #0]
 8009bca:	1aed      	subeq	r5, r5, r3
 8009bcc:	68a3      	ldr	r3, [r4, #8]
 8009bce:	bf0c      	ite	eq
 8009bd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009bd4:	2500      	movne	r5, #0
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	bfc4      	itt	gt
 8009bda:	1a9b      	subgt	r3, r3, r2
 8009bdc:	18ed      	addgt	r5, r5, r3
 8009bde:	2600      	movs	r6, #0
 8009be0:	341a      	adds	r4, #26
 8009be2:	42b5      	cmp	r5, r6
 8009be4:	d11a      	bne.n	8009c1c <_printf_common+0xc8>
 8009be6:	2000      	movs	r0, #0
 8009be8:	e008      	b.n	8009bfc <_printf_common+0xa8>
 8009bea:	2301      	movs	r3, #1
 8009bec:	4652      	mov	r2, sl
 8009bee:	4641      	mov	r1, r8
 8009bf0:	4638      	mov	r0, r7
 8009bf2:	47c8      	blx	r9
 8009bf4:	3001      	adds	r0, #1
 8009bf6:	d103      	bne.n	8009c00 <_printf_common+0xac>
 8009bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8009bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c00:	3501      	adds	r5, #1
 8009c02:	e7c6      	b.n	8009b92 <_printf_common+0x3e>
 8009c04:	18e1      	adds	r1, r4, r3
 8009c06:	1c5a      	adds	r2, r3, #1
 8009c08:	2030      	movs	r0, #48	@ 0x30
 8009c0a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009c0e:	4422      	add	r2, r4
 8009c10:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009c14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009c18:	3302      	adds	r3, #2
 8009c1a:	e7c7      	b.n	8009bac <_printf_common+0x58>
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	4622      	mov	r2, r4
 8009c20:	4641      	mov	r1, r8
 8009c22:	4638      	mov	r0, r7
 8009c24:	47c8      	blx	r9
 8009c26:	3001      	adds	r0, #1
 8009c28:	d0e6      	beq.n	8009bf8 <_printf_common+0xa4>
 8009c2a:	3601      	adds	r6, #1
 8009c2c:	e7d9      	b.n	8009be2 <_printf_common+0x8e>
	...

08009c30 <_printf_i>:
 8009c30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c34:	7e0f      	ldrb	r7, [r1, #24]
 8009c36:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009c38:	2f78      	cmp	r7, #120	@ 0x78
 8009c3a:	4691      	mov	r9, r2
 8009c3c:	4680      	mov	r8, r0
 8009c3e:	460c      	mov	r4, r1
 8009c40:	469a      	mov	sl, r3
 8009c42:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009c46:	d807      	bhi.n	8009c58 <_printf_i+0x28>
 8009c48:	2f62      	cmp	r7, #98	@ 0x62
 8009c4a:	d80a      	bhi.n	8009c62 <_printf_i+0x32>
 8009c4c:	2f00      	cmp	r7, #0
 8009c4e:	f000 80d2 	beq.w	8009df6 <_printf_i+0x1c6>
 8009c52:	2f58      	cmp	r7, #88	@ 0x58
 8009c54:	f000 80b9 	beq.w	8009dca <_printf_i+0x19a>
 8009c58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009c5c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009c60:	e03a      	b.n	8009cd8 <_printf_i+0xa8>
 8009c62:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009c66:	2b15      	cmp	r3, #21
 8009c68:	d8f6      	bhi.n	8009c58 <_printf_i+0x28>
 8009c6a:	a101      	add	r1, pc, #4	@ (adr r1, 8009c70 <_printf_i+0x40>)
 8009c6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009c70:	08009cc9 	.word	0x08009cc9
 8009c74:	08009cdd 	.word	0x08009cdd
 8009c78:	08009c59 	.word	0x08009c59
 8009c7c:	08009c59 	.word	0x08009c59
 8009c80:	08009c59 	.word	0x08009c59
 8009c84:	08009c59 	.word	0x08009c59
 8009c88:	08009cdd 	.word	0x08009cdd
 8009c8c:	08009c59 	.word	0x08009c59
 8009c90:	08009c59 	.word	0x08009c59
 8009c94:	08009c59 	.word	0x08009c59
 8009c98:	08009c59 	.word	0x08009c59
 8009c9c:	08009ddd 	.word	0x08009ddd
 8009ca0:	08009d07 	.word	0x08009d07
 8009ca4:	08009d97 	.word	0x08009d97
 8009ca8:	08009c59 	.word	0x08009c59
 8009cac:	08009c59 	.word	0x08009c59
 8009cb0:	08009dff 	.word	0x08009dff
 8009cb4:	08009c59 	.word	0x08009c59
 8009cb8:	08009d07 	.word	0x08009d07
 8009cbc:	08009c59 	.word	0x08009c59
 8009cc0:	08009c59 	.word	0x08009c59
 8009cc4:	08009d9f 	.word	0x08009d9f
 8009cc8:	6833      	ldr	r3, [r6, #0]
 8009cca:	1d1a      	adds	r2, r3, #4
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	6032      	str	r2, [r6, #0]
 8009cd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009cd4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009cd8:	2301      	movs	r3, #1
 8009cda:	e09d      	b.n	8009e18 <_printf_i+0x1e8>
 8009cdc:	6833      	ldr	r3, [r6, #0]
 8009cde:	6820      	ldr	r0, [r4, #0]
 8009ce0:	1d19      	adds	r1, r3, #4
 8009ce2:	6031      	str	r1, [r6, #0]
 8009ce4:	0606      	lsls	r6, r0, #24
 8009ce6:	d501      	bpl.n	8009cec <_printf_i+0xbc>
 8009ce8:	681d      	ldr	r5, [r3, #0]
 8009cea:	e003      	b.n	8009cf4 <_printf_i+0xc4>
 8009cec:	0645      	lsls	r5, r0, #25
 8009cee:	d5fb      	bpl.n	8009ce8 <_printf_i+0xb8>
 8009cf0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009cf4:	2d00      	cmp	r5, #0
 8009cf6:	da03      	bge.n	8009d00 <_printf_i+0xd0>
 8009cf8:	232d      	movs	r3, #45	@ 0x2d
 8009cfa:	426d      	negs	r5, r5
 8009cfc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009d00:	4859      	ldr	r0, [pc, #356]	@ (8009e68 <_printf_i+0x238>)
 8009d02:	230a      	movs	r3, #10
 8009d04:	e011      	b.n	8009d2a <_printf_i+0xfa>
 8009d06:	6821      	ldr	r1, [r4, #0]
 8009d08:	6833      	ldr	r3, [r6, #0]
 8009d0a:	0608      	lsls	r0, r1, #24
 8009d0c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009d10:	d402      	bmi.n	8009d18 <_printf_i+0xe8>
 8009d12:	0649      	lsls	r1, r1, #25
 8009d14:	bf48      	it	mi
 8009d16:	b2ad      	uxthmi	r5, r5
 8009d18:	2f6f      	cmp	r7, #111	@ 0x6f
 8009d1a:	4853      	ldr	r0, [pc, #332]	@ (8009e68 <_printf_i+0x238>)
 8009d1c:	6033      	str	r3, [r6, #0]
 8009d1e:	bf14      	ite	ne
 8009d20:	230a      	movne	r3, #10
 8009d22:	2308      	moveq	r3, #8
 8009d24:	2100      	movs	r1, #0
 8009d26:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009d2a:	6866      	ldr	r6, [r4, #4]
 8009d2c:	60a6      	str	r6, [r4, #8]
 8009d2e:	2e00      	cmp	r6, #0
 8009d30:	bfa2      	ittt	ge
 8009d32:	6821      	ldrge	r1, [r4, #0]
 8009d34:	f021 0104 	bicge.w	r1, r1, #4
 8009d38:	6021      	strge	r1, [r4, #0]
 8009d3a:	b90d      	cbnz	r5, 8009d40 <_printf_i+0x110>
 8009d3c:	2e00      	cmp	r6, #0
 8009d3e:	d04b      	beq.n	8009dd8 <_printf_i+0x1a8>
 8009d40:	4616      	mov	r6, r2
 8009d42:	fbb5 f1f3 	udiv	r1, r5, r3
 8009d46:	fb03 5711 	mls	r7, r3, r1, r5
 8009d4a:	5dc7      	ldrb	r7, [r0, r7]
 8009d4c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009d50:	462f      	mov	r7, r5
 8009d52:	42bb      	cmp	r3, r7
 8009d54:	460d      	mov	r5, r1
 8009d56:	d9f4      	bls.n	8009d42 <_printf_i+0x112>
 8009d58:	2b08      	cmp	r3, #8
 8009d5a:	d10b      	bne.n	8009d74 <_printf_i+0x144>
 8009d5c:	6823      	ldr	r3, [r4, #0]
 8009d5e:	07df      	lsls	r7, r3, #31
 8009d60:	d508      	bpl.n	8009d74 <_printf_i+0x144>
 8009d62:	6923      	ldr	r3, [r4, #16]
 8009d64:	6861      	ldr	r1, [r4, #4]
 8009d66:	4299      	cmp	r1, r3
 8009d68:	bfde      	ittt	le
 8009d6a:	2330      	movle	r3, #48	@ 0x30
 8009d6c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009d70:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009d74:	1b92      	subs	r2, r2, r6
 8009d76:	6122      	str	r2, [r4, #16]
 8009d78:	f8cd a000 	str.w	sl, [sp]
 8009d7c:	464b      	mov	r3, r9
 8009d7e:	aa03      	add	r2, sp, #12
 8009d80:	4621      	mov	r1, r4
 8009d82:	4640      	mov	r0, r8
 8009d84:	f7ff fee6 	bl	8009b54 <_printf_common>
 8009d88:	3001      	adds	r0, #1
 8009d8a:	d14a      	bne.n	8009e22 <_printf_i+0x1f2>
 8009d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d90:	b004      	add	sp, #16
 8009d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d96:	6823      	ldr	r3, [r4, #0]
 8009d98:	f043 0320 	orr.w	r3, r3, #32
 8009d9c:	6023      	str	r3, [r4, #0]
 8009d9e:	4833      	ldr	r0, [pc, #204]	@ (8009e6c <_printf_i+0x23c>)
 8009da0:	2778      	movs	r7, #120	@ 0x78
 8009da2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009da6:	6823      	ldr	r3, [r4, #0]
 8009da8:	6831      	ldr	r1, [r6, #0]
 8009daa:	061f      	lsls	r7, r3, #24
 8009dac:	f851 5b04 	ldr.w	r5, [r1], #4
 8009db0:	d402      	bmi.n	8009db8 <_printf_i+0x188>
 8009db2:	065f      	lsls	r7, r3, #25
 8009db4:	bf48      	it	mi
 8009db6:	b2ad      	uxthmi	r5, r5
 8009db8:	6031      	str	r1, [r6, #0]
 8009dba:	07d9      	lsls	r1, r3, #31
 8009dbc:	bf44      	itt	mi
 8009dbe:	f043 0320 	orrmi.w	r3, r3, #32
 8009dc2:	6023      	strmi	r3, [r4, #0]
 8009dc4:	b11d      	cbz	r5, 8009dce <_printf_i+0x19e>
 8009dc6:	2310      	movs	r3, #16
 8009dc8:	e7ac      	b.n	8009d24 <_printf_i+0xf4>
 8009dca:	4827      	ldr	r0, [pc, #156]	@ (8009e68 <_printf_i+0x238>)
 8009dcc:	e7e9      	b.n	8009da2 <_printf_i+0x172>
 8009dce:	6823      	ldr	r3, [r4, #0]
 8009dd0:	f023 0320 	bic.w	r3, r3, #32
 8009dd4:	6023      	str	r3, [r4, #0]
 8009dd6:	e7f6      	b.n	8009dc6 <_printf_i+0x196>
 8009dd8:	4616      	mov	r6, r2
 8009dda:	e7bd      	b.n	8009d58 <_printf_i+0x128>
 8009ddc:	6833      	ldr	r3, [r6, #0]
 8009dde:	6825      	ldr	r5, [r4, #0]
 8009de0:	6961      	ldr	r1, [r4, #20]
 8009de2:	1d18      	adds	r0, r3, #4
 8009de4:	6030      	str	r0, [r6, #0]
 8009de6:	062e      	lsls	r6, r5, #24
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	d501      	bpl.n	8009df0 <_printf_i+0x1c0>
 8009dec:	6019      	str	r1, [r3, #0]
 8009dee:	e002      	b.n	8009df6 <_printf_i+0x1c6>
 8009df0:	0668      	lsls	r0, r5, #25
 8009df2:	d5fb      	bpl.n	8009dec <_printf_i+0x1bc>
 8009df4:	8019      	strh	r1, [r3, #0]
 8009df6:	2300      	movs	r3, #0
 8009df8:	6123      	str	r3, [r4, #16]
 8009dfa:	4616      	mov	r6, r2
 8009dfc:	e7bc      	b.n	8009d78 <_printf_i+0x148>
 8009dfe:	6833      	ldr	r3, [r6, #0]
 8009e00:	1d1a      	adds	r2, r3, #4
 8009e02:	6032      	str	r2, [r6, #0]
 8009e04:	681e      	ldr	r6, [r3, #0]
 8009e06:	6862      	ldr	r2, [r4, #4]
 8009e08:	2100      	movs	r1, #0
 8009e0a:	4630      	mov	r0, r6
 8009e0c:	f7f6 fa00 	bl	8000210 <memchr>
 8009e10:	b108      	cbz	r0, 8009e16 <_printf_i+0x1e6>
 8009e12:	1b80      	subs	r0, r0, r6
 8009e14:	6060      	str	r0, [r4, #4]
 8009e16:	6863      	ldr	r3, [r4, #4]
 8009e18:	6123      	str	r3, [r4, #16]
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e20:	e7aa      	b.n	8009d78 <_printf_i+0x148>
 8009e22:	6923      	ldr	r3, [r4, #16]
 8009e24:	4632      	mov	r2, r6
 8009e26:	4649      	mov	r1, r9
 8009e28:	4640      	mov	r0, r8
 8009e2a:	47d0      	blx	sl
 8009e2c:	3001      	adds	r0, #1
 8009e2e:	d0ad      	beq.n	8009d8c <_printf_i+0x15c>
 8009e30:	6823      	ldr	r3, [r4, #0]
 8009e32:	079b      	lsls	r3, r3, #30
 8009e34:	d413      	bmi.n	8009e5e <_printf_i+0x22e>
 8009e36:	68e0      	ldr	r0, [r4, #12]
 8009e38:	9b03      	ldr	r3, [sp, #12]
 8009e3a:	4298      	cmp	r0, r3
 8009e3c:	bfb8      	it	lt
 8009e3e:	4618      	movlt	r0, r3
 8009e40:	e7a6      	b.n	8009d90 <_printf_i+0x160>
 8009e42:	2301      	movs	r3, #1
 8009e44:	4632      	mov	r2, r6
 8009e46:	4649      	mov	r1, r9
 8009e48:	4640      	mov	r0, r8
 8009e4a:	47d0      	blx	sl
 8009e4c:	3001      	adds	r0, #1
 8009e4e:	d09d      	beq.n	8009d8c <_printf_i+0x15c>
 8009e50:	3501      	adds	r5, #1
 8009e52:	68e3      	ldr	r3, [r4, #12]
 8009e54:	9903      	ldr	r1, [sp, #12]
 8009e56:	1a5b      	subs	r3, r3, r1
 8009e58:	42ab      	cmp	r3, r5
 8009e5a:	dcf2      	bgt.n	8009e42 <_printf_i+0x212>
 8009e5c:	e7eb      	b.n	8009e36 <_printf_i+0x206>
 8009e5e:	2500      	movs	r5, #0
 8009e60:	f104 0619 	add.w	r6, r4, #25
 8009e64:	e7f5      	b.n	8009e52 <_printf_i+0x222>
 8009e66:	bf00      	nop
 8009e68:	0800d672 	.word	0x0800d672
 8009e6c:	0800d683 	.word	0x0800d683

08009e70 <std>:
 8009e70:	2300      	movs	r3, #0
 8009e72:	b510      	push	{r4, lr}
 8009e74:	4604      	mov	r4, r0
 8009e76:	e9c0 3300 	strd	r3, r3, [r0]
 8009e7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e7e:	6083      	str	r3, [r0, #8]
 8009e80:	8181      	strh	r1, [r0, #12]
 8009e82:	6643      	str	r3, [r0, #100]	@ 0x64
 8009e84:	81c2      	strh	r2, [r0, #14]
 8009e86:	6183      	str	r3, [r0, #24]
 8009e88:	4619      	mov	r1, r3
 8009e8a:	2208      	movs	r2, #8
 8009e8c:	305c      	adds	r0, #92	@ 0x5c
 8009e8e:	f000 f914 	bl	800a0ba <memset>
 8009e92:	4b0d      	ldr	r3, [pc, #52]	@ (8009ec8 <std+0x58>)
 8009e94:	6263      	str	r3, [r4, #36]	@ 0x24
 8009e96:	4b0d      	ldr	r3, [pc, #52]	@ (8009ecc <std+0x5c>)
 8009e98:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8009ed0 <std+0x60>)
 8009e9c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8009ed4 <std+0x64>)
 8009ea0:	6323      	str	r3, [r4, #48]	@ 0x30
 8009ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8009ed8 <std+0x68>)
 8009ea4:	6224      	str	r4, [r4, #32]
 8009ea6:	429c      	cmp	r4, r3
 8009ea8:	d006      	beq.n	8009eb8 <std+0x48>
 8009eaa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009eae:	4294      	cmp	r4, r2
 8009eb0:	d002      	beq.n	8009eb8 <std+0x48>
 8009eb2:	33d0      	adds	r3, #208	@ 0xd0
 8009eb4:	429c      	cmp	r4, r3
 8009eb6:	d105      	bne.n	8009ec4 <std+0x54>
 8009eb8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ec0:	f000 b978 	b.w	800a1b4 <__retarget_lock_init_recursive>
 8009ec4:	bd10      	pop	{r4, pc}
 8009ec6:	bf00      	nop
 8009ec8:	0800a035 	.word	0x0800a035
 8009ecc:	0800a057 	.word	0x0800a057
 8009ed0:	0800a08f 	.word	0x0800a08f
 8009ed4:	0800a0b3 	.word	0x0800a0b3
 8009ed8:	20000714 	.word	0x20000714

08009edc <stdio_exit_handler>:
 8009edc:	4a02      	ldr	r2, [pc, #8]	@ (8009ee8 <stdio_exit_handler+0xc>)
 8009ede:	4903      	ldr	r1, [pc, #12]	@ (8009eec <stdio_exit_handler+0x10>)
 8009ee0:	4803      	ldr	r0, [pc, #12]	@ (8009ef0 <stdio_exit_handler+0x14>)
 8009ee2:	f000 b869 	b.w	8009fb8 <_fwalk_sglue>
 8009ee6:	bf00      	nop
 8009ee8:	20000040 	.word	0x20000040
 8009eec:	0800bb15 	.word	0x0800bb15
 8009ef0:	20000050 	.word	0x20000050

08009ef4 <cleanup_stdio>:
 8009ef4:	6841      	ldr	r1, [r0, #4]
 8009ef6:	4b0c      	ldr	r3, [pc, #48]	@ (8009f28 <cleanup_stdio+0x34>)
 8009ef8:	4299      	cmp	r1, r3
 8009efa:	b510      	push	{r4, lr}
 8009efc:	4604      	mov	r4, r0
 8009efe:	d001      	beq.n	8009f04 <cleanup_stdio+0x10>
 8009f00:	f001 fe08 	bl	800bb14 <_fflush_r>
 8009f04:	68a1      	ldr	r1, [r4, #8]
 8009f06:	4b09      	ldr	r3, [pc, #36]	@ (8009f2c <cleanup_stdio+0x38>)
 8009f08:	4299      	cmp	r1, r3
 8009f0a:	d002      	beq.n	8009f12 <cleanup_stdio+0x1e>
 8009f0c:	4620      	mov	r0, r4
 8009f0e:	f001 fe01 	bl	800bb14 <_fflush_r>
 8009f12:	68e1      	ldr	r1, [r4, #12]
 8009f14:	4b06      	ldr	r3, [pc, #24]	@ (8009f30 <cleanup_stdio+0x3c>)
 8009f16:	4299      	cmp	r1, r3
 8009f18:	d004      	beq.n	8009f24 <cleanup_stdio+0x30>
 8009f1a:	4620      	mov	r0, r4
 8009f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f20:	f001 bdf8 	b.w	800bb14 <_fflush_r>
 8009f24:	bd10      	pop	{r4, pc}
 8009f26:	bf00      	nop
 8009f28:	20000714 	.word	0x20000714
 8009f2c:	2000077c 	.word	0x2000077c
 8009f30:	200007e4 	.word	0x200007e4

08009f34 <global_stdio_init.part.0>:
 8009f34:	b510      	push	{r4, lr}
 8009f36:	4b0b      	ldr	r3, [pc, #44]	@ (8009f64 <global_stdio_init.part.0+0x30>)
 8009f38:	4c0b      	ldr	r4, [pc, #44]	@ (8009f68 <global_stdio_init.part.0+0x34>)
 8009f3a:	4a0c      	ldr	r2, [pc, #48]	@ (8009f6c <global_stdio_init.part.0+0x38>)
 8009f3c:	601a      	str	r2, [r3, #0]
 8009f3e:	4620      	mov	r0, r4
 8009f40:	2200      	movs	r2, #0
 8009f42:	2104      	movs	r1, #4
 8009f44:	f7ff ff94 	bl	8009e70 <std>
 8009f48:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009f4c:	2201      	movs	r2, #1
 8009f4e:	2109      	movs	r1, #9
 8009f50:	f7ff ff8e 	bl	8009e70 <std>
 8009f54:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009f58:	2202      	movs	r2, #2
 8009f5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f5e:	2112      	movs	r1, #18
 8009f60:	f7ff bf86 	b.w	8009e70 <std>
 8009f64:	2000084c 	.word	0x2000084c
 8009f68:	20000714 	.word	0x20000714
 8009f6c:	08009edd 	.word	0x08009edd

08009f70 <__sfp_lock_acquire>:
 8009f70:	4801      	ldr	r0, [pc, #4]	@ (8009f78 <__sfp_lock_acquire+0x8>)
 8009f72:	f000 b920 	b.w	800a1b6 <__retarget_lock_acquire_recursive>
 8009f76:	bf00      	nop
 8009f78:	20000855 	.word	0x20000855

08009f7c <__sfp_lock_release>:
 8009f7c:	4801      	ldr	r0, [pc, #4]	@ (8009f84 <__sfp_lock_release+0x8>)
 8009f7e:	f000 b91b 	b.w	800a1b8 <__retarget_lock_release_recursive>
 8009f82:	bf00      	nop
 8009f84:	20000855 	.word	0x20000855

08009f88 <__sinit>:
 8009f88:	b510      	push	{r4, lr}
 8009f8a:	4604      	mov	r4, r0
 8009f8c:	f7ff fff0 	bl	8009f70 <__sfp_lock_acquire>
 8009f90:	6a23      	ldr	r3, [r4, #32]
 8009f92:	b11b      	cbz	r3, 8009f9c <__sinit+0x14>
 8009f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f98:	f7ff bff0 	b.w	8009f7c <__sfp_lock_release>
 8009f9c:	4b04      	ldr	r3, [pc, #16]	@ (8009fb0 <__sinit+0x28>)
 8009f9e:	6223      	str	r3, [r4, #32]
 8009fa0:	4b04      	ldr	r3, [pc, #16]	@ (8009fb4 <__sinit+0x2c>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d1f5      	bne.n	8009f94 <__sinit+0xc>
 8009fa8:	f7ff ffc4 	bl	8009f34 <global_stdio_init.part.0>
 8009fac:	e7f2      	b.n	8009f94 <__sinit+0xc>
 8009fae:	bf00      	nop
 8009fb0:	08009ef5 	.word	0x08009ef5
 8009fb4:	2000084c 	.word	0x2000084c

08009fb8 <_fwalk_sglue>:
 8009fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fbc:	4607      	mov	r7, r0
 8009fbe:	4688      	mov	r8, r1
 8009fc0:	4614      	mov	r4, r2
 8009fc2:	2600      	movs	r6, #0
 8009fc4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009fc8:	f1b9 0901 	subs.w	r9, r9, #1
 8009fcc:	d505      	bpl.n	8009fda <_fwalk_sglue+0x22>
 8009fce:	6824      	ldr	r4, [r4, #0]
 8009fd0:	2c00      	cmp	r4, #0
 8009fd2:	d1f7      	bne.n	8009fc4 <_fwalk_sglue+0xc>
 8009fd4:	4630      	mov	r0, r6
 8009fd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fda:	89ab      	ldrh	r3, [r5, #12]
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	d907      	bls.n	8009ff0 <_fwalk_sglue+0x38>
 8009fe0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009fe4:	3301      	adds	r3, #1
 8009fe6:	d003      	beq.n	8009ff0 <_fwalk_sglue+0x38>
 8009fe8:	4629      	mov	r1, r5
 8009fea:	4638      	mov	r0, r7
 8009fec:	47c0      	blx	r8
 8009fee:	4306      	orrs	r6, r0
 8009ff0:	3568      	adds	r5, #104	@ 0x68
 8009ff2:	e7e9      	b.n	8009fc8 <_fwalk_sglue+0x10>

08009ff4 <siprintf>:
 8009ff4:	b40e      	push	{r1, r2, r3}
 8009ff6:	b500      	push	{lr}
 8009ff8:	b09c      	sub	sp, #112	@ 0x70
 8009ffa:	ab1d      	add	r3, sp, #116	@ 0x74
 8009ffc:	9002      	str	r0, [sp, #8]
 8009ffe:	9006      	str	r0, [sp, #24]
 800a000:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a004:	4809      	ldr	r0, [pc, #36]	@ (800a02c <siprintf+0x38>)
 800a006:	9107      	str	r1, [sp, #28]
 800a008:	9104      	str	r1, [sp, #16]
 800a00a:	4909      	ldr	r1, [pc, #36]	@ (800a030 <siprintf+0x3c>)
 800a00c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a010:	9105      	str	r1, [sp, #20]
 800a012:	6800      	ldr	r0, [r0, #0]
 800a014:	9301      	str	r3, [sp, #4]
 800a016:	a902      	add	r1, sp, #8
 800a018:	f001 fbfc 	bl	800b814 <_svfiprintf_r>
 800a01c:	9b02      	ldr	r3, [sp, #8]
 800a01e:	2200      	movs	r2, #0
 800a020:	701a      	strb	r2, [r3, #0]
 800a022:	b01c      	add	sp, #112	@ 0x70
 800a024:	f85d eb04 	ldr.w	lr, [sp], #4
 800a028:	b003      	add	sp, #12
 800a02a:	4770      	bx	lr
 800a02c:	2000004c 	.word	0x2000004c
 800a030:	ffff0208 	.word	0xffff0208

0800a034 <__sread>:
 800a034:	b510      	push	{r4, lr}
 800a036:	460c      	mov	r4, r1
 800a038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a03c:	f000 f86c 	bl	800a118 <_read_r>
 800a040:	2800      	cmp	r0, #0
 800a042:	bfab      	itete	ge
 800a044:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a046:	89a3      	ldrhlt	r3, [r4, #12]
 800a048:	181b      	addge	r3, r3, r0
 800a04a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a04e:	bfac      	ite	ge
 800a050:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a052:	81a3      	strhlt	r3, [r4, #12]
 800a054:	bd10      	pop	{r4, pc}

0800a056 <__swrite>:
 800a056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a05a:	461f      	mov	r7, r3
 800a05c:	898b      	ldrh	r3, [r1, #12]
 800a05e:	05db      	lsls	r3, r3, #23
 800a060:	4605      	mov	r5, r0
 800a062:	460c      	mov	r4, r1
 800a064:	4616      	mov	r6, r2
 800a066:	d505      	bpl.n	800a074 <__swrite+0x1e>
 800a068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a06c:	2302      	movs	r3, #2
 800a06e:	2200      	movs	r2, #0
 800a070:	f000 f840 	bl	800a0f4 <_lseek_r>
 800a074:	89a3      	ldrh	r3, [r4, #12]
 800a076:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a07a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a07e:	81a3      	strh	r3, [r4, #12]
 800a080:	4632      	mov	r2, r6
 800a082:	463b      	mov	r3, r7
 800a084:	4628      	mov	r0, r5
 800a086:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a08a:	f000 b857 	b.w	800a13c <_write_r>

0800a08e <__sseek>:
 800a08e:	b510      	push	{r4, lr}
 800a090:	460c      	mov	r4, r1
 800a092:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a096:	f000 f82d 	bl	800a0f4 <_lseek_r>
 800a09a:	1c43      	adds	r3, r0, #1
 800a09c:	89a3      	ldrh	r3, [r4, #12]
 800a09e:	bf15      	itete	ne
 800a0a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a0a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a0a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a0aa:	81a3      	strheq	r3, [r4, #12]
 800a0ac:	bf18      	it	ne
 800a0ae:	81a3      	strhne	r3, [r4, #12]
 800a0b0:	bd10      	pop	{r4, pc}

0800a0b2 <__sclose>:
 800a0b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0b6:	f000 b80d 	b.w	800a0d4 <_close_r>

0800a0ba <memset>:
 800a0ba:	4402      	add	r2, r0
 800a0bc:	4603      	mov	r3, r0
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d100      	bne.n	800a0c4 <memset+0xa>
 800a0c2:	4770      	bx	lr
 800a0c4:	f803 1b01 	strb.w	r1, [r3], #1
 800a0c8:	e7f9      	b.n	800a0be <memset+0x4>
	...

0800a0cc <_localeconv_r>:
 800a0cc:	4800      	ldr	r0, [pc, #0]	@ (800a0d0 <_localeconv_r+0x4>)
 800a0ce:	4770      	bx	lr
 800a0d0:	2000018c 	.word	0x2000018c

0800a0d4 <_close_r>:
 800a0d4:	b538      	push	{r3, r4, r5, lr}
 800a0d6:	4d06      	ldr	r5, [pc, #24]	@ (800a0f0 <_close_r+0x1c>)
 800a0d8:	2300      	movs	r3, #0
 800a0da:	4604      	mov	r4, r0
 800a0dc:	4608      	mov	r0, r1
 800a0de:	602b      	str	r3, [r5, #0]
 800a0e0:	f7f9 fdba 	bl	8003c58 <_close>
 800a0e4:	1c43      	adds	r3, r0, #1
 800a0e6:	d102      	bne.n	800a0ee <_close_r+0x1a>
 800a0e8:	682b      	ldr	r3, [r5, #0]
 800a0ea:	b103      	cbz	r3, 800a0ee <_close_r+0x1a>
 800a0ec:	6023      	str	r3, [r4, #0]
 800a0ee:	bd38      	pop	{r3, r4, r5, pc}
 800a0f0:	20000850 	.word	0x20000850

0800a0f4 <_lseek_r>:
 800a0f4:	b538      	push	{r3, r4, r5, lr}
 800a0f6:	4d07      	ldr	r5, [pc, #28]	@ (800a114 <_lseek_r+0x20>)
 800a0f8:	4604      	mov	r4, r0
 800a0fa:	4608      	mov	r0, r1
 800a0fc:	4611      	mov	r1, r2
 800a0fe:	2200      	movs	r2, #0
 800a100:	602a      	str	r2, [r5, #0]
 800a102:	461a      	mov	r2, r3
 800a104:	f7f9 fdcf 	bl	8003ca6 <_lseek>
 800a108:	1c43      	adds	r3, r0, #1
 800a10a:	d102      	bne.n	800a112 <_lseek_r+0x1e>
 800a10c:	682b      	ldr	r3, [r5, #0]
 800a10e:	b103      	cbz	r3, 800a112 <_lseek_r+0x1e>
 800a110:	6023      	str	r3, [r4, #0]
 800a112:	bd38      	pop	{r3, r4, r5, pc}
 800a114:	20000850 	.word	0x20000850

0800a118 <_read_r>:
 800a118:	b538      	push	{r3, r4, r5, lr}
 800a11a:	4d07      	ldr	r5, [pc, #28]	@ (800a138 <_read_r+0x20>)
 800a11c:	4604      	mov	r4, r0
 800a11e:	4608      	mov	r0, r1
 800a120:	4611      	mov	r1, r2
 800a122:	2200      	movs	r2, #0
 800a124:	602a      	str	r2, [r5, #0]
 800a126:	461a      	mov	r2, r3
 800a128:	f7f9 fd5d 	bl	8003be6 <_read>
 800a12c:	1c43      	adds	r3, r0, #1
 800a12e:	d102      	bne.n	800a136 <_read_r+0x1e>
 800a130:	682b      	ldr	r3, [r5, #0]
 800a132:	b103      	cbz	r3, 800a136 <_read_r+0x1e>
 800a134:	6023      	str	r3, [r4, #0]
 800a136:	bd38      	pop	{r3, r4, r5, pc}
 800a138:	20000850 	.word	0x20000850

0800a13c <_write_r>:
 800a13c:	b538      	push	{r3, r4, r5, lr}
 800a13e:	4d07      	ldr	r5, [pc, #28]	@ (800a15c <_write_r+0x20>)
 800a140:	4604      	mov	r4, r0
 800a142:	4608      	mov	r0, r1
 800a144:	4611      	mov	r1, r2
 800a146:	2200      	movs	r2, #0
 800a148:	602a      	str	r2, [r5, #0]
 800a14a:	461a      	mov	r2, r3
 800a14c:	f7f9 fd68 	bl	8003c20 <_write>
 800a150:	1c43      	adds	r3, r0, #1
 800a152:	d102      	bne.n	800a15a <_write_r+0x1e>
 800a154:	682b      	ldr	r3, [r5, #0]
 800a156:	b103      	cbz	r3, 800a15a <_write_r+0x1e>
 800a158:	6023      	str	r3, [r4, #0]
 800a15a:	bd38      	pop	{r3, r4, r5, pc}
 800a15c:	20000850 	.word	0x20000850

0800a160 <__errno>:
 800a160:	4b01      	ldr	r3, [pc, #4]	@ (800a168 <__errno+0x8>)
 800a162:	6818      	ldr	r0, [r3, #0]
 800a164:	4770      	bx	lr
 800a166:	bf00      	nop
 800a168:	2000004c 	.word	0x2000004c

0800a16c <__libc_init_array>:
 800a16c:	b570      	push	{r4, r5, r6, lr}
 800a16e:	4d0d      	ldr	r5, [pc, #52]	@ (800a1a4 <__libc_init_array+0x38>)
 800a170:	4c0d      	ldr	r4, [pc, #52]	@ (800a1a8 <__libc_init_array+0x3c>)
 800a172:	1b64      	subs	r4, r4, r5
 800a174:	10a4      	asrs	r4, r4, #2
 800a176:	2600      	movs	r6, #0
 800a178:	42a6      	cmp	r6, r4
 800a17a:	d109      	bne.n	800a190 <__libc_init_array+0x24>
 800a17c:	4d0b      	ldr	r5, [pc, #44]	@ (800a1ac <__libc_init_array+0x40>)
 800a17e:	4c0c      	ldr	r4, [pc, #48]	@ (800a1b0 <__libc_init_array+0x44>)
 800a180:	f003 fa46 	bl	800d610 <_init>
 800a184:	1b64      	subs	r4, r4, r5
 800a186:	10a4      	asrs	r4, r4, #2
 800a188:	2600      	movs	r6, #0
 800a18a:	42a6      	cmp	r6, r4
 800a18c:	d105      	bne.n	800a19a <__libc_init_array+0x2e>
 800a18e:	bd70      	pop	{r4, r5, r6, pc}
 800a190:	f855 3b04 	ldr.w	r3, [r5], #4
 800a194:	4798      	blx	r3
 800a196:	3601      	adds	r6, #1
 800a198:	e7ee      	b.n	800a178 <__libc_init_array+0xc>
 800a19a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a19e:	4798      	blx	r3
 800a1a0:	3601      	adds	r6, #1
 800a1a2:	e7f2      	b.n	800a18a <__libc_init_array+0x1e>
 800a1a4:	0800dbb0 	.word	0x0800dbb0
 800a1a8:	0800dbb0 	.word	0x0800dbb0
 800a1ac:	0800dbb0 	.word	0x0800dbb0
 800a1b0:	0800dbb4 	.word	0x0800dbb4

0800a1b4 <__retarget_lock_init_recursive>:
 800a1b4:	4770      	bx	lr

0800a1b6 <__retarget_lock_acquire_recursive>:
 800a1b6:	4770      	bx	lr

0800a1b8 <__retarget_lock_release_recursive>:
 800a1b8:	4770      	bx	lr

0800a1ba <quorem>:
 800a1ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1be:	6903      	ldr	r3, [r0, #16]
 800a1c0:	690c      	ldr	r4, [r1, #16]
 800a1c2:	42a3      	cmp	r3, r4
 800a1c4:	4607      	mov	r7, r0
 800a1c6:	db7e      	blt.n	800a2c6 <quorem+0x10c>
 800a1c8:	3c01      	subs	r4, #1
 800a1ca:	f101 0814 	add.w	r8, r1, #20
 800a1ce:	00a3      	lsls	r3, r4, #2
 800a1d0:	f100 0514 	add.w	r5, r0, #20
 800a1d4:	9300      	str	r3, [sp, #0]
 800a1d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a1da:	9301      	str	r3, [sp, #4]
 800a1dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a1e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a1e4:	3301      	adds	r3, #1
 800a1e6:	429a      	cmp	r2, r3
 800a1e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a1ec:	fbb2 f6f3 	udiv	r6, r2, r3
 800a1f0:	d32e      	bcc.n	800a250 <quorem+0x96>
 800a1f2:	f04f 0a00 	mov.w	sl, #0
 800a1f6:	46c4      	mov	ip, r8
 800a1f8:	46ae      	mov	lr, r5
 800a1fa:	46d3      	mov	fp, sl
 800a1fc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a200:	b298      	uxth	r0, r3
 800a202:	fb06 a000 	mla	r0, r6, r0, sl
 800a206:	0c02      	lsrs	r2, r0, #16
 800a208:	0c1b      	lsrs	r3, r3, #16
 800a20a:	fb06 2303 	mla	r3, r6, r3, r2
 800a20e:	f8de 2000 	ldr.w	r2, [lr]
 800a212:	b280      	uxth	r0, r0
 800a214:	b292      	uxth	r2, r2
 800a216:	1a12      	subs	r2, r2, r0
 800a218:	445a      	add	r2, fp
 800a21a:	f8de 0000 	ldr.w	r0, [lr]
 800a21e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a222:	b29b      	uxth	r3, r3
 800a224:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a228:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a22c:	b292      	uxth	r2, r2
 800a22e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a232:	45e1      	cmp	r9, ip
 800a234:	f84e 2b04 	str.w	r2, [lr], #4
 800a238:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a23c:	d2de      	bcs.n	800a1fc <quorem+0x42>
 800a23e:	9b00      	ldr	r3, [sp, #0]
 800a240:	58eb      	ldr	r3, [r5, r3]
 800a242:	b92b      	cbnz	r3, 800a250 <quorem+0x96>
 800a244:	9b01      	ldr	r3, [sp, #4]
 800a246:	3b04      	subs	r3, #4
 800a248:	429d      	cmp	r5, r3
 800a24a:	461a      	mov	r2, r3
 800a24c:	d32f      	bcc.n	800a2ae <quorem+0xf4>
 800a24e:	613c      	str	r4, [r7, #16]
 800a250:	4638      	mov	r0, r7
 800a252:	f001 f97b 	bl	800b54c <__mcmp>
 800a256:	2800      	cmp	r0, #0
 800a258:	db25      	blt.n	800a2a6 <quorem+0xec>
 800a25a:	4629      	mov	r1, r5
 800a25c:	2000      	movs	r0, #0
 800a25e:	f858 2b04 	ldr.w	r2, [r8], #4
 800a262:	f8d1 c000 	ldr.w	ip, [r1]
 800a266:	fa1f fe82 	uxth.w	lr, r2
 800a26a:	fa1f f38c 	uxth.w	r3, ip
 800a26e:	eba3 030e 	sub.w	r3, r3, lr
 800a272:	4403      	add	r3, r0
 800a274:	0c12      	lsrs	r2, r2, #16
 800a276:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a27a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a27e:	b29b      	uxth	r3, r3
 800a280:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a284:	45c1      	cmp	r9, r8
 800a286:	f841 3b04 	str.w	r3, [r1], #4
 800a28a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a28e:	d2e6      	bcs.n	800a25e <quorem+0xa4>
 800a290:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a294:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a298:	b922      	cbnz	r2, 800a2a4 <quorem+0xea>
 800a29a:	3b04      	subs	r3, #4
 800a29c:	429d      	cmp	r5, r3
 800a29e:	461a      	mov	r2, r3
 800a2a0:	d30b      	bcc.n	800a2ba <quorem+0x100>
 800a2a2:	613c      	str	r4, [r7, #16]
 800a2a4:	3601      	adds	r6, #1
 800a2a6:	4630      	mov	r0, r6
 800a2a8:	b003      	add	sp, #12
 800a2aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ae:	6812      	ldr	r2, [r2, #0]
 800a2b0:	3b04      	subs	r3, #4
 800a2b2:	2a00      	cmp	r2, #0
 800a2b4:	d1cb      	bne.n	800a24e <quorem+0x94>
 800a2b6:	3c01      	subs	r4, #1
 800a2b8:	e7c6      	b.n	800a248 <quorem+0x8e>
 800a2ba:	6812      	ldr	r2, [r2, #0]
 800a2bc:	3b04      	subs	r3, #4
 800a2be:	2a00      	cmp	r2, #0
 800a2c0:	d1ef      	bne.n	800a2a2 <quorem+0xe8>
 800a2c2:	3c01      	subs	r4, #1
 800a2c4:	e7ea      	b.n	800a29c <quorem+0xe2>
 800a2c6:	2000      	movs	r0, #0
 800a2c8:	e7ee      	b.n	800a2a8 <quorem+0xee>
 800a2ca:	0000      	movs	r0, r0
 800a2cc:	0000      	movs	r0, r0
	...

0800a2d0 <_dtoa_r>:
 800a2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2d4:	69c7      	ldr	r7, [r0, #28]
 800a2d6:	b099      	sub	sp, #100	@ 0x64
 800a2d8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a2dc:	ec55 4b10 	vmov	r4, r5, d0
 800a2e0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a2e2:	9109      	str	r1, [sp, #36]	@ 0x24
 800a2e4:	4683      	mov	fp, r0
 800a2e6:	920e      	str	r2, [sp, #56]	@ 0x38
 800a2e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a2ea:	b97f      	cbnz	r7, 800a30c <_dtoa_r+0x3c>
 800a2ec:	2010      	movs	r0, #16
 800a2ee:	f000 fdfd 	bl	800aeec <malloc>
 800a2f2:	4602      	mov	r2, r0
 800a2f4:	f8cb 001c 	str.w	r0, [fp, #28]
 800a2f8:	b920      	cbnz	r0, 800a304 <_dtoa_r+0x34>
 800a2fa:	4ba7      	ldr	r3, [pc, #668]	@ (800a598 <_dtoa_r+0x2c8>)
 800a2fc:	21ef      	movs	r1, #239	@ 0xef
 800a2fe:	48a7      	ldr	r0, [pc, #668]	@ (800a59c <_dtoa_r+0x2cc>)
 800a300:	f001 fc68 	bl	800bbd4 <__assert_func>
 800a304:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a308:	6007      	str	r7, [r0, #0]
 800a30a:	60c7      	str	r7, [r0, #12]
 800a30c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a310:	6819      	ldr	r1, [r3, #0]
 800a312:	b159      	cbz	r1, 800a32c <_dtoa_r+0x5c>
 800a314:	685a      	ldr	r2, [r3, #4]
 800a316:	604a      	str	r2, [r1, #4]
 800a318:	2301      	movs	r3, #1
 800a31a:	4093      	lsls	r3, r2
 800a31c:	608b      	str	r3, [r1, #8]
 800a31e:	4658      	mov	r0, fp
 800a320:	f000 feda 	bl	800b0d8 <_Bfree>
 800a324:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a328:	2200      	movs	r2, #0
 800a32a:	601a      	str	r2, [r3, #0]
 800a32c:	1e2b      	subs	r3, r5, #0
 800a32e:	bfb9      	ittee	lt
 800a330:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a334:	9303      	strlt	r3, [sp, #12]
 800a336:	2300      	movge	r3, #0
 800a338:	6033      	strge	r3, [r6, #0]
 800a33a:	9f03      	ldr	r7, [sp, #12]
 800a33c:	4b98      	ldr	r3, [pc, #608]	@ (800a5a0 <_dtoa_r+0x2d0>)
 800a33e:	bfbc      	itt	lt
 800a340:	2201      	movlt	r2, #1
 800a342:	6032      	strlt	r2, [r6, #0]
 800a344:	43bb      	bics	r3, r7
 800a346:	d112      	bne.n	800a36e <_dtoa_r+0x9e>
 800a348:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a34a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a34e:	6013      	str	r3, [r2, #0]
 800a350:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a354:	4323      	orrs	r3, r4
 800a356:	f000 854d 	beq.w	800adf4 <_dtoa_r+0xb24>
 800a35a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a35c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a5b4 <_dtoa_r+0x2e4>
 800a360:	2b00      	cmp	r3, #0
 800a362:	f000 854f 	beq.w	800ae04 <_dtoa_r+0xb34>
 800a366:	f10a 0303 	add.w	r3, sl, #3
 800a36a:	f000 bd49 	b.w	800ae00 <_dtoa_r+0xb30>
 800a36e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a372:	2200      	movs	r2, #0
 800a374:	ec51 0b17 	vmov	r0, r1, d7
 800a378:	2300      	movs	r3, #0
 800a37a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a37e:	f7f6 fbc3 	bl	8000b08 <__aeabi_dcmpeq>
 800a382:	4680      	mov	r8, r0
 800a384:	b158      	cbz	r0, 800a39e <_dtoa_r+0xce>
 800a386:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a388:	2301      	movs	r3, #1
 800a38a:	6013      	str	r3, [r2, #0]
 800a38c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a38e:	b113      	cbz	r3, 800a396 <_dtoa_r+0xc6>
 800a390:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a392:	4b84      	ldr	r3, [pc, #528]	@ (800a5a4 <_dtoa_r+0x2d4>)
 800a394:	6013      	str	r3, [r2, #0]
 800a396:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a5b8 <_dtoa_r+0x2e8>
 800a39a:	f000 bd33 	b.w	800ae04 <_dtoa_r+0xb34>
 800a39e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a3a2:	aa16      	add	r2, sp, #88	@ 0x58
 800a3a4:	a917      	add	r1, sp, #92	@ 0x5c
 800a3a6:	4658      	mov	r0, fp
 800a3a8:	f001 f980 	bl	800b6ac <__d2b>
 800a3ac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a3b0:	4681      	mov	r9, r0
 800a3b2:	2e00      	cmp	r6, #0
 800a3b4:	d077      	beq.n	800a4a6 <_dtoa_r+0x1d6>
 800a3b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a3b8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a3bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a3c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a3c4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a3c8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a3cc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a3d0:	4619      	mov	r1, r3
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	4b74      	ldr	r3, [pc, #464]	@ (800a5a8 <_dtoa_r+0x2d8>)
 800a3d6:	f7f5 ff77 	bl	80002c8 <__aeabi_dsub>
 800a3da:	a369      	add	r3, pc, #420	@ (adr r3, 800a580 <_dtoa_r+0x2b0>)
 800a3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e0:	f7f6 f92a 	bl	8000638 <__aeabi_dmul>
 800a3e4:	a368      	add	r3, pc, #416	@ (adr r3, 800a588 <_dtoa_r+0x2b8>)
 800a3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ea:	f7f5 ff6f 	bl	80002cc <__adddf3>
 800a3ee:	4604      	mov	r4, r0
 800a3f0:	4630      	mov	r0, r6
 800a3f2:	460d      	mov	r5, r1
 800a3f4:	f7f6 f8b6 	bl	8000564 <__aeabi_i2d>
 800a3f8:	a365      	add	r3, pc, #404	@ (adr r3, 800a590 <_dtoa_r+0x2c0>)
 800a3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3fe:	f7f6 f91b 	bl	8000638 <__aeabi_dmul>
 800a402:	4602      	mov	r2, r0
 800a404:	460b      	mov	r3, r1
 800a406:	4620      	mov	r0, r4
 800a408:	4629      	mov	r1, r5
 800a40a:	f7f5 ff5f 	bl	80002cc <__adddf3>
 800a40e:	4604      	mov	r4, r0
 800a410:	460d      	mov	r5, r1
 800a412:	f7f6 fbc1 	bl	8000b98 <__aeabi_d2iz>
 800a416:	2200      	movs	r2, #0
 800a418:	4607      	mov	r7, r0
 800a41a:	2300      	movs	r3, #0
 800a41c:	4620      	mov	r0, r4
 800a41e:	4629      	mov	r1, r5
 800a420:	f7f6 fb7c 	bl	8000b1c <__aeabi_dcmplt>
 800a424:	b140      	cbz	r0, 800a438 <_dtoa_r+0x168>
 800a426:	4638      	mov	r0, r7
 800a428:	f7f6 f89c 	bl	8000564 <__aeabi_i2d>
 800a42c:	4622      	mov	r2, r4
 800a42e:	462b      	mov	r3, r5
 800a430:	f7f6 fb6a 	bl	8000b08 <__aeabi_dcmpeq>
 800a434:	b900      	cbnz	r0, 800a438 <_dtoa_r+0x168>
 800a436:	3f01      	subs	r7, #1
 800a438:	2f16      	cmp	r7, #22
 800a43a:	d851      	bhi.n	800a4e0 <_dtoa_r+0x210>
 800a43c:	4b5b      	ldr	r3, [pc, #364]	@ (800a5ac <_dtoa_r+0x2dc>)
 800a43e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a446:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a44a:	f7f6 fb67 	bl	8000b1c <__aeabi_dcmplt>
 800a44e:	2800      	cmp	r0, #0
 800a450:	d048      	beq.n	800a4e4 <_dtoa_r+0x214>
 800a452:	3f01      	subs	r7, #1
 800a454:	2300      	movs	r3, #0
 800a456:	9312      	str	r3, [sp, #72]	@ 0x48
 800a458:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a45a:	1b9b      	subs	r3, r3, r6
 800a45c:	1e5a      	subs	r2, r3, #1
 800a45e:	bf44      	itt	mi
 800a460:	f1c3 0801 	rsbmi	r8, r3, #1
 800a464:	2300      	movmi	r3, #0
 800a466:	9208      	str	r2, [sp, #32]
 800a468:	bf54      	ite	pl
 800a46a:	f04f 0800 	movpl.w	r8, #0
 800a46e:	9308      	strmi	r3, [sp, #32]
 800a470:	2f00      	cmp	r7, #0
 800a472:	db39      	blt.n	800a4e8 <_dtoa_r+0x218>
 800a474:	9b08      	ldr	r3, [sp, #32]
 800a476:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a478:	443b      	add	r3, r7
 800a47a:	9308      	str	r3, [sp, #32]
 800a47c:	2300      	movs	r3, #0
 800a47e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a480:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a482:	2b09      	cmp	r3, #9
 800a484:	d864      	bhi.n	800a550 <_dtoa_r+0x280>
 800a486:	2b05      	cmp	r3, #5
 800a488:	bfc4      	itt	gt
 800a48a:	3b04      	subgt	r3, #4
 800a48c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a48e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a490:	f1a3 0302 	sub.w	r3, r3, #2
 800a494:	bfcc      	ite	gt
 800a496:	2400      	movgt	r4, #0
 800a498:	2401      	movle	r4, #1
 800a49a:	2b03      	cmp	r3, #3
 800a49c:	d863      	bhi.n	800a566 <_dtoa_r+0x296>
 800a49e:	e8df f003 	tbb	[pc, r3]
 800a4a2:	372a      	.short	0x372a
 800a4a4:	5535      	.short	0x5535
 800a4a6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a4aa:	441e      	add	r6, r3
 800a4ac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a4b0:	2b20      	cmp	r3, #32
 800a4b2:	bfc1      	itttt	gt
 800a4b4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a4b8:	409f      	lslgt	r7, r3
 800a4ba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a4be:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a4c2:	bfd6      	itet	le
 800a4c4:	f1c3 0320 	rsble	r3, r3, #32
 800a4c8:	ea47 0003 	orrgt.w	r0, r7, r3
 800a4cc:	fa04 f003 	lslle.w	r0, r4, r3
 800a4d0:	f7f6 f838 	bl	8000544 <__aeabi_ui2d>
 800a4d4:	2201      	movs	r2, #1
 800a4d6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a4da:	3e01      	subs	r6, #1
 800a4dc:	9214      	str	r2, [sp, #80]	@ 0x50
 800a4de:	e777      	b.n	800a3d0 <_dtoa_r+0x100>
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	e7b8      	b.n	800a456 <_dtoa_r+0x186>
 800a4e4:	9012      	str	r0, [sp, #72]	@ 0x48
 800a4e6:	e7b7      	b.n	800a458 <_dtoa_r+0x188>
 800a4e8:	427b      	negs	r3, r7
 800a4ea:	930a      	str	r3, [sp, #40]	@ 0x28
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	eba8 0807 	sub.w	r8, r8, r7
 800a4f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a4f4:	e7c4      	b.n	800a480 <_dtoa_r+0x1b0>
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a4fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	dc35      	bgt.n	800a56c <_dtoa_r+0x29c>
 800a500:	2301      	movs	r3, #1
 800a502:	9300      	str	r3, [sp, #0]
 800a504:	9307      	str	r3, [sp, #28]
 800a506:	461a      	mov	r2, r3
 800a508:	920e      	str	r2, [sp, #56]	@ 0x38
 800a50a:	e00b      	b.n	800a524 <_dtoa_r+0x254>
 800a50c:	2301      	movs	r3, #1
 800a50e:	e7f3      	b.n	800a4f8 <_dtoa_r+0x228>
 800a510:	2300      	movs	r3, #0
 800a512:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a514:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a516:	18fb      	adds	r3, r7, r3
 800a518:	9300      	str	r3, [sp, #0]
 800a51a:	3301      	adds	r3, #1
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	9307      	str	r3, [sp, #28]
 800a520:	bfb8      	it	lt
 800a522:	2301      	movlt	r3, #1
 800a524:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a528:	2100      	movs	r1, #0
 800a52a:	2204      	movs	r2, #4
 800a52c:	f102 0514 	add.w	r5, r2, #20
 800a530:	429d      	cmp	r5, r3
 800a532:	d91f      	bls.n	800a574 <_dtoa_r+0x2a4>
 800a534:	6041      	str	r1, [r0, #4]
 800a536:	4658      	mov	r0, fp
 800a538:	f000 fd8e 	bl	800b058 <_Balloc>
 800a53c:	4682      	mov	sl, r0
 800a53e:	2800      	cmp	r0, #0
 800a540:	d13c      	bne.n	800a5bc <_dtoa_r+0x2ec>
 800a542:	4b1b      	ldr	r3, [pc, #108]	@ (800a5b0 <_dtoa_r+0x2e0>)
 800a544:	4602      	mov	r2, r0
 800a546:	f240 11af 	movw	r1, #431	@ 0x1af
 800a54a:	e6d8      	b.n	800a2fe <_dtoa_r+0x2e>
 800a54c:	2301      	movs	r3, #1
 800a54e:	e7e0      	b.n	800a512 <_dtoa_r+0x242>
 800a550:	2401      	movs	r4, #1
 800a552:	2300      	movs	r3, #0
 800a554:	9309      	str	r3, [sp, #36]	@ 0x24
 800a556:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a558:	f04f 33ff 	mov.w	r3, #4294967295
 800a55c:	9300      	str	r3, [sp, #0]
 800a55e:	9307      	str	r3, [sp, #28]
 800a560:	2200      	movs	r2, #0
 800a562:	2312      	movs	r3, #18
 800a564:	e7d0      	b.n	800a508 <_dtoa_r+0x238>
 800a566:	2301      	movs	r3, #1
 800a568:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a56a:	e7f5      	b.n	800a558 <_dtoa_r+0x288>
 800a56c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a56e:	9300      	str	r3, [sp, #0]
 800a570:	9307      	str	r3, [sp, #28]
 800a572:	e7d7      	b.n	800a524 <_dtoa_r+0x254>
 800a574:	3101      	adds	r1, #1
 800a576:	0052      	lsls	r2, r2, #1
 800a578:	e7d8      	b.n	800a52c <_dtoa_r+0x25c>
 800a57a:	bf00      	nop
 800a57c:	f3af 8000 	nop.w
 800a580:	636f4361 	.word	0x636f4361
 800a584:	3fd287a7 	.word	0x3fd287a7
 800a588:	8b60c8b3 	.word	0x8b60c8b3
 800a58c:	3fc68a28 	.word	0x3fc68a28
 800a590:	509f79fb 	.word	0x509f79fb
 800a594:	3fd34413 	.word	0x3fd34413
 800a598:	0800d6a1 	.word	0x0800d6a1
 800a59c:	0800d6b8 	.word	0x0800d6b8
 800a5a0:	7ff00000 	.word	0x7ff00000
 800a5a4:	0800d671 	.word	0x0800d671
 800a5a8:	3ff80000 	.word	0x3ff80000
 800a5ac:	0800d7b0 	.word	0x0800d7b0
 800a5b0:	0800d710 	.word	0x0800d710
 800a5b4:	0800d69d 	.word	0x0800d69d
 800a5b8:	0800d670 	.word	0x0800d670
 800a5bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a5c0:	6018      	str	r0, [r3, #0]
 800a5c2:	9b07      	ldr	r3, [sp, #28]
 800a5c4:	2b0e      	cmp	r3, #14
 800a5c6:	f200 80a4 	bhi.w	800a712 <_dtoa_r+0x442>
 800a5ca:	2c00      	cmp	r4, #0
 800a5cc:	f000 80a1 	beq.w	800a712 <_dtoa_r+0x442>
 800a5d0:	2f00      	cmp	r7, #0
 800a5d2:	dd33      	ble.n	800a63c <_dtoa_r+0x36c>
 800a5d4:	4bad      	ldr	r3, [pc, #692]	@ (800a88c <_dtoa_r+0x5bc>)
 800a5d6:	f007 020f 	and.w	r2, r7, #15
 800a5da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a5de:	ed93 7b00 	vldr	d7, [r3]
 800a5e2:	05f8      	lsls	r0, r7, #23
 800a5e4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a5e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a5ec:	d516      	bpl.n	800a61c <_dtoa_r+0x34c>
 800a5ee:	4ba8      	ldr	r3, [pc, #672]	@ (800a890 <_dtoa_r+0x5c0>)
 800a5f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a5f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a5f8:	f7f6 f948 	bl	800088c <__aeabi_ddiv>
 800a5fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a600:	f004 040f 	and.w	r4, r4, #15
 800a604:	2603      	movs	r6, #3
 800a606:	4da2      	ldr	r5, [pc, #648]	@ (800a890 <_dtoa_r+0x5c0>)
 800a608:	b954      	cbnz	r4, 800a620 <_dtoa_r+0x350>
 800a60a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a60e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a612:	f7f6 f93b 	bl	800088c <__aeabi_ddiv>
 800a616:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a61a:	e028      	b.n	800a66e <_dtoa_r+0x39e>
 800a61c:	2602      	movs	r6, #2
 800a61e:	e7f2      	b.n	800a606 <_dtoa_r+0x336>
 800a620:	07e1      	lsls	r1, r4, #31
 800a622:	d508      	bpl.n	800a636 <_dtoa_r+0x366>
 800a624:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a628:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a62c:	f7f6 f804 	bl	8000638 <__aeabi_dmul>
 800a630:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a634:	3601      	adds	r6, #1
 800a636:	1064      	asrs	r4, r4, #1
 800a638:	3508      	adds	r5, #8
 800a63a:	e7e5      	b.n	800a608 <_dtoa_r+0x338>
 800a63c:	f000 80d2 	beq.w	800a7e4 <_dtoa_r+0x514>
 800a640:	427c      	negs	r4, r7
 800a642:	4b92      	ldr	r3, [pc, #584]	@ (800a88c <_dtoa_r+0x5bc>)
 800a644:	4d92      	ldr	r5, [pc, #584]	@ (800a890 <_dtoa_r+0x5c0>)
 800a646:	f004 020f 	and.w	r2, r4, #15
 800a64a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a652:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a656:	f7f5 ffef 	bl	8000638 <__aeabi_dmul>
 800a65a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a65e:	1124      	asrs	r4, r4, #4
 800a660:	2300      	movs	r3, #0
 800a662:	2602      	movs	r6, #2
 800a664:	2c00      	cmp	r4, #0
 800a666:	f040 80b2 	bne.w	800a7ce <_dtoa_r+0x4fe>
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d1d3      	bne.n	800a616 <_dtoa_r+0x346>
 800a66e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a670:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a674:	2b00      	cmp	r3, #0
 800a676:	f000 80b7 	beq.w	800a7e8 <_dtoa_r+0x518>
 800a67a:	4b86      	ldr	r3, [pc, #536]	@ (800a894 <_dtoa_r+0x5c4>)
 800a67c:	2200      	movs	r2, #0
 800a67e:	4620      	mov	r0, r4
 800a680:	4629      	mov	r1, r5
 800a682:	f7f6 fa4b 	bl	8000b1c <__aeabi_dcmplt>
 800a686:	2800      	cmp	r0, #0
 800a688:	f000 80ae 	beq.w	800a7e8 <_dtoa_r+0x518>
 800a68c:	9b07      	ldr	r3, [sp, #28]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	f000 80aa 	beq.w	800a7e8 <_dtoa_r+0x518>
 800a694:	9b00      	ldr	r3, [sp, #0]
 800a696:	2b00      	cmp	r3, #0
 800a698:	dd37      	ble.n	800a70a <_dtoa_r+0x43a>
 800a69a:	1e7b      	subs	r3, r7, #1
 800a69c:	9304      	str	r3, [sp, #16]
 800a69e:	4620      	mov	r0, r4
 800a6a0:	4b7d      	ldr	r3, [pc, #500]	@ (800a898 <_dtoa_r+0x5c8>)
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	4629      	mov	r1, r5
 800a6a6:	f7f5 ffc7 	bl	8000638 <__aeabi_dmul>
 800a6aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6ae:	9c00      	ldr	r4, [sp, #0]
 800a6b0:	3601      	adds	r6, #1
 800a6b2:	4630      	mov	r0, r6
 800a6b4:	f7f5 ff56 	bl	8000564 <__aeabi_i2d>
 800a6b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a6bc:	f7f5 ffbc 	bl	8000638 <__aeabi_dmul>
 800a6c0:	4b76      	ldr	r3, [pc, #472]	@ (800a89c <_dtoa_r+0x5cc>)
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	f7f5 fe02 	bl	80002cc <__adddf3>
 800a6c8:	4605      	mov	r5, r0
 800a6ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a6ce:	2c00      	cmp	r4, #0
 800a6d0:	f040 808d 	bne.w	800a7ee <_dtoa_r+0x51e>
 800a6d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6d8:	4b71      	ldr	r3, [pc, #452]	@ (800a8a0 <_dtoa_r+0x5d0>)
 800a6da:	2200      	movs	r2, #0
 800a6dc:	f7f5 fdf4 	bl	80002c8 <__aeabi_dsub>
 800a6e0:	4602      	mov	r2, r0
 800a6e2:	460b      	mov	r3, r1
 800a6e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a6e8:	462a      	mov	r2, r5
 800a6ea:	4633      	mov	r3, r6
 800a6ec:	f7f6 fa34 	bl	8000b58 <__aeabi_dcmpgt>
 800a6f0:	2800      	cmp	r0, #0
 800a6f2:	f040 828b 	bne.w	800ac0c <_dtoa_r+0x93c>
 800a6f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6fa:	462a      	mov	r2, r5
 800a6fc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a700:	f7f6 fa0c 	bl	8000b1c <__aeabi_dcmplt>
 800a704:	2800      	cmp	r0, #0
 800a706:	f040 8128 	bne.w	800a95a <_dtoa_r+0x68a>
 800a70a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a70e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a712:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a714:	2b00      	cmp	r3, #0
 800a716:	f2c0 815a 	blt.w	800a9ce <_dtoa_r+0x6fe>
 800a71a:	2f0e      	cmp	r7, #14
 800a71c:	f300 8157 	bgt.w	800a9ce <_dtoa_r+0x6fe>
 800a720:	4b5a      	ldr	r3, [pc, #360]	@ (800a88c <_dtoa_r+0x5bc>)
 800a722:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a726:	ed93 7b00 	vldr	d7, [r3]
 800a72a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	ed8d 7b00 	vstr	d7, [sp]
 800a732:	da03      	bge.n	800a73c <_dtoa_r+0x46c>
 800a734:	9b07      	ldr	r3, [sp, #28]
 800a736:	2b00      	cmp	r3, #0
 800a738:	f340 8101 	ble.w	800a93e <_dtoa_r+0x66e>
 800a73c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a740:	4656      	mov	r6, sl
 800a742:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a746:	4620      	mov	r0, r4
 800a748:	4629      	mov	r1, r5
 800a74a:	f7f6 f89f 	bl	800088c <__aeabi_ddiv>
 800a74e:	f7f6 fa23 	bl	8000b98 <__aeabi_d2iz>
 800a752:	4680      	mov	r8, r0
 800a754:	f7f5 ff06 	bl	8000564 <__aeabi_i2d>
 800a758:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a75c:	f7f5 ff6c 	bl	8000638 <__aeabi_dmul>
 800a760:	4602      	mov	r2, r0
 800a762:	460b      	mov	r3, r1
 800a764:	4620      	mov	r0, r4
 800a766:	4629      	mov	r1, r5
 800a768:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a76c:	f7f5 fdac 	bl	80002c8 <__aeabi_dsub>
 800a770:	f806 4b01 	strb.w	r4, [r6], #1
 800a774:	9d07      	ldr	r5, [sp, #28]
 800a776:	eba6 040a 	sub.w	r4, r6, sl
 800a77a:	42a5      	cmp	r5, r4
 800a77c:	4602      	mov	r2, r0
 800a77e:	460b      	mov	r3, r1
 800a780:	f040 8117 	bne.w	800a9b2 <_dtoa_r+0x6e2>
 800a784:	f7f5 fda2 	bl	80002cc <__adddf3>
 800a788:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a78c:	4604      	mov	r4, r0
 800a78e:	460d      	mov	r5, r1
 800a790:	f7f6 f9e2 	bl	8000b58 <__aeabi_dcmpgt>
 800a794:	2800      	cmp	r0, #0
 800a796:	f040 80f9 	bne.w	800a98c <_dtoa_r+0x6bc>
 800a79a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a79e:	4620      	mov	r0, r4
 800a7a0:	4629      	mov	r1, r5
 800a7a2:	f7f6 f9b1 	bl	8000b08 <__aeabi_dcmpeq>
 800a7a6:	b118      	cbz	r0, 800a7b0 <_dtoa_r+0x4e0>
 800a7a8:	f018 0f01 	tst.w	r8, #1
 800a7ac:	f040 80ee 	bne.w	800a98c <_dtoa_r+0x6bc>
 800a7b0:	4649      	mov	r1, r9
 800a7b2:	4658      	mov	r0, fp
 800a7b4:	f000 fc90 	bl	800b0d8 <_Bfree>
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	7033      	strb	r3, [r6, #0]
 800a7bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a7be:	3701      	adds	r7, #1
 800a7c0:	601f      	str	r7, [r3, #0]
 800a7c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	f000 831d 	beq.w	800ae04 <_dtoa_r+0xb34>
 800a7ca:	601e      	str	r6, [r3, #0]
 800a7cc:	e31a      	b.n	800ae04 <_dtoa_r+0xb34>
 800a7ce:	07e2      	lsls	r2, r4, #31
 800a7d0:	d505      	bpl.n	800a7de <_dtoa_r+0x50e>
 800a7d2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a7d6:	f7f5 ff2f 	bl	8000638 <__aeabi_dmul>
 800a7da:	3601      	adds	r6, #1
 800a7dc:	2301      	movs	r3, #1
 800a7de:	1064      	asrs	r4, r4, #1
 800a7e0:	3508      	adds	r5, #8
 800a7e2:	e73f      	b.n	800a664 <_dtoa_r+0x394>
 800a7e4:	2602      	movs	r6, #2
 800a7e6:	e742      	b.n	800a66e <_dtoa_r+0x39e>
 800a7e8:	9c07      	ldr	r4, [sp, #28]
 800a7ea:	9704      	str	r7, [sp, #16]
 800a7ec:	e761      	b.n	800a6b2 <_dtoa_r+0x3e2>
 800a7ee:	4b27      	ldr	r3, [pc, #156]	@ (800a88c <_dtoa_r+0x5bc>)
 800a7f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a7f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a7f6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a7fa:	4454      	add	r4, sl
 800a7fc:	2900      	cmp	r1, #0
 800a7fe:	d053      	beq.n	800a8a8 <_dtoa_r+0x5d8>
 800a800:	4928      	ldr	r1, [pc, #160]	@ (800a8a4 <_dtoa_r+0x5d4>)
 800a802:	2000      	movs	r0, #0
 800a804:	f7f6 f842 	bl	800088c <__aeabi_ddiv>
 800a808:	4633      	mov	r3, r6
 800a80a:	462a      	mov	r2, r5
 800a80c:	f7f5 fd5c 	bl	80002c8 <__aeabi_dsub>
 800a810:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a814:	4656      	mov	r6, sl
 800a816:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a81a:	f7f6 f9bd 	bl	8000b98 <__aeabi_d2iz>
 800a81e:	4605      	mov	r5, r0
 800a820:	f7f5 fea0 	bl	8000564 <__aeabi_i2d>
 800a824:	4602      	mov	r2, r0
 800a826:	460b      	mov	r3, r1
 800a828:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a82c:	f7f5 fd4c 	bl	80002c8 <__aeabi_dsub>
 800a830:	3530      	adds	r5, #48	@ 0x30
 800a832:	4602      	mov	r2, r0
 800a834:	460b      	mov	r3, r1
 800a836:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a83a:	f806 5b01 	strb.w	r5, [r6], #1
 800a83e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a842:	f7f6 f96b 	bl	8000b1c <__aeabi_dcmplt>
 800a846:	2800      	cmp	r0, #0
 800a848:	d171      	bne.n	800a92e <_dtoa_r+0x65e>
 800a84a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a84e:	4911      	ldr	r1, [pc, #68]	@ (800a894 <_dtoa_r+0x5c4>)
 800a850:	2000      	movs	r0, #0
 800a852:	f7f5 fd39 	bl	80002c8 <__aeabi_dsub>
 800a856:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a85a:	f7f6 f95f 	bl	8000b1c <__aeabi_dcmplt>
 800a85e:	2800      	cmp	r0, #0
 800a860:	f040 8095 	bne.w	800a98e <_dtoa_r+0x6be>
 800a864:	42a6      	cmp	r6, r4
 800a866:	f43f af50 	beq.w	800a70a <_dtoa_r+0x43a>
 800a86a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a86e:	4b0a      	ldr	r3, [pc, #40]	@ (800a898 <_dtoa_r+0x5c8>)
 800a870:	2200      	movs	r2, #0
 800a872:	f7f5 fee1 	bl	8000638 <__aeabi_dmul>
 800a876:	4b08      	ldr	r3, [pc, #32]	@ (800a898 <_dtoa_r+0x5c8>)
 800a878:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a87c:	2200      	movs	r2, #0
 800a87e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a882:	f7f5 fed9 	bl	8000638 <__aeabi_dmul>
 800a886:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a88a:	e7c4      	b.n	800a816 <_dtoa_r+0x546>
 800a88c:	0800d7b0 	.word	0x0800d7b0
 800a890:	0800d788 	.word	0x0800d788
 800a894:	3ff00000 	.word	0x3ff00000
 800a898:	40240000 	.word	0x40240000
 800a89c:	401c0000 	.word	0x401c0000
 800a8a0:	40140000 	.word	0x40140000
 800a8a4:	3fe00000 	.word	0x3fe00000
 800a8a8:	4631      	mov	r1, r6
 800a8aa:	4628      	mov	r0, r5
 800a8ac:	f7f5 fec4 	bl	8000638 <__aeabi_dmul>
 800a8b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a8b4:	9415      	str	r4, [sp, #84]	@ 0x54
 800a8b6:	4656      	mov	r6, sl
 800a8b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8bc:	f7f6 f96c 	bl	8000b98 <__aeabi_d2iz>
 800a8c0:	4605      	mov	r5, r0
 800a8c2:	f7f5 fe4f 	bl	8000564 <__aeabi_i2d>
 800a8c6:	4602      	mov	r2, r0
 800a8c8:	460b      	mov	r3, r1
 800a8ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8ce:	f7f5 fcfb 	bl	80002c8 <__aeabi_dsub>
 800a8d2:	3530      	adds	r5, #48	@ 0x30
 800a8d4:	f806 5b01 	strb.w	r5, [r6], #1
 800a8d8:	4602      	mov	r2, r0
 800a8da:	460b      	mov	r3, r1
 800a8dc:	42a6      	cmp	r6, r4
 800a8de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a8e2:	f04f 0200 	mov.w	r2, #0
 800a8e6:	d124      	bne.n	800a932 <_dtoa_r+0x662>
 800a8e8:	4bac      	ldr	r3, [pc, #688]	@ (800ab9c <_dtoa_r+0x8cc>)
 800a8ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a8ee:	f7f5 fced 	bl	80002cc <__adddf3>
 800a8f2:	4602      	mov	r2, r0
 800a8f4:	460b      	mov	r3, r1
 800a8f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8fa:	f7f6 f92d 	bl	8000b58 <__aeabi_dcmpgt>
 800a8fe:	2800      	cmp	r0, #0
 800a900:	d145      	bne.n	800a98e <_dtoa_r+0x6be>
 800a902:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a906:	49a5      	ldr	r1, [pc, #660]	@ (800ab9c <_dtoa_r+0x8cc>)
 800a908:	2000      	movs	r0, #0
 800a90a:	f7f5 fcdd 	bl	80002c8 <__aeabi_dsub>
 800a90e:	4602      	mov	r2, r0
 800a910:	460b      	mov	r3, r1
 800a912:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a916:	f7f6 f901 	bl	8000b1c <__aeabi_dcmplt>
 800a91a:	2800      	cmp	r0, #0
 800a91c:	f43f aef5 	beq.w	800a70a <_dtoa_r+0x43a>
 800a920:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a922:	1e73      	subs	r3, r6, #1
 800a924:	9315      	str	r3, [sp, #84]	@ 0x54
 800a926:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a92a:	2b30      	cmp	r3, #48	@ 0x30
 800a92c:	d0f8      	beq.n	800a920 <_dtoa_r+0x650>
 800a92e:	9f04      	ldr	r7, [sp, #16]
 800a930:	e73e      	b.n	800a7b0 <_dtoa_r+0x4e0>
 800a932:	4b9b      	ldr	r3, [pc, #620]	@ (800aba0 <_dtoa_r+0x8d0>)
 800a934:	f7f5 fe80 	bl	8000638 <__aeabi_dmul>
 800a938:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a93c:	e7bc      	b.n	800a8b8 <_dtoa_r+0x5e8>
 800a93e:	d10c      	bne.n	800a95a <_dtoa_r+0x68a>
 800a940:	4b98      	ldr	r3, [pc, #608]	@ (800aba4 <_dtoa_r+0x8d4>)
 800a942:	2200      	movs	r2, #0
 800a944:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a948:	f7f5 fe76 	bl	8000638 <__aeabi_dmul>
 800a94c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a950:	f7f6 f8f8 	bl	8000b44 <__aeabi_dcmpge>
 800a954:	2800      	cmp	r0, #0
 800a956:	f000 8157 	beq.w	800ac08 <_dtoa_r+0x938>
 800a95a:	2400      	movs	r4, #0
 800a95c:	4625      	mov	r5, r4
 800a95e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a960:	43db      	mvns	r3, r3
 800a962:	9304      	str	r3, [sp, #16]
 800a964:	4656      	mov	r6, sl
 800a966:	2700      	movs	r7, #0
 800a968:	4621      	mov	r1, r4
 800a96a:	4658      	mov	r0, fp
 800a96c:	f000 fbb4 	bl	800b0d8 <_Bfree>
 800a970:	2d00      	cmp	r5, #0
 800a972:	d0dc      	beq.n	800a92e <_dtoa_r+0x65e>
 800a974:	b12f      	cbz	r7, 800a982 <_dtoa_r+0x6b2>
 800a976:	42af      	cmp	r7, r5
 800a978:	d003      	beq.n	800a982 <_dtoa_r+0x6b2>
 800a97a:	4639      	mov	r1, r7
 800a97c:	4658      	mov	r0, fp
 800a97e:	f000 fbab 	bl	800b0d8 <_Bfree>
 800a982:	4629      	mov	r1, r5
 800a984:	4658      	mov	r0, fp
 800a986:	f000 fba7 	bl	800b0d8 <_Bfree>
 800a98a:	e7d0      	b.n	800a92e <_dtoa_r+0x65e>
 800a98c:	9704      	str	r7, [sp, #16]
 800a98e:	4633      	mov	r3, r6
 800a990:	461e      	mov	r6, r3
 800a992:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a996:	2a39      	cmp	r2, #57	@ 0x39
 800a998:	d107      	bne.n	800a9aa <_dtoa_r+0x6da>
 800a99a:	459a      	cmp	sl, r3
 800a99c:	d1f8      	bne.n	800a990 <_dtoa_r+0x6c0>
 800a99e:	9a04      	ldr	r2, [sp, #16]
 800a9a0:	3201      	adds	r2, #1
 800a9a2:	9204      	str	r2, [sp, #16]
 800a9a4:	2230      	movs	r2, #48	@ 0x30
 800a9a6:	f88a 2000 	strb.w	r2, [sl]
 800a9aa:	781a      	ldrb	r2, [r3, #0]
 800a9ac:	3201      	adds	r2, #1
 800a9ae:	701a      	strb	r2, [r3, #0]
 800a9b0:	e7bd      	b.n	800a92e <_dtoa_r+0x65e>
 800a9b2:	4b7b      	ldr	r3, [pc, #492]	@ (800aba0 <_dtoa_r+0x8d0>)
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	f7f5 fe3f 	bl	8000638 <__aeabi_dmul>
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	2300      	movs	r3, #0
 800a9be:	4604      	mov	r4, r0
 800a9c0:	460d      	mov	r5, r1
 800a9c2:	f7f6 f8a1 	bl	8000b08 <__aeabi_dcmpeq>
 800a9c6:	2800      	cmp	r0, #0
 800a9c8:	f43f aebb 	beq.w	800a742 <_dtoa_r+0x472>
 800a9cc:	e6f0      	b.n	800a7b0 <_dtoa_r+0x4e0>
 800a9ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a9d0:	2a00      	cmp	r2, #0
 800a9d2:	f000 80db 	beq.w	800ab8c <_dtoa_r+0x8bc>
 800a9d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a9d8:	2a01      	cmp	r2, #1
 800a9da:	f300 80bf 	bgt.w	800ab5c <_dtoa_r+0x88c>
 800a9de:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a9e0:	2a00      	cmp	r2, #0
 800a9e2:	f000 80b7 	beq.w	800ab54 <_dtoa_r+0x884>
 800a9e6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a9ea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a9ec:	4646      	mov	r6, r8
 800a9ee:	9a08      	ldr	r2, [sp, #32]
 800a9f0:	2101      	movs	r1, #1
 800a9f2:	441a      	add	r2, r3
 800a9f4:	4658      	mov	r0, fp
 800a9f6:	4498      	add	r8, r3
 800a9f8:	9208      	str	r2, [sp, #32]
 800a9fa:	f000 fc21 	bl	800b240 <__i2b>
 800a9fe:	4605      	mov	r5, r0
 800aa00:	b15e      	cbz	r6, 800aa1a <_dtoa_r+0x74a>
 800aa02:	9b08      	ldr	r3, [sp, #32]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	dd08      	ble.n	800aa1a <_dtoa_r+0x74a>
 800aa08:	42b3      	cmp	r3, r6
 800aa0a:	9a08      	ldr	r2, [sp, #32]
 800aa0c:	bfa8      	it	ge
 800aa0e:	4633      	movge	r3, r6
 800aa10:	eba8 0803 	sub.w	r8, r8, r3
 800aa14:	1af6      	subs	r6, r6, r3
 800aa16:	1ad3      	subs	r3, r2, r3
 800aa18:	9308      	str	r3, [sp, #32]
 800aa1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa1c:	b1f3      	cbz	r3, 800aa5c <_dtoa_r+0x78c>
 800aa1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	f000 80b7 	beq.w	800ab94 <_dtoa_r+0x8c4>
 800aa26:	b18c      	cbz	r4, 800aa4c <_dtoa_r+0x77c>
 800aa28:	4629      	mov	r1, r5
 800aa2a:	4622      	mov	r2, r4
 800aa2c:	4658      	mov	r0, fp
 800aa2e:	f000 fcc7 	bl	800b3c0 <__pow5mult>
 800aa32:	464a      	mov	r2, r9
 800aa34:	4601      	mov	r1, r0
 800aa36:	4605      	mov	r5, r0
 800aa38:	4658      	mov	r0, fp
 800aa3a:	f000 fc17 	bl	800b26c <__multiply>
 800aa3e:	4649      	mov	r1, r9
 800aa40:	9004      	str	r0, [sp, #16]
 800aa42:	4658      	mov	r0, fp
 800aa44:	f000 fb48 	bl	800b0d8 <_Bfree>
 800aa48:	9b04      	ldr	r3, [sp, #16]
 800aa4a:	4699      	mov	r9, r3
 800aa4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa4e:	1b1a      	subs	r2, r3, r4
 800aa50:	d004      	beq.n	800aa5c <_dtoa_r+0x78c>
 800aa52:	4649      	mov	r1, r9
 800aa54:	4658      	mov	r0, fp
 800aa56:	f000 fcb3 	bl	800b3c0 <__pow5mult>
 800aa5a:	4681      	mov	r9, r0
 800aa5c:	2101      	movs	r1, #1
 800aa5e:	4658      	mov	r0, fp
 800aa60:	f000 fbee 	bl	800b240 <__i2b>
 800aa64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa66:	4604      	mov	r4, r0
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	f000 81cf 	beq.w	800ae0c <_dtoa_r+0xb3c>
 800aa6e:	461a      	mov	r2, r3
 800aa70:	4601      	mov	r1, r0
 800aa72:	4658      	mov	r0, fp
 800aa74:	f000 fca4 	bl	800b3c0 <__pow5mult>
 800aa78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa7a:	2b01      	cmp	r3, #1
 800aa7c:	4604      	mov	r4, r0
 800aa7e:	f300 8095 	bgt.w	800abac <_dtoa_r+0x8dc>
 800aa82:	9b02      	ldr	r3, [sp, #8]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	f040 8087 	bne.w	800ab98 <_dtoa_r+0x8c8>
 800aa8a:	9b03      	ldr	r3, [sp, #12]
 800aa8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	f040 8089 	bne.w	800aba8 <_dtoa_r+0x8d8>
 800aa96:	9b03      	ldr	r3, [sp, #12]
 800aa98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800aa9c:	0d1b      	lsrs	r3, r3, #20
 800aa9e:	051b      	lsls	r3, r3, #20
 800aaa0:	b12b      	cbz	r3, 800aaae <_dtoa_r+0x7de>
 800aaa2:	9b08      	ldr	r3, [sp, #32]
 800aaa4:	3301      	adds	r3, #1
 800aaa6:	9308      	str	r3, [sp, #32]
 800aaa8:	f108 0801 	add.w	r8, r8, #1
 800aaac:	2301      	movs	r3, #1
 800aaae:	930a      	str	r3, [sp, #40]	@ 0x28
 800aab0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	f000 81b0 	beq.w	800ae18 <_dtoa_r+0xb48>
 800aab8:	6923      	ldr	r3, [r4, #16]
 800aaba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aabe:	6918      	ldr	r0, [r3, #16]
 800aac0:	f000 fb72 	bl	800b1a8 <__hi0bits>
 800aac4:	f1c0 0020 	rsb	r0, r0, #32
 800aac8:	9b08      	ldr	r3, [sp, #32]
 800aaca:	4418      	add	r0, r3
 800aacc:	f010 001f 	ands.w	r0, r0, #31
 800aad0:	d077      	beq.n	800abc2 <_dtoa_r+0x8f2>
 800aad2:	f1c0 0320 	rsb	r3, r0, #32
 800aad6:	2b04      	cmp	r3, #4
 800aad8:	dd6b      	ble.n	800abb2 <_dtoa_r+0x8e2>
 800aada:	9b08      	ldr	r3, [sp, #32]
 800aadc:	f1c0 001c 	rsb	r0, r0, #28
 800aae0:	4403      	add	r3, r0
 800aae2:	4480      	add	r8, r0
 800aae4:	4406      	add	r6, r0
 800aae6:	9308      	str	r3, [sp, #32]
 800aae8:	f1b8 0f00 	cmp.w	r8, #0
 800aaec:	dd05      	ble.n	800aafa <_dtoa_r+0x82a>
 800aaee:	4649      	mov	r1, r9
 800aaf0:	4642      	mov	r2, r8
 800aaf2:	4658      	mov	r0, fp
 800aaf4:	f000 fcbe 	bl	800b474 <__lshift>
 800aaf8:	4681      	mov	r9, r0
 800aafa:	9b08      	ldr	r3, [sp, #32]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	dd05      	ble.n	800ab0c <_dtoa_r+0x83c>
 800ab00:	4621      	mov	r1, r4
 800ab02:	461a      	mov	r2, r3
 800ab04:	4658      	mov	r0, fp
 800ab06:	f000 fcb5 	bl	800b474 <__lshift>
 800ab0a:	4604      	mov	r4, r0
 800ab0c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d059      	beq.n	800abc6 <_dtoa_r+0x8f6>
 800ab12:	4621      	mov	r1, r4
 800ab14:	4648      	mov	r0, r9
 800ab16:	f000 fd19 	bl	800b54c <__mcmp>
 800ab1a:	2800      	cmp	r0, #0
 800ab1c:	da53      	bge.n	800abc6 <_dtoa_r+0x8f6>
 800ab1e:	1e7b      	subs	r3, r7, #1
 800ab20:	9304      	str	r3, [sp, #16]
 800ab22:	4649      	mov	r1, r9
 800ab24:	2300      	movs	r3, #0
 800ab26:	220a      	movs	r2, #10
 800ab28:	4658      	mov	r0, fp
 800ab2a:	f000 faf7 	bl	800b11c <__multadd>
 800ab2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ab30:	4681      	mov	r9, r0
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	f000 8172 	beq.w	800ae1c <_dtoa_r+0xb4c>
 800ab38:	2300      	movs	r3, #0
 800ab3a:	4629      	mov	r1, r5
 800ab3c:	220a      	movs	r2, #10
 800ab3e:	4658      	mov	r0, fp
 800ab40:	f000 faec 	bl	800b11c <__multadd>
 800ab44:	9b00      	ldr	r3, [sp, #0]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	4605      	mov	r5, r0
 800ab4a:	dc67      	bgt.n	800ac1c <_dtoa_r+0x94c>
 800ab4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab4e:	2b02      	cmp	r3, #2
 800ab50:	dc41      	bgt.n	800abd6 <_dtoa_r+0x906>
 800ab52:	e063      	b.n	800ac1c <_dtoa_r+0x94c>
 800ab54:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ab56:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ab5a:	e746      	b.n	800a9ea <_dtoa_r+0x71a>
 800ab5c:	9b07      	ldr	r3, [sp, #28]
 800ab5e:	1e5c      	subs	r4, r3, #1
 800ab60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab62:	42a3      	cmp	r3, r4
 800ab64:	bfbf      	itttt	lt
 800ab66:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ab68:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ab6a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ab6c:	1ae3      	sublt	r3, r4, r3
 800ab6e:	bfb4      	ite	lt
 800ab70:	18d2      	addlt	r2, r2, r3
 800ab72:	1b1c      	subge	r4, r3, r4
 800ab74:	9b07      	ldr	r3, [sp, #28]
 800ab76:	bfbc      	itt	lt
 800ab78:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ab7a:	2400      	movlt	r4, #0
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	bfb5      	itete	lt
 800ab80:	eba8 0603 	sublt.w	r6, r8, r3
 800ab84:	9b07      	ldrge	r3, [sp, #28]
 800ab86:	2300      	movlt	r3, #0
 800ab88:	4646      	movge	r6, r8
 800ab8a:	e730      	b.n	800a9ee <_dtoa_r+0x71e>
 800ab8c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ab8e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ab90:	4646      	mov	r6, r8
 800ab92:	e735      	b.n	800aa00 <_dtoa_r+0x730>
 800ab94:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ab96:	e75c      	b.n	800aa52 <_dtoa_r+0x782>
 800ab98:	2300      	movs	r3, #0
 800ab9a:	e788      	b.n	800aaae <_dtoa_r+0x7de>
 800ab9c:	3fe00000 	.word	0x3fe00000
 800aba0:	40240000 	.word	0x40240000
 800aba4:	40140000 	.word	0x40140000
 800aba8:	9b02      	ldr	r3, [sp, #8]
 800abaa:	e780      	b.n	800aaae <_dtoa_r+0x7de>
 800abac:	2300      	movs	r3, #0
 800abae:	930a      	str	r3, [sp, #40]	@ 0x28
 800abb0:	e782      	b.n	800aab8 <_dtoa_r+0x7e8>
 800abb2:	d099      	beq.n	800aae8 <_dtoa_r+0x818>
 800abb4:	9a08      	ldr	r2, [sp, #32]
 800abb6:	331c      	adds	r3, #28
 800abb8:	441a      	add	r2, r3
 800abba:	4498      	add	r8, r3
 800abbc:	441e      	add	r6, r3
 800abbe:	9208      	str	r2, [sp, #32]
 800abc0:	e792      	b.n	800aae8 <_dtoa_r+0x818>
 800abc2:	4603      	mov	r3, r0
 800abc4:	e7f6      	b.n	800abb4 <_dtoa_r+0x8e4>
 800abc6:	9b07      	ldr	r3, [sp, #28]
 800abc8:	9704      	str	r7, [sp, #16]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	dc20      	bgt.n	800ac10 <_dtoa_r+0x940>
 800abce:	9300      	str	r3, [sp, #0]
 800abd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abd2:	2b02      	cmp	r3, #2
 800abd4:	dd1e      	ble.n	800ac14 <_dtoa_r+0x944>
 800abd6:	9b00      	ldr	r3, [sp, #0]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	f47f aec0 	bne.w	800a95e <_dtoa_r+0x68e>
 800abde:	4621      	mov	r1, r4
 800abe0:	2205      	movs	r2, #5
 800abe2:	4658      	mov	r0, fp
 800abe4:	f000 fa9a 	bl	800b11c <__multadd>
 800abe8:	4601      	mov	r1, r0
 800abea:	4604      	mov	r4, r0
 800abec:	4648      	mov	r0, r9
 800abee:	f000 fcad 	bl	800b54c <__mcmp>
 800abf2:	2800      	cmp	r0, #0
 800abf4:	f77f aeb3 	ble.w	800a95e <_dtoa_r+0x68e>
 800abf8:	4656      	mov	r6, sl
 800abfa:	2331      	movs	r3, #49	@ 0x31
 800abfc:	f806 3b01 	strb.w	r3, [r6], #1
 800ac00:	9b04      	ldr	r3, [sp, #16]
 800ac02:	3301      	adds	r3, #1
 800ac04:	9304      	str	r3, [sp, #16]
 800ac06:	e6ae      	b.n	800a966 <_dtoa_r+0x696>
 800ac08:	9c07      	ldr	r4, [sp, #28]
 800ac0a:	9704      	str	r7, [sp, #16]
 800ac0c:	4625      	mov	r5, r4
 800ac0e:	e7f3      	b.n	800abf8 <_dtoa_r+0x928>
 800ac10:	9b07      	ldr	r3, [sp, #28]
 800ac12:	9300      	str	r3, [sp, #0]
 800ac14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	f000 8104 	beq.w	800ae24 <_dtoa_r+0xb54>
 800ac1c:	2e00      	cmp	r6, #0
 800ac1e:	dd05      	ble.n	800ac2c <_dtoa_r+0x95c>
 800ac20:	4629      	mov	r1, r5
 800ac22:	4632      	mov	r2, r6
 800ac24:	4658      	mov	r0, fp
 800ac26:	f000 fc25 	bl	800b474 <__lshift>
 800ac2a:	4605      	mov	r5, r0
 800ac2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d05a      	beq.n	800ace8 <_dtoa_r+0xa18>
 800ac32:	6869      	ldr	r1, [r5, #4]
 800ac34:	4658      	mov	r0, fp
 800ac36:	f000 fa0f 	bl	800b058 <_Balloc>
 800ac3a:	4606      	mov	r6, r0
 800ac3c:	b928      	cbnz	r0, 800ac4a <_dtoa_r+0x97a>
 800ac3e:	4b84      	ldr	r3, [pc, #528]	@ (800ae50 <_dtoa_r+0xb80>)
 800ac40:	4602      	mov	r2, r0
 800ac42:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ac46:	f7ff bb5a 	b.w	800a2fe <_dtoa_r+0x2e>
 800ac4a:	692a      	ldr	r2, [r5, #16]
 800ac4c:	3202      	adds	r2, #2
 800ac4e:	0092      	lsls	r2, r2, #2
 800ac50:	f105 010c 	add.w	r1, r5, #12
 800ac54:	300c      	adds	r0, #12
 800ac56:	f000 ffaf 	bl	800bbb8 <memcpy>
 800ac5a:	2201      	movs	r2, #1
 800ac5c:	4631      	mov	r1, r6
 800ac5e:	4658      	mov	r0, fp
 800ac60:	f000 fc08 	bl	800b474 <__lshift>
 800ac64:	f10a 0301 	add.w	r3, sl, #1
 800ac68:	9307      	str	r3, [sp, #28]
 800ac6a:	9b00      	ldr	r3, [sp, #0]
 800ac6c:	4453      	add	r3, sl
 800ac6e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ac70:	9b02      	ldr	r3, [sp, #8]
 800ac72:	f003 0301 	and.w	r3, r3, #1
 800ac76:	462f      	mov	r7, r5
 800ac78:	930a      	str	r3, [sp, #40]	@ 0x28
 800ac7a:	4605      	mov	r5, r0
 800ac7c:	9b07      	ldr	r3, [sp, #28]
 800ac7e:	4621      	mov	r1, r4
 800ac80:	3b01      	subs	r3, #1
 800ac82:	4648      	mov	r0, r9
 800ac84:	9300      	str	r3, [sp, #0]
 800ac86:	f7ff fa98 	bl	800a1ba <quorem>
 800ac8a:	4639      	mov	r1, r7
 800ac8c:	9002      	str	r0, [sp, #8]
 800ac8e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ac92:	4648      	mov	r0, r9
 800ac94:	f000 fc5a 	bl	800b54c <__mcmp>
 800ac98:	462a      	mov	r2, r5
 800ac9a:	9008      	str	r0, [sp, #32]
 800ac9c:	4621      	mov	r1, r4
 800ac9e:	4658      	mov	r0, fp
 800aca0:	f000 fc70 	bl	800b584 <__mdiff>
 800aca4:	68c2      	ldr	r2, [r0, #12]
 800aca6:	4606      	mov	r6, r0
 800aca8:	bb02      	cbnz	r2, 800acec <_dtoa_r+0xa1c>
 800acaa:	4601      	mov	r1, r0
 800acac:	4648      	mov	r0, r9
 800acae:	f000 fc4d 	bl	800b54c <__mcmp>
 800acb2:	4602      	mov	r2, r0
 800acb4:	4631      	mov	r1, r6
 800acb6:	4658      	mov	r0, fp
 800acb8:	920e      	str	r2, [sp, #56]	@ 0x38
 800acba:	f000 fa0d 	bl	800b0d8 <_Bfree>
 800acbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acc0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800acc2:	9e07      	ldr	r6, [sp, #28]
 800acc4:	ea43 0102 	orr.w	r1, r3, r2
 800acc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800acca:	4319      	orrs	r1, r3
 800accc:	d110      	bne.n	800acf0 <_dtoa_r+0xa20>
 800acce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800acd2:	d029      	beq.n	800ad28 <_dtoa_r+0xa58>
 800acd4:	9b08      	ldr	r3, [sp, #32]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	dd02      	ble.n	800ace0 <_dtoa_r+0xa10>
 800acda:	9b02      	ldr	r3, [sp, #8]
 800acdc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ace0:	9b00      	ldr	r3, [sp, #0]
 800ace2:	f883 8000 	strb.w	r8, [r3]
 800ace6:	e63f      	b.n	800a968 <_dtoa_r+0x698>
 800ace8:	4628      	mov	r0, r5
 800acea:	e7bb      	b.n	800ac64 <_dtoa_r+0x994>
 800acec:	2201      	movs	r2, #1
 800acee:	e7e1      	b.n	800acb4 <_dtoa_r+0x9e4>
 800acf0:	9b08      	ldr	r3, [sp, #32]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	db04      	blt.n	800ad00 <_dtoa_r+0xa30>
 800acf6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800acf8:	430b      	orrs	r3, r1
 800acfa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800acfc:	430b      	orrs	r3, r1
 800acfe:	d120      	bne.n	800ad42 <_dtoa_r+0xa72>
 800ad00:	2a00      	cmp	r2, #0
 800ad02:	dded      	ble.n	800ace0 <_dtoa_r+0xa10>
 800ad04:	4649      	mov	r1, r9
 800ad06:	2201      	movs	r2, #1
 800ad08:	4658      	mov	r0, fp
 800ad0a:	f000 fbb3 	bl	800b474 <__lshift>
 800ad0e:	4621      	mov	r1, r4
 800ad10:	4681      	mov	r9, r0
 800ad12:	f000 fc1b 	bl	800b54c <__mcmp>
 800ad16:	2800      	cmp	r0, #0
 800ad18:	dc03      	bgt.n	800ad22 <_dtoa_r+0xa52>
 800ad1a:	d1e1      	bne.n	800ace0 <_dtoa_r+0xa10>
 800ad1c:	f018 0f01 	tst.w	r8, #1
 800ad20:	d0de      	beq.n	800ace0 <_dtoa_r+0xa10>
 800ad22:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ad26:	d1d8      	bne.n	800acda <_dtoa_r+0xa0a>
 800ad28:	9a00      	ldr	r2, [sp, #0]
 800ad2a:	2339      	movs	r3, #57	@ 0x39
 800ad2c:	7013      	strb	r3, [r2, #0]
 800ad2e:	4633      	mov	r3, r6
 800ad30:	461e      	mov	r6, r3
 800ad32:	3b01      	subs	r3, #1
 800ad34:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ad38:	2a39      	cmp	r2, #57	@ 0x39
 800ad3a:	d052      	beq.n	800ade2 <_dtoa_r+0xb12>
 800ad3c:	3201      	adds	r2, #1
 800ad3e:	701a      	strb	r2, [r3, #0]
 800ad40:	e612      	b.n	800a968 <_dtoa_r+0x698>
 800ad42:	2a00      	cmp	r2, #0
 800ad44:	dd07      	ble.n	800ad56 <_dtoa_r+0xa86>
 800ad46:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ad4a:	d0ed      	beq.n	800ad28 <_dtoa_r+0xa58>
 800ad4c:	9a00      	ldr	r2, [sp, #0]
 800ad4e:	f108 0301 	add.w	r3, r8, #1
 800ad52:	7013      	strb	r3, [r2, #0]
 800ad54:	e608      	b.n	800a968 <_dtoa_r+0x698>
 800ad56:	9b07      	ldr	r3, [sp, #28]
 800ad58:	9a07      	ldr	r2, [sp, #28]
 800ad5a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ad5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad60:	4293      	cmp	r3, r2
 800ad62:	d028      	beq.n	800adb6 <_dtoa_r+0xae6>
 800ad64:	4649      	mov	r1, r9
 800ad66:	2300      	movs	r3, #0
 800ad68:	220a      	movs	r2, #10
 800ad6a:	4658      	mov	r0, fp
 800ad6c:	f000 f9d6 	bl	800b11c <__multadd>
 800ad70:	42af      	cmp	r7, r5
 800ad72:	4681      	mov	r9, r0
 800ad74:	f04f 0300 	mov.w	r3, #0
 800ad78:	f04f 020a 	mov.w	r2, #10
 800ad7c:	4639      	mov	r1, r7
 800ad7e:	4658      	mov	r0, fp
 800ad80:	d107      	bne.n	800ad92 <_dtoa_r+0xac2>
 800ad82:	f000 f9cb 	bl	800b11c <__multadd>
 800ad86:	4607      	mov	r7, r0
 800ad88:	4605      	mov	r5, r0
 800ad8a:	9b07      	ldr	r3, [sp, #28]
 800ad8c:	3301      	adds	r3, #1
 800ad8e:	9307      	str	r3, [sp, #28]
 800ad90:	e774      	b.n	800ac7c <_dtoa_r+0x9ac>
 800ad92:	f000 f9c3 	bl	800b11c <__multadd>
 800ad96:	4629      	mov	r1, r5
 800ad98:	4607      	mov	r7, r0
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	220a      	movs	r2, #10
 800ad9e:	4658      	mov	r0, fp
 800ada0:	f000 f9bc 	bl	800b11c <__multadd>
 800ada4:	4605      	mov	r5, r0
 800ada6:	e7f0      	b.n	800ad8a <_dtoa_r+0xaba>
 800ada8:	9b00      	ldr	r3, [sp, #0]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	bfcc      	ite	gt
 800adae:	461e      	movgt	r6, r3
 800adb0:	2601      	movle	r6, #1
 800adb2:	4456      	add	r6, sl
 800adb4:	2700      	movs	r7, #0
 800adb6:	4649      	mov	r1, r9
 800adb8:	2201      	movs	r2, #1
 800adba:	4658      	mov	r0, fp
 800adbc:	f000 fb5a 	bl	800b474 <__lshift>
 800adc0:	4621      	mov	r1, r4
 800adc2:	4681      	mov	r9, r0
 800adc4:	f000 fbc2 	bl	800b54c <__mcmp>
 800adc8:	2800      	cmp	r0, #0
 800adca:	dcb0      	bgt.n	800ad2e <_dtoa_r+0xa5e>
 800adcc:	d102      	bne.n	800add4 <_dtoa_r+0xb04>
 800adce:	f018 0f01 	tst.w	r8, #1
 800add2:	d1ac      	bne.n	800ad2e <_dtoa_r+0xa5e>
 800add4:	4633      	mov	r3, r6
 800add6:	461e      	mov	r6, r3
 800add8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800addc:	2a30      	cmp	r2, #48	@ 0x30
 800adde:	d0fa      	beq.n	800add6 <_dtoa_r+0xb06>
 800ade0:	e5c2      	b.n	800a968 <_dtoa_r+0x698>
 800ade2:	459a      	cmp	sl, r3
 800ade4:	d1a4      	bne.n	800ad30 <_dtoa_r+0xa60>
 800ade6:	9b04      	ldr	r3, [sp, #16]
 800ade8:	3301      	adds	r3, #1
 800adea:	9304      	str	r3, [sp, #16]
 800adec:	2331      	movs	r3, #49	@ 0x31
 800adee:	f88a 3000 	strb.w	r3, [sl]
 800adf2:	e5b9      	b.n	800a968 <_dtoa_r+0x698>
 800adf4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800adf6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ae54 <_dtoa_r+0xb84>
 800adfa:	b11b      	cbz	r3, 800ae04 <_dtoa_r+0xb34>
 800adfc:	f10a 0308 	add.w	r3, sl, #8
 800ae00:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ae02:	6013      	str	r3, [r2, #0]
 800ae04:	4650      	mov	r0, sl
 800ae06:	b019      	add	sp, #100	@ 0x64
 800ae08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae0e:	2b01      	cmp	r3, #1
 800ae10:	f77f ae37 	ble.w	800aa82 <_dtoa_r+0x7b2>
 800ae14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae16:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae18:	2001      	movs	r0, #1
 800ae1a:	e655      	b.n	800aac8 <_dtoa_r+0x7f8>
 800ae1c:	9b00      	ldr	r3, [sp, #0]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	f77f aed6 	ble.w	800abd0 <_dtoa_r+0x900>
 800ae24:	4656      	mov	r6, sl
 800ae26:	4621      	mov	r1, r4
 800ae28:	4648      	mov	r0, r9
 800ae2a:	f7ff f9c6 	bl	800a1ba <quorem>
 800ae2e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ae32:	f806 8b01 	strb.w	r8, [r6], #1
 800ae36:	9b00      	ldr	r3, [sp, #0]
 800ae38:	eba6 020a 	sub.w	r2, r6, sl
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	ddb3      	ble.n	800ada8 <_dtoa_r+0xad8>
 800ae40:	4649      	mov	r1, r9
 800ae42:	2300      	movs	r3, #0
 800ae44:	220a      	movs	r2, #10
 800ae46:	4658      	mov	r0, fp
 800ae48:	f000 f968 	bl	800b11c <__multadd>
 800ae4c:	4681      	mov	r9, r0
 800ae4e:	e7ea      	b.n	800ae26 <_dtoa_r+0xb56>
 800ae50:	0800d710 	.word	0x0800d710
 800ae54:	0800d694 	.word	0x0800d694

0800ae58 <_free_r>:
 800ae58:	b538      	push	{r3, r4, r5, lr}
 800ae5a:	4605      	mov	r5, r0
 800ae5c:	2900      	cmp	r1, #0
 800ae5e:	d041      	beq.n	800aee4 <_free_r+0x8c>
 800ae60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae64:	1f0c      	subs	r4, r1, #4
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	bfb8      	it	lt
 800ae6a:	18e4      	addlt	r4, r4, r3
 800ae6c:	f000 f8e8 	bl	800b040 <__malloc_lock>
 800ae70:	4a1d      	ldr	r2, [pc, #116]	@ (800aee8 <_free_r+0x90>)
 800ae72:	6813      	ldr	r3, [r2, #0]
 800ae74:	b933      	cbnz	r3, 800ae84 <_free_r+0x2c>
 800ae76:	6063      	str	r3, [r4, #4]
 800ae78:	6014      	str	r4, [r2, #0]
 800ae7a:	4628      	mov	r0, r5
 800ae7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae80:	f000 b8e4 	b.w	800b04c <__malloc_unlock>
 800ae84:	42a3      	cmp	r3, r4
 800ae86:	d908      	bls.n	800ae9a <_free_r+0x42>
 800ae88:	6820      	ldr	r0, [r4, #0]
 800ae8a:	1821      	adds	r1, r4, r0
 800ae8c:	428b      	cmp	r3, r1
 800ae8e:	bf01      	itttt	eq
 800ae90:	6819      	ldreq	r1, [r3, #0]
 800ae92:	685b      	ldreq	r3, [r3, #4]
 800ae94:	1809      	addeq	r1, r1, r0
 800ae96:	6021      	streq	r1, [r4, #0]
 800ae98:	e7ed      	b.n	800ae76 <_free_r+0x1e>
 800ae9a:	461a      	mov	r2, r3
 800ae9c:	685b      	ldr	r3, [r3, #4]
 800ae9e:	b10b      	cbz	r3, 800aea4 <_free_r+0x4c>
 800aea0:	42a3      	cmp	r3, r4
 800aea2:	d9fa      	bls.n	800ae9a <_free_r+0x42>
 800aea4:	6811      	ldr	r1, [r2, #0]
 800aea6:	1850      	adds	r0, r2, r1
 800aea8:	42a0      	cmp	r0, r4
 800aeaa:	d10b      	bne.n	800aec4 <_free_r+0x6c>
 800aeac:	6820      	ldr	r0, [r4, #0]
 800aeae:	4401      	add	r1, r0
 800aeb0:	1850      	adds	r0, r2, r1
 800aeb2:	4283      	cmp	r3, r0
 800aeb4:	6011      	str	r1, [r2, #0]
 800aeb6:	d1e0      	bne.n	800ae7a <_free_r+0x22>
 800aeb8:	6818      	ldr	r0, [r3, #0]
 800aeba:	685b      	ldr	r3, [r3, #4]
 800aebc:	6053      	str	r3, [r2, #4]
 800aebe:	4408      	add	r0, r1
 800aec0:	6010      	str	r0, [r2, #0]
 800aec2:	e7da      	b.n	800ae7a <_free_r+0x22>
 800aec4:	d902      	bls.n	800aecc <_free_r+0x74>
 800aec6:	230c      	movs	r3, #12
 800aec8:	602b      	str	r3, [r5, #0]
 800aeca:	e7d6      	b.n	800ae7a <_free_r+0x22>
 800aecc:	6820      	ldr	r0, [r4, #0]
 800aece:	1821      	adds	r1, r4, r0
 800aed0:	428b      	cmp	r3, r1
 800aed2:	bf04      	itt	eq
 800aed4:	6819      	ldreq	r1, [r3, #0]
 800aed6:	685b      	ldreq	r3, [r3, #4]
 800aed8:	6063      	str	r3, [r4, #4]
 800aeda:	bf04      	itt	eq
 800aedc:	1809      	addeq	r1, r1, r0
 800aede:	6021      	streq	r1, [r4, #0]
 800aee0:	6054      	str	r4, [r2, #4]
 800aee2:	e7ca      	b.n	800ae7a <_free_r+0x22>
 800aee4:	bd38      	pop	{r3, r4, r5, pc}
 800aee6:	bf00      	nop
 800aee8:	2000085c 	.word	0x2000085c

0800aeec <malloc>:
 800aeec:	4b02      	ldr	r3, [pc, #8]	@ (800aef8 <malloc+0xc>)
 800aeee:	4601      	mov	r1, r0
 800aef0:	6818      	ldr	r0, [r3, #0]
 800aef2:	f000 b825 	b.w	800af40 <_malloc_r>
 800aef6:	bf00      	nop
 800aef8:	2000004c 	.word	0x2000004c

0800aefc <sbrk_aligned>:
 800aefc:	b570      	push	{r4, r5, r6, lr}
 800aefe:	4e0f      	ldr	r6, [pc, #60]	@ (800af3c <sbrk_aligned+0x40>)
 800af00:	460c      	mov	r4, r1
 800af02:	6831      	ldr	r1, [r6, #0]
 800af04:	4605      	mov	r5, r0
 800af06:	b911      	cbnz	r1, 800af0e <sbrk_aligned+0x12>
 800af08:	f000 fe46 	bl	800bb98 <_sbrk_r>
 800af0c:	6030      	str	r0, [r6, #0]
 800af0e:	4621      	mov	r1, r4
 800af10:	4628      	mov	r0, r5
 800af12:	f000 fe41 	bl	800bb98 <_sbrk_r>
 800af16:	1c43      	adds	r3, r0, #1
 800af18:	d103      	bne.n	800af22 <sbrk_aligned+0x26>
 800af1a:	f04f 34ff 	mov.w	r4, #4294967295
 800af1e:	4620      	mov	r0, r4
 800af20:	bd70      	pop	{r4, r5, r6, pc}
 800af22:	1cc4      	adds	r4, r0, #3
 800af24:	f024 0403 	bic.w	r4, r4, #3
 800af28:	42a0      	cmp	r0, r4
 800af2a:	d0f8      	beq.n	800af1e <sbrk_aligned+0x22>
 800af2c:	1a21      	subs	r1, r4, r0
 800af2e:	4628      	mov	r0, r5
 800af30:	f000 fe32 	bl	800bb98 <_sbrk_r>
 800af34:	3001      	adds	r0, #1
 800af36:	d1f2      	bne.n	800af1e <sbrk_aligned+0x22>
 800af38:	e7ef      	b.n	800af1a <sbrk_aligned+0x1e>
 800af3a:	bf00      	nop
 800af3c:	20000858 	.word	0x20000858

0800af40 <_malloc_r>:
 800af40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af44:	1ccd      	adds	r5, r1, #3
 800af46:	f025 0503 	bic.w	r5, r5, #3
 800af4a:	3508      	adds	r5, #8
 800af4c:	2d0c      	cmp	r5, #12
 800af4e:	bf38      	it	cc
 800af50:	250c      	movcc	r5, #12
 800af52:	2d00      	cmp	r5, #0
 800af54:	4606      	mov	r6, r0
 800af56:	db01      	blt.n	800af5c <_malloc_r+0x1c>
 800af58:	42a9      	cmp	r1, r5
 800af5a:	d904      	bls.n	800af66 <_malloc_r+0x26>
 800af5c:	230c      	movs	r3, #12
 800af5e:	6033      	str	r3, [r6, #0]
 800af60:	2000      	movs	r0, #0
 800af62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b03c <_malloc_r+0xfc>
 800af6a:	f000 f869 	bl	800b040 <__malloc_lock>
 800af6e:	f8d8 3000 	ldr.w	r3, [r8]
 800af72:	461c      	mov	r4, r3
 800af74:	bb44      	cbnz	r4, 800afc8 <_malloc_r+0x88>
 800af76:	4629      	mov	r1, r5
 800af78:	4630      	mov	r0, r6
 800af7a:	f7ff ffbf 	bl	800aefc <sbrk_aligned>
 800af7e:	1c43      	adds	r3, r0, #1
 800af80:	4604      	mov	r4, r0
 800af82:	d158      	bne.n	800b036 <_malloc_r+0xf6>
 800af84:	f8d8 4000 	ldr.w	r4, [r8]
 800af88:	4627      	mov	r7, r4
 800af8a:	2f00      	cmp	r7, #0
 800af8c:	d143      	bne.n	800b016 <_malloc_r+0xd6>
 800af8e:	2c00      	cmp	r4, #0
 800af90:	d04b      	beq.n	800b02a <_malloc_r+0xea>
 800af92:	6823      	ldr	r3, [r4, #0]
 800af94:	4639      	mov	r1, r7
 800af96:	4630      	mov	r0, r6
 800af98:	eb04 0903 	add.w	r9, r4, r3
 800af9c:	f000 fdfc 	bl	800bb98 <_sbrk_r>
 800afa0:	4581      	cmp	r9, r0
 800afa2:	d142      	bne.n	800b02a <_malloc_r+0xea>
 800afa4:	6821      	ldr	r1, [r4, #0]
 800afa6:	1a6d      	subs	r5, r5, r1
 800afa8:	4629      	mov	r1, r5
 800afaa:	4630      	mov	r0, r6
 800afac:	f7ff ffa6 	bl	800aefc <sbrk_aligned>
 800afb0:	3001      	adds	r0, #1
 800afb2:	d03a      	beq.n	800b02a <_malloc_r+0xea>
 800afb4:	6823      	ldr	r3, [r4, #0]
 800afb6:	442b      	add	r3, r5
 800afb8:	6023      	str	r3, [r4, #0]
 800afba:	f8d8 3000 	ldr.w	r3, [r8]
 800afbe:	685a      	ldr	r2, [r3, #4]
 800afc0:	bb62      	cbnz	r2, 800b01c <_malloc_r+0xdc>
 800afc2:	f8c8 7000 	str.w	r7, [r8]
 800afc6:	e00f      	b.n	800afe8 <_malloc_r+0xa8>
 800afc8:	6822      	ldr	r2, [r4, #0]
 800afca:	1b52      	subs	r2, r2, r5
 800afcc:	d420      	bmi.n	800b010 <_malloc_r+0xd0>
 800afce:	2a0b      	cmp	r2, #11
 800afd0:	d917      	bls.n	800b002 <_malloc_r+0xc2>
 800afd2:	1961      	adds	r1, r4, r5
 800afd4:	42a3      	cmp	r3, r4
 800afd6:	6025      	str	r5, [r4, #0]
 800afd8:	bf18      	it	ne
 800afda:	6059      	strne	r1, [r3, #4]
 800afdc:	6863      	ldr	r3, [r4, #4]
 800afde:	bf08      	it	eq
 800afe0:	f8c8 1000 	streq.w	r1, [r8]
 800afe4:	5162      	str	r2, [r4, r5]
 800afe6:	604b      	str	r3, [r1, #4]
 800afe8:	4630      	mov	r0, r6
 800afea:	f000 f82f 	bl	800b04c <__malloc_unlock>
 800afee:	f104 000b 	add.w	r0, r4, #11
 800aff2:	1d23      	adds	r3, r4, #4
 800aff4:	f020 0007 	bic.w	r0, r0, #7
 800aff8:	1ac2      	subs	r2, r0, r3
 800affa:	bf1c      	itt	ne
 800affc:	1a1b      	subne	r3, r3, r0
 800affe:	50a3      	strne	r3, [r4, r2]
 800b000:	e7af      	b.n	800af62 <_malloc_r+0x22>
 800b002:	6862      	ldr	r2, [r4, #4]
 800b004:	42a3      	cmp	r3, r4
 800b006:	bf0c      	ite	eq
 800b008:	f8c8 2000 	streq.w	r2, [r8]
 800b00c:	605a      	strne	r2, [r3, #4]
 800b00e:	e7eb      	b.n	800afe8 <_malloc_r+0xa8>
 800b010:	4623      	mov	r3, r4
 800b012:	6864      	ldr	r4, [r4, #4]
 800b014:	e7ae      	b.n	800af74 <_malloc_r+0x34>
 800b016:	463c      	mov	r4, r7
 800b018:	687f      	ldr	r7, [r7, #4]
 800b01a:	e7b6      	b.n	800af8a <_malloc_r+0x4a>
 800b01c:	461a      	mov	r2, r3
 800b01e:	685b      	ldr	r3, [r3, #4]
 800b020:	42a3      	cmp	r3, r4
 800b022:	d1fb      	bne.n	800b01c <_malloc_r+0xdc>
 800b024:	2300      	movs	r3, #0
 800b026:	6053      	str	r3, [r2, #4]
 800b028:	e7de      	b.n	800afe8 <_malloc_r+0xa8>
 800b02a:	230c      	movs	r3, #12
 800b02c:	6033      	str	r3, [r6, #0]
 800b02e:	4630      	mov	r0, r6
 800b030:	f000 f80c 	bl	800b04c <__malloc_unlock>
 800b034:	e794      	b.n	800af60 <_malloc_r+0x20>
 800b036:	6005      	str	r5, [r0, #0]
 800b038:	e7d6      	b.n	800afe8 <_malloc_r+0xa8>
 800b03a:	bf00      	nop
 800b03c:	2000085c 	.word	0x2000085c

0800b040 <__malloc_lock>:
 800b040:	4801      	ldr	r0, [pc, #4]	@ (800b048 <__malloc_lock+0x8>)
 800b042:	f7ff b8b8 	b.w	800a1b6 <__retarget_lock_acquire_recursive>
 800b046:	bf00      	nop
 800b048:	20000854 	.word	0x20000854

0800b04c <__malloc_unlock>:
 800b04c:	4801      	ldr	r0, [pc, #4]	@ (800b054 <__malloc_unlock+0x8>)
 800b04e:	f7ff b8b3 	b.w	800a1b8 <__retarget_lock_release_recursive>
 800b052:	bf00      	nop
 800b054:	20000854 	.word	0x20000854

0800b058 <_Balloc>:
 800b058:	b570      	push	{r4, r5, r6, lr}
 800b05a:	69c6      	ldr	r6, [r0, #28]
 800b05c:	4604      	mov	r4, r0
 800b05e:	460d      	mov	r5, r1
 800b060:	b976      	cbnz	r6, 800b080 <_Balloc+0x28>
 800b062:	2010      	movs	r0, #16
 800b064:	f7ff ff42 	bl	800aeec <malloc>
 800b068:	4602      	mov	r2, r0
 800b06a:	61e0      	str	r0, [r4, #28]
 800b06c:	b920      	cbnz	r0, 800b078 <_Balloc+0x20>
 800b06e:	4b18      	ldr	r3, [pc, #96]	@ (800b0d0 <_Balloc+0x78>)
 800b070:	4818      	ldr	r0, [pc, #96]	@ (800b0d4 <_Balloc+0x7c>)
 800b072:	216b      	movs	r1, #107	@ 0x6b
 800b074:	f000 fdae 	bl	800bbd4 <__assert_func>
 800b078:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b07c:	6006      	str	r6, [r0, #0]
 800b07e:	60c6      	str	r6, [r0, #12]
 800b080:	69e6      	ldr	r6, [r4, #28]
 800b082:	68f3      	ldr	r3, [r6, #12]
 800b084:	b183      	cbz	r3, 800b0a8 <_Balloc+0x50>
 800b086:	69e3      	ldr	r3, [r4, #28]
 800b088:	68db      	ldr	r3, [r3, #12]
 800b08a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b08e:	b9b8      	cbnz	r0, 800b0c0 <_Balloc+0x68>
 800b090:	2101      	movs	r1, #1
 800b092:	fa01 f605 	lsl.w	r6, r1, r5
 800b096:	1d72      	adds	r2, r6, #5
 800b098:	0092      	lsls	r2, r2, #2
 800b09a:	4620      	mov	r0, r4
 800b09c:	f000 fdb8 	bl	800bc10 <_calloc_r>
 800b0a0:	b160      	cbz	r0, 800b0bc <_Balloc+0x64>
 800b0a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b0a6:	e00e      	b.n	800b0c6 <_Balloc+0x6e>
 800b0a8:	2221      	movs	r2, #33	@ 0x21
 800b0aa:	2104      	movs	r1, #4
 800b0ac:	4620      	mov	r0, r4
 800b0ae:	f000 fdaf 	bl	800bc10 <_calloc_r>
 800b0b2:	69e3      	ldr	r3, [r4, #28]
 800b0b4:	60f0      	str	r0, [r6, #12]
 800b0b6:	68db      	ldr	r3, [r3, #12]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d1e4      	bne.n	800b086 <_Balloc+0x2e>
 800b0bc:	2000      	movs	r0, #0
 800b0be:	bd70      	pop	{r4, r5, r6, pc}
 800b0c0:	6802      	ldr	r2, [r0, #0]
 800b0c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b0cc:	e7f7      	b.n	800b0be <_Balloc+0x66>
 800b0ce:	bf00      	nop
 800b0d0:	0800d6a1 	.word	0x0800d6a1
 800b0d4:	0800d721 	.word	0x0800d721

0800b0d8 <_Bfree>:
 800b0d8:	b570      	push	{r4, r5, r6, lr}
 800b0da:	69c6      	ldr	r6, [r0, #28]
 800b0dc:	4605      	mov	r5, r0
 800b0de:	460c      	mov	r4, r1
 800b0e0:	b976      	cbnz	r6, 800b100 <_Bfree+0x28>
 800b0e2:	2010      	movs	r0, #16
 800b0e4:	f7ff ff02 	bl	800aeec <malloc>
 800b0e8:	4602      	mov	r2, r0
 800b0ea:	61e8      	str	r0, [r5, #28]
 800b0ec:	b920      	cbnz	r0, 800b0f8 <_Bfree+0x20>
 800b0ee:	4b09      	ldr	r3, [pc, #36]	@ (800b114 <_Bfree+0x3c>)
 800b0f0:	4809      	ldr	r0, [pc, #36]	@ (800b118 <_Bfree+0x40>)
 800b0f2:	218f      	movs	r1, #143	@ 0x8f
 800b0f4:	f000 fd6e 	bl	800bbd4 <__assert_func>
 800b0f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b0fc:	6006      	str	r6, [r0, #0]
 800b0fe:	60c6      	str	r6, [r0, #12]
 800b100:	b13c      	cbz	r4, 800b112 <_Bfree+0x3a>
 800b102:	69eb      	ldr	r3, [r5, #28]
 800b104:	6862      	ldr	r2, [r4, #4]
 800b106:	68db      	ldr	r3, [r3, #12]
 800b108:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b10c:	6021      	str	r1, [r4, #0]
 800b10e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b112:	bd70      	pop	{r4, r5, r6, pc}
 800b114:	0800d6a1 	.word	0x0800d6a1
 800b118:	0800d721 	.word	0x0800d721

0800b11c <__multadd>:
 800b11c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b120:	690d      	ldr	r5, [r1, #16]
 800b122:	4607      	mov	r7, r0
 800b124:	460c      	mov	r4, r1
 800b126:	461e      	mov	r6, r3
 800b128:	f101 0c14 	add.w	ip, r1, #20
 800b12c:	2000      	movs	r0, #0
 800b12e:	f8dc 3000 	ldr.w	r3, [ip]
 800b132:	b299      	uxth	r1, r3
 800b134:	fb02 6101 	mla	r1, r2, r1, r6
 800b138:	0c1e      	lsrs	r6, r3, #16
 800b13a:	0c0b      	lsrs	r3, r1, #16
 800b13c:	fb02 3306 	mla	r3, r2, r6, r3
 800b140:	b289      	uxth	r1, r1
 800b142:	3001      	adds	r0, #1
 800b144:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b148:	4285      	cmp	r5, r0
 800b14a:	f84c 1b04 	str.w	r1, [ip], #4
 800b14e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b152:	dcec      	bgt.n	800b12e <__multadd+0x12>
 800b154:	b30e      	cbz	r6, 800b19a <__multadd+0x7e>
 800b156:	68a3      	ldr	r3, [r4, #8]
 800b158:	42ab      	cmp	r3, r5
 800b15a:	dc19      	bgt.n	800b190 <__multadd+0x74>
 800b15c:	6861      	ldr	r1, [r4, #4]
 800b15e:	4638      	mov	r0, r7
 800b160:	3101      	adds	r1, #1
 800b162:	f7ff ff79 	bl	800b058 <_Balloc>
 800b166:	4680      	mov	r8, r0
 800b168:	b928      	cbnz	r0, 800b176 <__multadd+0x5a>
 800b16a:	4602      	mov	r2, r0
 800b16c:	4b0c      	ldr	r3, [pc, #48]	@ (800b1a0 <__multadd+0x84>)
 800b16e:	480d      	ldr	r0, [pc, #52]	@ (800b1a4 <__multadd+0x88>)
 800b170:	21ba      	movs	r1, #186	@ 0xba
 800b172:	f000 fd2f 	bl	800bbd4 <__assert_func>
 800b176:	6922      	ldr	r2, [r4, #16]
 800b178:	3202      	adds	r2, #2
 800b17a:	f104 010c 	add.w	r1, r4, #12
 800b17e:	0092      	lsls	r2, r2, #2
 800b180:	300c      	adds	r0, #12
 800b182:	f000 fd19 	bl	800bbb8 <memcpy>
 800b186:	4621      	mov	r1, r4
 800b188:	4638      	mov	r0, r7
 800b18a:	f7ff ffa5 	bl	800b0d8 <_Bfree>
 800b18e:	4644      	mov	r4, r8
 800b190:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b194:	3501      	adds	r5, #1
 800b196:	615e      	str	r6, [r3, #20]
 800b198:	6125      	str	r5, [r4, #16]
 800b19a:	4620      	mov	r0, r4
 800b19c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1a0:	0800d710 	.word	0x0800d710
 800b1a4:	0800d721 	.word	0x0800d721

0800b1a8 <__hi0bits>:
 800b1a8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	bf36      	itet	cc
 800b1b0:	0403      	lslcc	r3, r0, #16
 800b1b2:	2000      	movcs	r0, #0
 800b1b4:	2010      	movcc	r0, #16
 800b1b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b1ba:	bf3c      	itt	cc
 800b1bc:	021b      	lslcc	r3, r3, #8
 800b1be:	3008      	addcc	r0, #8
 800b1c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b1c4:	bf3c      	itt	cc
 800b1c6:	011b      	lslcc	r3, r3, #4
 800b1c8:	3004      	addcc	r0, #4
 800b1ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b1ce:	bf3c      	itt	cc
 800b1d0:	009b      	lslcc	r3, r3, #2
 800b1d2:	3002      	addcc	r0, #2
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	db05      	blt.n	800b1e4 <__hi0bits+0x3c>
 800b1d8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b1dc:	f100 0001 	add.w	r0, r0, #1
 800b1e0:	bf08      	it	eq
 800b1e2:	2020      	moveq	r0, #32
 800b1e4:	4770      	bx	lr

0800b1e6 <__lo0bits>:
 800b1e6:	6803      	ldr	r3, [r0, #0]
 800b1e8:	4602      	mov	r2, r0
 800b1ea:	f013 0007 	ands.w	r0, r3, #7
 800b1ee:	d00b      	beq.n	800b208 <__lo0bits+0x22>
 800b1f0:	07d9      	lsls	r1, r3, #31
 800b1f2:	d421      	bmi.n	800b238 <__lo0bits+0x52>
 800b1f4:	0798      	lsls	r0, r3, #30
 800b1f6:	bf49      	itett	mi
 800b1f8:	085b      	lsrmi	r3, r3, #1
 800b1fa:	089b      	lsrpl	r3, r3, #2
 800b1fc:	2001      	movmi	r0, #1
 800b1fe:	6013      	strmi	r3, [r2, #0]
 800b200:	bf5c      	itt	pl
 800b202:	6013      	strpl	r3, [r2, #0]
 800b204:	2002      	movpl	r0, #2
 800b206:	4770      	bx	lr
 800b208:	b299      	uxth	r1, r3
 800b20a:	b909      	cbnz	r1, 800b210 <__lo0bits+0x2a>
 800b20c:	0c1b      	lsrs	r3, r3, #16
 800b20e:	2010      	movs	r0, #16
 800b210:	b2d9      	uxtb	r1, r3
 800b212:	b909      	cbnz	r1, 800b218 <__lo0bits+0x32>
 800b214:	3008      	adds	r0, #8
 800b216:	0a1b      	lsrs	r3, r3, #8
 800b218:	0719      	lsls	r1, r3, #28
 800b21a:	bf04      	itt	eq
 800b21c:	091b      	lsreq	r3, r3, #4
 800b21e:	3004      	addeq	r0, #4
 800b220:	0799      	lsls	r1, r3, #30
 800b222:	bf04      	itt	eq
 800b224:	089b      	lsreq	r3, r3, #2
 800b226:	3002      	addeq	r0, #2
 800b228:	07d9      	lsls	r1, r3, #31
 800b22a:	d403      	bmi.n	800b234 <__lo0bits+0x4e>
 800b22c:	085b      	lsrs	r3, r3, #1
 800b22e:	f100 0001 	add.w	r0, r0, #1
 800b232:	d003      	beq.n	800b23c <__lo0bits+0x56>
 800b234:	6013      	str	r3, [r2, #0]
 800b236:	4770      	bx	lr
 800b238:	2000      	movs	r0, #0
 800b23a:	4770      	bx	lr
 800b23c:	2020      	movs	r0, #32
 800b23e:	4770      	bx	lr

0800b240 <__i2b>:
 800b240:	b510      	push	{r4, lr}
 800b242:	460c      	mov	r4, r1
 800b244:	2101      	movs	r1, #1
 800b246:	f7ff ff07 	bl	800b058 <_Balloc>
 800b24a:	4602      	mov	r2, r0
 800b24c:	b928      	cbnz	r0, 800b25a <__i2b+0x1a>
 800b24e:	4b05      	ldr	r3, [pc, #20]	@ (800b264 <__i2b+0x24>)
 800b250:	4805      	ldr	r0, [pc, #20]	@ (800b268 <__i2b+0x28>)
 800b252:	f240 1145 	movw	r1, #325	@ 0x145
 800b256:	f000 fcbd 	bl	800bbd4 <__assert_func>
 800b25a:	2301      	movs	r3, #1
 800b25c:	6144      	str	r4, [r0, #20]
 800b25e:	6103      	str	r3, [r0, #16]
 800b260:	bd10      	pop	{r4, pc}
 800b262:	bf00      	nop
 800b264:	0800d710 	.word	0x0800d710
 800b268:	0800d721 	.word	0x0800d721

0800b26c <__multiply>:
 800b26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b270:	4614      	mov	r4, r2
 800b272:	690a      	ldr	r2, [r1, #16]
 800b274:	6923      	ldr	r3, [r4, #16]
 800b276:	429a      	cmp	r2, r3
 800b278:	bfa8      	it	ge
 800b27a:	4623      	movge	r3, r4
 800b27c:	460f      	mov	r7, r1
 800b27e:	bfa4      	itt	ge
 800b280:	460c      	movge	r4, r1
 800b282:	461f      	movge	r7, r3
 800b284:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b288:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b28c:	68a3      	ldr	r3, [r4, #8]
 800b28e:	6861      	ldr	r1, [r4, #4]
 800b290:	eb0a 0609 	add.w	r6, sl, r9
 800b294:	42b3      	cmp	r3, r6
 800b296:	b085      	sub	sp, #20
 800b298:	bfb8      	it	lt
 800b29a:	3101      	addlt	r1, #1
 800b29c:	f7ff fedc 	bl	800b058 <_Balloc>
 800b2a0:	b930      	cbnz	r0, 800b2b0 <__multiply+0x44>
 800b2a2:	4602      	mov	r2, r0
 800b2a4:	4b44      	ldr	r3, [pc, #272]	@ (800b3b8 <__multiply+0x14c>)
 800b2a6:	4845      	ldr	r0, [pc, #276]	@ (800b3bc <__multiply+0x150>)
 800b2a8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b2ac:	f000 fc92 	bl	800bbd4 <__assert_func>
 800b2b0:	f100 0514 	add.w	r5, r0, #20
 800b2b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b2b8:	462b      	mov	r3, r5
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	4543      	cmp	r3, r8
 800b2be:	d321      	bcc.n	800b304 <__multiply+0x98>
 800b2c0:	f107 0114 	add.w	r1, r7, #20
 800b2c4:	f104 0214 	add.w	r2, r4, #20
 800b2c8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b2cc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b2d0:	9302      	str	r3, [sp, #8]
 800b2d2:	1b13      	subs	r3, r2, r4
 800b2d4:	3b15      	subs	r3, #21
 800b2d6:	f023 0303 	bic.w	r3, r3, #3
 800b2da:	3304      	adds	r3, #4
 800b2dc:	f104 0715 	add.w	r7, r4, #21
 800b2e0:	42ba      	cmp	r2, r7
 800b2e2:	bf38      	it	cc
 800b2e4:	2304      	movcc	r3, #4
 800b2e6:	9301      	str	r3, [sp, #4]
 800b2e8:	9b02      	ldr	r3, [sp, #8]
 800b2ea:	9103      	str	r1, [sp, #12]
 800b2ec:	428b      	cmp	r3, r1
 800b2ee:	d80c      	bhi.n	800b30a <__multiply+0x9e>
 800b2f0:	2e00      	cmp	r6, #0
 800b2f2:	dd03      	ble.n	800b2fc <__multiply+0x90>
 800b2f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d05b      	beq.n	800b3b4 <__multiply+0x148>
 800b2fc:	6106      	str	r6, [r0, #16]
 800b2fe:	b005      	add	sp, #20
 800b300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b304:	f843 2b04 	str.w	r2, [r3], #4
 800b308:	e7d8      	b.n	800b2bc <__multiply+0x50>
 800b30a:	f8b1 a000 	ldrh.w	sl, [r1]
 800b30e:	f1ba 0f00 	cmp.w	sl, #0
 800b312:	d024      	beq.n	800b35e <__multiply+0xf2>
 800b314:	f104 0e14 	add.w	lr, r4, #20
 800b318:	46a9      	mov	r9, r5
 800b31a:	f04f 0c00 	mov.w	ip, #0
 800b31e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b322:	f8d9 3000 	ldr.w	r3, [r9]
 800b326:	fa1f fb87 	uxth.w	fp, r7
 800b32a:	b29b      	uxth	r3, r3
 800b32c:	fb0a 330b 	mla	r3, sl, fp, r3
 800b330:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b334:	f8d9 7000 	ldr.w	r7, [r9]
 800b338:	4463      	add	r3, ip
 800b33a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b33e:	fb0a c70b 	mla	r7, sl, fp, ip
 800b342:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b346:	b29b      	uxth	r3, r3
 800b348:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b34c:	4572      	cmp	r2, lr
 800b34e:	f849 3b04 	str.w	r3, [r9], #4
 800b352:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b356:	d8e2      	bhi.n	800b31e <__multiply+0xb2>
 800b358:	9b01      	ldr	r3, [sp, #4]
 800b35a:	f845 c003 	str.w	ip, [r5, r3]
 800b35e:	9b03      	ldr	r3, [sp, #12]
 800b360:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b364:	3104      	adds	r1, #4
 800b366:	f1b9 0f00 	cmp.w	r9, #0
 800b36a:	d021      	beq.n	800b3b0 <__multiply+0x144>
 800b36c:	682b      	ldr	r3, [r5, #0]
 800b36e:	f104 0c14 	add.w	ip, r4, #20
 800b372:	46ae      	mov	lr, r5
 800b374:	f04f 0a00 	mov.w	sl, #0
 800b378:	f8bc b000 	ldrh.w	fp, [ip]
 800b37c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b380:	fb09 770b 	mla	r7, r9, fp, r7
 800b384:	4457      	add	r7, sl
 800b386:	b29b      	uxth	r3, r3
 800b388:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b38c:	f84e 3b04 	str.w	r3, [lr], #4
 800b390:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b394:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b398:	f8be 3000 	ldrh.w	r3, [lr]
 800b39c:	fb09 330a 	mla	r3, r9, sl, r3
 800b3a0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b3a4:	4562      	cmp	r2, ip
 800b3a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b3aa:	d8e5      	bhi.n	800b378 <__multiply+0x10c>
 800b3ac:	9f01      	ldr	r7, [sp, #4]
 800b3ae:	51eb      	str	r3, [r5, r7]
 800b3b0:	3504      	adds	r5, #4
 800b3b2:	e799      	b.n	800b2e8 <__multiply+0x7c>
 800b3b4:	3e01      	subs	r6, #1
 800b3b6:	e79b      	b.n	800b2f0 <__multiply+0x84>
 800b3b8:	0800d710 	.word	0x0800d710
 800b3bc:	0800d721 	.word	0x0800d721

0800b3c0 <__pow5mult>:
 800b3c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3c4:	4615      	mov	r5, r2
 800b3c6:	f012 0203 	ands.w	r2, r2, #3
 800b3ca:	4607      	mov	r7, r0
 800b3cc:	460e      	mov	r6, r1
 800b3ce:	d007      	beq.n	800b3e0 <__pow5mult+0x20>
 800b3d0:	4c25      	ldr	r4, [pc, #148]	@ (800b468 <__pow5mult+0xa8>)
 800b3d2:	3a01      	subs	r2, #1
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b3da:	f7ff fe9f 	bl	800b11c <__multadd>
 800b3de:	4606      	mov	r6, r0
 800b3e0:	10ad      	asrs	r5, r5, #2
 800b3e2:	d03d      	beq.n	800b460 <__pow5mult+0xa0>
 800b3e4:	69fc      	ldr	r4, [r7, #28]
 800b3e6:	b97c      	cbnz	r4, 800b408 <__pow5mult+0x48>
 800b3e8:	2010      	movs	r0, #16
 800b3ea:	f7ff fd7f 	bl	800aeec <malloc>
 800b3ee:	4602      	mov	r2, r0
 800b3f0:	61f8      	str	r0, [r7, #28]
 800b3f2:	b928      	cbnz	r0, 800b400 <__pow5mult+0x40>
 800b3f4:	4b1d      	ldr	r3, [pc, #116]	@ (800b46c <__pow5mult+0xac>)
 800b3f6:	481e      	ldr	r0, [pc, #120]	@ (800b470 <__pow5mult+0xb0>)
 800b3f8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b3fc:	f000 fbea 	bl	800bbd4 <__assert_func>
 800b400:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b404:	6004      	str	r4, [r0, #0]
 800b406:	60c4      	str	r4, [r0, #12]
 800b408:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b40c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b410:	b94c      	cbnz	r4, 800b426 <__pow5mult+0x66>
 800b412:	f240 2171 	movw	r1, #625	@ 0x271
 800b416:	4638      	mov	r0, r7
 800b418:	f7ff ff12 	bl	800b240 <__i2b>
 800b41c:	2300      	movs	r3, #0
 800b41e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b422:	4604      	mov	r4, r0
 800b424:	6003      	str	r3, [r0, #0]
 800b426:	f04f 0900 	mov.w	r9, #0
 800b42a:	07eb      	lsls	r3, r5, #31
 800b42c:	d50a      	bpl.n	800b444 <__pow5mult+0x84>
 800b42e:	4631      	mov	r1, r6
 800b430:	4622      	mov	r2, r4
 800b432:	4638      	mov	r0, r7
 800b434:	f7ff ff1a 	bl	800b26c <__multiply>
 800b438:	4631      	mov	r1, r6
 800b43a:	4680      	mov	r8, r0
 800b43c:	4638      	mov	r0, r7
 800b43e:	f7ff fe4b 	bl	800b0d8 <_Bfree>
 800b442:	4646      	mov	r6, r8
 800b444:	106d      	asrs	r5, r5, #1
 800b446:	d00b      	beq.n	800b460 <__pow5mult+0xa0>
 800b448:	6820      	ldr	r0, [r4, #0]
 800b44a:	b938      	cbnz	r0, 800b45c <__pow5mult+0x9c>
 800b44c:	4622      	mov	r2, r4
 800b44e:	4621      	mov	r1, r4
 800b450:	4638      	mov	r0, r7
 800b452:	f7ff ff0b 	bl	800b26c <__multiply>
 800b456:	6020      	str	r0, [r4, #0]
 800b458:	f8c0 9000 	str.w	r9, [r0]
 800b45c:	4604      	mov	r4, r0
 800b45e:	e7e4      	b.n	800b42a <__pow5mult+0x6a>
 800b460:	4630      	mov	r0, r6
 800b462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b466:	bf00      	nop
 800b468:	0800d77c 	.word	0x0800d77c
 800b46c:	0800d6a1 	.word	0x0800d6a1
 800b470:	0800d721 	.word	0x0800d721

0800b474 <__lshift>:
 800b474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b478:	460c      	mov	r4, r1
 800b47a:	6849      	ldr	r1, [r1, #4]
 800b47c:	6923      	ldr	r3, [r4, #16]
 800b47e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b482:	68a3      	ldr	r3, [r4, #8]
 800b484:	4607      	mov	r7, r0
 800b486:	4691      	mov	r9, r2
 800b488:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b48c:	f108 0601 	add.w	r6, r8, #1
 800b490:	42b3      	cmp	r3, r6
 800b492:	db0b      	blt.n	800b4ac <__lshift+0x38>
 800b494:	4638      	mov	r0, r7
 800b496:	f7ff fddf 	bl	800b058 <_Balloc>
 800b49a:	4605      	mov	r5, r0
 800b49c:	b948      	cbnz	r0, 800b4b2 <__lshift+0x3e>
 800b49e:	4602      	mov	r2, r0
 800b4a0:	4b28      	ldr	r3, [pc, #160]	@ (800b544 <__lshift+0xd0>)
 800b4a2:	4829      	ldr	r0, [pc, #164]	@ (800b548 <__lshift+0xd4>)
 800b4a4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b4a8:	f000 fb94 	bl	800bbd4 <__assert_func>
 800b4ac:	3101      	adds	r1, #1
 800b4ae:	005b      	lsls	r3, r3, #1
 800b4b0:	e7ee      	b.n	800b490 <__lshift+0x1c>
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	f100 0114 	add.w	r1, r0, #20
 800b4b8:	f100 0210 	add.w	r2, r0, #16
 800b4bc:	4618      	mov	r0, r3
 800b4be:	4553      	cmp	r3, sl
 800b4c0:	db33      	blt.n	800b52a <__lshift+0xb6>
 800b4c2:	6920      	ldr	r0, [r4, #16]
 800b4c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b4c8:	f104 0314 	add.w	r3, r4, #20
 800b4cc:	f019 091f 	ands.w	r9, r9, #31
 800b4d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b4d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b4d8:	d02b      	beq.n	800b532 <__lshift+0xbe>
 800b4da:	f1c9 0e20 	rsb	lr, r9, #32
 800b4de:	468a      	mov	sl, r1
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	6818      	ldr	r0, [r3, #0]
 800b4e4:	fa00 f009 	lsl.w	r0, r0, r9
 800b4e8:	4310      	orrs	r0, r2
 800b4ea:	f84a 0b04 	str.w	r0, [sl], #4
 800b4ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4f2:	459c      	cmp	ip, r3
 800b4f4:	fa22 f20e 	lsr.w	r2, r2, lr
 800b4f8:	d8f3      	bhi.n	800b4e2 <__lshift+0x6e>
 800b4fa:	ebac 0304 	sub.w	r3, ip, r4
 800b4fe:	3b15      	subs	r3, #21
 800b500:	f023 0303 	bic.w	r3, r3, #3
 800b504:	3304      	adds	r3, #4
 800b506:	f104 0015 	add.w	r0, r4, #21
 800b50a:	4584      	cmp	ip, r0
 800b50c:	bf38      	it	cc
 800b50e:	2304      	movcc	r3, #4
 800b510:	50ca      	str	r2, [r1, r3]
 800b512:	b10a      	cbz	r2, 800b518 <__lshift+0xa4>
 800b514:	f108 0602 	add.w	r6, r8, #2
 800b518:	3e01      	subs	r6, #1
 800b51a:	4638      	mov	r0, r7
 800b51c:	612e      	str	r6, [r5, #16]
 800b51e:	4621      	mov	r1, r4
 800b520:	f7ff fdda 	bl	800b0d8 <_Bfree>
 800b524:	4628      	mov	r0, r5
 800b526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b52a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b52e:	3301      	adds	r3, #1
 800b530:	e7c5      	b.n	800b4be <__lshift+0x4a>
 800b532:	3904      	subs	r1, #4
 800b534:	f853 2b04 	ldr.w	r2, [r3], #4
 800b538:	f841 2f04 	str.w	r2, [r1, #4]!
 800b53c:	459c      	cmp	ip, r3
 800b53e:	d8f9      	bhi.n	800b534 <__lshift+0xc0>
 800b540:	e7ea      	b.n	800b518 <__lshift+0xa4>
 800b542:	bf00      	nop
 800b544:	0800d710 	.word	0x0800d710
 800b548:	0800d721 	.word	0x0800d721

0800b54c <__mcmp>:
 800b54c:	690a      	ldr	r2, [r1, #16]
 800b54e:	4603      	mov	r3, r0
 800b550:	6900      	ldr	r0, [r0, #16]
 800b552:	1a80      	subs	r0, r0, r2
 800b554:	b530      	push	{r4, r5, lr}
 800b556:	d10e      	bne.n	800b576 <__mcmp+0x2a>
 800b558:	3314      	adds	r3, #20
 800b55a:	3114      	adds	r1, #20
 800b55c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b560:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b564:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b568:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b56c:	4295      	cmp	r5, r2
 800b56e:	d003      	beq.n	800b578 <__mcmp+0x2c>
 800b570:	d205      	bcs.n	800b57e <__mcmp+0x32>
 800b572:	f04f 30ff 	mov.w	r0, #4294967295
 800b576:	bd30      	pop	{r4, r5, pc}
 800b578:	42a3      	cmp	r3, r4
 800b57a:	d3f3      	bcc.n	800b564 <__mcmp+0x18>
 800b57c:	e7fb      	b.n	800b576 <__mcmp+0x2a>
 800b57e:	2001      	movs	r0, #1
 800b580:	e7f9      	b.n	800b576 <__mcmp+0x2a>
	...

0800b584 <__mdiff>:
 800b584:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b588:	4689      	mov	r9, r1
 800b58a:	4606      	mov	r6, r0
 800b58c:	4611      	mov	r1, r2
 800b58e:	4648      	mov	r0, r9
 800b590:	4614      	mov	r4, r2
 800b592:	f7ff ffdb 	bl	800b54c <__mcmp>
 800b596:	1e05      	subs	r5, r0, #0
 800b598:	d112      	bne.n	800b5c0 <__mdiff+0x3c>
 800b59a:	4629      	mov	r1, r5
 800b59c:	4630      	mov	r0, r6
 800b59e:	f7ff fd5b 	bl	800b058 <_Balloc>
 800b5a2:	4602      	mov	r2, r0
 800b5a4:	b928      	cbnz	r0, 800b5b2 <__mdiff+0x2e>
 800b5a6:	4b3f      	ldr	r3, [pc, #252]	@ (800b6a4 <__mdiff+0x120>)
 800b5a8:	f240 2137 	movw	r1, #567	@ 0x237
 800b5ac:	483e      	ldr	r0, [pc, #248]	@ (800b6a8 <__mdiff+0x124>)
 800b5ae:	f000 fb11 	bl	800bbd4 <__assert_func>
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b5b8:	4610      	mov	r0, r2
 800b5ba:	b003      	add	sp, #12
 800b5bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5c0:	bfbc      	itt	lt
 800b5c2:	464b      	movlt	r3, r9
 800b5c4:	46a1      	movlt	r9, r4
 800b5c6:	4630      	mov	r0, r6
 800b5c8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b5cc:	bfba      	itte	lt
 800b5ce:	461c      	movlt	r4, r3
 800b5d0:	2501      	movlt	r5, #1
 800b5d2:	2500      	movge	r5, #0
 800b5d4:	f7ff fd40 	bl	800b058 <_Balloc>
 800b5d8:	4602      	mov	r2, r0
 800b5da:	b918      	cbnz	r0, 800b5e4 <__mdiff+0x60>
 800b5dc:	4b31      	ldr	r3, [pc, #196]	@ (800b6a4 <__mdiff+0x120>)
 800b5de:	f240 2145 	movw	r1, #581	@ 0x245
 800b5e2:	e7e3      	b.n	800b5ac <__mdiff+0x28>
 800b5e4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b5e8:	6926      	ldr	r6, [r4, #16]
 800b5ea:	60c5      	str	r5, [r0, #12]
 800b5ec:	f109 0310 	add.w	r3, r9, #16
 800b5f0:	f109 0514 	add.w	r5, r9, #20
 800b5f4:	f104 0e14 	add.w	lr, r4, #20
 800b5f8:	f100 0b14 	add.w	fp, r0, #20
 800b5fc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b600:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b604:	9301      	str	r3, [sp, #4]
 800b606:	46d9      	mov	r9, fp
 800b608:	f04f 0c00 	mov.w	ip, #0
 800b60c:	9b01      	ldr	r3, [sp, #4]
 800b60e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b612:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b616:	9301      	str	r3, [sp, #4]
 800b618:	fa1f f38a 	uxth.w	r3, sl
 800b61c:	4619      	mov	r1, r3
 800b61e:	b283      	uxth	r3, r0
 800b620:	1acb      	subs	r3, r1, r3
 800b622:	0c00      	lsrs	r0, r0, #16
 800b624:	4463      	add	r3, ip
 800b626:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b62a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b62e:	b29b      	uxth	r3, r3
 800b630:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b634:	4576      	cmp	r6, lr
 800b636:	f849 3b04 	str.w	r3, [r9], #4
 800b63a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b63e:	d8e5      	bhi.n	800b60c <__mdiff+0x88>
 800b640:	1b33      	subs	r3, r6, r4
 800b642:	3b15      	subs	r3, #21
 800b644:	f023 0303 	bic.w	r3, r3, #3
 800b648:	3415      	adds	r4, #21
 800b64a:	3304      	adds	r3, #4
 800b64c:	42a6      	cmp	r6, r4
 800b64e:	bf38      	it	cc
 800b650:	2304      	movcc	r3, #4
 800b652:	441d      	add	r5, r3
 800b654:	445b      	add	r3, fp
 800b656:	461e      	mov	r6, r3
 800b658:	462c      	mov	r4, r5
 800b65a:	4544      	cmp	r4, r8
 800b65c:	d30e      	bcc.n	800b67c <__mdiff+0xf8>
 800b65e:	f108 0103 	add.w	r1, r8, #3
 800b662:	1b49      	subs	r1, r1, r5
 800b664:	f021 0103 	bic.w	r1, r1, #3
 800b668:	3d03      	subs	r5, #3
 800b66a:	45a8      	cmp	r8, r5
 800b66c:	bf38      	it	cc
 800b66e:	2100      	movcc	r1, #0
 800b670:	440b      	add	r3, r1
 800b672:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b676:	b191      	cbz	r1, 800b69e <__mdiff+0x11a>
 800b678:	6117      	str	r7, [r2, #16]
 800b67a:	e79d      	b.n	800b5b8 <__mdiff+0x34>
 800b67c:	f854 1b04 	ldr.w	r1, [r4], #4
 800b680:	46e6      	mov	lr, ip
 800b682:	0c08      	lsrs	r0, r1, #16
 800b684:	fa1c fc81 	uxtah	ip, ip, r1
 800b688:	4471      	add	r1, lr
 800b68a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b68e:	b289      	uxth	r1, r1
 800b690:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b694:	f846 1b04 	str.w	r1, [r6], #4
 800b698:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b69c:	e7dd      	b.n	800b65a <__mdiff+0xd6>
 800b69e:	3f01      	subs	r7, #1
 800b6a0:	e7e7      	b.n	800b672 <__mdiff+0xee>
 800b6a2:	bf00      	nop
 800b6a4:	0800d710 	.word	0x0800d710
 800b6a8:	0800d721 	.word	0x0800d721

0800b6ac <__d2b>:
 800b6ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b6b0:	460f      	mov	r7, r1
 800b6b2:	2101      	movs	r1, #1
 800b6b4:	ec59 8b10 	vmov	r8, r9, d0
 800b6b8:	4616      	mov	r6, r2
 800b6ba:	f7ff fccd 	bl	800b058 <_Balloc>
 800b6be:	4604      	mov	r4, r0
 800b6c0:	b930      	cbnz	r0, 800b6d0 <__d2b+0x24>
 800b6c2:	4602      	mov	r2, r0
 800b6c4:	4b23      	ldr	r3, [pc, #140]	@ (800b754 <__d2b+0xa8>)
 800b6c6:	4824      	ldr	r0, [pc, #144]	@ (800b758 <__d2b+0xac>)
 800b6c8:	f240 310f 	movw	r1, #783	@ 0x30f
 800b6cc:	f000 fa82 	bl	800bbd4 <__assert_func>
 800b6d0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b6d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b6d8:	b10d      	cbz	r5, 800b6de <__d2b+0x32>
 800b6da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b6de:	9301      	str	r3, [sp, #4]
 800b6e0:	f1b8 0300 	subs.w	r3, r8, #0
 800b6e4:	d023      	beq.n	800b72e <__d2b+0x82>
 800b6e6:	4668      	mov	r0, sp
 800b6e8:	9300      	str	r3, [sp, #0]
 800b6ea:	f7ff fd7c 	bl	800b1e6 <__lo0bits>
 800b6ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b6f2:	b1d0      	cbz	r0, 800b72a <__d2b+0x7e>
 800b6f4:	f1c0 0320 	rsb	r3, r0, #32
 800b6f8:	fa02 f303 	lsl.w	r3, r2, r3
 800b6fc:	430b      	orrs	r3, r1
 800b6fe:	40c2      	lsrs	r2, r0
 800b700:	6163      	str	r3, [r4, #20]
 800b702:	9201      	str	r2, [sp, #4]
 800b704:	9b01      	ldr	r3, [sp, #4]
 800b706:	61a3      	str	r3, [r4, #24]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	bf0c      	ite	eq
 800b70c:	2201      	moveq	r2, #1
 800b70e:	2202      	movne	r2, #2
 800b710:	6122      	str	r2, [r4, #16]
 800b712:	b1a5      	cbz	r5, 800b73e <__d2b+0x92>
 800b714:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b718:	4405      	add	r5, r0
 800b71a:	603d      	str	r5, [r7, #0]
 800b71c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b720:	6030      	str	r0, [r6, #0]
 800b722:	4620      	mov	r0, r4
 800b724:	b003      	add	sp, #12
 800b726:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b72a:	6161      	str	r1, [r4, #20]
 800b72c:	e7ea      	b.n	800b704 <__d2b+0x58>
 800b72e:	a801      	add	r0, sp, #4
 800b730:	f7ff fd59 	bl	800b1e6 <__lo0bits>
 800b734:	9b01      	ldr	r3, [sp, #4]
 800b736:	6163      	str	r3, [r4, #20]
 800b738:	3020      	adds	r0, #32
 800b73a:	2201      	movs	r2, #1
 800b73c:	e7e8      	b.n	800b710 <__d2b+0x64>
 800b73e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b742:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b746:	6038      	str	r0, [r7, #0]
 800b748:	6918      	ldr	r0, [r3, #16]
 800b74a:	f7ff fd2d 	bl	800b1a8 <__hi0bits>
 800b74e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b752:	e7e5      	b.n	800b720 <__d2b+0x74>
 800b754:	0800d710 	.word	0x0800d710
 800b758:	0800d721 	.word	0x0800d721

0800b75c <__ssputs_r>:
 800b75c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b760:	688e      	ldr	r6, [r1, #8]
 800b762:	461f      	mov	r7, r3
 800b764:	42be      	cmp	r6, r7
 800b766:	680b      	ldr	r3, [r1, #0]
 800b768:	4682      	mov	sl, r0
 800b76a:	460c      	mov	r4, r1
 800b76c:	4690      	mov	r8, r2
 800b76e:	d82d      	bhi.n	800b7cc <__ssputs_r+0x70>
 800b770:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b774:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b778:	d026      	beq.n	800b7c8 <__ssputs_r+0x6c>
 800b77a:	6965      	ldr	r5, [r4, #20]
 800b77c:	6909      	ldr	r1, [r1, #16]
 800b77e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b782:	eba3 0901 	sub.w	r9, r3, r1
 800b786:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b78a:	1c7b      	adds	r3, r7, #1
 800b78c:	444b      	add	r3, r9
 800b78e:	106d      	asrs	r5, r5, #1
 800b790:	429d      	cmp	r5, r3
 800b792:	bf38      	it	cc
 800b794:	461d      	movcc	r5, r3
 800b796:	0553      	lsls	r3, r2, #21
 800b798:	d527      	bpl.n	800b7ea <__ssputs_r+0x8e>
 800b79a:	4629      	mov	r1, r5
 800b79c:	f7ff fbd0 	bl	800af40 <_malloc_r>
 800b7a0:	4606      	mov	r6, r0
 800b7a2:	b360      	cbz	r0, 800b7fe <__ssputs_r+0xa2>
 800b7a4:	6921      	ldr	r1, [r4, #16]
 800b7a6:	464a      	mov	r2, r9
 800b7a8:	f000 fa06 	bl	800bbb8 <memcpy>
 800b7ac:	89a3      	ldrh	r3, [r4, #12]
 800b7ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b7b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7b6:	81a3      	strh	r3, [r4, #12]
 800b7b8:	6126      	str	r6, [r4, #16]
 800b7ba:	6165      	str	r5, [r4, #20]
 800b7bc:	444e      	add	r6, r9
 800b7be:	eba5 0509 	sub.w	r5, r5, r9
 800b7c2:	6026      	str	r6, [r4, #0]
 800b7c4:	60a5      	str	r5, [r4, #8]
 800b7c6:	463e      	mov	r6, r7
 800b7c8:	42be      	cmp	r6, r7
 800b7ca:	d900      	bls.n	800b7ce <__ssputs_r+0x72>
 800b7cc:	463e      	mov	r6, r7
 800b7ce:	6820      	ldr	r0, [r4, #0]
 800b7d0:	4632      	mov	r2, r6
 800b7d2:	4641      	mov	r1, r8
 800b7d4:	f000 f9c6 	bl	800bb64 <memmove>
 800b7d8:	68a3      	ldr	r3, [r4, #8]
 800b7da:	1b9b      	subs	r3, r3, r6
 800b7dc:	60a3      	str	r3, [r4, #8]
 800b7de:	6823      	ldr	r3, [r4, #0]
 800b7e0:	4433      	add	r3, r6
 800b7e2:	6023      	str	r3, [r4, #0]
 800b7e4:	2000      	movs	r0, #0
 800b7e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7ea:	462a      	mov	r2, r5
 800b7ec:	f000 fa36 	bl	800bc5c <_realloc_r>
 800b7f0:	4606      	mov	r6, r0
 800b7f2:	2800      	cmp	r0, #0
 800b7f4:	d1e0      	bne.n	800b7b8 <__ssputs_r+0x5c>
 800b7f6:	6921      	ldr	r1, [r4, #16]
 800b7f8:	4650      	mov	r0, sl
 800b7fa:	f7ff fb2d 	bl	800ae58 <_free_r>
 800b7fe:	230c      	movs	r3, #12
 800b800:	f8ca 3000 	str.w	r3, [sl]
 800b804:	89a3      	ldrh	r3, [r4, #12]
 800b806:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b80a:	81a3      	strh	r3, [r4, #12]
 800b80c:	f04f 30ff 	mov.w	r0, #4294967295
 800b810:	e7e9      	b.n	800b7e6 <__ssputs_r+0x8a>
	...

0800b814 <_svfiprintf_r>:
 800b814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b818:	4698      	mov	r8, r3
 800b81a:	898b      	ldrh	r3, [r1, #12]
 800b81c:	061b      	lsls	r3, r3, #24
 800b81e:	b09d      	sub	sp, #116	@ 0x74
 800b820:	4607      	mov	r7, r0
 800b822:	460d      	mov	r5, r1
 800b824:	4614      	mov	r4, r2
 800b826:	d510      	bpl.n	800b84a <_svfiprintf_r+0x36>
 800b828:	690b      	ldr	r3, [r1, #16]
 800b82a:	b973      	cbnz	r3, 800b84a <_svfiprintf_r+0x36>
 800b82c:	2140      	movs	r1, #64	@ 0x40
 800b82e:	f7ff fb87 	bl	800af40 <_malloc_r>
 800b832:	6028      	str	r0, [r5, #0]
 800b834:	6128      	str	r0, [r5, #16]
 800b836:	b930      	cbnz	r0, 800b846 <_svfiprintf_r+0x32>
 800b838:	230c      	movs	r3, #12
 800b83a:	603b      	str	r3, [r7, #0]
 800b83c:	f04f 30ff 	mov.w	r0, #4294967295
 800b840:	b01d      	add	sp, #116	@ 0x74
 800b842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b846:	2340      	movs	r3, #64	@ 0x40
 800b848:	616b      	str	r3, [r5, #20]
 800b84a:	2300      	movs	r3, #0
 800b84c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b84e:	2320      	movs	r3, #32
 800b850:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b854:	f8cd 800c 	str.w	r8, [sp, #12]
 800b858:	2330      	movs	r3, #48	@ 0x30
 800b85a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b9f8 <_svfiprintf_r+0x1e4>
 800b85e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b862:	f04f 0901 	mov.w	r9, #1
 800b866:	4623      	mov	r3, r4
 800b868:	469a      	mov	sl, r3
 800b86a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b86e:	b10a      	cbz	r2, 800b874 <_svfiprintf_r+0x60>
 800b870:	2a25      	cmp	r2, #37	@ 0x25
 800b872:	d1f9      	bne.n	800b868 <_svfiprintf_r+0x54>
 800b874:	ebba 0b04 	subs.w	fp, sl, r4
 800b878:	d00b      	beq.n	800b892 <_svfiprintf_r+0x7e>
 800b87a:	465b      	mov	r3, fp
 800b87c:	4622      	mov	r2, r4
 800b87e:	4629      	mov	r1, r5
 800b880:	4638      	mov	r0, r7
 800b882:	f7ff ff6b 	bl	800b75c <__ssputs_r>
 800b886:	3001      	adds	r0, #1
 800b888:	f000 80a7 	beq.w	800b9da <_svfiprintf_r+0x1c6>
 800b88c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b88e:	445a      	add	r2, fp
 800b890:	9209      	str	r2, [sp, #36]	@ 0x24
 800b892:	f89a 3000 	ldrb.w	r3, [sl]
 800b896:	2b00      	cmp	r3, #0
 800b898:	f000 809f 	beq.w	800b9da <_svfiprintf_r+0x1c6>
 800b89c:	2300      	movs	r3, #0
 800b89e:	f04f 32ff 	mov.w	r2, #4294967295
 800b8a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b8a6:	f10a 0a01 	add.w	sl, sl, #1
 800b8aa:	9304      	str	r3, [sp, #16]
 800b8ac:	9307      	str	r3, [sp, #28]
 800b8ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b8b2:	931a      	str	r3, [sp, #104]	@ 0x68
 800b8b4:	4654      	mov	r4, sl
 800b8b6:	2205      	movs	r2, #5
 800b8b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8bc:	484e      	ldr	r0, [pc, #312]	@ (800b9f8 <_svfiprintf_r+0x1e4>)
 800b8be:	f7f4 fca7 	bl	8000210 <memchr>
 800b8c2:	9a04      	ldr	r2, [sp, #16]
 800b8c4:	b9d8      	cbnz	r0, 800b8fe <_svfiprintf_r+0xea>
 800b8c6:	06d0      	lsls	r0, r2, #27
 800b8c8:	bf44      	itt	mi
 800b8ca:	2320      	movmi	r3, #32
 800b8cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b8d0:	0711      	lsls	r1, r2, #28
 800b8d2:	bf44      	itt	mi
 800b8d4:	232b      	movmi	r3, #43	@ 0x2b
 800b8d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b8da:	f89a 3000 	ldrb.w	r3, [sl]
 800b8de:	2b2a      	cmp	r3, #42	@ 0x2a
 800b8e0:	d015      	beq.n	800b90e <_svfiprintf_r+0xfa>
 800b8e2:	9a07      	ldr	r2, [sp, #28]
 800b8e4:	4654      	mov	r4, sl
 800b8e6:	2000      	movs	r0, #0
 800b8e8:	f04f 0c0a 	mov.w	ip, #10
 800b8ec:	4621      	mov	r1, r4
 800b8ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8f2:	3b30      	subs	r3, #48	@ 0x30
 800b8f4:	2b09      	cmp	r3, #9
 800b8f6:	d94b      	bls.n	800b990 <_svfiprintf_r+0x17c>
 800b8f8:	b1b0      	cbz	r0, 800b928 <_svfiprintf_r+0x114>
 800b8fa:	9207      	str	r2, [sp, #28]
 800b8fc:	e014      	b.n	800b928 <_svfiprintf_r+0x114>
 800b8fe:	eba0 0308 	sub.w	r3, r0, r8
 800b902:	fa09 f303 	lsl.w	r3, r9, r3
 800b906:	4313      	orrs	r3, r2
 800b908:	9304      	str	r3, [sp, #16]
 800b90a:	46a2      	mov	sl, r4
 800b90c:	e7d2      	b.n	800b8b4 <_svfiprintf_r+0xa0>
 800b90e:	9b03      	ldr	r3, [sp, #12]
 800b910:	1d19      	adds	r1, r3, #4
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	9103      	str	r1, [sp, #12]
 800b916:	2b00      	cmp	r3, #0
 800b918:	bfbb      	ittet	lt
 800b91a:	425b      	neglt	r3, r3
 800b91c:	f042 0202 	orrlt.w	r2, r2, #2
 800b920:	9307      	strge	r3, [sp, #28]
 800b922:	9307      	strlt	r3, [sp, #28]
 800b924:	bfb8      	it	lt
 800b926:	9204      	strlt	r2, [sp, #16]
 800b928:	7823      	ldrb	r3, [r4, #0]
 800b92a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b92c:	d10a      	bne.n	800b944 <_svfiprintf_r+0x130>
 800b92e:	7863      	ldrb	r3, [r4, #1]
 800b930:	2b2a      	cmp	r3, #42	@ 0x2a
 800b932:	d132      	bne.n	800b99a <_svfiprintf_r+0x186>
 800b934:	9b03      	ldr	r3, [sp, #12]
 800b936:	1d1a      	adds	r2, r3, #4
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	9203      	str	r2, [sp, #12]
 800b93c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b940:	3402      	adds	r4, #2
 800b942:	9305      	str	r3, [sp, #20]
 800b944:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ba08 <_svfiprintf_r+0x1f4>
 800b948:	7821      	ldrb	r1, [r4, #0]
 800b94a:	2203      	movs	r2, #3
 800b94c:	4650      	mov	r0, sl
 800b94e:	f7f4 fc5f 	bl	8000210 <memchr>
 800b952:	b138      	cbz	r0, 800b964 <_svfiprintf_r+0x150>
 800b954:	9b04      	ldr	r3, [sp, #16]
 800b956:	eba0 000a 	sub.w	r0, r0, sl
 800b95a:	2240      	movs	r2, #64	@ 0x40
 800b95c:	4082      	lsls	r2, r0
 800b95e:	4313      	orrs	r3, r2
 800b960:	3401      	adds	r4, #1
 800b962:	9304      	str	r3, [sp, #16]
 800b964:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b968:	4824      	ldr	r0, [pc, #144]	@ (800b9fc <_svfiprintf_r+0x1e8>)
 800b96a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b96e:	2206      	movs	r2, #6
 800b970:	f7f4 fc4e 	bl	8000210 <memchr>
 800b974:	2800      	cmp	r0, #0
 800b976:	d036      	beq.n	800b9e6 <_svfiprintf_r+0x1d2>
 800b978:	4b21      	ldr	r3, [pc, #132]	@ (800ba00 <_svfiprintf_r+0x1ec>)
 800b97a:	bb1b      	cbnz	r3, 800b9c4 <_svfiprintf_r+0x1b0>
 800b97c:	9b03      	ldr	r3, [sp, #12]
 800b97e:	3307      	adds	r3, #7
 800b980:	f023 0307 	bic.w	r3, r3, #7
 800b984:	3308      	adds	r3, #8
 800b986:	9303      	str	r3, [sp, #12]
 800b988:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b98a:	4433      	add	r3, r6
 800b98c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b98e:	e76a      	b.n	800b866 <_svfiprintf_r+0x52>
 800b990:	fb0c 3202 	mla	r2, ip, r2, r3
 800b994:	460c      	mov	r4, r1
 800b996:	2001      	movs	r0, #1
 800b998:	e7a8      	b.n	800b8ec <_svfiprintf_r+0xd8>
 800b99a:	2300      	movs	r3, #0
 800b99c:	3401      	adds	r4, #1
 800b99e:	9305      	str	r3, [sp, #20]
 800b9a0:	4619      	mov	r1, r3
 800b9a2:	f04f 0c0a 	mov.w	ip, #10
 800b9a6:	4620      	mov	r0, r4
 800b9a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9ac:	3a30      	subs	r2, #48	@ 0x30
 800b9ae:	2a09      	cmp	r2, #9
 800b9b0:	d903      	bls.n	800b9ba <_svfiprintf_r+0x1a6>
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d0c6      	beq.n	800b944 <_svfiprintf_r+0x130>
 800b9b6:	9105      	str	r1, [sp, #20]
 800b9b8:	e7c4      	b.n	800b944 <_svfiprintf_r+0x130>
 800b9ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9be:	4604      	mov	r4, r0
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	e7f0      	b.n	800b9a6 <_svfiprintf_r+0x192>
 800b9c4:	ab03      	add	r3, sp, #12
 800b9c6:	9300      	str	r3, [sp, #0]
 800b9c8:	462a      	mov	r2, r5
 800b9ca:	4b0e      	ldr	r3, [pc, #56]	@ (800ba04 <_svfiprintf_r+0x1f0>)
 800b9cc:	a904      	add	r1, sp, #16
 800b9ce:	4638      	mov	r0, r7
 800b9d0:	f7fd fe96 	bl	8009700 <_printf_float>
 800b9d4:	1c42      	adds	r2, r0, #1
 800b9d6:	4606      	mov	r6, r0
 800b9d8:	d1d6      	bne.n	800b988 <_svfiprintf_r+0x174>
 800b9da:	89ab      	ldrh	r3, [r5, #12]
 800b9dc:	065b      	lsls	r3, r3, #25
 800b9de:	f53f af2d 	bmi.w	800b83c <_svfiprintf_r+0x28>
 800b9e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b9e4:	e72c      	b.n	800b840 <_svfiprintf_r+0x2c>
 800b9e6:	ab03      	add	r3, sp, #12
 800b9e8:	9300      	str	r3, [sp, #0]
 800b9ea:	462a      	mov	r2, r5
 800b9ec:	4b05      	ldr	r3, [pc, #20]	@ (800ba04 <_svfiprintf_r+0x1f0>)
 800b9ee:	a904      	add	r1, sp, #16
 800b9f0:	4638      	mov	r0, r7
 800b9f2:	f7fe f91d 	bl	8009c30 <_printf_i>
 800b9f6:	e7ed      	b.n	800b9d4 <_svfiprintf_r+0x1c0>
 800b9f8:	0800d878 	.word	0x0800d878
 800b9fc:	0800d882 	.word	0x0800d882
 800ba00:	08009701 	.word	0x08009701
 800ba04:	0800b75d 	.word	0x0800b75d
 800ba08:	0800d87e 	.word	0x0800d87e

0800ba0c <__sflush_r>:
 800ba0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ba10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba14:	0716      	lsls	r6, r2, #28
 800ba16:	4605      	mov	r5, r0
 800ba18:	460c      	mov	r4, r1
 800ba1a:	d454      	bmi.n	800bac6 <__sflush_r+0xba>
 800ba1c:	684b      	ldr	r3, [r1, #4]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	dc02      	bgt.n	800ba28 <__sflush_r+0x1c>
 800ba22:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	dd48      	ble.n	800baba <__sflush_r+0xae>
 800ba28:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ba2a:	2e00      	cmp	r6, #0
 800ba2c:	d045      	beq.n	800baba <__sflush_r+0xae>
 800ba2e:	2300      	movs	r3, #0
 800ba30:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ba34:	682f      	ldr	r7, [r5, #0]
 800ba36:	6a21      	ldr	r1, [r4, #32]
 800ba38:	602b      	str	r3, [r5, #0]
 800ba3a:	d030      	beq.n	800ba9e <__sflush_r+0x92>
 800ba3c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ba3e:	89a3      	ldrh	r3, [r4, #12]
 800ba40:	0759      	lsls	r1, r3, #29
 800ba42:	d505      	bpl.n	800ba50 <__sflush_r+0x44>
 800ba44:	6863      	ldr	r3, [r4, #4]
 800ba46:	1ad2      	subs	r2, r2, r3
 800ba48:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ba4a:	b10b      	cbz	r3, 800ba50 <__sflush_r+0x44>
 800ba4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ba4e:	1ad2      	subs	r2, r2, r3
 800ba50:	2300      	movs	r3, #0
 800ba52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ba54:	6a21      	ldr	r1, [r4, #32]
 800ba56:	4628      	mov	r0, r5
 800ba58:	47b0      	blx	r6
 800ba5a:	1c43      	adds	r3, r0, #1
 800ba5c:	89a3      	ldrh	r3, [r4, #12]
 800ba5e:	d106      	bne.n	800ba6e <__sflush_r+0x62>
 800ba60:	6829      	ldr	r1, [r5, #0]
 800ba62:	291d      	cmp	r1, #29
 800ba64:	d82b      	bhi.n	800babe <__sflush_r+0xb2>
 800ba66:	4a2a      	ldr	r2, [pc, #168]	@ (800bb10 <__sflush_r+0x104>)
 800ba68:	410a      	asrs	r2, r1
 800ba6a:	07d6      	lsls	r6, r2, #31
 800ba6c:	d427      	bmi.n	800babe <__sflush_r+0xb2>
 800ba6e:	2200      	movs	r2, #0
 800ba70:	6062      	str	r2, [r4, #4]
 800ba72:	04d9      	lsls	r1, r3, #19
 800ba74:	6922      	ldr	r2, [r4, #16]
 800ba76:	6022      	str	r2, [r4, #0]
 800ba78:	d504      	bpl.n	800ba84 <__sflush_r+0x78>
 800ba7a:	1c42      	adds	r2, r0, #1
 800ba7c:	d101      	bne.n	800ba82 <__sflush_r+0x76>
 800ba7e:	682b      	ldr	r3, [r5, #0]
 800ba80:	b903      	cbnz	r3, 800ba84 <__sflush_r+0x78>
 800ba82:	6560      	str	r0, [r4, #84]	@ 0x54
 800ba84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ba86:	602f      	str	r7, [r5, #0]
 800ba88:	b1b9      	cbz	r1, 800baba <__sflush_r+0xae>
 800ba8a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ba8e:	4299      	cmp	r1, r3
 800ba90:	d002      	beq.n	800ba98 <__sflush_r+0x8c>
 800ba92:	4628      	mov	r0, r5
 800ba94:	f7ff f9e0 	bl	800ae58 <_free_r>
 800ba98:	2300      	movs	r3, #0
 800ba9a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ba9c:	e00d      	b.n	800baba <__sflush_r+0xae>
 800ba9e:	2301      	movs	r3, #1
 800baa0:	4628      	mov	r0, r5
 800baa2:	47b0      	blx	r6
 800baa4:	4602      	mov	r2, r0
 800baa6:	1c50      	adds	r0, r2, #1
 800baa8:	d1c9      	bne.n	800ba3e <__sflush_r+0x32>
 800baaa:	682b      	ldr	r3, [r5, #0]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d0c6      	beq.n	800ba3e <__sflush_r+0x32>
 800bab0:	2b1d      	cmp	r3, #29
 800bab2:	d001      	beq.n	800bab8 <__sflush_r+0xac>
 800bab4:	2b16      	cmp	r3, #22
 800bab6:	d11e      	bne.n	800baf6 <__sflush_r+0xea>
 800bab8:	602f      	str	r7, [r5, #0]
 800baba:	2000      	movs	r0, #0
 800babc:	e022      	b.n	800bb04 <__sflush_r+0xf8>
 800babe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bac2:	b21b      	sxth	r3, r3
 800bac4:	e01b      	b.n	800bafe <__sflush_r+0xf2>
 800bac6:	690f      	ldr	r7, [r1, #16]
 800bac8:	2f00      	cmp	r7, #0
 800baca:	d0f6      	beq.n	800baba <__sflush_r+0xae>
 800bacc:	0793      	lsls	r3, r2, #30
 800bace:	680e      	ldr	r6, [r1, #0]
 800bad0:	bf08      	it	eq
 800bad2:	694b      	ldreq	r3, [r1, #20]
 800bad4:	600f      	str	r7, [r1, #0]
 800bad6:	bf18      	it	ne
 800bad8:	2300      	movne	r3, #0
 800bada:	eba6 0807 	sub.w	r8, r6, r7
 800bade:	608b      	str	r3, [r1, #8]
 800bae0:	f1b8 0f00 	cmp.w	r8, #0
 800bae4:	dde9      	ble.n	800baba <__sflush_r+0xae>
 800bae6:	6a21      	ldr	r1, [r4, #32]
 800bae8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800baea:	4643      	mov	r3, r8
 800baec:	463a      	mov	r2, r7
 800baee:	4628      	mov	r0, r5
 800baf0:	47b0      	blx	r6
 800baf2:	2800      	cmp	r0, #0
 800baf4:	dc08      	bgt.n	800bb08 <__sflush_r+0xfc>
 800baf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bafa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bafe:	81a3      	strh	r3, [r4, #12]
 800bb00:	f04f 30ff 	mov.w	r0, #4294967295
 800bb04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb08:	4407      	add	r7, r0
 800bb0a:	eba8 0800 	sub.w	r8, r8, r0
 800bb0e:	e7e7      	b.n	800bae0 <__sflush_r+0xd4>
 800bb10:	dfbffffe 	.word	0xdfbffffe

0800bb14 <_fflush_r>:
 800bb14:	b538      	push	{r3, r4, r5, lr}
 800bb16:	690b      	ldr	r3, [r1, #16]
 800bb18:	4605      	mov	r5, r0
 800bb1a:	460c      	mov	r4, r1
 800bb1c:	b913      	cbnz	r3, 800bb24 <_fflush_r+0x10>
 800bb1e:	2500      	movs	r5, #0
 800bb20:	4628      	mov	r0, r5
 800bb22:	bd38      	pop	{r3, r4, r5, pc}
 800bb24:	b118      	cbz	r0, 800bb2e <_fflush_r+0x1a>
 800bb26:	6a03      	ldr	r3, [r0, #32]
 800bb28:	b90b      	cbnz	r3, 800bb2e <_fflush_r+0x1a>
 800bb2a:	f7fe fa2d 	bl	8009f88 <__sinit>
 800bb2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d0f3      	beq.n	800bb1e <_fflush_r+0xa>
 800bb36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bb38:	07d0      	lsls	r0, r2, #31
 800bb3a:	d404      	bmi.n	800bb46 <_fflush_r+0x32>
 800bb3c:	0599      	lsls	r1, r3, #22
 800bb3e:	d402      	bmi.n	800bb46 <_fflush_r+0x32>
 800bb40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bb42:	f7fe fb38 	bl	800a1b6 <__retarget_lock_acquire_recursive>
 800bb46:	4628      	mov	r0, r5
 800bb48:	4621      	mov	r1, r4
 800bb4a:	f7ff ff5f 	bl	800ba0c <__sflush_r>
 800bb4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bb50:	07da      	lsls	r2, r3, #31
 800bb52:	4605      	mov	r5, r0
 800bb54:	d4e4      	bmi.n	800bb20 <_fflush_r+0xc>
 800bb56:	89a3      	ldrh	r3, [r4, #12]
 800bb58:	059b      	lsls	r3, r3, #22
 800bb5a:	d4e1      	bmi.n	800bb20 <_fflush_r+0xc>
 800bb5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bb5e:	f7fe fb2b 	bl	800a1b8 <__retarget_lock_release_recursive>
 800bb62:	e7dd      	b.n	800bb20 <_fflush_r+0xc>

0800bb64 <memmove>:
 800bb64:	4288      	cmp	r0, r1
 800bb66:	b510      	push	{r4, lr}
 800bb68:	eb01 0402 	add.w	r4, r1, r2
 800bb6c:	d902      	bls.n	800bb74 <memmove+0x10>
 800bb6e:	4284      	cmp	r4, r0
 800bb70:	4623      	mov	r3, r4
 800bb72:	d807      	bhi.n	800bb84 <memmove+0x20>
 800bb74:	1e43      	subs	r3, r0, #1
 800bb76:	42a1      	cmp	r1, r4
 800bb78:	d008      	beq.n	800bb8c <memmove+0x28>
 800bb7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bb82:	e7f8      	b.n	800bb76 <memmove+0x12>
 800bb84:	4402      	add	r2, r0
 800bb86:	4601      	mov	r1, r0
 800bb88:	428a      	cmp	r2, r1
 800bb8a:	d100      	bne.n	800bb8e <memmove+0x2a>
 800bb8c:	bd10      	pop	{r4, pc}
 800bb8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bb92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bb96:	e7f7      	b.n	800bb88 <memmove+0x24>

0800bb98 <_sbrk_r>:
 800bb98:	b538      	push	{r3, r4, r5, lr}
 800bb9a:	4d06      	ldr	r5, [pc, #24]	@ (800bbb4 <_sbrk_r+0x1c>)
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	4604      	mov	r4, r0
 800bba0:	4608      	mov	r0, r1
 800bba2:	602b      	str	r3, [r5, #0]
 800bba4:	f7f8 f88c 	bl	8003cc0 <_sbrk>
 800bba8:	1c43      	adds	r3, r0, #1
 800bbaa:	d102      	bne.n	800bbb2 <_sbrk_r+0x1a>
 800bbac:	682b      	ldr	r3, [r5, #0]
 800bbae:	b103      	cbz	r3, 800bbb2 <_sbrk_r+0x1a>
 800bbb0:	6023      	str	r3, [r4, #0]
 800bbb2:	bd38      	pop	{r3, r4, r5, pc}
 800bbb4:	20000850 	.word	0x20000850

0800bbb8 <memcpy>:
 800bbb8:	440a      	add	r2, r1
 800bbba:	4291      	cmp	r1, r2
 800bbbc:	f100 33ff 	add.w	r3, r0, #4294967295
 800bbc0:	d100      	bne.n	800bbc4 <memcpy+0xc>
 800bbc2:	4770      	bx	lr
 800bbc4:	b510      	push	{r4, lr}
 800bbc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bbca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bbce:	4291      	cmp	r1, r2
 800bbd0:	d1f9      	bne.n	800bbc6 <memcpy+0xe>
 800bbd2:	bd10      	pop	{r4, pc}

0800bbd4 <__assert_func>:
 800bbd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bbd6:	4614      	mov	r4, r2
 800bbd8:	461a      	mov	r2, r3
 800bbda:	4b09      	ldr	r3, [pc, #36]	@ (800bc00 <__assert_func+0x2c>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	4605      	mov	r5, r0
 800bbe0:	68d8      	ldr	r0, [r3, #12]
 800bbe2:	b954      	cbnz	r4, 800bbfa <__assert_func+0x26>
 800bbe4:	4b07      	ldr	r3, [pc, #28]	@ (800bc04 <__assert_func+0x30>)
 800bbe6:	461c      	mov	r4, r3
 800bbe8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bbec:	9100      	str	r1, [sp, #0]
 800bbee:	462b      	mov	r3, r5
 800bbf0:	4905      	ldr	r1, [pc, #20]	@ (800bc08 <__assert_func+0x34>)
 800bbf2:	f000 f86f 	bl	800bcd4 <fiprintf>
 800bbf6:	f000 f87f 	bl	800bcf8 <abort>
 800bbfa:	4b04      	ldr	r3, [pc, #16]	@ (800bc0c <__assert_func+0x38>)
 800bbfc:	e7f4      	b.n	800bbe8 <__assert_func+0x14>
 800bbfe:	bf00      	nop
 800bc00:	2000004c 	.word	0x2000004c
 800bc04:	0800d8ce 	.word	0x0800d8ce
 800bc08:	0800d8a0 	.word	0x0800d8a0
 800bc0c:	0800d893 	.word	0x0800d893

0800bc10 <_calloc_r>:
 800bc10:	b570      	push	{r4, r5, r6, lr}
 800bc12:	fba1 5402 	umull	r5, r4, r1, r2
 800bc16:	b93c      	cbnz	r4, 800bc28 <_calloc_r+0x18>
 800bc18:	4629      	mov	r1, r5
 800bc1a:	f7ff f991 	bl	800af40 <_malloc_r>
 800bc1e:	4606      	mov	r6, r0
 800bc20:	b928      	cbnz	r0, 800bc2e <_calloc_r+0x1e>
 800bc22:	2600      	movs	r6, #0
 800bc24:	4630      	mov	r0, r6
 800bc26:	bd70      	pop	{r4, r5, r6, pc}
 800bc28:	220c      	movs	r2, #12
 800bc2a:	6002      	str	r2, [r0, #0]
 800bc2c:	e7f9      	b.n	800bc22 <_calloc_r+0x12>
 800bc2e:	462a      	mov	r2, r5
 800bc30:	4621      	mov	r1, r4
 800bc32:	f7fe fa42 	bl	800a0ba <memset>
 800bc36:	e7f5      	b.n	800bc24 <_calloc_r+0x14>

0800bc38 <__ascii_mbtowc>:
 800bc38:	b082      	sub	sp, #8
 800bc3a:	b901      	cbnz	r1, 800bc3e <__ascii_mbtowc+0x6>
 800bc3c:	a901      	add	r1, sp, #4
 800bc3e:	b142      	cbz	r2, 800bc52 <__ascii_mbtowc+0x1a>
 800bc40:	b14b      	cbz	r3, 800bc56 <__ascii_mbtowc+0x1e>
 800bc42:	7813      	ldrb	r3, [r2, #0]
 800bc44:	600b      	str	r3, [r1, #0]
 800bc46:	7812      	ldrb	r2, [r2, #0]
 800bc48:	1e10      	subs	r0, r2, #0
 800bc4a:	bf18      	it	ne
 800bc4c:	2001      	movne	r0, #1
 800bc4e:	b002      	add	sp, #8
 800bc50:	4770      	bx	lr
 800bc52:	4610      	mov	r0, r2
 800bc54:	e7fb      	b.n	800bc4e <__ascii_mbtowc+0x16>
 800bc56:	f06f 0001 	mvn.w	r0, #1
 800bc5a:	e7f8      	b.n	800bc4e <__ascii_mbtowc+0x16>

0800bc5c <_realloc_r>:
 800bc5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc60:	4680      	mov	r8, r0
 800bc62:	4615      	mov	r5, r2
 800bc64:	460c      	mov	r4, r1
 800bc66:	b921      	cbnz	r1, 800bc72 <_realloc_r+0x16>
 800bc68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc6c:	4611      	mov	r1, r2
 800bc6e:	f7ff b967 	b.w	800af40 <_malloc_r>
 800bc72:	b92a      	cbnz	r2, 800bc80 <_realloc_r+0x24>
 800bc74:	f7ff f8f0 	bl	800ae58 <_free_r>
 800bc78:	2400      	movs	r4, #0
 800bc7a:	4620      	mov	r0, r4
 800bc7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc80:	f000 f841 	bl	800bd06 <_malloc_usable_size_r>
 800bc84:	4285      	cmp	r5, r0
 800bc86:	4606      	mov	r6, r0
 800bc88:	d802      	bhi.n	800bc90 <_realloc_r+0x34>
 800bc8a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bc8e:	d8f4      	bhi.n	800bc7a <_realloc_r+0x1e>
 800bc90:	4629      	mov	r1, r5
 800bc92:	4640      	mov	r0, r8
 800bc94:	f7ff f954 	bl	800af40 <_malloc_r>
 800bc98:	4607      	mov	r7, r0
 800bc9a:	2800      	cmp	r0, #0
 800bc9c:	d0ec      	beq.n	800bc78 <_realloc_r+0x1c>
 800bc9e:	42b5      	cmp	r5, r6
 800bca0:	462a      	mov	r2, r5
 800bca2:	4621      	mov	r1, r4
 800bca4:	bf28      	it	cs
 800bca6:	4632      	movcs	r2, r6
 800bca8:	f7ff ff86 	bl	800bbb8 <memcpy>
 800bcac:	4621      	mov	r1, r4
 800bcae:	4640      	mov	r0, r8
 800bcb0:	f7ff f8d2 	bl	800ae58 <_free_r>
 800bcb4:	463c      	mov	r4, r7
 800bcb6:	e7e0      	b.n	800bc7a <_realloc_r+0x1e>

0800bcb8 <__ascii_wctomb>:
 800bcb8:	4603      	mov	r3, r0
 800bcba:	4608      	mov	r0, r1
 800bcbc:	b141      	cbz	r1, 800bcd0 <__ascii_wctomb+0x18>
 800bcbe:	2aff      	cmp	r2, #255	@ 0xff
 800bcc0:	d904      	bls.n	800bccc <__ascii_wctomb+0x14>
 800bcc2:	228a      	movs	r2, #138	@ 0x8a
 800bcc4:	601a      	str	r2, [r3, #0]
 800bcc6:	f04f 30ff 	mov.w	r0, #4294967295
 800bcca:	4770      	bx	lr
 800bccc:	700a      	strb	r2, [r1, #0]
 800bcce:	2001      	movs	r0, #1
 800bcd0:	4770      	bx	lr
	...

0800bcd4 <fiprintf>:
 800bcd4:	b40e      	push	{r1, r2, r3}
 800bcd6:	b503      	push	{r0, r1, lr}
 800bcd8:	4601      	mov	r1, r0
 800bcda:	ab03      	add	r3, sp, #12
 800bcdc:	4805      	ldr	r0, [pc, #20]	@ (800bcf4 <fiprintf+0x20>)
 800bcde:	f853 2b04 	ldr.w	r2, [r3], #4
 800bce2:	6800      	ldr	r0, [r0, #0]
 800bce4:	9301      	str	r3, [sp, #4]
 800bce6:	f000 f83f 	bl	800bd68 <_vfiprintf_r>
 800bcea:	b002      	add	sp, #8
 800bcec:	f85d eb04 	ldr.w	lr, [sp], #4
 800bcf0:	b003      	add	sp, #12
 800bcf2:	4770      	bx	lr
 800bcf4:	2000004c 	.word	0x2000004c

0800bcf8 <abort>:
 800bcf8:	b508      	push	{r3, lr}
 800bcfa:	2006      	movs	r0, #6
 800bcfc:	f000 fa08 	bl	800c110 <raise>
 800bd00:	2001      	movs	r0, #1
 800bd02:	f7f7 ff65 	bl	8003bd0 <_exit>

0800bd06 <_malloc_usable_size_r>:
 800bd06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd0a:	1f18      	subs	r0, r3, #4
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	bfbc      	itt	lt
 800bd10:	580b      	ldrlt	r3, [r1, r0]
 800bd12:	18c0      	addlt	r0, r0, r3
 800bd14:	4770      	bx	lr

0800bd16 <__sfputc_r>:
 800bd16:	6893      	ldr	r3, [r2, #8]
 800bd18:	3b01      	subs	r3, #1
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	b410      	push	{r4}
 800bd1e:	6093      	str	r3, [r2, #8]
 800bd20:	da08      	bge.n	800bd34 <__sfputc_r+0x1e>
 800bd22:	6994      	ldr	r4, [r2, #24]
 800bd24:	42a3      	cmp	r3, r4
 800bd26:	db01      	blt.n	800bd2c <__sfputc_r+0x16>
 800bd28:	290a      	cmp	r1, #10
 800bd2a:	d103      	bne.n	800bd34 <__sfputc_r+0x1e>
 800bd2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd30:	f000 b932 	b.w	800bf98 <__swbuf_r>
 800bd34:	6813      	ldr	r3, [r2, #0]
 800bd36:	1c58      	adds	r0, r3, #1
 800bd38:	6010      	str	r0, [r2, #0]
 800bd3a:	7019      	strb	r1, [r3, #0]
 800bd3c:	4608      	mov	r0, r1
 800bd3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd42:	4770      	bx	lr

0800bd44 <__sfputs_r>:
 800bd44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd46:	4606      	mov	r6, r0
 800bd48:	460f      	mov	r7, r1
 800bd4a:	4614      	mov	r4, r2
 800bd4c:	18d5      	adds	r5, r2, r3
 800bd4e:	42ac      	cmp	r4, r5
 800bd50:	d101      	bne.n	800bd56 <__sfputs_r+0x12>
 800bd52:	2000      	movs	r0, #0
 800bd54:	e007      	b.n	800bd66 <__sfputs_r+0x22>
 800bd56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd5a:	463a      	mov	r2, r7
 800bd5c:	4630      	mov	r0, r6
 800bd5e:	f7ff ffda 	bl	800bd16 <__sfputc_r>
 800bd62:	1c43      	adds	r3, r0, #1
 800bd64:	d1f3      	bne.n	800bd4e <__sfputs_r+0xa>
 800bd66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bd68 <_vfiprintf_r>:
 800bd68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd6c:	460d      	mov	r5, r1
 800bd6e:	b09d      	sub	sp, #116	@ 0x74
 800bd70:	4614      	mov	r4, r2
 800bd72:	4698      	mov	r8, r3
 800bd74:	4606      	mov	r6, r0
 800bd76:	b118      	cbz	r0, 800bd80 <_vfiprintf_r+0x18>
 800bd78:	6a03      	ldr	r3, [r0, #32]
 800bd7a:	b90b      	cbnz	r3, 800bd80 <_vfiprintf_r+0x18>
 800bd7c:	f7fe f904 	bl	8009f88 <__sinit>
 800bd80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd82:	07d9      	lsls	r1, r3, #31
 800bd84:	d405      	bmi.n	800bd92 <_vfiprintf_r+0x2a>
 800bd86:	89ab      	ldrh	r3, [r5, #12]
 800bd88:	059a      	lsls	r2, r3, #22
 800bd8a:	d402      	bmi.n	800bd92 <_vfiprintf_r+0x2a>
 800bd8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd8e:	f7fe fa12 	bl	800a1b6 <__retarget_lock_acquire_recursive>
 800bd92:	89ab      	ldrh	r3, [r5, #12]
 800bd94:	071b      	lsls	r3, r3, #28
 800bd96:	d501      	bpl.n	800bd9c <_vfiprintf_r+0x34>
 800bd98:	692b      	ldr	r3, [r5, #16]
 800bd9a:	b99b      	cbnz	r3, 800bdc4 <_vfiprintf_r+0x5c>
 800bd9c:	4629      	mov	r1, r5
 800bd9e:	4630      	mov	r0, r6
 800bda0:	f000 f938 	bl	800c014 <__swsetup_r>
 800bda4:	b170      	cbz	r0, 800bdc4 <_vfiprintf_r+0x5c>
 800bda6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bda8:	07dc      	lsls	r4, r3, #31
 800bdaa:	d504      	bpl.n	800bdb6 <_vfiprintf_r+0x4e>
 800bdac:	f04f 30ff 	mov.w	r0, #4294967295
 800bdb0:	b01d      	add	sp, #116	@ 0x74
 800bdb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdb6:	89ab      	ldrh	r3, [r5, #12]
 800bdb8:	0598      	lsls	r0, r3, #22
 800bdba:	d4f7      	bmi.n	800bdac <_vfiprintf_r+0x44>
 800bdbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bdbe:	f7fe f9fb 	bl	800a1b8 <__retarget_lock_release_recursive>
 800bdc2:	e7f3      	b.n	800bdac <_vfiprintf_r+0x44>
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	9309      	str	r3, [sp, #36]	@ 0x24
 800bdc8:	2320      	movs	r3, #32
 800bdca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bdce:	f8cd 800c 	str.w	r8, [sp, #12]
 800bdd2:	2330      	movs	r3, #48	@ 0x30
 800bdd4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bf84 <_vfiprintf_r+0x21c>
 800bdd8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bddc:	f04f 0901 	mov.w	r9, #1
 800bde0:	4623      	mov	r3, r4
 800bde2:	469a      	mov	sl, r3
 800bde4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bde8:	b10a      	cbz	r2, 800bdee <_vfiprintf_r+0x86>
 800bdea:	2a25      	cmp	r2, #37	@ 0x25
 800bdec:	d1f9      	bne.n	800bde2 <_vfiprintf_r+0x7a>
 800bdee:	ebba 0b04 	subs.w	fp, sl, r4
 800bdf2:	d00b      	beq.n	800be0c <_vfiprintf_r+0xa4>
 800bdf4:	465b      	mov	r3, fp
 800bdf6:	4622      	mov	r2, r4
 800bdf8:	4629      	mov	r1, r5
 800bdfa:	4630      	mov	r0, r6
 800bdfc:	f7ff ffa2 	bl	800bd44 <__sfputs_r>
 800be00:	3001      	adds	r0, #1
 800be02:	f000 80a7 	beq.w	800bf54 <_vfiprintf_r+0x1ec>
 800be06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be08:	445a      	add	r2, fp
 800be0a:	9209      	str	r2, [sp, #36]	@ 0x24
 800be0c:	f89a 3000 	ldrb.w	r3, [sl]
 800be10:	2b00      	cmp	r3, #0
 800be12:	f000 809f 	beq.w	800bf54 <_vfiprintf_r+0x1ec>
 800be16:	2300      	movs	r3, #0
 800be18:	f04f 32ff 	mov.w	r2, #4294967295
 800be1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be20:	f10a 0a01 	add.w	sl, sl, #1
 800be24:	9304      	str	r3, [sp, #16]
 800be26:	9307      	str	r3, [sp, #28]
 800be28:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800be2c:	931a      	str	r3, [sp, #104]	@ 0x68
 800be2e:	4654      	mov	r4, sl
 800be30:	2205      	movs	r2, #5
 800be32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be36:	4853      	ldr	r0, [pc, #332]	@ (800bf84 <_vfiprintf_r+0x21c>)
 800be38:	f7f4 f9ea 	bl	8000210 <memchr>
 800be3c:	9a04      	ldr	r2, [sp, #16]
 800be3e:	b9d8      	cbnz	r0, 800be78 <_vfiprintf_r+0x110>
 800be40:	06d1      	lsls	r1, r2, #27
 800be42:	bf44      	itt	mi
 800be44:	2320      	movmi	r3, #32
 800be46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800be4a:	0713      	lsls	r3, r2, #28
 800be4c:	bf44      	itt	mi
 800be4e:	232b      	movmi	r3, #43	@ 0x2b
 800be50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800be54:	f89a 3000 	ldrb.w	r3, [sl]
 800be58:	2b2a      	cmp	r3, #42	@ 0x2a
 800be5a:	d015      	beq.n	800be88 <_vfiprintf_r+0x120>
 800be5c:	9a07      	ldr	r2, [sp, #28]
 800be5e:	4654      	mov	r4, sl
 800be60:	2000      	movs	r0, #0
 800be62:	f04f 0c0a 	mov.w	ip, #10
 800be66:	4621      	mov	r1, r4
 800be68:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be6c:	3b30      	subs	r3, #48	@ 0x30
 800be6e:	2b09      	cmp	r3, #9
 800be70:	d94b      	bls.n	800bf0a <_vfiprintf_r+0x1a2>
 800be72:	b1b0      	cbz	r0, 800bea2 <_vfiprintf_r+0x13a>
 800be74:	9207      	str	r2, [sp, #28]
 800be76:	e014      	b.n	800bea2 <_vfiprintf_r+0x13a>
 800be78:	eba0 0308 	sub.w	r3, r0, r8
 800be7c:	fa09 f303 	lsl.w	r3, r9, r3
 800be80:	4313      	orrs	r3, r2
 800be82:	9304      	str	r3, [sp, #16]
 800be84:	46a2      	mov	sl, r4
 800be86:	e7d2      	b.n	800be2e <_vfiprintf_r+0xc6>
 800be88:	9b03      	ldr	r3, [sp, #12]
 800be8a:	1d19      	adds	r1, r3, #4
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	9103      	str	r1, [sp, #12]
 800be90:	2b00      	cmp	r3, #0
 800be92:	bfbb      	ittet	lt
 800be94:	425b      	neglt	r3, r3
 800be96:	f042 0202 	orrlt.w	r2, r2, #2
 800be9a:	9307      	strge	r3, [sp, #28]
 800be9c:	9307      	strlt	r3, [sp, #28]
 800be9e:	bfb8      	it	lt
 800bea0:	9204      	strlt	r2, [sp, #16]
 800bea2:	7823      	ldrb	r3, [r4, #0]
 800bea4:	2b2e      	cmp	r3, #46	@ 0x2e
 800bea6:	d10a      	bne.n	800bebe <_vfiprintf_r+0x156>
 800bea8:	7863      	ldrb	r3, [r4, #1]
 800beaa:	2b2a      	cmp	r3, #42	@ 0x2a
 800beac:	d132      	bne.n	800bf14 <_vfiprintf_r+0x1ac>
 800beae:	9b03      	ldr	r3, [sp, #12]
 800beb0:	1d1a      	adds	r2, r3, #4
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	9203      	str	r2, [sp, #12]
 800beb6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800beba:	3402      	adds	r4, #2
 800bebc:	9305      	str	r3, [sp, #20]
 800bebe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bf94 <_vfiprintf_r+0x22c>
 800bec2:	7821      	ldrb	r1, [r4, #0]
 800bec4:	2203      	movs	r2, #3
 800bec6:	4650      	mov	r0, sl
 800bec8:	f7f4 f9a2 	bl	8000210 <memchr>
 800becc:	b138      	cbz	r0, 800bede <_vfiprintf_r+0x176>
 800bece:	9b04      	ldr	r3, [sp, #16]
 800bed0:	eba0 000a 	sub.w	r0, r0, sl
 800bed4:	2240      	movs	r2, #64	@ 0x40
 800bed6:	4082      	lsls	r2, r0
 800bed8:	4313      	orrs	r3, r2
 800beda:	3401      	adds	r4, #1
 800bedc:	9304      	str	r3, [sp, #16]
 800bede:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bee2:	4829      	ldr	r0, [pc, #164]	@ (800bf88 <_vfiprintf_r+0x220>)
 800bee4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bee8:	2206      	movs	r2, #6
 800beea:	f7f4 f991 	bl	8000210 <memchr>
 800beee:	2800      	cmp	r0, #0
 800bef0:	d03f      	beq.n	800bf72 <_vfiprintf_r+0x20a>
 800bef2:	4b26      	ldr	r3, [pc, #152]	@ (800bf8c <_vfiprintf_r+0x224>)
 800bef4:	bb1b      	cbnz	r3, 800bf3e <_vfiprintf_r+0x1d6>
 800bef6:	9b03      	ldr	r3, [sp, #12]
 800bef8:	3307      	adds	r3, #7
 800befa:	f023 0307 	bic.w	r3, r3, #7
 800befe:	3308      	adds	r3, #8
 800bf00:	9303      	str	r3, [sp, #12]
 800bf02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf04:	443b      	add	r3, r7
 800bf06:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf08:	e76a      	b.n	800bde0 <_vfiprintf_r+0x78>
 800bf0a:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf0e:	460c      	mov	r4, r1
 800bf10:	2001      	movs	r0, #1
 800bf12:	e7a8      	b.n	800be66 <_vfiprintf_r+0xfe>
 800bf14:	2300      	movs	r3, #0
 800bf16:	3401      	adds	r4, #1
 800bf18:	9305      	str	r3, [sp, #20]
 800bf1a:	4619      	mov	r1, r3
 800bf1c:	f04f 0c0a 	mov.w	ip, #10
 800bf20:	4620      	mov	r0, r4
 800bf22:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf26:	3a30      	subs	r2, #48	@ 0x30
 800bf28:	2a09      	cmp	r2, #9
 800bf2a:	d903      	bls.n	800bf34 <_vfiprintf_r+0x1cc>
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d0c6      	beq.n	800bebe <_vfiprintf_r+0x156>
 800bf30:	9105      	str	r1, [sp, #20]
 800bf32:	e7c4      	b.n	800bebe <_vfiprintf_r+0x156>
 800bf34:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf38:	4604      	mov	r4, r0
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	e7f0      	b.n	800bf20 <_vfiprintf_r+0x1b8>
 800bf3e:	ab03      	add	r3, sp, #12
 800bf40:	9300      	str	r3, [sp, #0]
 800bf42:	462a      	mov	r2, r5
 800bf44:	4b12      	ldr	r3, [pc, #72]	@ (800bf90 <_vfiprintf_r+0x228>)
 800bf46:	a904      	add	r1, sp, #16
 800bf48:	4630      	mov	r0, r6
 800bf4a:	f7fd fbd9 	bl	8009700 <_printf_float>
 800bf4e:	4607      	mov	r7, r0
 800bf50:	1c78      	adds	r0, r7, #1
 800bf52:	d1d6      	bne.n	800bf02 <_vfiprintf_r+0x19a>
 800bf54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bf56:	07d9      	lsls	r1, r3, #31
 800bf58:	d405      	bmi.n	800bf66 <_vfiprintf_r+0x1fe>
 800bf5a:	89ab      	ldrh	r3, [r5, #12]
 800bf5c:	059a      	lsls	r2, r3, #22
 800bf5e:	d402      	bmi.n	800bf66 <_vfiprintf_r+0x1fe>
 800bf60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bf62:	f7fe f929 	bl	800a1b8 <__retarget_lock_release_recursive>
 800bf66:	89ab      	ldrh	r3, [r5, #12]
 800bf68:	065b      	lsls	r3, r3, #25
 800bf6a:	f53f af1f 	bmi.w	800bdac <_vfiprintf_r+0x44>
 800bf6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bf70:	e71e      	b.n	800bdb0 <_vfiprintf_r+0x48>
 800bf72:	ab03      	add	r3, sp, #12
 800bf74:	9300      	str	r3, [sp, #0]
 800bf76:	462a      	mov	r2, r5
 800bf78:	4b05      	ldr	r3, [pc, #20]	@ (800bf90 <_vfiprintf_r+0x228>)
 800bf7a:	a904      	add	r1, sp, #16
 800bf7c:	4630      	mov	r0, r6
 800bf7e:	f7fd fe57 	bl	8009c30 <_printf_i>
 800bf82:	e7e4      	b.n	800bf4e <_vfiprintf_r+0x1e6>
 800bf84:	0800d878 	.word	0x0800d878
 800bf88:	0800d882 	.word	0x0800d882
 800bf8c:	08009701 	.word	0x08009701
 800bf90:	0800bd45 	.word	0x0800bd45
 800bf94:	0800d87e 	.word	0x0800d87e

0800bf98 <__swbuf_r>:
 800bf98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf9a:	460e      	mov	r6, r1
 800bf9c:	4614      	mov	r4, r2
 800bf9e:	4605      	mov	r5, r0
 800bfa0:	b118      	cbz	r0, 800bfaa <__swbuf_r+0x12>
 800bfa2:	6a03      	ldr	r3, [r0, #32]
 800bfa4:	b90b      	cbnz	r3, 800bfaa <__swbuf_r+0x12>
 800bfa6:	f7fd ffef 	bl	8009f88 <__sinit>
 800bfaa:	69a3      	ldr	r3, [r4, #24]
 800bfac:	60a3      	str	r3, [r4, #8]
 800bfae:	89a3      	ldrh	r3, [r4, #12]
 800bfb0:	071a      	lsls	r2, r3, #28
 800bfb2:	d501      	bpl.n	800bfb8 <__swbuf_r+0x20>
 800bfb4:	6923      	ldr	r3, [r4, #16]
 800bfb6:	b943      	cbnz	r3, 800bfca <__swbuf_r+0x32>
 800bfb8:	4621      	mov	r1, r4
 800bfba:	4628      	mov	r0, r5
 800bfbc:	f000 f82a 	bl	800c014 <__swsetup_r>
 800bfc0:	b118      	cbz	r0, 800bfca <__swbuf_r+0x32>
 800bfc2:	f04f 37ff 	mov.w	r7, #4294967295
 800bfc6:	4638      	mov	r0, r7
 800bfc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfca:	6823      	ldr	r3, [r4, #0]
 800bfcc:	6922      	ldr	r2, [r4, #16]
 800bfce:	1a98      	subs	r0, r3, r2
 800bfd0:	6963      	ldr	r3, [r4, #20]
 800bfd2:	b2f6      	uxtb	r6, r6
 800bfd4:	4283      	cmp	r3, r0
 800bfd6:	4637      	mov	r7, r6
 800bfd8:	dc05      	bgt.n	800bfe6 <__swbuf_r+0x4e>
 800bfda:	4621      	mov	r1, r4
 800bfdc:	4628      	mov	r0, r5
 800bfde:	f7ff fd99 	bl	800bb14 <_fflush_r>
 800bfe2:	2800      	cmp	r0, #0
 800bfe4:	d1ed      	bne.n	800bfc2 <__swbuf_r+0x2a>
 800bfe6:	68a3      	ldr	r3, [r4, #8]
 800bfe8:	3b01      	subs	r3, #1
 800bfea:	60a3      	str	r3, [r4, #8]
 800bfec:	6823      	ldr	r3, [r4, #0]
 800bfee:	1c5a      	adds	r2, r3, #1
 800bff0:	6022      	str	r2, [r4, #0]
 800bff2:	701e      	strb	r6, [r3, #0]
 800bff4:	6962      	ldr	r2, [r4, #20]
 800bff6:	1c43      	adds	r3, r0, #1
 800bff8:	429a      	cmp	r2, r3
 800bffa:	d004      	beq.n	800c006 <__swbuf_r+0x6e>
 800bffc:	89a3      	ldrh	r3, [r4, #12]
 800bffe:	07db      	lsls	r3, r3, #31
 800c000:	d5e1      	bpl.n	800bfc6 <__swbuf_r+0x2e>
 800c002:	2e0a      	cmp	r6, #10
 800c004:	d1df      	bne.n	800bfc6 <__swbuf_r+0x2e>
 800c006:	4621      	mov	r1, r4
 800c008:	4628      	mov	r0, r5
 800c00a:	f7ff fd83 	bl	800bb14 <_fflush_r>
 800c00e:	2800      	cmp	r0, #0
 800c010:	d0d9      	beq.n	800bfc6 <__swbuf_r+0x2e>
 800c012:	e7d6      	b.n	800bfc2 <__swbuf_r+0x2a>

0800c014 <__swsetup_r>:
 800c014:	b538      	push	{r3, r4, r5, lr}
 800c016:	4b29      	ldr	r3, [pc, #164]	@ (800c0bc <__swsetup_r+0xa8>)
 800c018:	4605      	mov	r5, r0
 800c01a:	6818      	ldr	r0, [r3, #0]
 800c01c:	460c      	mov	r4, r1
 800c01e:	b118      	cbz	r0, 800c028 <__swsetup_r+0x14>
 800c020:	6a03      	ldr	r3, [r0, #32]
 800c022:	b90b      	cbnz	r3, 800c028 <__swsetup_r+0x14>
 800c024:	f7fd ffb0 	bl	8009f88 <__sinit>
 800c028:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c02c:	0719      	lsls	r1, r3, #28
 800c02e:	d422      	bmi.n	800c076 <__swsetup_r+0x62>
 800c030:	06da      	lsls	r2, r3, #27
 800c032:	d407      	bmi.n	800c044 <__swsetup_r+0x30>
 800c034:	2209      	movs	r2, #9
 800c036:	602a      	str	r2, [r5, #0]
 800c038:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c03c:	81a3      	strh	r3, [r4, #12]
 800c03e:	f04f 30ff 	mov.w	r0, #4294967295
 800c042:	e033      	b.n	800c0ac <__swsetup_r+0x98>
 800c044:	0758      	lsls	r0, r3, #29
 800c046:	d512      	bpl.n	800c06e <__swsetup_r+0x5a>
 800c048:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c04a:	b141      	cbz	r1, 800c05e <__swsetup_r+0x4a>
 800c04c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c050:	4299      	cmp	r1, r3
 800c052:	d002      	beq.n	800c05a <__swsetup_r+0x46>
 800c054:	4628      	mov	r0, r5
 800c056:	f7fe feff 	bl	800ae58 <_free_r>
 800c05a:	2300      	movs	r3, #0
 800c05c:	6363      	str	r3, [r4, #52]	@ 0x34
 800c05e:	89a3      	ldrh	r3, [r4, #12]
 800c060:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c064:	81a3      	strh	r3, [r4, #12]
 800c066:	2300      	movs	r3, #0
 800c068:	6063      	str	r3, [r4, #4]
 800c06a:	6923      	ldr	r3, [r4, #16]
 800c06c:	6023      	str	r3, [r4, #0]
 800c06e:	89a3      	ldrh	r3, [r4, #12]
 800c070:	f043 0308 	orr.w	r3, r3, #8
 800c074:	81a3      	strh	r3, [r4, #12]
 800c076:	6923      	ldr	r3, [r4, #16]
 800c078:	b94b      	cbnz	r3, 800c08e <__swsetup_r+0x7a>
 800c07a:	89a3      	ldrh	r3, [r4, #12]
 800c07c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c080:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c084:	d003      	beq.n	800c08e <__swsetup_r+0x7a>
 800c086:	4621      	mov	r1, r4
 800c088:	4628      	mov	r0, r5
 800c08a:	f000 f883 	bl	800c194 <__smakebuf_r>
 800c08e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c092:	f013 0201 	ands.w	r2, r3, #1
 800c096:	d00a      	beq.n	800c0ae <__swsetup_r+0x9a>
 800c098:	2200      	movs	r2, #0
 800c09a:	60a2      	str	r2, [r4, #8]
 800c09c:	6962      	ldr	r2, [r4, #20]
 800c09e:	4252      	negs	r2, r2
 800c0a0:	61a2      	str	r2, [r4, #24]
 800c0a2:	6922      	ldr	r2, [r4, #16]
 800c0a4:	b942      	cbnz	r2, 800c0b8 <__swsetup_r+0xa4>
 800c0a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c0aa:	d1c5      	bne.n	800c038 <__swsetup_r+0x24>
 800c0ac:	bd38      	pop	{r3, r4, r5, pc}
 800c0ae:	0799      	lsls	r1, r3, #30
 800c0b0:	bf58      	it	pl
 800c0b2:	6962      	ldrpl	r2, [r4, #20]
 800c0b4:	60a2      	str	r2, [r4, #8]
 800c0b6:	e7f4      	b.n	800c0a2 <__swsetup_r+0x8e>
 800c0b8:	2000      	movs	r0, #0
 800c0ba:	e7f7      	b.n	800c0ac <__swsetup_r+0x98>
 800c0bc:	2000004c 	.word	0x2000004c

0800c0c0 <_raise_r>:
 800c0c0:	291f      	cmp	r1, #31
 800c0c2:	b538      	push	{r3, r4, r5, lr}
 800c0c4:	4605      	mov	r5, r0
 800c0c6:	460c      	mov	r4, r1
 800c0c8:	d904      	bls.n	800c0d4 <_raise_r+0x14>
 800c0ca:	2316      	movs	r3, #22
 800c0cc:	6003      	str	r3, [r0, #0]
 800c0ce:	f04f 30ff 	mov.w	r0, #4294967295
 800c0d2:	bd38      	pop	{r3, r4, r5, pc}
 800c0d4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c0d6:	b112      	cbz	r2, 800c0de <_raise_r+0x1e>
 800c0d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c0dc:	b94b      	cbnz	r3, 800c0f2 <_raise_r+0x32>
 800c0de:	4628      	mov	r0, r5
 800c0e0:	f000 f830 	bl	800c144 <_getpid_r>
 800c0e4:	4622      	mov	r2, r4
 800c0e6:	4601      	mov	r1, r0
 800c0e8:	4628      	mov	r0, r5
 800c0ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0ee:	f000 b817 	b.w	800c120 <_kill_r>
 800c0f2:	2b01      	cmp	r3, #1
 800c0f4:	d00a      	beq.n	800c10c <_raise_r+0x4c>
 800c0f6:	1c59      	adds	r1, r3, #1
 800c0f8:	d103      	bne.n	800c102 <_raise_r+0x42>
 800c0fa:	2316      	movs	r3, #22
 800c0fc:	6003      	str	r3, [r0, #0]
 800c0fe:	2001      	movs	r0, #1
 800c100:	e7e7      	b.n	800c0d2 <_raise_r+0x12>
 800c102:	2100      	movs	r1, #0
 800c104:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c108:	4620      	mov	r0, r4
 800c10a:	4798      	blx	r3
 800c10c:	2000      	movs	r0, #0
 800c10e:	e7e0      	b.n	800c0d2 <_raise_r+0x12>

0800c110 <raise>:
 800c110:	4b02      	ldr	r3, [pc, #8]	@ (800c11c <raise+0xc>)
 800c112:	4601      	mov	r1, r0
 800c114:	6818      	ldr	r0, [r3, #0]
 800c116:	f7ff bfd3 	b.w	800c0c0 <_raise_r>
 800c11a:	bf00      	nop
 800c11c:	2000004c 	.word	0x2000004c

0800c120 <_kill_r>:
 800c120:	b538      	push	{r3, r4, r5, lr}
 800c122:	4d07      	ldr	r5, [pc, #28]	@ (800c140 <_kill_r+0x20>)
 800c124:	2300      	movs	r3, #0
 800c126:	4604      	mov	r4, r0
 800c128:	4608      	mov	r0, r1
 800c12a:	4611      	mov	r1, r2
 800c12c:	602b      	str	r3, [r5, #0]
 800c12e:	f7f7 fd3f 	bl	8003bb0 <_kill>
 800c132:	1c43      	adds	r3, r0, #1
 800c134:	d102      	bne.n	800c13c <_kill_r+0x1c>
 800c136:	682b      	ldr	r3, [r5, #0]
 800c138:	b103      	cbz	r3, 800c13c <_kill_r+0x1c>
 800c13a:	6023      	str	r3, [r4, #0]
 800c13c:	bd38      	pop	{r3, r4, r5, pc}
 800c13e:	bf00      	nop
 800c140:	20000850 	.word	0x20000850

0800c144 <_getpid_r>:
 800c144:	f7f7 bd2c 	b.w	8003ba0 <_getpid>

0800c148 <__swhatbuf_r>:
 800c148:	b570      	push	{r4, r5, r6, lr}
 800c14a:	460c      	mov	r4, r1
 800c14c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c150:	2900      	cmp	r1, #0
 800c152:	b096      	sub	sp, #88	@ 0x58
 800c154:	4615      	mov	r5, r2
 800c156:	461e      	mov	r6, r3
 800c158:	da0d      	bge.n	800c176 <__swhatbuf_r+0x2e>
 800c15a:	89a3      	ldrh	r3, [r4, #12]
 800c15c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c160:	f04f 0100 	mov.w	r1, #0
 800c164:	bf14      	ite	ne
 800c166:	2340      	movne	r3, #64	@ 0x40
 800c168:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c16c:	2000      	movs	r0, #0
 800c16e:	6031      	str	r1, [r6, #0]
 800c170:	602b      	str	r3, [r5, #0]
 800c172:	b016      	add	sp, #88	@ 0x58
 800c174:	bd70      	pop	{r4, r5, r6, pc}
 800c176:	466a      	mov	r2, sp
 800c178:	f000 f848 	bl	800c20c <_fstat_r>
 800c17c:	2800      	cmp	r0, #0
 800c17e:	dbec      	blt.n	800c15a <__swhatbuf_r+0x12>
 800c180:	9901      	ldr	r1, [sp, #4]
 800c182:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c186:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c18a:	4259      	negs	r1, r3
 800c18c:	4159      	adcs	r1, r3
 800c18e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c192:	e7eb      	b.n	800c16c <__swhatbuf_r+0x24>

0800c194 <__smakebuf_r>:
 800c194:	898b      	ldrh	r3, [r1, #12]
 800c196:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c198:	079d      	lsls	r5, r3, #30
 800c19a:	4606      	mov	r6, r0
 800c19c:	460c      	mov	r4, r1
 800c19e:	d507      	bpl.n	800c1b0 <__smakebuf_r+0x1c>
 800c1a0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c1a4:	6023      	str	r3, [r4, #0]
 800c1a6:	6123      	str	r3, [r4, #16]
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	6163      	str	r3, [r4, #20]
 800c1ac:	b003      	add	sp, #12
 800c1ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1b0:	ab01      	add	r3, sp, #4
 800c1b2:	466a      	mov	r2, sp
 800c1b4:	f7ff ffc8 	bl	800c148 <__swhatbuf_r>
 800c1b8:	9f00      	ldr	r7, [sp, #0]
 800c1ba:	4605      	mov	r5, r0
 800c1bc:	4639      	mov	r1, r7
 800c1be:	4630      	mov	r0, r6
 800c1c0:	f7fe febe 	bl	800af40 <_malloc_r>
 800c1c4:	b948      	cbnz	r0, 800c1da <__smakebuf_r+0x46>
 800c1c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1ca:	059a      	lsls	r2, r3, #22
 800c1cc:	d4ee      	bmi.n	800c1ac <__smakebuf_r+0x18>
 800c1ce:	f023 0303 	bic.w	r3, r3, #3
 800c1d2:	f043 0302 	orr.w	r3, r3, #2
 800c1d6:	81a3      	strh	r3, [r4, #12]
 800c1d8:	e7e2      	b.n	800c1a0 <__smakebuf_r+0xc>
 800c1da:	89a3      	ldrh	r3, [r4, #12]
 800c1dc:	6020      	str	r0, [r4, #0]
 800c1de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1e2:	81a3      	strh	r3, [r4, #12]
 800c1e4:	9b01      	ldr	r3, [sp, #4]
 800c1e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c1ea:	b15b      	cbz	r3, 800c204 <__smakebuf_r+0x70>
 800c1ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1f0:	4630      	mov	r0, r6
 800c1f2:	f000 f81d 	bl	800c230 <_isatty_r>
 800c1f6:	b128      	cbz	r0, 800c204 <__smakebuf_r+0x70>
 800c1f8:	89a3      	ldrh	r3, [r4, #12]
 800c1fa:	f023 0303 	bic.w	r3, r3, #3
 800c1fe:	f043 0301 	orr.w	r3, r3, #1
 800c202:	81a3      	strh	r3, [r4, #12]
 800c204:	89a3      	ldrh	r3, [r4, #12]
 800c206:	431d      	orrs	r5, r3
 800c208:	81a5      	strh	r5, [r4, #12]
 800c20a:	e7cf      	b.n	800c1ac <__smakebuf_r+0x18>

0800c20c <_fstat_r>:
 800c20c:	b538      	push	{r3, r4, r5, lr}
 800c20e:	4d07      	ldr	r5, [pc, #28]	@ (800c22c <_fstat_r+0x20>)
 800c210:	2300      	movs	r3, #0
 800c212:	4604      	mov	r4, r0
 800c214:	4608      	mov	r0, r1
 800c216:	4611      	mov	r1, r2
 800c218:	602b      	str	r3, [r5, #0]
 800c21a:	f7f7 fd29 	bl	8003c70 <_fstat>
 800c21e:	1c43      	adds	r3, r0, #1
 800c220:	d102      	bne.n	800c228 <_fstat_r+0x1c>
 800c222:	682b      	ldr	r3, [r5, #0]
 800c224:	b103      	cbz	r3, 800c228 <_fstat_r+0x1c>
 800c226:	6023      	str	r3, [r4, #0]
 800c228:	bd38      	pop	{r3, r4, r5, pc}
 800c22a:	bf00      	nop
 800c22c:	20000850 	.word	0x20000850

0800c230 <_isatty_r>:
 800c230:	b538      	push	{r3, r4, r5, lr}
 800c232:	4d06      	ldr	r5, [pc, #24]	@ (800c24c <_isatty_r+0x1c>)
 800c234:	2300      	movs	r3, #0
 800c236:	4604      	mov	r4, r0
 800c238:	4608      	mov	r0, r1
 800c23a:	602b      	str	r3, [r5, #0]
 800c23c:	f7f7 fd28 	bl	8003c90 <_isatty>
 800c240:	1c43      	adds	r3, r0, #1
 800c242:	d102      	bne.n	800c24a <_isatty_r+0x1a>
 800c244:	682b      	ldr	r3, [r5, #0]
 800c246:	b103      	cbz	r3, 800c24a <_isatty_r+0x1a>
 800c248:	6023      	str	r3, [r4, #0]
 800c24a:	bd38      	pop	{r3, r4, r5, pc}
 800c24c:	20000850 	.word	0x20000850

0800c250 <sqrt>:
 800c250:	b538      	push	{r3, r4, r5, lr}
 800c252:	ed2d 8b02 	vpush	{d8}
 800c256:	ec55 4b10 	vmov	r4, r5, d0
 800c25a:	f000 f923 	bl	800c4a4 <__ieee754_sqrt>
 800c25e:	4622      	mov	r2, r4
 800c260:	462b      	mov	r3, r5
 800c262:	4620      	mov	r0, r4
 800c264:	4629      	mov	r1, r5
 800c266:	eeb0 8a40 	vmov.f32	s16, s0
 800c26a:	eef0 8a60 	vmov.f32	s17, s1
 800c26e:	f7f4 fc7d 	bl	8000b6c <__aeabi_dcmpun>
 800c272:	b990      	cbnz	r0, 800c29a <sqrt+0x4a>
 800c274:	2200      	movs	r2, #0
 800c276:	2300      	movs	r3, #0
 800c278:	4620      	mov	r0, r4
 800c27a:	4629      	mov	r1, r5
 800c27c:	f7f4 fc4e 	bl	8000b1c <__aeabi_dcmplt>
 800c280:	b158      	cbz	r0, 800c29a <sqrt+0x4a>
 800c282:	f7fd ff6d 	bl	800a160 <__errno>
 800c286:	2321      	movs	r3, #33	@ 0x21
 800c288:	6003      	str	r3, [r0, #0]
 800c28a:	2200      	movs	r2, #0
 800c28c:	2300      	movs	r3, #0
 800c28e:	4610      	mov	r0, r2
 800c290:	4619      	mov	r1, r3
 800c292:	f7f4 fafb 	bl	800088c <__aeabi_ddiv>
 800c296:	ec41 0b18 	vmov	d8, r0, r1
 800c29a:	eeb0 0a48 	vmov.f32	s0, s16
 800c29e:	eef0 0a68 	vmov.f32	s1, s17
 800c2a2:	ecbd 8b02 	vpop	{d8}
 800c2a6:	bd38      	pop	{r3, r4, r5, pc}

0800c2a8 <cos>:
 800c2a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c2aa:	ec53 2b10 	vmov	r2, r3, d0
 800c2ae:	4826      	ldr	r0, [pc, #152]	@ (800c348 <cos+0xa0>)
 800c2b0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c2b4:	4281      	cmp	r1, r0
 800c2b6:	d806      	bhi.n	800c2c6 <cos+0x1e>
 800c2b8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800c340 <cos+0x98>
 800c2bc:	b005      	add	sp, #20
 800c2be:	f85d eb04 	ldr.w	lr, [sp], #4
 800c2c2:	f000 b9c9 	b.w	800c658 <__kernel_cos>
 800c2c6:	4821      	ldr	r0, [pc, #132]	@ (800c34c <cos+0xa4>)
 800c2c8:	4281      	cmp	r1, r0
 800c2ca:	d908      	bls.n	800c2de <cos+0x36>
 800c2cc:	4610      	mov	r0, r2
 800c2ce:	4619      	mov	r1, r3
 800c2d0:	f7f3 fffa 	bl	80002c8 <__aeabi_dsub>
 800c2d4:	ec41 0b10 	vmov	d0, r0, r1
 800c2d8:	b005      	add	sp, #20
 800c2da:	f85d fb04 	ldr.w	pc, [sp], #4
 800c2de:	4668      	mov	r0, sp
 800c2e0:	f000 fb3e 	bl	800c960 <__ieee754_rem_pio2>
 800c2e4:	f000 0003 	and.w	r0, r0, #3
 800c2e8:	2801      	cmp	r0, #1
 800c2ea:	d00b      	beq.n	800c304 <cos+0x5c>
 800c2ec:	2802      	cmp	r0, #2
 800c2ee:	d015      	beq.n	800c31c <cos+0x74>
 800c2f0:	b9d8      	cbnz	r0, 800c32a <cos+0x82>
 800c2f2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c2f6:	ed9d 0b00 	vldr	d0, [sp]
 800c2fa:	f000 f9ad 	bl	800c658 <__kernel_cos>
 800c2fe:	ec51 0b10 	vmov	r0, r1, d0
 800c302:	e7e7      	b.n	800c2d4 <cos+0x2c>
 800c304:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c308:	ed9d 0b00 	vldr	d0, [sp]
 800c30c:	f000 fa6c 	bl	800c7e8 <__kernel_sin>
 800c310:	ec53 2b10 	vmov	r2, r3, d0
 800c314:	4610      	mov	r0, r2
 800c316:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800c31a:	e7db      	b.n	800c2d4 <cos+0x2c>
 800c31c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c320:	ed9d 0b00 	vldr	d0, [sp]
 800c324:	f000 f998 	bl	800c658 <__kernel_cos>
 800c328:	e7f2      	b.n	800c310 <cos+0x68>
 800c32a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c32e:	ed9d 0b00 	vldr	d0, [sp]
 800c332:	2001      	movs	r0, #1
 800c334:	f000 fa58 	bl	800c7e8 <__kernel_sin>
 800c338:	e7e1      	b.n	800c2fe <cos+0x56>
 800c33a:	bf00      	nop
 800c33c:	f3af 8000 	nop.w
	...
 800c348:	3fe921fb 	.word	0x3fe921fb
 800c34c:	7fefffff 	.word	0x7fefffff

0800c350 <sin>:
 800c350:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c352:	ec53 2b10 	vmov	r2, r3, d0
 800c356:	4826      	ldr	r0, [pc, #152]	@ (800c3f0 <sin+0xa0>)
 800c358:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c35c:	4281      	cmp	r1, r0
 800c35e:	d807      	bhi.n	800c370 <sin+0x20>
 800c360:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800c3e8 <sin+0x98>
 800c364:	2000      	movs	r0, #0
 800c366:	b005      	add	sp, #20
 800c368:	f85d eb04 	ldr.w	lr, [sp], #4
 800c36c:	f000 ba3c 	b.w	800c7e8 <__kernel_sin>
 800c370:	4820      	ldr	r0, [pc, #128]	@ (800c3f4 <sin+0xa4>)
 800c372:	4281      	cmp	r1, r0
 800c374:	d908      	bls.n	800c388 <sin+0x38>
 800c376:	4610      	mov	r0, r2
 800c378:	4619      	mov	r1, r3
 800c37a:	f7f3 ffa5 	bl	80002c8 <__aeabi_dsub>
 800c37e:	ec41 0b10 	vmov	d0, r0, r1
 800c382:	b005      	add	sp, #20
 800c384:	f85d fb04 	ldr.w	pc, [sp], #4
 800c388:	4668      	mov	r0, sp
 800c38a:	f000 fae9 	bl	800c960 <__ieee754_rem_pio2>
 800c38e:	f000 0003 	and.w	r0, r0, #3
 800c392:	2801      	cmp	r0, #1
 800c394:	d00c      	beq.n	800c3b0 <sin+0x60>
 800c396:	2802      	cmp	r0, #2
 800c398:	d011      	beq.n	800c3be <sin+0x6e>
 800c39a:	b9e8      	cbnz	r0, 800c3d8 <sin+0x88>
 800c39c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c3a0:	ed9d 0b00 	vldr	d0, [sp]
 800c3a4:	2001      	movs	r0, #1
 800c3a6:	f000 fa1f 	bl	800c7e8 <__kernel_sin>
 800c3aa:	ec51 0b10 	vmov	r0, r1, d0
 800c3ae:	e7e6      	b.n	800c37e <sin+0x2e>
 800c3b0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c3b4:	ed9d 0b00 	vldr	d0, [sp]
 800c3b8:	f000 f94e 	bl	800c658 <__kernel_cos>
 800c3bc:	e7f5      	b.n	800c3aa <sin+0x5a>
 800c3be:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c3c2:	ed9d 0b00 	vldr	d0, [sp]
 800c3c6:	2001      	movs	r0, #1
 800c3c8:	f000 fa0e 	bl	800c7e8 <__kernel_sin>
 800c3cc:	ec53 2b10 	vmov	r2, r3, d0
 800c3d0:	4610      	mov	r0, r2
 800c3d2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800c3d6:	e7d2      	b.n	800c37e <sin+0x2e>
 800c3d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c3dc:	ed9d 0b00 	vldr	d0, [sp]
 800c3e0:	f000 f93a 	bl	800c658 <__kernel_cos>
 800c3e4:	e7f2      	b.n	800c3cc <sin+0x7c>
 800c3e6:	bf00      	nop
	...
 800c3f0:	3fe921fb 	.word	0x3fe921fb
 800c3f4:	7fefffff 	.word	0x7fefffff

0800c3f8 <fmaxf>:
 800c3f8:	b508      	push	{r3, lr}
 800c3fa:	ed2d 8b02 	vpush	{d8}
 800c3fe:	eeb0 8a40 	vmov.f32	s16, s0
 800c402:	eef0 8a60 	vmov.f32	s17, s1
 800c406:	f000 f831 	bl	800c46c <__fpclassifyf>
 800c40a:	b930      	cbnz	r0, 800c41a <fmaxf+0x22>
 800c40c:	eeb0 8a68 	vmov.f32	s16, s17
 800c410:	eeb0 0a48 	vmov.f32	s0, s16
 800c414:	ecbd 8b02 	vpop	{d8}
 800c418:	bd08      	pop	{r3, pc}
 800c41a:	eeb0 0a68 	vmov.f32	s0, s17
 800c41e:	f000 f825 	bl	800c46c <__fpclassifyf>
 800c422:	2800      	cmp	r0, #0
 800c424:	d0f4      	beq.n	800c410 <fmaxf+0x18>
 800c426:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c42a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c42e:	dded      	ble.n	800c40c <fmaxf+0x14>
 800c430:	e7ee      	b.n	800c410 <fmaxf+0x18>

0800c432 <fminf>:
 800c432:	b508      	push	{r3, lr}
 800c434:	ed2d 8b02 	vpush	{d8}
 800c438:	eeb0 8a40 	vmov.f32	s16, s0
 800c43c:	eef0 8a60 	vmov.f32	s17, s1
 800c440:	f000 f814 	bl	800c46c <__fpclassifyf>
 800c444:	b930      	cbnz	r0, 800c454 <fminf+0x22>
 800c446:	eeb0 8a68 	vmov.f32	s16, s17
 800c44a:	eeb0 0a48 	vmov.f32	s0, s16
 800c44e:	ecbd 8b02 	vpop	{d8}
 800c452:	bd08      	pop	{r3, pc}
 800c454:	eeb0 0a68 	vmov.f32	s0, s17
 800c458:	f000 f808 	bl	800c46c <__fpclassifyf>
 800c45c:	2800      	cmp	r0, #0
 800c45e:	d0f4      	beq.n	800c44a <fminf+0x18>
 800c460:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c468:	d5ed      	bpl.n	800c446 <fminf+0x14>
 800c46a:	e7ee      	b.n	800c44a <fminf+0x18>

0800c46c <__fpclassifyf>:
 800c46c:	ee10 3a10 	vmov	r3, s0
 800c470:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800c474:	d00d      	beq.n	800c492 <__fpclassifyf+0x26>
 800c476:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800c47a:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800c47e:	d30a      	bcc.n	800c496 <__fpclassifyf+0x2a>
 800c480:	4b07      	ldr	r3, [pc, #28]	@ (800c4a0 <__fpclassifyf+0x34>)
 800c482:	1e42      	subs	r2, r0, #1
 800c484:	429a      	cmp	r2, r3
 800c486:	d908      	bls.n	800c49a <__fpclassifyf+0x2e>
 800c488:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800c48c:	4258      	negs	r0, r3
 800c48e:	4158      	adcs	r0, r3
 800c490:	4770      	bx	lr
 800c492:	2002      	movs	r0, #2
 800c494:	4770      	bx	lr
 800c496:	2004      	movs	r0, #4
 800c498:	4770      	bx	lr
 800c49a:	2003      	movs	r0, #3
 800c49c:	4770      	bx	lr
 800c49e:	bf00      	nop
 800c4a0:	007ffffe 	.word	0x007ffffe

0800c4a4 <__ieee754_sqrt>:
 800c4a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4a8:	4a68      	ldr	r2, [pc, #416]	@ (800c64c <__ieee754_sqrt+0x1a8>)
 800c4aa:	ec55 4b10 	vmov	r4, r5, d0
 800c4ae:	43aa      	bics	r2, r5
 800c4b0:	462b      	mov	r3, r5
 800c4b2:	4621      	mov	r1, r4
 800c4b4:	d110      	bne.n	800c4d8 <__ieee754_sqrt+0x34>
 800c4b6:	4622      	mov	r2, r4
 800c4b8:	4620      	mov	r0, r4
 800c4ba:	4629      	mov	r1, r5
 800c4bc:	f7f4 f8bc 	bl	8000638 <__aeabi_dmul>
 800c4c0:	4602      	mov	r2, r0
 800c4c2:	460b      	mov	r3, r1
 800c4c4:	4620      	mov	r0, r4
 800c4c6:	4629      	mov	r1, r5
 800c4c8:	f7f3 ff00 	bl	80002cc <__adddf3>
 800c4cc:	4604      	mov	r4, r0
 800c4ce:	460d      	mov	r5, r1
 800c4d0:	ec45 4b10 	vmov	d0, r4, r5
 800c4d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4d8:	2d00      	cmp	r5, #0
 800c4da:	dc0e      	bgt.n	800c4fa <__ieee754_sqrt+0x56>
 800c4dc:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800c4e0:	4322      	orrs	r2, r4
 800c4e2:	d0f5      	beq.n	800c4d0 <__ieee754_sqrt+0x2c>
 800c4e4:	b19d      	cbz	r5, 800c50e <__ieee754_sqrt+0x6a>
 800c4e6:	4622      	mov	r2, r4
 800c4e8:	4620      	mov	r0, r4
 800c4ea:	4629      	mov	r1, r5
 800c4ec:	f7f3 feec 	bl	80002c8 <__aeabi_dsub>
 800c4f0:	4602      	mov	r2, r0
 800c4f2:	460b      	mov	r3, r1
 800c4f4:	f7f4 f9ca 	bl	800088c <__aeabi_ddiv>
 800c4f8:	e7e8      	b.n	800c4cc <__ieee754_sqrt+0x28>
 800c4fa:	152a      	asrs	r2, r5, #20
 800c4fc:	d115      	bne.n	800c52a <__ieee754_sqrt+0x86>
 800c4fe:	2000      	movs	r0, #0
 800c500:	e009      	b.n	800c516 <__ieee754_sqrt+0x72>
 800c502:	0acb      	lsrs	r3, r1, #11
 800c504:	3a15      	subs	r2, #21
 800c506:	0549      	lsls	r1, r1, #21
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d0fa      	beq.n	800c502 <__ieee754_sqrt+0x5e>
 800c50c:	e7f7      	b.n	800c4fe <__ieee754_sqrt+0x5a>
 800c50e:	462a      	mov	r2, r5
 800c510:	e7fa      	b.n	800c508 <__ieee754_sqrt+0x64>
 800c512:	005b      	lsls	r3, r3, #1
 800c514:	3001      	adds	r0, #1
 800c516:	02dc      	lsls	r4, r3, #11
 800c518:	d5fb      	bpl.n	800c512 <__ieee754_sqrt+0x6e>
 800c51a:	1e44      	subs	r4, r0, #1
 800c51c:	1b12      	subs	r2, r2, r4
 800c51e:	f1c0 0420 	rsb	r4, r0, #32
 800c522:	fa21 f404 	lsr.w	r4, r1, r4
 800c526:	4323      	orrs	r3, r4
 800c528:	4081      	lsls	r1, r0
 800c52a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c52e:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800c532:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c536:	07d2      	lsls	r2, r2, #31
 800c538:	bf5c      	itt	pl
 800c53a:	005b      	lslpl	r3, r3, #1
 800c53c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800c540:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c544:	bf58      	it	pl
 800c546:	0049      	lslpl	r1, r1, #1
 800c548:	2600      	movs	r6, #0
 800c54a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800c54e:	106d      	asrs	r5, r5, #1
 800c550:	0049      	lsls	r1, r1, #1
 800c552:	2016      	movs	r0, #22
 800c554:	4632      	mov	r2, r6
 800c556:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800c55a:	1917      	adds	r7, r2, r4
 800c55c:	429f      	cmp	r7, r3
 800c55e:	bfde      	ittt	le
 800c560:	193a      	addle	r2, r7, r4
 800c562:	1bdb      	suble	r3, r3, r7
 800c564:	1936      	addle	r6, r6, r4
 800c566:	0fcf      	lsrs	r7, r1, #31
 800c568:	3801      	subs	r0, #1
 800c56a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800c56e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c572:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800c576:	d1f0      	bne.n	800c55a <__ieee754_sqrt+0xb6>
 800c578:	4604      	mov	r4, r0
 800c57a:	2720      	movs	r7, #32
 800c57c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800c580:	429a      	cmp	r2, r3
 800c582:	eb00 0e0c 	add.w	lr, r0, ip
 800c586:	db02      	blt.n	800c58e <__ieee754_sqrt+0xea>
 800c588:	d113      	bne.n	800c5b2 <__ieee754_sqrt+0x10e>
 800c58a:	458e      	cmp	lr, r1
 800c58c:	d811      	bhi.n	800c5b2 <__ieee754_sqrt+0x10e>
 800c58e:	f1be 0f00 	cmp.w	lr, #0
 800c592:	eb0e 000c 	add.w	r0, lr, ip
 800c596:	da42      	bge.n	800c61e <__ieee754_sqrt+0x17a>
 800c598:	2800      	cmp	r0, #0
 800c59a:	db40      	blt.n	800c61e <__ieee754_sqrt+0x17a>
 800c59c:	f102 0801 	add.w	r8, r2, #1
 800c5a0:	1a9b      	subs	r3, r3, r2
 800c5a2:	458e      	cmp	lr, r1
 800c5a4:	bf88      	it	hi
 800c5a6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c5aa:	eba1 010e 	sub.w	r1, r1, lr
 800c5ae:	4464      	add	r4, ip
 800c5b0:	4642      	mov	r2, r8
 800c5b2:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800c5b6:	3f01      	subs	r7, #1
 800c5b8:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800c5bc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c5c0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800c5c4:	d1dc      	bne.n	800c580 <__ieee754_sqrt+0xdc>
 800c5c6:	4319      	orrs	r1, r3
 800c5c8:	d01b      	beq.n	800c602 <__ieee754_sqrt+0x15e>
 800c5ca:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800c650 <__ieee754_sqrt+0x1ac>
 800c5ce:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800c654 <__ieee754_sqrt+0x1b0>
 800c5d2:	e9da 0100 	ldrd	r0, r1, [sl]
 800c5d6:	e9db 2300 	ldrd	r2, r3, [fp]
 800c5da:	f7f3 fe75 	bl	80002c8 <__aeabi_dsub>
 800c5de:	e9da 8900 	ldrd	r8, r9, [sl]
 800c5e2:	4602      	mov	r2, r0
 800c5e4:	460b      	mov	r3, r1
 800c5e6:	4640      	mov	r0, r8
 800c5e8:	4649      	mov	r1, r9
 800c5ea:	f7f4 faa1 	bl	8000b30 <__aeabi_dcmple>
 800c5ee:	b140      	cbz	r0, 800c602 <__ieee754_sqrt+0x15e>
 800c5f0:	f1b4 3fff 	cmp.w	r4, #4294967295
 800c5f4:	e9da 0100 	ldrd	r0, r1, [sl]
 800c5f8:	e9db 2300 	ldrd	r2, r3, [fp]
 800c5fc:	d111      	bne.n	800c622 <__ieee754_sqrt+0x17e>
 800c5fe:	3601      	adds	r6, #1
 800c600:	463c      	mov	r4, r7
 800c602:	1072      	asrs	r2, r6, #1
 800c604:	0863      	lsrs	r3, r4, #1
 800c606:	07f1      	lsls	r1, r6, #31
 800c608:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800c60c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800c610:	bf48      	it	mi
 800c612:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800c616:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800c61a:	4618      	mov	r0, r3
 800c61c:	e756      	b.n	800c4cc <__ieee754_sqrt+0x28>
 800c61e:	4690      	mov	r8, r2
 800c620:	e7be      	b.n	800c5a0 <__ieee754_sqrt+0xfc>
 800c622:	f7f3 fe53 	bl	80002cc <__adddf3>
 800c626:	e9da 8900 	ldrd	r8, r9, [sl]
 800c62a:	4602      	mov	r2, r0
 800c62c:	460b      	mov	r3, r1
 800c62e:	4640      	mov	r0, r8
 800c630:	4649      	mov	r1, r9
 800c632:	f7f4 fa73 	bl	8000b1c <__aeabi_dcmplt>
 800c636:	b120      	cbz	r0, 800c642 <__ieee754_sqrt+0x19e>
 800c638:	1ca0      	adds	r0, r4, #2
 800c63a:	bf08      	it	eq
 800c63c:	3601      	addeq	r6, #1
 800c63e:	3402      	adds	r4, #2
 800c640:	e7df      	b.n	800c602 <__ieee754_sqrt+0x15e>
 800c642:	1c63      	adds	r3, r4, #1
 800c644:	f023 0401 	bic.w	r4, r3, #1
 800c648:	e7db      	b.n	800c602 <__ieee754_sqrt+0x15e>
 800c64a:	bf00      	nop
 800c64c:	7ff00000 	.word	0x7ff00000
 800c650:	20000210 	.word	0x20000210
 800c654:	20000208 	.word	0x20000208

0800c658 <__kernel_cos>:
 800c658:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c65c:	ec57 6b10 	vmov	r6, r7, d0
 800c660:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800c664:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800c668:	ed8d 1b00 	vstr	d1, [sp]
 800c66c:	d206      	bcs.n	800c67c <__kernel_cos+0x24>
 800c66e:	4630      	mov	r0, r6
 800c670:	4639      	mov	r1, r7
 800c672:	f7f4 fa91 	bl	8000b98 <__aeabi_d2iz>
 800c676:	2800      	cmp	r0, #0
 800c678:	f000 8088 	beq.w	800c78c <__kernel_cos+0x134>
 800c67c:	4632      	mov	r2, r6
 800c67e:	463b      	mov	r3, r7
 800c680:	4630      	mov	r0, r6
 800c682:	4639      	mov	r1, r7
 800c684:	f7f3 ffd8 	bl	8000638 <__aeabi_dmul>
 800c688:	4b51      	ldr	r3, [pc, #324]	@ (800c7d0 <__kernel_cos+0x178>)
 800c68a:	2200      	movs	r2, #0
 800c68c:	4604      	mov	r4, r0
 800c68e:	460d      	mov	r5, r1
 800c690:	f7f3 ffd2 	bl	8000638 <__aeabi_dmul>
 800c694:	a340      	add	r3, pc, #256	@ (adr r3, 800c798 <__kernel_cos+0x140>)
 800c696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c69a:	4682      	mov	sl, r0
 800c69c:	468b      	mov	fp, r1
 800c69e:	4620      	mov	r0, r4
 800c6a0:	4629      	mov	r1, r5
 800c6a2:	f7f3 ffc9 	bl	8000638 <__aeabi_dmul>
 800c6a6:	a33e      	add	r3, pc, #248	@ (adr r3, 800c7a0 <__kernel_cos+0x148>)
 800c6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ac:	f7f3 fe0e 	bl	80002cc <__adddf3>
 800c6b0:	4622      	mov	r2, r4
 800c6b2:	462b      	mov	r3, r5
 800c6b4:	f7f3 ffc0 	bl	8000638 <__aeabi_dmul>
 800c6b8:	a33b      	add	r3, pc, #236	@ (adr r3, 800c7a8 <__kernel_cos+0x150>)
 800c6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6be:	f7f3 fe03 	bl	80002c8 <__aeabi_dsub>
 800c6c2:	4622      	mov	r2, r4
 800c6c4:	462b      	mov	r3, r5
 800c6c6:	f7f3 ffb7 	bl	8000638 <__aeabi_dmul>
 800c6ca:	a339      	add	r3, pc, #228	@ (adr r3, 800c7b0 <__kernel_cos+0x158>)
 800c6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d0:	f7f3 fdfc 	bl	80002cc <__adddf3>
 800c6d4:	4622      	mov	r2, r4
 800c6d6:	462b      	mov	r3, r5
 800c6d8:	f7f3 ffae 	bl	8000638 <__aeabi_dmul>
 800c6dc:	a336      	add	r3, pc, #216	@ (adr r3, 800c7b8 <__kernel_cos+0x160>)
 800c6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e2:	f7f3 fdf1 	bl	80002c8 <__aeabi_dsub>
 800c6e6:	4622      	mov	r2, r4
 800c6e8:	462b      	mov	r3, r5
 800c6ea:	f7f3 ffa5 	bl	8000638 <__aeabi_dmul>
 800c6ee:	a334      	add	r3, pc, #208	@ (adr r3, 800c7c0 <__kernel_cos+0x168>)
 800c6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f4:	f7f3 fdea 	bl	80002cc <__adddf3>
 800c6f8:	4622      	mov	r2, r4
 800c6fa:	462b      	mov	r3, r5
 800c6fc:	f7f3 ff9c 	bl	8000638 <__aeabi_dmul>
 800c700:	4622      	mov	r2, r4
 800c702:	462b      	mov	r3, r5
 800c704:	f7f3 ff98 	bl	8000638 <__aeabi_dmul>
 800c708:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c70c:	4604      	mov	r4, r0
 800c70e:	460d      	mov	r5, r1
 800c710:	4630      	mov	r0, r6
 800c712:	4639      	mov	r1, r7
 800c714:	f7f3 ff90 	bl	8000638 <__aeabi_dmul>
 800c718:	460b      	mov	r3, r1
 800c71a:	4602      	mov	r2, r0
 800c71c:	4629      	mov	r1, r5
 800c71e:	4620      	mov	r0, r4
 800c720:	f7f3 fdd2 	bl	80002c8 <__aeabi_dsub>
 800c724:	4b2b      	ldr	r3, [pc, #172]	@ (800c7d4 <__kernel_cos+0x17c>)
 800c726:	4598      	cmp	r8, r3
 800c728:	4606      	mov	r6, r0
 800c72a:	460f      	mov	r7, r1
 800c72c:	d810      	bhi.n	800c750 <__kernel_cos+0xf8>
 800c72e:	4602      	mov	r2, r0
 800c730:	460b      	mov	r3, r1
 800c732:	4650      	mov	r0, sl
 800c734:	4659      	mov	r1, fp
 800c736:	f7f3 fdc7 	bl	80002c8 <__aeabi_dsub>
 800c73a:	460b      	mov	r3, r1
 800c73c:	4926      	ldr	r1, [pc, #152]	@ (800c7d8 <__kernel_cos+0x180>)
 800c73e:	4602      	mov	r2, r0
 800c740:	2000      	movs	r0, #0
 800c742:	f7f3 fdc1 	bl	80002c8 <__aeabi_dsub>
 800c746:	ec41 0b10 	vmov	d0, r0, r1
 800c74a:	b003      	add	sp, #12
 800c74c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c750:	4b22      	ldr	r3, [pc, #136]	@ (800c7dc <__kernel_cos+0x184>)
 800c752:	4921      	ldr	r1, [pc, #132]	@ (800c7d8 <__kernel_cos+0x180>)
 800c754:	4598      	cmp	r8, r3
 800c756:	bf8c      	ite	hi
 800c758:	4d21      	ldrhi	r5, [pc, #132]	@ (800c7e0 <__kernel_cos+0x188>)
 800c75a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800c75e:	2400      	movs	r4, #0
 800c760:	4622      	mov	r2, r4
 800c762:	462b      	mov	r3, r5
 800c764:	2000      	movs	r0, #0
 800c766:	f7f3 fdaf 	bl	80002c8 <__aeabi_dsub>
 800c76a:	4622      	mov	r2, r4
 800c76c:	4680      	mov	r8, r0
 800c76e:	4689      	mov	r9, r1
 800c770:	462b      	mov	r3, r5
 800c772:	4650      	mov	r0, sl
 800c774:	4659      	mov	r1, fp
 800c776:	f7f3 fda7 	bl	80002c8 <__aeabi_dsub>
 800c77a:	4632      	mov	r2, r6
 800c77c:	463b      	mov	r3, r7
 800c77e:	f7f3 fda3 	bl	80002c8 <__aeabi_dsub>
 800c782:	4602      	mov	r2, r0
 800c784:	460b      	mov	r3, r1
 800c786:	4640      	mov	r0, r8
 800c788:	4649      	mov	r1, r9
 800c78a:	e7da      	b.n	800c742 <__kernel_cos+0xea>
 800c78c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800c7c8 <__kernel_cos+0x170>
 800c790:	e7db      	b.n	800c74a <__kernel_cos+0xf2>
 800c792:	bf00      	nop
 800c794:	f3af 8000 	nop.w
 800c798:	be8838d4 	.word	0xbe8838d4
 800c79c:	bda8fae9 	.word	0xbda8fae9
 800c7a0:	bdb4b1c4 	.word	0xbdb4b1c4
 800c7a4:	3e21ee9e 	.word	0x3e21ee9e
 800c7a8:	809c52ad 	.word	0x809c52ad
 800c7ac:	3e927e4f 	.word	0x3e927e4f
 800c7b0:	19cb1590 	.word	0x19cb1590
 800c7b4:	3efa01a0 	.word	0x3efa01a0
 800c7b8:	16c15177 	.word	0x16c15177
 800c7bc:	3f56c16c 	.word	0x3f56c16c
 800c7c0:	5555554c 	.word	0x5555554c
 800c7c4:	3fa55555 	.word	0x3fa55555
 800c7c8:	00000000 	.word	0x00000000
 800c7cc:	3ff00000 	.word	0x3ff00000
 800c7d0:	3fe00000 	.word	0x3fe00000
 800c7d4:	3fd33332 	.word	0x3fd33332
 800c7d8:	3ff00000 	.word	0x3ff00000
 800c7dc:	3fe90000 	.word	0x3fe90000
 800c7e0:	3fd20000 	.word	0x3fd20000
 800c7e4:	00000000 	.word	0x00000000

0800c7e8 <__kernel_sin>:
 800c7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7ec:	ec55 4b10 	vmov	r4, r5, d0
 800c7f0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800c7f4:	b085      	sub	sp, #20
 800c7f6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800c7fa:	ed8d 1b02 	vstr	d1, [sp, #8]
 800c7fe:	4680      	mov	r8, r0
 800c800:	d205      	bcs.n	800c80e <__kernel_sin+0x26>
 800c802:	4620      	mov	r0, r4
 800c804:	4629      	mov	r1, r5
 800c806:	f7f4 f9c7 	bl	8000b98 <__aeabi_d2iz>
 800c80a:	2800      	cmp	r0, #0
 800c80c:	d052      	beq.n	800c8b4 <__kernel_sin+0xcc>
 800c80e:	4622      	mov	r2, r4
 800c810:	462b      	mov	r3, r5
 800c812:	4620      	mov	r0, r4
 800c814:	4629      	mov	r1, r5
 800c816:	f7f3 ff0f 	bl	8000638 <__aeabi_dmul>
 800c81a:	4682      	mov	sl, r0
 800c81c:	468b      	mov	fp, r1
 800c81e:	4602      	mov	r2, r0
 800c820:	460b      	mov	r3, r1
 800c822:	4620      	mov	r0, r4
 800c824:	4629      	mov	r1, r5
 800c826:	f7f3 ff07 	bl	8000638 <__aeabi_dmul>
 800c82a:	a342      	add	r3, pc, #264	@ (adr r3, 800c934 <__kernel_sin+0x14c>)
 800c82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c830:	e9cd 0100 	strd	r0, r1, [sp]
 800c834:	4650      	mov	r0, sl
 800c836:	4659      	mov	r1, fp
 800c838:	f7f3 fefe 	bl	8000638 <__aeabi_dmul>
 800c83c:	a33f      	add	r3, pc, #252	@ (adr r3, 800c93c <__kernel_sin+0x154>)
 800c83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c842:	f7f3 fd41 	bl	80002c8 <__aeabi_dsub>
 800c846:	4652      	mov	r2, sl
 800c848:	465b      	mov	r3, fp
 800c84a:	f7f3 fef5 	bl	8000638 <__aeabi_dmul>
 800c84e:	a33d      	add	r3, pc, #244	@ (adr r3, 800c944 <__kernel_sin+0x15c>)
 800c850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c854:	f7f3 fd3a 	bl	80002cc <__adddf3>
 800c858:	4652      	mov	r2, sl
 800c85a:	465b      	mov	r3, fp
 800c85c:	f7f3 feec 	bl	8000638 <__aeabi_dmul>
 800c860:	a33a      	add	r3, pc, #232	@ (adr r3, 800c94c <__kernel_sin+0x164>)
 800c862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c866:	f7f3 fd2f 	bl	80002c8 <__aeabi_dsub>
 800c86a:	4652      	mov	r2, sl
 800c86c:	465b      	mov	r3, fp
 800c86e:	f7f3 fee3 	bl	8000638 <__aeabi_dmul>
 800c872:	a338      	add	r3, pc, #224	@ (adr r3, 800c954 <__kernel_sin+0x16c>)
 800c874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c878:	f7f3 fd28 	bl	80002cc <__adddf3>
 800c87c:	4606      	mov	r6, r0
 800c87e:	460f      	mov	r7, r1
 800c880:	f1b8 0f00 	cmp.w	r8, #0
 800c884:	d11b      	bne.n	800c8be <__kernel_sin+0xd6>
 800c886:	4602      	mov	r2, r0
 800c888:	460b      	mov	r3, r1
 800c88a:	4650      	mov	r0, sl
 800c88c:	4659      	mov	r1, fp
 800c88e:	f7f3 fed3 	bl	8000638 <__aeabi_dmul>
 800c892:	a325      	add	r3, pc, #148	@ (adr r3, 800c928 <__kernel_sin+0x140>)
 800c894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c898:	f7f3 fd16 	bl	80002c8 <__aeabi_dsub>
 800c89c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c8a0:	f7f3 feca 	bl	8000638 <__aeabi_dmul>
 800c8a4:	4602      	mov	r2, r0
 800c8a6:	460b      	mov	r3, r1
 800c8a8:	4620      	mov	r0, r4
 800c8aa:	4629      	mov	r1, r5
 800c8ac:	f7f3 fd0e 	bl	80002cc <__adddf3>
 800c8b0:	4604      	mov	r4, r0
 800c8b2:	460d      	mov	r5, r1
 800c8b4:	ec45 4b10 	vmov	d0, r4, r5
 800c8b8:	b005      	add	sp, #20
 800c8ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c8c2:	4b1b      	ldr	r3, [pc, #108]	@ (800c930 <__kernel_sin+0x148>)
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	f7f3 feb7 	bl	8000638 <__aeabi_dmul>
 800c8ca:	4632      	mov	r2, r6
 800c8cc:	4680      	mov	r8, r0
 800c8ce:	4689      	mov	r9, r1
 800c8d0:	463b      	mov	r3, r7
 800c8d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c8d6:	f7f3 feaf 	bl	8000638 <__aeabi_dmul>
 800c8da:	4602      	mov	r2, r0
 800c8dc:	460b      	mov	r3, r1
 800c8de:	4640      	mov	r0, r8
 800c8e0:	4649      	mov	r1, r9
 800c8e2:	f7f3 fcf1 	bl	80002c8 <__aeabi_dsub>
 800c8e6:	4652      	mov	r2, sl
 800c8e8:	465b      	mov	r3, fp
 800c8ea:	f7f3 fea5 	bl	8000638 <__aeabi_dmul>
 800c8ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c8f2:	f7f3 fce9 	bl	80002c8 <__aeabi_dsub>
 800c8f6:	a30c      	add	r3, pc, #48	@ (adr r3, 800c928 <__kernel_sin+0x140>)
 800c8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8fc:	4606      	mov	r6, r0
 800c8fe:	460f      	mov	r7, r1
 800c900:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c904:	f7f3 fe98 	bl	8000638 <__aeabi_dmul>
 800c908:	4602      	mov	r2, r0
 800c90a:	460b      	mov	r3, r1
 800c90c:	4630      	mov	r0, r6
 800c90e:	4639      	mov	r1, r7
 800c910:	f7f3 fcdc 	bl	80002cc <__adddf3>
 800c914:	4602      	mov	r2, r0
 800c916:	460b      	mov	r3, r1
 800c918:	4620      	mov	r0, r4
 800c91a:	4629      	mov	r1, r5
 800c91c:	f7f3 fcd4 	bl	80002c8 <__aeabi_dsub>
 800c920:	e7c6      	b.n	800c8b0 <__kernel_sin+0xc8>
 800c922:	bf00      	nop
 800c924:	f3af 8000 	nop.w
 800c928:	55555549 	.word	0x55555549
 800c92c:	3fc55555 	.word	0x3fc55555
 800c930:	3fe00000 	.word	0x3fe00000
 800c934:	5acfd57c 	.word	0x5acfd57c
 800c938:	3de5d93a 	.word	0x3de5d93a
 800c93c:	8a2b9ceb 	.word	0x8a2b9ceb
 800c940:	3e5ae5e6 	.word	0x3e5ae5e6
 800c944:	57b1fe7d 	.word	0x57b1fe7d
 800c948:	3ec71de3 	.word	0x3ec71de3
 800c94c:	19c161d5 	.word	0x19c161d5
 800c950:	3f2a01a0 	.word	0x3f2a01a0
 800c954:	1110f8a6 	.word	0x1110f8a6
 800c958:	3f811111 	.word	0x3f811111
 800c95c:	00000000 	.word	0x00000000

0800c960 <__ieee754_rem_pio2>:
 800c960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c964:	ec57 6b10 	vmov	r6, r7, d0
 800c968:	4bc5      	ldr	r3, [pc, #788]	@ (800cc80 <__ieee754_rem_pio2+0x320>)
 800c96a:	b08d      	sub	sp, #52	@ 0x34
 800c96c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800c970:	4598      	cmp	r8, r3
 800c972:	4604      	mov	r4, r0
 800c974:	9704      	str	r7, [sp, #16]
 800c976:	d807      	bhi.n	800c988 <__ieee754_rem_pio2+0x28>
 800c978:	2200      	movs	r2, #0
 800c97a:	2300      	movs	r3, #0
 800c97c:	ed80 0b00 	vstr	d0, [r0]
 800c980:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c984:	2500      	movs	r5, #0
 800c986:	e028      	b.n	800c9da <__ieee754_rem_pio2+0x7a>
 800c988:	4bbe      	ldr	r3, [pc, #760]	@ (800cc84 <__ieee754_rem_pio2+0x324>)
 800c98a:	4598      	cmp	r8, r3
 800c98c:	d878      	bhi.n	800ca80 <__ieee754_rem_pio2+0x120>
 800c98e:	9b04      	ldr	r3, [sp, #16]
 800c990:	4dbd      	ldr	r5, [pc, #756]	@ (800cc88 <__ieee754_rem_pio2+0x328>)
 800c992:	2b00      	cmp	r3, #0
 800c994:	4630      	mov	r0, r6
 800c996:	a3ac      	add	r3, pc, #688	@ (adr r3, 800cc48 <__ieee754_rem_pio2+0x2e8>)
 800c998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c99c:	4639      	mov	r1, r7
 800c99e:	dd38      	ble.n	800ca12 <__ieee754_rem_pio2+0xb2>
 800c9a0:	f7f3 fc92 	bl	80002c8 <__aeabi_dsub>
 800c9a4:	45a8      	cmp	r8, r5
 800c9a6:	4606      	mov	r6, r0
 800c9a8:	460f      	mov	r7, r1
 800c9aa:	d01a      	beq.n	800c9e2 <__ieee754_rem_pio2+0x82>
 800c9ac:	a3a8      	add	r3, pc, #672	@ (adr r3, 800cc50 <__ieee754_rem_pio2+0x2f0>)
 800c9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b2:	f7f3 fc89 	bl	80002c8 <__aeabi_dsub>
 800c9b6:	4602      	mov	r2, r0
 800c9b8:	460b      	mov	r3, r1
 800c9ba:	4680      	mov	r8, r0
 800c9bc:	4689      	mov	r9, r1
 800c9be:	4630      	mov	r0, r6
 800c9c0:	4639      	mov	r1, r7
 800c9c2:	f7f3 fc81 	bl	80002c8 <__aeabi_dsub>
 800c9c6:	a3a2      	add	r3, pc, #648	@ (adr r3, 800cc50 <__ieee754_rem_pio2+0x2f0>)
 800c9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9cc:	f7f3 fc7c 	bl	80002c8 <__aeabi_dsub>
 800c9d0:	e9c4 8900 	strd	r8, r9, [r4]
 800c9d4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c9d8:	2501      	movs	r5, #1
 800c9da:	4628      	mov	r0, r5
 800c9dc:	b00d      	add	sp, #52	@ 0x34
 800c9de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9e2:	a39d      	add	r3, pc, #628	@ (adr r3, 800cc58 <__ieee754_rem_pio2+0x2f8>)
 800c9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9e8:	f7f3 fc6e 	bl	80002c8 <__aeabi_dsub>
 800c9ec:	a39c      	add	r3, pc, #624	@ (adr r3, 800cc60 <__ieee754_rem_pio2+0x300>)
 800c9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9f2:	4606      	mov	r6, r0
 800c9f4:	460f      	mov	r7, r1
 800c9f6:	f7f3 fc67 	bl	80002c8 <__aeabi_dsub>
 800c9fa:	4602      	mov	r2, r0
 800c9fc:	460b      	mov	r3, r1
 800c9fe:	4680      	mov	r8, r0
 800ca00:	4689      	mov	r9, r1
 800ca02:	4630      	mov	r0, r6
 800ca04:	4639      	mov	r1, r7
 800ca06:	f7f3 fc5f 	bl	80002c8 <__aeabi_dsub>
 800ca0a:	a395      	add	r3, pc, #596	@ (adr r3, 800cc60 <__ieee754_rem_pio2+0x300>)
 800ca0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca10:	e7dc      	b.n	800c9cc <__ieee754_rem_pio2+0x6c>
 800ca12:	f7f3 fc5b 	bl	80002cc <__adddf3>
 800ca16:	45a8      	cmp	r8, r5
 800ca18:	4606      	mov	r6, r0
 800ca1a:	460f      	mov	r7, r1
 800ca1c:	d018      	beq.n	800ca50 <__ieee754_rem_pio2+0xf0>
 800ca1e:	a38c      	add	r3, pc, #560	@ (adr r3, 800cc50 <__ieee754_rem_pio2+0x2f0>)
 800ca20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca24:	f7f3 fc52 	bl	80002cc <__adddf3>
 800ca28:	4602      	mov	r2, r0
 800ca2a:	460b      	mov	r3, r1
 800ca2c:	4680      	mov	r8, r0
 800ca2e:	4689      	mov	r9, r1
 800ca30:	4630      	mov	r0, r6
 800ca32:	4639      	mov	r1, r7
 800ca34:	f7f3 fc48 	bl	80002c8 <__aeabi_dsub>
 800ca38:	a385      	add	r3, pc, #532	@ (adr r3, 800cc50 <__ieee754_rem_pio2+0x2f0>)
 800ca3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca3e:	f7f3 fc45 	bl	80002cc <__adddf3>
 800ca42:	f04f 35ff 	mov.w	r5, #4294967295
 800ca46:	e9c4 8900 	strd	r8, r9, [r4]
 800ca4a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ca4e:	e7c4      	b.n	800c9da <__ieee754_rem_pio2+0x7a>
 800ca50:	a381      	add	r3, pc, #516	@ (adr r3, 800cc58 <__ieee754_rem_pio2+0x2f8>)
 800ca52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca56:	f7f3 fc39 	bl	80002cc <__adddf3>
 800ca5a:	a381      	add	r3, pc, #516	@ (adr r3, 800cc60 <__ieee754_rem_pio2+0x300>)
 800ca5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca60:	4606      	mov	r6, r0
 800ca62:	460f      	mov	r7, r1
 800ca64:	f7f3 fc32 	bl	80002cc <__adddf3>
 800ca68:	4602      	mov	r2, r0
 800ca6a:	460b      	mov	r3, r1
 800ca6c:	4680      	mov	r8, r0
 800ca6e:	4689      	mov	r9, r1
 800ca70:	4630      	mov	r0, r6
 800ca72:	4639      	mov	r1, r7
 800ca74:	f7f3 fc28 	bl	80002c8 <__aeabi_dsub>
 800ca78:	a379      	add	r3, pc, #484	@ (adr r3, 800cc60 <__ieee754_rem_pio2+0x300>)
 800ca7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca7e:	e7de      	b.n	800ca3e <__ieee754_rem_pio2+0xde>
 800ca80:	4b82      	ldr	r3, [pc, #520]	@ (800cc8c <__ieee754_rem_pio2+0x32c>)
 800ca82:	4598      	cmp	r8, r3
 800ca84:	f200 80d1 	bhi.w	800cc2a <__ieee754_rem_pio2+0x2ca>
 800ca88:	f000 f966 	bl	800cd58 <fabs>
 800ca8c:	ec57 6b10 	vmov	r6, r7, d0
 800ca90:	a375      	add	r3, pc, #468	@ (adr r3, 800cc68 <__ieee754_rem_pio2+0x308>)
 800ca92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca96:	4630      	mov	r0, r6
 800ca98:	4639      	mov	r1, r7
 800ca9a:	f7f3 fdcd 	bl	8000638 <__aeabi_dmul>
 800ca9e:	4b7c      	ldr	r3, [pc, #496]	@ (800cc90 <__ieee754_rem_pio2+0x330>)
 800caa0:	2200      	movs	r2, #0
 800caa2:	f7f3 fc13 	bl	80002cc <__adddf3>
 800caa6:	f7f4 f877 	bl	8000b98 <__aeabi_d2iz>
 800caaa:	4605      	mov	r5, r0
 800caac:	f7f3 fd5a 	bl	8000564 <__aeabi_i2d>
 800cab0:	4602      	mov	r2, r0
 800cab2:	460b      	mov	r3, r1
 800cab4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cab8:	a363      	add	r3, pc, #396	@ (adr r3, 800cc48 <__ieee754_rem_pio2+0x2e8>)
 800caba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cabe:	f7f3 fdbb 	bl	8000638 <__aeabi_dmul>
 800cac2:	4602      	mov	r2, r0
 800cac4:	460b      	mov	r3, r1
 800cac6:	4630      	mov	r0, r6
 800cac8:	4639      	mov	r1, r7
 800caca:	f7f3 fbfd 	bl	80002c8 <__aeabi_dsub>
 800cace:	a360      	add	r3, pc, #384	@ (adr r3, 800cc50 <__ieee754_rem_pio2+0x2f0>)
 800cad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cad4:	4682      	mov	sl, r0
 800cad6:	468b      	mov	fp, r1
 800cad8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cadc:	f7f3 fdac 	bl	8000638 <__aeabi_dmul>
 800cae0:	2d1f      	cmp	r5, #31
 800cae2:	4606      	mov	r6, r0
 800cae4:	460f      	mov	r7, r1
 800cae6:	dc0c      	bgt.n	800cb02 <__ieee754_rem_pio2+0x1a2>
 800cae8:	4b6a      	ldr	r3, [pc, #424]	@ (800cc94 <__ieee754_rem_pio2+0x334>)
 800caea:	1e6a      	subs	r2, r5, #1
 800caec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800caf0:	4543      	cmp	r3, r8
 800caf2:	d006      	beq.n	800cb02 <__ieee754_rem_pio2+0x1a2>
 800caf4:	4632      	mov	r2, r6
 800caf6:	463b      	mov	r3, r7
 800caf8:	4650      	mov	r0, sl
 800cafa:	4659      	mov	r1, fp
 800cafc:	f7f3 fbe4 	bl	80002c8 <__aeabi_dsub>
 800cb00:	e00e      	b.n	800cb20 <__ieee754_rem_pio2+0x1c0>
 800cb02:	463b      	mov	r3, r7
 800cb04:	4632      	mov	r2, r6
 800cb06:	4650      	mov	r0, sl
 800cb08:	4659      	mov	r1, fp
 800cb0a:	f7f3 fbdd 	bl	80002c8 <__aeabi_dsub>
 800cb0e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800cb12:	9305      	str	r3, [sp, #20]
 800cb14:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cb18:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800cb1c:	2b10      	cmp	r3, #16
 800cb1e:	dc02      	bgt.n	800cb26 <__ieee754_rem_pio2+0x1c6>
 800cb20:	e9c4 0100 	strd	r0, r1, [r4]
 800cb24:	e039      	b.n	800cb9a <__ieee754_rem_pio2+0x23a>
 800cb26:	a34c      	add	r3, pc, #304	@ (adr r3, 800cc58 <__ieee754_rem_pio2+0x2f8>)
 800cb28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb30:	f7f3 fd82 	bl	8000638 <__aeabi_dmul>
 800cb34:	4606      	mov	r6, r0
 800cb36:	460f      	mov	r7, r1
 800cb38:	4602      	mov	r2, r0
 800cb3a:	460b      	mov	r3, r1
 800cb3c:	4650      	mov	r0, sl
 800cb3e:	4659      	mov	r1, fp
 800cb40:	f7f3 fbc2 	bl	80002c8 <__aeabi_dsub>
 800cb44:	4602      	mov	r2, r0
 800cb46:	460b      	mov	r3, r1
 800cb48:	4680      	mov	r8, r0
 800cb4a:	4689      	mov	r9, r1
 800cb4c:	4650      	mov	r0, sl
 800cb4e:	4659      	mov	r1, fp
 800cb50:	f7f3 fbba 	bl	80002c8 <__aeabi_dsub>
 800cb54:	4632      	mov	r2, r6
 800cb56:	463b      	mov	r3, r7
 800cb58:	f7f3 fbb6 	bl	80002c8 <__aeabi_dsub>
 800cb5c:	a340      	add	r3, pc, #256	@ (adr r3, 800cc60 <__ieee754_rem_pio2+0x300>)
 800cb5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb62:	4606      	mov	r6, r0
 800cb64:	460f      	mov	r7, r1
 800cb66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb6a:	f7f3 fd65 	bl	8000638 <__aeabi_dmul>
 800cb6e:	4632      	mov	r2, r6
 800cb70:	463b      	mov	r3, r7
 800cb72:	f7f3 fba9 	bl	80002c8 <__aeabi_dsub>
 800cb76:	4602      	mov	r2, r0
 800cb78:	460b      	mov	r3, r1
 800cb7a:	4606      	mov	r6, r0
 800cb7c:	460f      	mov	r7, r1
 800cb7e:	4640      	mov	r0, r8
 800cb80:	4649      	mov	r1, r9
 800cb82:	f7f3 fba1 	bl	80002c8 <__aeabi_dsub>
 800cb86:	9a05      	ldr	r2, [sp, #20]
 800cb88:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cb8c:	1ad3      	subs	r3, r2, r3
 800cb8e:	2b31      	cmp	r3, #49	@ 0x31
 800cb90:	dc20      	bgt.n	800cbd4 <__ieee754_rem_pio2+0x274>
 800cb92:	e9c4 0100 	strd	r0, r1, [r4]
 800cb96:	46c2      	mov	sl, r8
 800cb98:	46cb      	mov	fp, r9
 800cb9a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800cb9e:	4650      	mov	r0, sl
 800cba0:	4642      	mov	r2, r8
 800cba2:	464b      	mov	r3, r9
 800cba4:	4659      	mov	r1, fp
 800cba6:	f7f3 fb8f 	bl	80002c8 <__aeabi_dsub>
 800cbaa:	463b      	mov	r3, r7
 800cbac:	4632      	mov	r2, r6
 800cbae:	f7f3 fb8b 	bl	80002c8 <__aeabi_dsub>
 800cbb2:	9b04      	ldr	r3, [sp, #16]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800cbba:	f6bf af0e 	bge.w	800c9da <__ieee754_rem_pio2+0x7a>
 800cbbe:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800cbc2:	6063      	str	r3, [r4, #4]
 800cbc4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cbc8:	f8c4 8000 	str.w	r8, [r4]
 800cbcc:	60a0      	str	r0, [r4, #8]
 800cbce:	60e3      	str	r3, [r4, #12]
 800cbd0:	426d      	negs	r5, r5
 800cbd2:	e702      	b.n	800c9da <__ieee754_rem_pio2+0x7a>
 800cbd4:	a326      	add	r3, pc, #152	@ (adr r3, 800cc70 <__ieee754_rem_pio2+0x310>)
 800cbd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cbde:	f7f3 fd2b 	bl	8000638 <__aeabi_dmul>
 800cbe2:	4606      	mov	r6, r0
 800cbe4:	460f      	mov	r7, r1
 800cbe6:	4602      	mov	r2, r0
 800cbe8:	460b      	mov	r3, r1
 800cbea:	4640      	mov	r0, r8
 800cbec:	4649      	mov	r1, r9
 800cbee:	f7f3 fb6b 	bl	80002c8 <__aeabi_dsub>
 800cbf2:	4602      	mov	r2, r0
 800cbf4:	460b      	mov	r3, r1
 800cbf6:	4682      	mov	sl, r0
 800cbf8:	468b      	mov	fp, r1
 800cbfa:	4640      	mov	r0, r8
 800cbfc:	4649      	mov	r1, r9
 800cbfe:	f7f3 fb63 	bl	80002c8 <__aeabi_dsub>
 800cc02:	4632      	mov	r2, r6
 800cc04:	463b      	mov	r3, r7
 800cc06:	f7f3 fb5f 	bl	80002c8 <__aeabi_dsub>
 800cc0a:	a31b      	add	r3, pc, #108	@ (adr r3, 800cc78 <__ieee754_rem_pio2+0x318>)
 800cc0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc10:	4606      	mov	r6, r0
 800cc12:	460f      	mov	r7, r1
 800cc14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc18:	f7f3 fd0e 	bl	8000638 <__aeabi_dmul>
 800cc1c:	4632      	mov	r2, r6
 800cc1e:	463b      	mov	r3, r7
 800cc20:	f7f3 fb52 	bl	80002c8 <__aeabi_dsub>
 800cc24:	4606      	mov	r6, r0
 800cc26:	460f      	mov	r7, r1
 800cc28:	e764      	b.n	800caf4 <__ieee754_rem_pio2+0x194>
 800cc2a:	4b1b      	ldr	r3, [pc, #108]	@ (800cc98 <__ieee754_rem_pio2+0x338>)
 800cc2c:	4598      	cmp	r8, r3
 800cc2e:	d935      	bls.n	800cc9c <__ieee754_rem_pio2+0x33c>
 800cc30:	4632      	mov	r2, r6
 800cc32:	463b      	mov	r3, r7
 800cc34:	4630      	mov	r0, r6
 800cc36:	4639      	mov	r1, r7
 800cc38:	f7f3 fb46 	bl	80002c8 <__aeabi_dsub>
 800cc3c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800cc40:	e9c4 0100 	strd	r0, r1, [r4]
 800cc44:	e69e      	b.n	800c984 <__ieee754_rem_pio2+0x24>
 800cc46:	bf00      	nop
 800cc48:	54400000 	.word	0x54400000
 800cc4c:	3ff921fb 	.word	0x3ff921fb
 800cc50:	1a626331 	.word	0x1a626331
 800cc54:	3dd0b461 	.word	0x3dd0b461
 800cc58:	1a600000 	.word	0x1a600000
 800cc5c:	3dd0b461 	.word	0x3dd0b461
 800cc60:	2e037073 	.word	0x2e037073
 800cc64:	3ba3198a 	.word	0x3ba3198a
 800cc68:	6dc9c883 	.word	0x6dc9c883
 800cc6c:	3fe45f30 	.word	0x3fe45f30
 800cc70:	2e000000 	.word	0x2e000000
 800cc74:	3ba3198a 	.word	0x3ba3198a
 800cc78:	252049c1 	.word	0x252049c1
 800cc7c:	397b839a 	.word	0x397b839a
 800cc80:	3fe921fb 	.word	0x3fe921fb
 800cc84:	4002d97b 	.word	0x4002d97b
 800cc88:	3ff921fb 	.word	0x3ff921fb
 800cc8c:	413921fb 	.word	0x413921fb
 800cc90:	3fe00000 	.word	0x3fe00000
 800cc94:	0800d9d0 	.word	0x0800d9d0
 800cc98:	7fefffff 	.word	0x7fefffff
 800cc9c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800cca0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800cca4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800cca8:	4630      	mov	r0, r6
 800ccaa:	460f      	mov	r7, r1
 800ccac:	f7f3 ff74 	bl	8000b98 <__aeabi_d2iz>
 800ccb0:	f7f3 fc58 	bl	8000564 <__aeabi_i2d>
 800ccb4:	4602      	mov	r2, r0
 800ccb6:	460b      	mov	r3, r1
 800ccb8:	4630      	mov	r0, r6
 800ccba:	4639      	mov	r1, r7
 800ccbc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ccc0:	f7f3 fb02 	bl	80002c8 <__aeabi_dsub>
 800ccc4:	4b22      	ldr	r3, [pc, #136]	@ (800cd50 <__ieee754_rem_pio2+0x3f0>)
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	f7f3 fcb6 	bl	8000638 <__aeabi_dmul>
 800cccc:	460f      	mov	r7, r1
 800ccce:	4606      	mov	r6, r0
 800ccd0:	f7f3 ff62 	bl	8000b98 <__aeabi_d2iz>
 800ccd4:	f7f3 fc46 	bl	8000564 <__aeabi_i2d>
 800ccd8:	4602      	mov	r2, r0
 800ccda:	460b      	mov	r3, r1
 800ccdc:	4630      	mov	r0, r6
 800ccde:	4639      	mov	r1, r7
 800cce0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cce4:	f7f3 faf0 	bl	80002c8 <__aeabi_dsub>
 800cce8:	4b19      	ldr	r3, [pc, #100]	@ (800cd50 <__ieee754_rem_pio2+0x3f0>)
 800ccea:	2200      	movs	r2, #0
 800ccec:	f7f3 fca4 	bl	8000638 <__aeabi_dmul>
 800ccf0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800ccf4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800ccf8:	f04f 0803 	mov.w	r8, #3
 800ccfc:	2600      	movs	r6, #0
 800ccfe:	2700      	movs	r7, #0
 800cd00:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800cd04:	4632      	mov	r2, r6
 800cd06:	463b      	mov	r3, r7
 800cd08:	46c2      	mov	sl, r8
 800cd0a:	f108 38ff 	add.w	r8, r8, #4294967295
 800cd0e:	f7f3 fefb 	bl	8000b08 <__aeabi_dcmpeq>
 800cd12:	2800      	cmp	r0, #0
 800cd14:	d1f4      	bne.n	800cd00 <__ieee754_rem_pio2+0x3a0>
 800cd16:	4b0f      	ldr	r3, [pc, #60]	@ (800cd54 <__ieee754_rem_pio2+0x3f4>)
 800cd18:	9301      	str	r3, [sp, #4]
 800cd1a:	2302      	movs	r3, #2
 800cd1c:	9300      	str	r3, [sp, #0]
 800cd1e:	462a      	mov	r2, r5
 800cd20:	4653      	mov	r3, sl
 800cd22:	4621      	mov	r1, r4
 800cd24:	a806      	add	r0, sp, #24
 800cd26:	f000 f81f 	bl	800cd68 <__kernel_rem_pio2>
 800cd2a:	9b04      	ldr	r3, [sp, #16]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	4605      	mov	r5, r0
 800cd30:	f6bf ae53 	bge.w	800c9da <__ieee754_rem_pio2+0x7a>
 800cd34:	e9d4 2100 	ldrd	r2, r1, [r4]
 800cd38:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cd3c:	e9c4 2300 	strd	r2, r3, [r4]
 800cd40:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800cd44:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cd48:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800cd4c:	e740      	b.n	800cbd0 <__ieee754_rem_pio2+0x270>
 800cd4e:	bf00      	nop
 800cd50:	41700000 	.word	0x41700000
 800cd54:	0800da50 	.word	0x0800da50

0800cd58 <fabs>:
 800cd58:	ec51 0b10 	vmov	r0, r1, d0
 800cd5c:	4602      	mov	r2, r0
 800cd5e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800cd62:	ec43 2b10 	vmov	d0, r2, r3
 800cd66:	4770      	bx	lr

0800cd68 <__kernel_rem_pio2>:
 800cd68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd6c:	ed2d 8b02 	vpush	{d8}
 800cd70:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800cd74:	f112 0f14 	cmn.w	r2, #20
 800cd78:	9306      	str	r3, [sp, #24]
 800cd7a:	9104      	str	r1, [sp, #16]
 800cd7c:	4bbe      	ldr	r3, [pc, #760]	@ (800d078 <__kernel_rem_pio2+0x310>)
 800cd7e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800cd80:	9008      	str	r0, [sp, #32]
 800cd82:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cd86:	9300      	str	r3, [sp, #0]
 800cd88:	9b06      	ldr	r3, [sp, #24]
 800cd8a:	f103 33ff 	add.w	r3, r3, #4294967295
 800cd8e:	bfa8      	it	ge
 800cd90:	1ed4      	subge	r4, r2, #3
 800cd92:	9305      	str	r3, [sp, #20]
 800cd94:	bfb2      	itee	lt
 800cd96:	2400      	movlt	r4, #0
 800cd98:	2318      	movge	r3, #24
 800cd9a:	fb94 f4f3 	sdivge	r4, r4, r3
 800cd9e:	f06f 0317 	mvn.w	r3, #23
 800cda2:	fb04 3303 	mla	r3, r4, r3, r3
 800cda6:	eb03 0b02 	add.w	fp, r3, r2
 800cdaa:	9b00      	ldr	r3, [sp, #0]
 800cdac:	9a05      	ldr	r2, [sp, #20]
 800cdae:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800d068 <__kernel_rem_pio2+0x300>
 800cdb2:	eb03 0802 	add.w	r8, r3, r2
 800cdb6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800cdb8:	1aa7      	subs	r7, r4, r2
 800cdba:	ae20      	add	r6, sp, #128	@ 0x80
 800cdbc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800cdc0:	2500      	movs	r5, #0
 800cdc2:	4545      	cmp	r5, r8
 800cdc4:	dd13      	ble.n	800cdee <__kernel_rem_pio2+0x86>
 800cdc6:	9b06      	ldr	r3, [sp, #24]
 800cdc8:	aa20      	add	r2, sp, #128	@ 0x80
 800cdca:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800cdce:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800cdd2:	f04f 0800 	mov.w	r8, #0
 800cdd6:	9b00      	ldr	r3, [sp, #0]
 800cdd8:	4598      	cmp	r8, r3
 800cdda:	dc31      	bgt.n	800ce40 <__kernel_rem_pio2+0xd8>
 800cddc:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800d068 <__kernel_rem_pio2+0x300>
 800cde0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cde4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cde8:	462f      	mov	r7, r5
 800cdea:	2600      	movs	r6, #0
 800cdec:	e01b      	b.n	800ce26 <__kernel_rem_pio2+0xbe>
 800cdee:	42ef      	cmn	r7, r5
 800cdf0:	d407      	bmi.n	800ce02 <__kernel_rem_pio2+0x9a>
 800cdf2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800cdf6:	f7f3 fbb5 	bl	8000564 <__aeabi_i2d>
 800cdfa:	e8e6 0102 	strd	r0, r1, [r6], #8
 800cdfe:	3501      	adds	r5, #1
 800ce00:	e7df      	b.n	800cdc2 <__kernel_rem_pio2+0x5a>
 800ce02:	ec51 0b18 	vmov	r0, r1, d8
 800ce06:	e7f8      	b.n	800cdfa <__kernel_rem_pio2+0x92>
 800ce08:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce0c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ce10:	f7f3 fc12 	bl	8000638 <__aeabi_dmul>
 800ce14:	4602      	mov	r2, r0
 800ce16:	460b      	mov	r3, r1
 800ce18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce1c:	f7f3 fa56 	bl	80002cc <__adddf3>
 800ce20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce24:	3601      	adds	r6, #1
 800ce26:	9b05      	ldr	r3, [sp, #20]
 800ce28:	429e      	cmp	r6, r3
 800ce2a:	f1a7 0708 	sub.w	r7, r7, #8
 800ce2e:	ddeb      	ble.n	800ce08 <__kernel_rem_pio2+0xa0>
 800ce30:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ce34:	f108 0801 	add.w	r8, r8, #1
 800ce38:	ecaa 7b02 	vstmia	sl!, {d7}
 800ce3c:	3508      	adds	r5, #8
 800ce3e:	e7ca      	b.n	800cdd6 <__kernel_rem_pio2+0x6e>
 800ce40:	9b00      	ldr	r3, [sp, #0]
 800ce42:	f8dd 8000 	ldr.w	r8, [sp]
 800ce46:	aa0c      	add	r2, sp, #48	@ 0x30
 800ce48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ce4c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ce4e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800ce50:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ce54:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce56:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800ce5a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ce5c:	ab98      	add	r3, sp, #608	@ 0x260
 800ce5e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ce62:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800ce66:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ce6a:	ac0c      	add	r4, sp, #48	@ 0x30
 800ce6c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800ce6e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800ce72:	46a1      	mov	r9, r4
 800ce74:	46c2      	mov	sl, r8
 800ce76:	f1ba 0f00 	cmp.w	sl, #0
 800ce7a:	f1a5 0508 	sub.w	r5, r5, #8
 800ce7e:	dc77      	bgt.n	800cf70 <__kernel_rem_pio2+0x208>
 800ce80:	4658      	mov	r0, fp
 800ce82:	ed9d 0b02 	vldr	d0, [sp, #8]
 800ce86:	f000 fac7 	bl	800d418 <scalbn>
 800ce8a:	ec57 6b10 	vmov	r6, r7, d0
 800ce8e:	2200      	movs	r2, #0
 800ce90:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800ce94:	4630      	mov	r0, r6
 800ce96:	4639      	mov	r1, r7
 800ce98:	f7f3 fbce 	bl	8000638 <__aeabi_dmul>
 800ce9c:	ec41 0b10 	vmov	d0, r0, r1
 800cea0:	f000 fb3a 	bl	800d518 <floor>
 800cea4:	4b75      	ldr	r3, [pc, #468]	@ (800d07c <__kernel_rem_pio2+0x314>)
 800cea6:	ec51 0b10 	vmov	r0, r1, d0
 800ceaa:	2200      	movs	r2, #0
 800ceac:	f7f3 fbc4 	bl	8000638 <__aeabi_dmul>
 800ceb0:	4602      	mov	r2, r0
 800ceb2:	460b      	mov	r3, r1
 800ceb4:	4630      	mov	r0, r6
 800ceb6:	4639      	mov	r1, r7
 800ceb8:	f7f3 fa06 	bl	80002c8 <__aeabi_dsub>
 800cebc:	460f      	mov	r7, r1
 800cebe:	4606      	mov	r6, r0
 800cec0:	f7f3 fe6a 	bl	8000b98 <__aeabi_d2iz>
 800cec4:	9002      	str	r0, [sp, #8]
 800cec6:	f7f3 fb4d 	bl	8000564 <__aeabi_i2d>
 800ceca:	4602      	mov	r2, r0
 800cecc:	460b      	mov	r3, r1
 800cece:	4630      	mov	r0, r6
 800ced0:	4639      	mov	r1, r7
 800ced2:	f7f3 f9f9 	bl	80002c8 <__aeabi_dsub>
 800ced6:	f1bb 0f00 	cmp.w	fp, #0
 800ceda:	4606      	mov	r6, r0
 800cedc:	460f      	mov	r7, r1
 800cede:	dd6c      	ble.n	800cfba <__kernel_rem_pio2+0x252>
 800cee0:	f108 31ff 	add.w	r1, r8, #4294967295
 800cee4:	ab0c      	add	r3, sp, #48	@ 0x30
 800cee6:	9d02      	ldr	r5, [sp, #8]
 800cee8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ceec:	f1cb 0018 	rsb	r0, fp, #24
 800cef0:	fa43 f200 	asr.w	r2, r3, r0
 800cef4:	4415      	add	r5, r2
 800cef6:	4082      	lsls	r2, r0
 800cef8:	1a9b      	subs	r3, r3, r2
 800cefa:	aa0c      	add	r2, sp, #48	@ 0x30
 800cefc:	9502      	str	r5, [sp, #8]
 800cefe:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800cf02:	f1cb 0217 	rsb	r2, fp, #23
 800cf06:	fa43 f902 	asr.w	r9, r3, r2
 800cf0a:	f1b9 0f00 	cmp.w	r9, #0
 800cf0e:	dd64      	ble.n	800cfda <__kernel_rem_pio2+0x272>
 800cf10:	9b02      	ldr	r3, [sp, #8]
 800cf12:	2200      	movs	r2, #0
 800cf14:	3301      	adds	r3, #1
 800cf16:	9302      	str	r3, [sp, #8]
 800cf18:	4615      	mov	r5, r2
 800cf1a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800cf1e:	4590      	cmp	r8, r2
 800cf20:	f300 80b8 	bgt.w	800d094 <__kernel_rem_pio2+0x32c>
 800cf24:	f1bb 0f00 	cmp.w	fp, #0
 800cf28:	dd07      	ble.n	800cf3a <__kernel_rem_pio2+0x1d2>
 800cf2a:	f1bb 0f01 	cmp.w	fp, #1
 800cf2e:	f000 80bf 	beq.w	800d0b0 <__kernel_rem_pio2+0x348>
 800cf32:	f1bb 0f02 	cmp.w	fp, #2
 800cf36:	f000 80c6 	beq.w	800d0c6 <__kernel_rem_pio2+0x35e>
 800cf3a:	f1b9 0f02 	cmp.w	r9, #2
 800cf3e:	d14c      	bne.n	800cfda <__kernel_rem_pio2+0x272>
 800cf40:	4632      	mov	r2, r6
 800cf42:	463b      	mov	r3, r7
 800cf44:	494e      	ldr	r1, [pc, #312]	@ (800d080 <__kernel_rem_pio2+0x318>)
 800cf46:	2000      	movs	r0, #0
 800cf48:	f7f3 f9be 	bl	80002c8 <__aeabi_dsub>
 800cf4c:	4606      	mov	r6, r0
 800cf4e:	460f      	mov	r7, r1
 800cf50:	2d00      	cmp	r5, #0
 800cf52:	d042      	beq.n	800cfda <__kernel_rem_pio2+0x272>
 800cf54:	4658      	mov	r0, fp
 800cf56:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800d070 <__kernel_rem_pio2+0x308>
 800cf5a:	f000 fa5d 	bl	800d418 <scalbn>
 800cf5e:	4630      	mov	r0, r6
 800cf60:	4639      	mov	r1, r7
 800cf62:	ec53 2b10 	vmov	r2, r3, d0
 800cf66:	f7f3 f9af 	bl	80002c8 <__aeabi_dsub>
 800cf6a:	4606      	mov	r6, r0
 800cf6c:	460f      	mov	r7, r1
 800cf6e:	e034      	b.n	800cfda <__kernel_rem_pio2+0x272>
 800cf70:	4b44      	ldr	r3, [pc, #272]	@ (800d084 <__kernel_rem_pio2+0x31c>)
 800cf72:	2200      	movs	r2, #0
 800cf74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf78:	f7f3 fb5e 	bl	8000638 <__aeabi_dmul>
 800cf7c:	f7f3 fe0c 	bl	8000b98 <__aeabi_d2iz>
 800cf80:	f7f3 faf0 	bl	8000564 <__aeabi_i2d>
 800cf84:	4b40      	ldr	r3, [pc, #256]	@ (800d088 <__kernel_rem_pio2+0x320>)
 800cf86:	2200      	movs	r2, #0
 800cf88:	4606      	mov	r6, r0
 800cf8a:	460f      	mov	r7, r1
 800cf8c:	f7f3 fb54 	bl	8000638 <__aeabi_dmul>
 800cf90:	4602      	mov	r2, r0
 800cf92:	460b      	mov	r3, r1
 800cf94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf98:	f7f3 f996 	bl	80002c8 <__aeabi_dsub>
 800cf9c:	f7f3 fdfc 	bl	8000b98 <__aeabi_d2iz>
 800cfa0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cfa4:	f849 0b04 	str.w	r0, [r9], #4
 800cfa8:	4639      	mov	r1, r7
 800cfaa:	4630      	mov	r0, r6
 800cfac:	f7f3 f98e 	bl	80002cc <__adddf3>
 800cfb0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cfb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cfb8:	e75d      	b.n	800ce76 <__kernel_rem_pio2+0x10e>
 800cfba:	d107      	bne.n	800cfcc <__kernel_rem_pio2+0x264>
 800cfbc:	f108 33ff 	add.w	r3, r8, #4294967295
 800cfc0:	aa0c      	add	r2, sp, #48	@ 0x30
 800cfc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cfc6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800cfca:	e79e      	b.n	800cf0a <__kernel_rem_pio2+0x1a2>
 800cfcc:	4b2f      	ldr	r3, [pc, #188]	@ (800d08c <__kernel_rem_pio2+0x324>)
 800cfce:	2200      	movs	r2, #0
 800cfd0:	f7f3 fdb8 	bl	8000b44 <__aeabi_dcmpge>
 800cfd4:	2800      	cmp	r0, #0
 800cfd6:	d143      	bne.n	800d060 <__kernel_rem_pio2+0x2f8>
 800cfd8:	4681      	mov	r9, r0
 800cfda:	2200      	movs	r2, #0
 800cfdc:	2300      	movs	r3, #0
 800cfde:	4630      	mov	r0, r6
 800cfe0:	4639      	mov	r1, r7
 800cfe2:	f7f3 fd91 	bl	8000b08 <__aeabi_dcmpeq>
 800cfe6:	2800      	cmp	r0, #0
 800cfe8:	f000 80bf 	beq.w	800d16a <__kernel_rem_pio2+0x402>
 800cfec:	f108 33ff 	add.w	r3, r8, #4294967295
 800cff0:	2200      	movs	r2, #0
 800cff2:	9900      	ldr	r1, [sp, #0]
 800cff4:	428b      	cmp	r3, r1
 800cff6:	da6e      	bge.n	800d0d6 <__kernel_rem_pio2+0x36e>
 800cff8:	2a00      	cmp	r2, #0
 800cffa:	f000 8089 	beq.w	800d110 <__kernel_rem_pio2+0x3a8>
 800cffe:	f108 38ff 	add.w	r8, r8, #4294967295
 800d002:	ab0c      	add	r3, sp, #48	@ 0x30
 800d004:	f1ab 0b18 	sub.w	fp, fp, #24
 800d008:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d0f6      	beq.n	800cffe <__kernel_rem_pio2+0x296>
 800d010:	4658      	mov	r0, fp
 800d012:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800d070 <__kernel_rem_pio2+0x308>
 800d016:	f000 f9ff 	bl	800d418 <scalbn>
 800d01a:	f108 0301 	add.w	r3, r8, #1
 800d01e:	00da      	lsls	r2, r3, #3
 800d020:	9205      	str	r2, [sp, #20]
 800d022:	ec55 4b10 	vmov	r4, r5, d0
 800d026:	aa70      	add	r2, sp, #448	@ 0x1c0
 800d028:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800d084 <__kernel_rem_pio2+0x31c>
 800d02c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800d030:	4646      	mov	r6, r8
 800d032:	f04f 0a00 	mov.w	sl, #0
 800d036:	2e00      	cmp	r6, #0
 800d038:	f280 80cf 	bge.w	800d1da <__kernel_rem_pio2+0x472>
 800d03c:	4644      	mov	r4, r8
 800d03e:	2c00      	cmp	r4, #0
 800d040:	f2c0 80fd 	blt.w	800d23e <__kernel_rem_pio2+0x4d6>
 800d044:	4b12      	ldr	r3, [pc, #72]	@ (800d090 <__kernel_rem_pio2+0x328>)
 800d046:	461f      	mov	r7, r3
 800d048:	ab70      	add	r3, sp, #448	@ 0x1c0
 800d04a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d04e:	9306      	str	r3, [sp, #24]
 800d050:	f04f 0a00 	mov.w	sl, #0
 800d054:	f04f 0b00 	mov.w	fp, #0
 800d058:	2600      	movs	r6, #0
 800d05a:	eba8 0504 	sub.w	r5, r8, r4
 800d05e:	e0e2      	b.n	800d226 <__kernel_rem_pio2+0x4be>
 800d060:	f04f 0902 	mov.w	r9, #2
 800d064:	e754      	b.n	800cf10 <__kernel_rem_pio2+0x1a8>
 800d066:	bf00      	nop
	...
 800d074:	3ff00000 	.word	0x3ff00000
 800d078:	0800db98 	.word	0x0800db98
 800d07c:	40200000 	.word	0x40200000
 800d080:	3ff00000 	.word	0x3ff00000
 800d084:	3e700000 	.word	0x3e700000
 800d088:	41700000 	.word	0x41700000
 800d08c:	3fe00000 	.word	0x3fe00000
 800d090:	0800db58 	.word	0x0800db58
 800d094:	f854 3b04 	ldr.w	r3, [r4], #4
 800d098:	b945      	cbnz	r5, 800d0ac <__kernel_rem_pio2+0x344>
 800d09a:	b123      	cbz	r3, 800d0a6 <__kernel_rem_pio2+0x33e>
 800d09c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800d0a0:	f844 3c04 	str.w	r3, [r4, #-4]
 800d0a4:	2301      	movs	r3, #1
 800d0a6:	3201      	adds	r2, #1
 800d0a8:	461d      	mov	r5, r3
 800d0aa:	e738      	b.n	800cf1e <__kernel_rem_pio2+0x1b6>
 800d0ac:	1acb      	subs	r3, r1, r3
 800d0ae:	e7f7      	b.n	800d0a0 <__kernel_rem_pio2+0x338>
 800d0b0:	f108 32ff 	add.w	r2, r8, #4294967295
 800d0b4:	ab0c      	add	r3, sp, #48	@ 0x30
 800d0b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0ba:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d0be:	a90c      	add	r1, sp, #48	@ 0x30
 800d0c0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d0c4:	e739      	b.n	800cf3a <__kernel_rem_pio2+0x1d2>
 800d0c6:	f108 32ff 	add.w	r2, r8, #4294967295
 800d0ca:	ab0c      	add	r3, sp, #48	@ 0x30
 800d0cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0d0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d0d4:	e7f3      	b.n	800d0be <__kernel_rem_pio2+0x356>
 800d0d6:	a90c      	add	r1, sp, #48	@ 0x30
 800d0d8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d0dc:	3b01      	subs	r3, #1
 800d0de:	430a      	orrs	r2, r1
 800d0e0:	e787      	b.n	800cff2 <__kernel_rem_pio2+0x28a>
 800d0e2:	3401      	adds	r4, #1
 800d0e4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d0e8:	2a00      	cmp	r2, #0
 800d0ea:	d0fa      	beq.n	800d0e2 <__kernel_rem_pio2+0x37a>
 800d0ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d0ee:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d0f2:	eb0d 0503 	add.w	r5, sp, r3
 800d0f6:	9b06      	ldr	r3, [sp, #24]
 800d0f8:	aa20      	add	r2, sp, #128	@ 0x80
 800d0fa:	4443      	add	r3, r8
 800d0fc:	f108 0701 	add.w	r7, r8, #1
 800d100:	3d98      	subs	r5, #152	@ 0x98
 800d102:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800d106:	4444      	add	r4, r8
 800d108:	42bc      	cmp	r4, r7
 800d10a:	da04      	bge.n	800d116 <__kernel_rem_pio2+0x3ae>
 800d10c:	46a0      	mov	r8, r4
 800d10e:	e6a2      	b.n	800ce56 <__kernel_rem_pio2+0xee>
 800d110:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d112:	2401      	movs	r4, #1
 800d114:	e7e6      	b.n	800d0e4 <__kernel_rem_pio2+0x37c>
 800d116:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d118:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800d11c:	f7f3 fa22 	bl	8000564 <__aeabi_i2d>
 800d120:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800d3e8 <__kernel_rem_pio2+0x680>
 800d124:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d128:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d12c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d130:	46b2      	mov	sl, r6
 800d132:	f04f 0800 	mov.w	r8, #0
 800d136:	9b05      	ldr	r3, [sp, #20]
 800d138:	4598      	cmp	r8, r3
 800d13a:	dd05      	ble.n	800d148 <__kernel_rem_pio2+0x3e0>
 800d13c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d140:	3701      	adds	r7, #1
 800d142:	eca5 7b02 	vstmia	r5!, {d7}
 800d146:	e7df      	b.n	800d108 <__kernel_rem_pio2+0x3a0>
 800d148:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800d14c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d150:	f7f3 fa72 	bl	8000638 <__aeabi_dmul>
 800d154:	4602      	mov	r2, r0
 800d156:	460b      	mov	r3, r1
 800d158:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d15c:	f7f3 f8b6 	bl	80002cc <__adddf3>
 800d160:	f108 0801 	add.w	r8, r8, #1
 800d164:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d168:	e7e5      	b.n	800d136 <__kernel_rem_pio2+0x3ce>
 800d16a:	f1cb 0000 	rsb	r0, fp, #0
 800d16e:	ec47 6b10 	vmov	d0, r6, r7
 800d172:	f000 f951 	bl	800d418 <scalbn>
 800d176:	ec55 4b10 	vmov	r4, r5, d0
 800d17a:	4b9d      	ldr	r3, [pc, #628]	@ (800d3f0 <__kernel_rem_pio2+0x688>)
 800d17c:	2200      	movs	r2, #0
 800d17e:	4620      	mov	r0, r4
 800d180:	4629      	mov	r1, r5
 800d182:	f7f3 fcdf 	bl	8000b44 <__aeabi_dcmpge>
 800d186:	b300      	cbz	r0, 800d1ca <__kernel_rem_pio2+0x462>
 800d188:	4b9a      	ldr	r3, [pc, #616]	@ (800d3f4 <__kernel_rem_pio2+0x68c>)
 800d18a:	2200      	movs	r2, #0
 800d18c:	4620      	mov	r0, r4
 800d18e:	4629      	mov	r1, r5
 800d190:	f7f3 fa52 	bl	8000638 <__aeabi_dmul>
 800d194:	f7f3 fd00 	bl	8000b98 <__aeabi_d2iz>
 800d198:	4606      	mov	r6, r0
 800d19a:	f7f3 f9e3 	bl	8000564 <__aeabi_i2d>
 800d19e:	4b94      	ldr	r3, [pc, #592]	@ (800d3f0 <__kernel_rem_pio2+0x688>)
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	f7f3 fa49 	bl	8000638 <__aeabi_dmul>
 800d1a6:	460b      	mov	r3, r1
 800d1a8:	4602      	mov	r2, r0
 800d1aa:	4629      	mov	r1, r5
 800d1ac:	4620      	mov	r0, r4
 800d1ae:	f7f3 f88b 	bl	80002c8 <__aeabi_dsub>
 800d1b2:	f7f3 fcf1 	bl	8000b98 <__aeabi_d2iz>
 800d1b6:	ab0c      	add	r3, sp, #48	@ 0x30
 800d1b8:	f10b 0b18 	add.w	fp, fp, #24
 800d1bc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800d1c0:	f108 0801 	add.w	r8, r8, #1
 800d1c4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800d1c8:	e722      	b.n	800d010 <__kernel_rem_pio2+0x2a8>
 800d1ca:	4620      	mov	r0, r4
 800d1cc:	4629      	mov	r1, r5
 800d1ce:	f7f3 fce3 	bl	8000b98 <__aeabi_d2iz>
 800d1d2:	ab0c      	add	r3, sp, #48	@ 0x30
 800d1d4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800d1d8:	e71a      	b.n	800d010 <__kernel_rem_pio2+0x2a8>
 800d1da:	ab0c      	add	r3, sp, #48	@ 0x30
 800d1dc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d1e0:	f7f3 f9c0 	bl	8000564 <__aeabi_i2d>
 800d1e4:	4622      	mov	r2, r4
 800d1e6:	462b      	mov	r3, r5
 800d1e8:	f7f3 fa26 	bl	8000638 <__aeabi_dmul>
 800d1ec:	4652      	mov	r2, sl
 800d1ee:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800d1f2:	465b      	mov	r3, fp
 800d1f4:	4620      	mov	r0, r4
 800d1f6:	4629      	mov	r1, r5
 800d1f8:	f7f3 fa1e 	bl	8000638 <__aeabi_dmul>
 800d1fc:	3e01      	subs	r6, #1
 800d1fe:	4604      	mov	r4, r0
 800d200:	460d      	mov	r5, r1
 800d202:	e718      	b.n	800d036 <__kernel_rem_pio2+0x2ce>
 800d204:	9906      	ldr	r1, [sp, #24]
 800d206:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800d20a:	9106      	str	r1, [sp, #24]
 800d20c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800d210:	f7f3 fa12 	bl	8000638 <__aeabi_dmul>
 800d214:	4602      	mov	r2, r0
 800d216:	460b      	mov	r3, r1
 800d218:	4650      	mov	r0, sl
 800d21a:	4659      	mov	r1, fp
 800d21c:	f7f3 f856 	bl	80002cc <__adddf3>
 800d220:	3601      	adds	r6, #1
 800d222:	4682      	mov	sl, r0
 800d224:	468b      	mov	fp, r1
 800d226:	9b00      	ldr	r3, [sp, #0]
 800d228:	429e      	cmp	r6, r3
 800d22a:	dc01      	bgt.n	800d230 <__kernel_rem_pio2+0x4c8>
 800d22c:	42b5      	cmp	r5, r6
 800d22e:	dae9      	bge.n	800d204 <__kernel_rem_pio2+0x49c>
 800d230:	ab48      	add	r3, sp, #288	@ 0x120
 800d232:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800d236:	e9c5 ab00 	strd	sl, fp, [r5]
 800d23a:	3c01      	subs	r4, #1
 800d23c:	e6ff      	b.n	800d03e <__kernel_rem_pio2+0x2d6>
 800d23e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800d240:	2b02      	cmp	r3, #2
 800d242:	dc0b      	bgt.n	800d25c <__kernel_rem_pio2+0x4f4>
 800d244:	2b00      	cmp	r3, #0
 800d246:	dc39      	bgt.n	800d2bc <__kernel_rem_pio2+0x554>
 800d248:	d05d      	beq.n	800d306 <__kernel_rem_pio2+0x59e>
 800d24a:	9b02      	ldr	r3, [sp, #8]
 800d24c:	f003 0007 	and.w	r0, r3, #7
 800d250:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800d254:	ecbd 8b02 	vpop	{d8}
 800d258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d25c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800d25e:	2b03      	cmp	r3, #3
 800d260:	d1f3      	bne.n	800d24a <__kernel_rem_pio2+0x4e2>
 800d262:	9b05      	ldr	r3, [sp, #20]
 800d264:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d268:	eb0d 0403 	add.w	r4, sp, r3
 800d26c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800d270:	4625      	mov	r5, r4
 800d272:	46c2      	mov	sl, r8
 800d274:	f1ba 0f00 	cmp.w	sl, #0
 800d278:	f1a5 0508 	sub.w	r5, r5, #8
 800d27c:	dc6b      	bgt.n	800d356 <__kernel_rem_pio2+0x5ee>
 800d27e:	4645      	mov	r5, r8
 800d280:	2d01      	cmp	r5, #1
 800d282:	f1a4 0408 	sub.w	r4, r4, #8
 800d286:	f300 8087 	bgt.w	800d398 <__kernel_rem_pio2+0x630>
 800d28a:	9c05      	ldr	r4, [sp, #20]
 800d28c:	ab48      	add	r3, sp, #288	@ 0x120
 800d28e:	441c      	add	r4, r3
 800d290:	2000      	movs	r0, #0
 800d292:	2100      	movs	r1, #0
 800d294:	f1b8 0f01 	cmp.w	r8, #1
 800d298:	f300 809c 	bgt.w	800d3d4 <__kernel_rem_pio2+0x66c>
 800d29c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800d2a0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800d2a4:	f1b9 0f00 	cmp.w	r9, #0
 800d2a8:	f040 80a6 	bne.w	800d3f8 <__kernel_rem_pio2+0x690>
 800d2ac:	9b04      	ldr	r3, [sp, #16]
 800d2ae:	e9c3 7800 	strd	r7, r8, [r3]
 800d2b2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800d2b6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800d2ba:	e7c6      	b.n	800d24a <__kernel_rem_pio2+0x4e2>
 800d2bc:	9d05      	ldr	r5, [sp, #20]
 800d2be:	ab48      	add	r3, sp, #288	@ 0x120
 800d2c0:	441d      	add	r5, r3
 800d2c2:	4644      	mov	r4, r8
 800d2c4:	2000      	movs	r0, #0
 800d2c6:	2100      	movs	r1, #0
 800d2c8:	2c00      	cmp	r4, #0
 800d2ca:	da35      	bge.n	800d338 <__kernel_rem_pio2+0x5d0>
 800d2cc:	f1b9 0f00 	cmp.w	r9, #0
 800d2d0:	d038      	beq.n	800d344 <__kernel_rem_pio2+0x5dc>
 800d2d2:	4602      	mov	r2, r0
 800d2d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d2d8:	9c04      	ldr	r4, [sp, #16]
 800d2da:	e9c4 2300 	strd	r2, r3, [r4]
 800d2de:	4602      	mov	r2, r0
 800d2e0:	460b      	mov	r3, r1
 800d2e2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800d2e6:	f7f2 ffef 	bl	80002c8 <__aeabi_dsub>
 800d2ea:	ad4a      	add	r5, sp, #296	@ 0x128
 800d2ec:	2401      	movs	r4, #1
 800d2ee:	45a0      	cmp	r8, r4
 800d2f0:	da2b      	bge.n	800d34a <__kernel_rem_pio2+0x5e2>
 800d2f2:	f1b9 0f00 	cmp.w	r9, #0
 800d2f6:	d002      	beq.n	800d2fe <__kernel_rem_pio2+0x596>
 800d2f8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d2fc:	4619      	mov	r1, r3
 800d2fe:	9b04      	ldr	r3, [sp, #16]
 800d300:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d304:	e7a1      	b.n	800d24a <__kernel_rem_pio2+0x4e2>
 800d306:	9c05      	ldr	r4, [sp, #20]
 800d308:	ab48      	add	r3, sp, #288	@ 0x120
 800d30a:	441c      	add	r4, r3
 800d30c:	2000      	movs	r0, #0
 800d30e:	2100      	movs	r1, #0
 800d310:	f1b8 0f00 	cmp.w	r8, #0
 800d314:	da09      	bge.n	800d32a <__kernel_rem_pio2+0x5c2>
 800d316:	f1b9 0f00 	cmp.w	r9, #0
 800d31a:	d002      	beq.n	800d322 <__kernel_rem_pio2+0x5ba>
 800d31c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d320:	4619      	mov	r1, r3
 800d322:	9b04      	ldr	r3, [sp, #16]
 800d324:	e9c3 0100 	strd	r0, r1, [r3]
 800d328:	e78f      	b.n	800d24a <__kernel_rem_pio2+0x4e2>
 800d32a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d32e:	f7f2 ffcd 	bl	80002cc <__adddf3>
 800d332:	f108 38ff 	add.w	r8, r8, #4294967295
 800d336:	e7eb      	b.n	800d310 <__kernel_rem_pio2+0x5a8>
 800d338:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800d33c:	f7f2 ffc6 	bl	80002cc <__adddf3>
 800d340:	3c01      	subs	r4, #1
 800d342:	e7c1      	b.n	800d2c8 <__kernel_rem_pio2+0x560>
 800d344:	4602      	mov	r2, r0
 800d346:	460b      	mov	r3, r1
 800d348:	e7c6      	b.n	800d2d8 <__kernel_rem_pio2+0x570>
 800d34a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800d34e:	f7f2 ffbd 	bl	80002cc <__adddf3>
 800d352:	3401      	adds	r4, #1
 800d354:	e7cb      	b.n	800d2ee <__kernel_rem_pio2+0x586>
 800d356:	ed95 7b00 	vldr	d7, [r5]
 800d35a:	ed8d 7b00 	vstr	d7, [sp]
 800d35e:	ed95 7b02 	vldr	d7, [r5, #8]
 800d362:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d366:	ec53 2b17 	vmov	r2, r3, d7
 800d36a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d36e:	f7f2 ffad 	bl	80002cc <__adddf3>
 800d372:	4602      	mov	r2, r0
 800d374:	460b      	mov	r3, r1
 800d376:	4606      	mov	r6, r0
 800d378:	460f      	mov	r7, r1
 800d37a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d37e:	f7f2 ffa3 	bl	80002c8 <__aeabi_dsub>
 800d382:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d386:	f7f2 ffa1 	bl	80002cc <__adddf3>
 800d38a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d38e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800d392:	e9c5 6700 	strd	r6, r7, [r5]
 800d396:	e76d      	b.n	800d274 <__kernel_rem_pio2+0x50c>
 800d398:	ed94 7b00 	vldr	d7, [r4]
 800d39c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800d3a0:	ec51 0b17 	vmov	r0, r1, d7
 800d3a4:	4652      	mov	r2, sl
 800d3a6:	465b      	mov	r3, fp
 800d3a8:	ed8d 7b00 	vstr	d7, [sp]
 800d3ac:	f7f2 ff8e 	bl	80002cc <__adddf3>
 800d3b0:	4602      	mov	r2, r0
 800d3b2:	460b      	mov	r3, r1
 800d3b4:	4606      	mov	r6, r0
 800d3b6:	460f      	mov	r7, r1
 800d3b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d3bc:	f7f2 ff84 	bl	80002c8 <__aeabi_dsub>
 800d3c0:	4652      	mov	r2, sl
 800d3c2:	465b      	mov	r3, fp
 800d3c4:	f7f2 ff82 	bl	80002cc <__adddf3>
 800d3c8:	3d01      	subs	r5, #1
 800d3ca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d3ce:	e9c4 6700 	strd	r6, r7, [r4]
 800d3d2:	e755      	b.n	800d280 <__kernel_rem_pio2+0x518>
 800d3d4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d3d8:	f7f2 ff78 	bl	80002cc <__adddf3>
 800d3dc:	f108 38ff 	add.w	r8, r8, #4294967295
 800d3e0:	e758      	b.n	800d294 <__kernel_rem_pio2+0x52c>
 800d3e2:	bf00      	nop
 800d3e4:	f3af 8000 	nop.w
	...
 800d3f0:	41700000 	.word	0x41700000
 800d3f4:	3e700000 	.word	0x3e700000
 800d3f8:	9b04      	ldr	r3, [sp, #16]
 800d3fa:	9a04      	ldr	r2, [sp, #16]
 800d3fc:	601f      	str	r7, [r3, #0]
 800d3fe:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800d402:	605c      	str	r4, [r3, #4]
 800d404:	609d      	str	r5, [r3, #8]
 800d406:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d40a:	60d3      	str	r3, [r2, #12]
 800d40c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d410:	6110      	str	r0, [r2, #16]
 800d412:	6153      	str	r3, [r2, #20]
 800d414:	e719      	b.n	800d24a <__kernel_rem_pio2+0x4e2>
 800d416:	bf00      	nop

0800d418 <scalbn>:
 800d418:	b570      	push	{r4, r5, r6, lr}
 800d41a:	ec55 4b10 	vmov	r4, r5, d0
 800d41e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800d422:	4606      	mov	r6, r0
 800d424:	462b      	mov	r3, r5
 800d426:	b991      	cbnz	r1, 800d44e <scalbn+0x36>
 800d428:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800d42c:	4323      	orrs	r3, r4
 800d42e:	d03d      	beq.n	800d4ac <scalbn+0x94>
 800d430:	4b35      	ldr	r3, [pc, #212]	@ (800d508 <scalbn+0xf0>)
 800d432:	4620      	mov	r0, r4
 800d434:	4629      	mov	r1, r5
 800d436:	2200      	movs	r2, #0
 800d438:	f7f3 f8fe 	bl	8000638 <__aeabi_dmul>
 800d43c:	4b33      	ldr	r3, [pc, #204]	@ (800d50c <scalbn+0xf4>)
 800d43e:	429e      	cmp	r6, r3
 800d440:	4604      	mov	r4, r0
 800d442:	460d      	mov	r5, r1
 800d444:	da0f      	bge.n	800d466 <scalbn+0x4e>
 800d446:	a328      	add	r3, pc, #160	@ (adr r3, 800d4e8 <scalbn+0xd0>)
 800d448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d44c:	e01e      	b.n	800d48c <scalbn+0x74>
 800d44e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800d452:	4291      	cmp	r1, r2
 800d454:	d10b      	bne.n	800d46e <scalbn+0x56>
 800d456:	4622      	mov	r2, r4
 800d458:	4620      	mov	r0, r4
 800d45a:	4629      	mov	r1, r5
 800d45c:	f7f2 ff36 	bl	80002cc <__adddf3>
 800d460:	4604      	mov	r4, r0
 800d462:	460d      	mov	r5, r1
 800d464:	e022      	b.n	800d4ac <scalbn+0x94>
 800d466:	460b      	mov	r3, r1
 800d468:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800d46c:	3936      	subs	r1, #54	@ 0x36
 800d46e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800d472:	4296      	cmp	r6, r2
 800d474:	dd0d      	ble.n	800d492 <scalbn+0x7a>
 800d476:	2d00      	cmp	r5, #0
 800d478:	a11d      	add	r1, pc, #116	@ (adr r1, 800d4f0 <scalbn+0xd8>)
 800d47a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d47e:	da02      	bge.n	800d486 <scalbn+0x6e>
 800d480:	a11d      	add	r1, pc, #116	@ (adr r1, 800d4f8 <scalbn+0xe0>)
 800d482:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d486:	a31a      	add	r3, pc, #104	@ (adr r3, 800d4f0 <scalbn+0xd8>)
 800d488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d48c:	f7f3 f8d4 	bl	8000638 <__aeabi_dmul>
 800d490:	e7e6      	b.n	800d460 <scalbn+0x48>
 800d492:	1872      	adds	r2, r6, r1
 800d494:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800d498:	428a      	cmp	r2, r1
 800d49a:	dcec      	bgt.n	800d476 <scalbn+0x5e>
 800d49c:	2a00      	cmp	r2, #0
 800d49e:	dd08      	ble.n	800d4b2 <scalbn+0x9a>
 800d4a0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d4a4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d4a8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d4ac:	ec45 4b10 	vmov	d0, r4, r5
 800d4b0:	bd70      	pop	{r4, r5, r6, pc}
 800d4b2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800d4b6:	da08      	bge.n	800d4ca <scalbn+0xb2>
 800d4b8:	2d00      	cmp	r5, #0
 800d4ba:	a10b      	add	r1, pc, #44	@ (adr r1, 800d4e8 <scalbn+0xd0>)
 800d4bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d4c0:	dac1      	bge.n	800d446 <scalbn+0x2e>
 800d4c2:	a10f      	add	r1, pc, #60	@ (adr r1, 800d500 <scalbn+0xe8>)
 800d4c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d4c8:	e7bd      	b.n	800d446 <scalbn+0x2e>
 800d4ca:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d4ce:	3236      	adds	r2, #54	@ 0x36
 800d4d0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d4d4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d4d8:	4620      	mov	r0, r4
 800d4da:	4b0d      	ldr	r3, [pc, #52]	@ (800d510 <scalbn+0xf8>)
 800d4dc:	4629      	mov	r1, r5
 800d4de:	2200      	movs	r2, #0
 800d4e0:	e7d4      	b.n	800d48c <scalbn+0x74>
 800d4e2:	bf00      	nop
 800d4e4:	f3af 8000 	nop.w
 800d4e8:	c2f8f359 	.word	0xc2f8f359
 800d4ec:	01a56e1f 	.word	0x01a56e1f
 800d4f0:	8800759c 	.word	0x8800759c
 800d4f4:	7e37e43c 	.word	0x7e37e43c
 800d4f8:	8800759c 	.word	0x8800759c
 800d4fc:	fe37e43c 	.word	0xfe37e43c
 800d500:	c2f8f359 	.word	0xc2f8f359
 800d504:	81a56e1f 	.word	0x81a56e1f
 800d508:	43500000 	.word	0x43500000
 800d50c:	ffff3cb0 	.word	0xffff3cb0
 800d510:	3c900000 	.word	0x3c900000
 800d514:	00000000 	.word	0x00000000

0800d518 <floor>:
 800d518:	ec51 0b10 	vmov	r0, r1, d0
 800d51c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d524:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800d528:	2e13      	cmp	r6, #19
 800d52a:	460c      	mov	r4, r1
 800d52c:	4605      	mov	r5, r0
 800d52e:	4680      	mov	r8, r0
 800d530:	dc34      	bgt.n	800d59c <floor+0x84>
 800d532:	2e00      	cmp	r6, #0
 800d534:	da17      	bge.n	800d566 <floor+0x4e>
 800d536:	a332      	add	r3, pc, #200	@ (adr r3, 800d600 <floor+0xe8>)
 800d538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d53c:	f7f2 fec6 	bl	80002cc <__adddf3>
 800d540:	2200      	movs	r2, #0
 800d542:	2300      	movs	r3, #0
 800d544:	f7f3 fb08 	bl	8000b58 <__aeabi_dcmpgt>
 800d548:	b150      	cbz	r0, 800d560 <floor+0x48>
 800d54a:	2c00      	cmp	r4, #0
 800d54c:	da55      	bge.n	800d5fa <floor+0xe2>
 800d54e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800d552:	432c      	orrs	r4, r5
 800d554:	2500      	movs	r5, #0
 800d556:	42ac      	cmp	r4, r5
 800d558:	4c2b      	ldr	r4, [pc, #172]	@ (800d608 <floor+0xf0>)
 800d55a:	bf08      	it	eq
 800d55c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800d560:	4621      	mov	r1, r4
 800d562:	4628      	mov	r0, r5
 800d564:	e023      	b.n	800d5ae <floor+0x96>
 800d566:	4f29      	ldr	r7, [pc, #164]	@ (800d60c <floor+0xf4>)
 800d568:	4137      	asrs	r7, r6
 800d56a:	ea01 0307 	and.w	r3, r1, r7
 800d56e:	4303      	orrs	r3, r0
 800d570:	d01d      	beq.n	800d5ae <floor+0x96>
 800d572:	a323      	add	r3, pc, #140	@ (adr r3, 800d600 <floor+0xe8>)
 800d574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d578:	f7f2 fea8 	bl	80002cc <__adddf3>
 800d57c:	2200      	movs	r2, #0
 800d57e:	2300      	movs	r3, #0
 800d580:	f7f3 faea 	bl	8000b58 <__aeabi_dcmpgt>
 800d584:	2800      	cmp	r0, #0
 800d586:	d0eb      	beq.n	800d560 <floor+0x48>
 800d588:	2c00      	cmp	r4, #0
 800d58a:	bfbe      	ittt	lt
 800d58c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800d590:	4133      	asrlt	r3, r6
 800d592:	18e4      	addlt	r4, r4, r3
 800d594:	ea24 0407 	bic.w	r4, r4, r7
 800d598:	2500      	movs	r5, #0
 800d59a:	e7e1      	b.n	800d560 <floor+0x48>
 800d59c:	2e33      	cmp	r6, #51	@ 0x33
 800d59e:	dd0a      	ble.n	800d5b6 <floor+0x9e>
 800d5a0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800d5a4:	d103      	bne.n	800d5ae <floor+0x96>
 800d5a6:	4602      	mov	r2, r0
 800d5a8:	460b      	mov	r3, r1
 800d5aa:	f7f2 fe8f 	bl	80002cc <__adddf3>
 800d5ae:	ec41 0b10 	vmov	d0, r0, r1
 800d5b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5b6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800d5ba:	f04f 37ff 	mov.w	r7, #4294967295
 800d5be:	40df      	lsrs	r7, r3
 800d5c0:	4207      	tst	r7, r0
 800d5c2:	d0f4      	beq.n	800d5ae <floor+0x96>
 800d5c4:	a30e      	add	r3, pc, #56	@ (adr r3, 800d600 <floor+0xe8>)
 800d5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ca:	f7f2 fe7f 	bl	80002cc <__adddf3>
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	f7f3 fac1 	bl	8000b58 <__aeabi_dcmpgt>
 800d5d6:	2800      	cmp	r0, #0
 800d5d8:	d0c2      	beq.n	800d560 <floor+0x48>
 800d5da:	2c00      	cmp	r4, #0
 800d5dc:	da0a      	bge.n	800d5f4 <floor+0xdc>
 800d5de:	2e14      	cmp	r6, #20
 800d5e0:	d101      	bne.n	800d5e6 <floor+0xce>
 800d5e2:	3401      	adds	r4, #1
 800d5e4:	e006      	b.n	800d5f4 <floor+0xdc>
 800d5e6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800d5ea:	2301      	movs	r3, #1
 800d5ec:	40b3      	lsls	r3, r6
 800d5ee:	441d      	add	r5, r3
 800d5f0:	4545      	cmp	r5, r8
 800d5f2:	d3f6      	bcc.n	800d5e2 <floor+0xca>
 800d5f4:	ea25 0507 	bic.w	r5, r5, r7
 800d5f8:	e7b2      	b.n	800d560 <floor+0x48>
 800d5fa:	2500      	movs	r5, #0
 800d5fc:	462c      	mov	r4, r5
 800d5fe:	e7af      	b.n	800d560 <floor+0x48>
 800d600:	8800759c 	.word	0x8800759c
 800d604:	7e37e43c 	.word	0x7e37e43c
 800d608:	bff00000 	.word	0xbff00000
 800d60c:	000fffff 	.word	0x000fffff

0800d610 <_init>:
 800d610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d612:	bf00      	nop
 800d614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d616:	bc08      	pop	{r3}
 800d618:	469e      	mov	lr, r3
 800d61a:	4770      	bx	lr

0800d61c <_fini>:
 800d61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d61e:	bf00      	nop
 800d620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d622:	bc08      	pop	{r3}
 800d624:	469e      	mov	lr, r3
 800d626:	4770      	bx	lr
